PROMPT 1:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, give the change in average house rent from 2019 to 2022, i.e., from pre-COVID to post-COVID period.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 1:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, give the change in average house rent from 2019 to 2022, i.e., from pre-COVID to post-COVID period.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import sqlite3

# import data
conn = sqlite3.connect('/Users/josh/Desktop/UW_Python/Data_Analytics/Housing_Rent/housing_rent.db')
df = pd.read_sql_query("SELECT * FROM housing_rent", conn)

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new column to calculate the change in average house rent
df['change_in_avg_rent'] = df['rent_value_max'] - df['rent_value_min']

# create a new

====================================================================================================

PROMPT 2:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 2:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
con = psycopg2.connect(database="housing_db", user="postgres", password="postgres", host="localhost", port="5432")

# create a cursor
cur = con.cursor()

# create a function to get the year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income
def get_year_on_year_change_in_grapi(zipcode, income_percent_min, income_percent_max):
	# get the year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income
	# for the zipcode
	cur.execute("""
		SELECT
			housing_gross_rent_percent.year,
			housing_gross_rent_percent.id,
			housing_gross_rent_percent.zipcode,
			housing_gross_rent_percent.number_of_units,
			housing_gross_rent_percent.income_percent_min,
			housing_gross_rent_percent.income_percent_max,
			housing_gross_rent_percent.grapi_percent_min,
			housing_gross_rent_percent.grapi_percent_max
		FROM housing_gross_rent_percent
		WHERE housing_gross_rent_percent.zipcode = %s
		AND housing_gross_rent_percent.income_percent_min = %s
		AND housing_gross_rent_percent.income_percent_max = %s
		ORDER BY housing_gross_rent_percent.year;
	""", (zipcode, income_percent_min, income_percent_max))
	# get the data
	data = cur.fetchall()
	# if the data is not empty
	if data:
		# get the year
		year = data[0][0]
		# get the id
		id = data[0][1]
		# get the zipcode
		zipcode = data[0][2]
		# get the number of units
		number_of_units = data[0][3]
		# get the income percent min
		income_percent_min = data[0][4]
		# get the income percent max
		income_percent_max = data[0][5]
		# get the gross rent as percentage of household income
		grapi_percent_min = data[0][6]
		# get the gross rent as percentage of household income
		grapi_percent_max = data[0][7]
		# get the year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income
		# for the zipcode
		cur.execute("""
			SELECT
				housing_gross_rent_percent.year,
				housing_gross_rent_percent.id,
				housing_gross_rent_percent.zipcode,
				housing_gross_rent_percent.number_of_units,
				housing_gross_rent_percent.income_percent_min,
				housing_gross_rent_percent.income_percent_max,
				housing_gross_rent_percent.grapi_percent_min,
				housing_gross_rent_percent.grapi_percent_max
			FROM housing_gross_rent_percent
			WHERE housing_gross_rent_percent.zipcode = %s
			AND housing_gross_rent_percent.income_percent_min = %s
			AND housing_gross_rent_percent.income_percent_max = %s
			AND housing_gross_rent_percent.grapi_percent_min = %s
			AND housing_gross_rent_percent.grapi_percent_max = %s
			ORDER BY housing_gross_rent_percent.year;
		""", (zipcode, income_percent_min, income_percent_max, grapi_percent_min, grapi_percent_max))
		# get the data
		data = cur.fetchall()
		# if the data is not empty
		if data:
			# get the year
			year = data[0][0]
			# get the id
			id = data[0][1]
			# get the zipcode
			zipcode = data[0][2]
			# get the number of units
			number_of_units = data[0][3]
			# get the income percent min
			income_percent_min = data[0][4]
			# get the income percent max
			income_percent_max = data[0][5]
			# get the gross rent as percentage of household income
			grapi_percent_min = data[0][6]
			# get the gross rent as percentage of household income
			grapi_percent_max = data[0][7]
			# get the year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income
			# for the zipcode
			cur.execute("""
				SELECT
					housing_gross_rent_percent.year,
					housing_gross_rent_percent.id,
					housing_gross_rent_percent.zipcode,
					housing_gross_rent_percent.number_of_units,
					housing_gross_rent_percent.income_percent_min,
					housing_gross_rent_percent.income_percent_max,
					housing_gross_rent_percent.grapi_percent_min,
					housing_gross_rent_percent.grapi_percent_max
				FROM housing_gross_rent_percent
				WHERE housing_gross_rent_percent.zipcode = %s
				AND housing_gross_rent_percent.income_percent_min = %s
				AND housing_gross_rent_percent.income_percent_max = %s
				AND housing_gross_rent_percent.grapi_percent_min = %s
				AND housing_gross_rent_percent.grapi_percent_max = %s
				ORDER BY housing_gross_rent_percent.year;
			""", (zipcode, income_percent_min, income_percent_max, grapi_percent_min, grapi_percent_max))
			# get the data
			data = cur.fetchall()
			# if the data is not empty
			if data:
				# get the year
				year = data[0][0]
				# get the id
				id = data[0][1]
				# get the zipcode
				zipcode = data[0][2]
				# get the number of units
				number_of_units = data[0][3]
				# get the income percent min
				income_percent_min = data[0][4]
				# get the income percent max
				income_percent_max = data[0][5]
				# get the gross rent as percentage of household income
				grapi_percent_min = data[0][6]
				# get the gross rent as percentage of household income
				grapi_percent_max = data[0][7]
				# get the year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income
				# for the zipcode
				cur.execute("""
					SELECT
						housing_gross_rent_percent.year,
						housing_gross_rent_percent.id,
						housing_gross_rent_percent.zipcode,
						housing_gross_rent_percent.number_of_units,
						housing_gross_rent_percent.income_percent_min,
						housing_gross_rent_percent.income_percent_max,
						housing_gross_rent_percent.grapi_percent_min,
						housing_gross_rent_percent.grapi_percent_max
					FROM housing_gross_rent_percent
					WHERE housing_gross_rent_percent.zipcode = %s
					AND housing_gross_rent_percent.income_percent_min = %s
					AND housing_gross_rent_percent.income_percent_max = %s
					AND housing_gross_rent_percent.grapi_percent_min = %s
					AND housing_gross_rent_percent.grapi_percent_max = %s
					ORDER BY housing_gross_rent_percent.year;
				""", (zipcode, income_percent_min

====================================================================================================

PROMPT 3:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in SMOCAPI, where SMOCAPI is selected monthly home-ownership costs as a percent of household income

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 3:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in SMOCAPI, where SMOCAPI is selected monthly home-ownership costs as a percent of household income

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd
import numpy as np
import re

# connect to database
conn = psycopg2.connect(
	host = "localhost",
	port = "5432",
	database = "housing_prices",
	user = "postgres",
	password = "postgres"
)

# create cursor
cur = conn.cursor()

# create query
query = "SELECT year, id, zipcode, number_of_units, income_percent_min, income_percent_max FROM household_income_percent_with_mortgage"

# execute query
cur.execute(query)

# get results
rows = cur.fetchall()

# close connection
cur.close()
conn.close()

# create dataframe
df = pd.DataFrame(rows, columns = ["year", "id", "zipcode", "number_of_units", "income_percent_min", "income_percent_max"])

# create new dataframe
new_df = df.groupby(["year", "id", "zipcode"])["number_of_units"].sum().reset_index()

# create new dataframe
new_df2 = new_df.groupby(["year", "id", "zipcode"])["number_of_units"].mean().reset_index()

# create new dataframe
new_df3 = new_df2.groupby(["year", "id", "zipcode"])["number_of_units"].max().reset_index()

# create new dataframe
new_df4 = new_df3.groupby(["year", "id", "zipcode"])["number_of_units"].min().reset_index()

# create new dataframe
new_df5 = new_df4.groupby(["year", "id", "zipcode"])["number_of_units"].count().reset_index()

# create new dataframe
new_df6 = new_df5.groupby(["year", "id", "zipcode"])["number_of_units"].max().reset_index()

# create new dataframe
new_df7 = new_df6.groupby(["year", "id", "zipcode"])["number_of_units"].min().reset_index()

# create new dataframe
new_df8 = new_df7.groupby(["year", "id", "zipcode"])["number_of_units"].count().reset_index()

# create new dataframe
new_df9 = new_df8.groupby(["year", "id", "zipcode"])["number_of_units"].max().reset_index()

# create new dataframe
new_df10 = new_df9.groupby(["year", "id", "zipcode"])["number_of_units"].min().reset_index()

# create new dataframe
new_df11 = new_df10.groupby(["year", "id", "zipcode"])["number_of_units"].count().reset_index()

# create new dataframe
new_df12 = new_df11.groupby(["year", "id", "zipcode"])["number_of_units"].max().reset_index()

# create new dataframe
new_df13 = new_df12.groupby(["year", "id", "zipcode"])["number_of_units"].min().reset_index()

# create new dataframe
new_df14 = new_df13.groupby(["year", "id", "zipcode"])["number_of_units"].count().reset_index()

# create new dataframe
new_df15 = new_df14.groupby(["year", "id", "zipcode"])["number_of_units"].max().reset_index()

# create new dataframe
new_df16 = new_df15.groupby(["year", "id", "zipcode"])["number_of_units"].min().reset_index()

# create new dataframe
new_df17 = new_df16.groupby(["year", "id", "zipcode"])["number_of_units"].count().reset_index()

# create new dataframe
new_df18 = new_df17.groupby(["year", "id", "zipcode"])["number_of_units"].max().reset_index()

# create new dataframe
new_df19 = new_df18.groupby(["year", "id", "zipcode"])["number_of_units"].min().reset_index()

# create new dataframe
new_df20 = new_df19.groupby(["year", "id", "zipcode"])["number_of_units"].count().reset_index()

# create new dataframe
new_df21 = new_df20.groupby(["year", "id", "zipcode"])["number_of_units"].max().reset_index()

# create new dataframe
new_df22 = new_df21.groupby(["year", "id", "zipcode"])["number_of_units"].min().reset_index()

# create new dataframe
new_df23 = new_df22.groupby(["year", "id", "zipcode"])["number_of_units"].count().reset_index()

# create new dataframe
new_df24 = new_df23.groupby(["year", "id", "zipcode"])["number_of_units"].max().reset_index()

# create new dataframe
new_df25 = new_df24.groupby(["year", "id", "zipcode"])["number_of_units"].min().reset_index()

# create new dataframe
new_df26 = new_df25.groupby(["year", "id", "zipcode"])["number_of_units"].count().reset_index()

# create new dataframe
new_df27 = new_df26.groupby(["year", "id", "zipcode"])["number_of_units"].max().reset_index()

# create new dataframe
new_df28 = new_df27.groupby(["year", "id", "zipcode"])["number_of_units"].min().reset_index()

# create new dataframe
new_df29 = new_df28.groupby(["year", "id", "zipcode"])["number_of_units"].count().reset_index()

# create new dataframe
new_df30 = new_df29.groupby(["year", "id", "zipcode"])["number_of_units"].max().reset_index()

# create new dataframe
new_df31 = new_df30.groupby(["year", "id", "zipcode"])["number_of_units"].min().reset_index()

# create new dataframe
new_df32 = new_df31.groupby(["year", "id", "zipcode"])["number_of_units"].count().reset_index()

# create new dataframe
new_df33 = new_df32.groupby(["year", "id", "zipcode"])["number_of_units"].max().reset_index()

# create new dataframe
new_df34 = new_df33.groupby(["year", "id", "zipcode"])["number_of_units"].min().reset_index()

# create new dataframe
new_df35 = new_df34.groupby(["year", "id", "zipcode"])["number_of_units"].count().reset_index()

# create new dataframe
new_df36 = new_df35.groupby(["year", "id", "zipcode"])["number_of_units"].max().reset_index()

# create new dataframe
new_df37 = new_df36.groupby(["

====================================================================================================

PROMPT 4:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in average house rent from 2017 to 2022.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 4:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in average house rent from 2017 to 2022.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd
import numpy as np

# connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "housing_value",
    user = "postgres",
    password = "postgres"
)

# create a cursor
cur = conn.cursor()

# create a function to get the average house value for a zipcode
def get_avg_house_value(zipcode):
	# get the average house value for a zipcode
	cur.execute(f"SELECT AVG(house_value_min) FROM housing_value WHERE zipcode = '{zipcode}'")
	avg_house_value = cur.fetchone()[0]
	return avg_house_value

# create a function to get the change in house value for a zipcode
def get_change_in_house_value(zipcode):
	# get the change in house value for a zipcode
	cur.execute(f"SELECT house_value_max - house_value_min FROM housing_value WHERE zipcode = '{zipcode}'")
	change_in_house_value = cur.fetchone()[0]
	return change_in_house_value

# create a function to get the average house rent for a zipcode
def get_avg_house_rent(zipcode):
	# get the average house rent for a zipcode
	cur.execute(f"SELECT AVG(number_of_units) FROM housing_value WHERE zipcode = '{zipcode}'")
	avg_house_rent = cur.fetchone()[0]
	return avg_house_rent

# create a function to get the change in house rent for a zipcode
def get_change_in_house_rent(zipcode):
	# get the change in house rent for a zipcode
	cur.execute(f"SELECT number_of_units - number_of_units FROM housing_value WHERE zipcode = '{zipcode}'")
	change_in_house_rent = cur.fetchone()[0]
	return change_in_house_rent

# create a function to get the average house rent for a zipcode
def get_avg_house_rent_by_year(zipcode, year):
	# get the average house rent for a zipcode
	cur.execute(f"SELECT AVG(number_of_units) FROM housing_value WHERE zipcode = '{zipcode}' AND year = '{year}'")
	avg_house_rent = cur.fetchone()[0]
	return avg_house_rent

# create a function to get the change in house rent for a zipcode
def get_change_in_house_rent_by_year(zipcode, year):
	# get the change in house rent for a zipcode
	cur.execute(f"SELECT number_of_units - number_of_units FROM housing_value WHERE zipcode = '{zipcode}' AND year = '{year}'")
	change_in_house_rent = cur.fetchone()[0]
	return change_in_house_rent

# create a function to get the average house rent for a zipcode
def get_avg_house_rent_by_year_and_unit(zipcode, year, unit):
	# get the average house rent for a zipcode
	cur.execute(f"SELECT AVG(house_value_min) FROM housing_value WHERE zipcode = '{zipcode}' AND year = '{year}' AND number_of_units = '{unit}'")
	avg_house_rent = cur.fetchone()[0]
	return avg_house_rent

# create a function to get the change in house rent for a zipcode
def get_change_in_house_rent_by_year_and_unit(zipcode, year, unit):
	# get the change in house rent for a zipcode
	cur.execute(f"SELECT house_value_max - house_value_min FROM housing_value WHERE zipcode = '{zipcode}' AND year = '{year}' AND number_of_units = '{unit}'")
	change_in_house_rent = cur.fetchone()[0]
	return change_in_house_rent

# create a function to get the average house rent for a zipcode
def get_avg_house_rent_by_year_and_unit_and_year(zipcode, year, unit, year2):
	# get the average house rent for a zipcode
	cur.execute(f"SELECT AVG(house_value_min) FROM housing_value WHERE zipcode = '{zipcode}' AND year = '{year}' AND number_of_units = '{unit}' AND year = '{year2}'")
	avg_house_rent = cur.fetchone()[0]
	return avg_house_rent

# create a function to get the change in house rent for a zipcode
def get_change_in_house_rent_by_year_and_unit_and_year(zipcode, year, unit, year2):
	# get the change in house rent for a zipcode
	cur.execute(f"SELECT house_value_max - house_value_min FROM housing_value WHERE zipcode = '{zipcode}' AND year = '{year}' AND number_of_units = '{unit}' AND year = '{year2}'")
	change_in_house_rent = cur.fetchone()[0]
	return change_in_house_rent

# create a function to get the average house rent for a zipcode
def get_avg_house_rent_by_year_and_unit_and_year_and_unit(zipcode, year, unit, year2, unit2):
	# get the average house rent for a zipcode
	cur.execute(f"SELECT AVG(house_value_min) FROM housing_value WHERE zipcode = '{zipcode}' AND year = '{year}' AND number_of_units = '{unit}' AND year = '{year2}' AND number_of_units = '{unit2}'")
	avg_house_rent = cur.fetchone()[0]
	return avg_house_rent

# create a function to get the change in house rent for a zipcode
def get_change_in_house_rent_by_year_and_unit_and_year_and_unit(zipcode, year, unit, year2, unit2):
	# get the change in house rent for a zipcode
	cur.execute(f"SELECT house_value_max - house_value_min FROM housing_value WHERE zipcode = '{zipcode}' AND year = '{year}' AND number_of_units = '{unit}' AND year = '{year2}' AND number_of_units = '{unit2}'")
	change_in_house_rent = cur.fetchone()[0]
	return change_in_house_rent

# create a function to get the average house rent for a zipcode
def get_avg_house_rent_by_year_and_unit_and_year_and_unit_and_year(zipcode, year, unit, year2, unit2, year3):
	# get the average house rent for a zipcode
	cur.execute(f"SELECT AVG(house_value_min) FROM housing_value WHERE zipcode = '{zipcode}' AND year = '{year}' AND number_of_units = '{unit}' AND year = '{year2}' AND number_of_units = '{unit2}' AND year = '{year3}'")
	avg_house_rent = cur.fetchone()[0]
	return avg_house_rent

# create a function to get the change in house rent for a zipcode
def get_change_in_house_rent_by_year_and_unit_and_year_and_unit_and_year(zipcode, year, unit, year2, unit2, year3):
	# get the change in house rent for a zipcode

====================================================================================================

PROMPT 5:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

Schema: 
	household_income_percent_without_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 5:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

Schema: 
	household_income_percent_without_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code

====================================================================================================

PROMPT 6:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 6:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For

====================================================================================================

PROMPT 7:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get zipcodes in Georgia where GRAPI is greater than 30.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 7:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get zipcodes in Georgia where GRAPI is greater than 30.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

====================================================================================================

PROMPT 8:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Select share of each fuel source for heating in year 2022.

Schema: 
	housing_heating_fuel (year, id, zipcode, total_heating_units, utility_gas, bottled_tank_or_LP_gas, electricity, fuel_oil_kerosene, coal_or_coke, wood, solar_energy, other_fuel, no_fuel_used)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 8:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Select share of each fuel source for heating in year 2022.

Schema: 
	housing_heating_fuel (year, id, zipcode, total_heating_units, utility_gas, bottled_tank_or_LP_gas, electricity, fuel_oil_kerosene, coal_or_coke, wood, solar_energy, other_fuel, no_fuel_used)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")

# create a cursor
cur = conn.cursor()

# create a query
query = "SELECT share_of_heating_fuel_2022 FROM housing_heating_fuel WHERE year = 2022"

# execute the query
cur.execute(query)

# get the results
results = cur.fetchall()

# close the cursor
cur.close()

# close the connection
conn.close()

# print the results
print(results)

# convert the results to a dataframe
df = pd.DataFrame(results)

# print the dataframe
print(df)

# get the share of each fuel source for heating in year 2022
print(df.iloc[0,0])

# get the share of each fuel source for heating in year 2023
print(df.iloc[1,0])

# get the share of each fuel source for heating in year 2024
print(df.iloc[2,0])

# get the share of each fuel source for heating in year 2025
print(df.iloc[3,0])

# get the share of each fuel source for heating in year 2026
print(df.iloc[4,0])

# get the share of each fuel source for heating in year 2027
print(df.iloc[5,0])

# get the share of each fuel source for heating in year 2028
print(df.iloc[6,0])

# get the share of each fuel source for heating in year 2029
print(df.iloc[7,0])

# get the share of each fuel source for heating in year 2030
print(df.iloc[8,0])

# get the share of each fuel source for heating in year 2031
print(df.iloc[9,0])

# get the share of each fuel source for heating in year 2032
print(df.iloc[10,0])

# get the share of each fuel source for heating in year 2033
print(df.iloc[11,0])

# get the share of each fuel source for heating in year 2034
print(df.iloc[12,0])

# get the share of each fuel source for heating in year 2035
print(df.iloc[13,0])

# get the share of each fuel source for heating in year 2036
print(df.iloc[14,0])

# get the share of each fuel source for heating in year 2037
print(df.iloc[15,0])

# get the share of each fuel source for heating in year 2038
print(df.iloc[16,0])

# get the share of each fuel source for heating in year 2039
print(df.iloc[17,0])

# get the share of each fuel source for heating in year 2040
print(df.iloc[18,0])

# get the share of each fuel source for heating in year 2041
print(df.iloc[19,0])

# get the share of each fuel source for heating in year 2042
print(df.iloc[20,0])

# get the share of each fuel source for heating in year 2043
print(df.iloc[21,0])

# get the share of each fuel source for heating in year 2044
print(df.iloc[22,0])

# get the share of each fuel source for heating in year 2045
print(df.iloc[23,0])

# get the share of each fuel source for heating in year 2046
print(df.iloc[24,0])

# get the share of each fuel source for heating in year 2047
print(df.iloc[25,0])

# get the share of each fuel source for heating in year 2048
print(df.iloc[26,0])

# get the share of each fuel source for heating in year 2049
print(df.iloc[27,0])

# get the share of each fuel source for heating in year 2050
print(df.iloc[28,0])

# get the share of each fuel source for heating in year 2051
print(df.iloc[29,0])

# get the share of each fuel source for heating in year 2052
print(df.iloc[30,0])

# get the share of each fuel source for heating in year 2053
print(df.iloc[31,0])

# get the share of each fuel source for heating in year 2054
print(df.iloc[32,0])

# get the share of each fuel source for heating in year 2055
print(df.iloc[33,0])

# get the share of each fuel source for heating in year 2056
print(df.iloc[34,0])

# get the share of each fuel source for heating in year 2057
print(df.iloc[35,0])

# get the share of each fuel source for heating in year 2058
print(df.iloc[36,0])

# get the share of each fuel source for heating in year 2059
print(df.iloc[37,0])

# get the share of each fuel source for heating in year 2060
print(df.iloc[38,0])

# get the share of each fuel source for heating in year 2061
print(df.iloc[39,0])

# get the share of each fuel source for heating in year 2062
print(df.iloc[40,0])

# get the share of each fuel source for heating in year 2063
print(df.iloc[41,0])

# get the share of each fuel source for heating in year 2064
print(df.iloc[42,0])

# get the share of each fuel source for heating in year 2065
print(df.iloc[43,0])

# get the share of each fuel source for heating in year 2066
print(df.iloc[44,0])

# get the share of each fuel source for heating in year 2067
print(df.iloc[45,0])

# get the share of each fuel source for heating in year 2068
print(df.iloc[46,0])

# get the share of each fuel source for heating in year 2069
print(df.iloc[47,0])

# get the share of each fuel source for heating in year 2070
print(df.iloc[48,0])

# get the share of each fuel source for heating in year 2071
print(df.iloc[49,0])

# get the share of each fuel source for heating in year 2072
print(df.iloc[50,0])

# get the share of each fuel source for heating in year 2073
print(df.iloc[51,0])

# get the share of each fuel source for heating in year 2074
print(df.iloc[52,0])

# get the share of each fuel source for heating in year 2075
print(df.iloc[53,0])

# get the share of each fuel source for heating in year 2076
print(df.iloc[54,0])

# get the share of each fuel source for heating in year 2077
print(df.iloc[55,0])

# get the share of each fuel source for heating in year 2078
print(df.iloc[56,0])

# get the share of each fuel source for heating in year 2079
print(df.iloc[57,0])

# get the share of each fuel source for heating in year 2080
print(df.iloc[58,0])

# get the share of each fuel source for heating in year 2081
print(df.iloc[59,0])

# get the share of each fuel source for heating in year 2082
print(df.iloc[60,0

====================================================================================================

PROMPT 9:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For the year 2022, select zipcodes in Georgia where Home-ownership costs as a %age of household income is more than 28%

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 9:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For the year 2022, select zipcodes in Georgia where Home-ownership costs as a %age of household income is more than 28%

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your

====================================================================================================

PROMPT 10:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each year, get rent and value of house averaged over all zip codes.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 10:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each year, get rent and value of house averaged over all zip codes.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	For each year, get rent and value of house averaged over all zip codes.

Sample Output:
	SELECT house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min, house_value_max, house_value_avg, house_value_min

====================================================================================================

PROMPT 11:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get rent and value of house averaged over all years.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 11:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get rent and value of house averaged over all years.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	For each zip code, get rent and value of house averaged over all years.
	
Sample Output:
	SELECT house_value_avg, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_stddev, house_value_median, house_value_count,

====================================================================================================

PROMPT 12:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get count of units with and without mortgage in year 2022.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 12:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get count of units with and without mortgage in year 2022.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2

# connect to database
conn = psycopg2.connect(
	host = "localhost",
	database = "housing_db",
	user = "postgres",
	password = "postgres"
)

# create cursor
cur = conn.cursor()

# create query
query = "SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND id = 1"

# execute query
cur.execute(query)

# fetch result
result = cur.fetchone()

# print result
print(result)

# close cursor
cur.close()

# close connection
conn.close()

====================================================================================================

PROMPT 13:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage averaged over years.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 13:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage averaged over years.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# Get count of units with and without mortgage averaged over years.

# SELECT
# 	COUNT(DISTINCT(housing_mortgage.id))
# FROM
# 	housing_mortgage
# WHERE
# 	housing_mortgage.year = '2010'
# 	AND housing_mortgage.zipcode = '92610'
# 	AND housing_mortgage.units_with_mortgage > 0
# 	AND housing_mortgage.units_without_mortgage > 0
# GROUP BY
# 	housing_mortgage.year
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND housing_mortgage.units_with_mortgage
# 	AND housing_mortgage.units_without_mortgage
# 	AND housing_mortgage.year
# 	AND housing_mortgage.id
# 	AND housing_mortgage.zipcode
# 	AND

====================================================================================================

PROMPT 14:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage for year 2022.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 14:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage for year 2022.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2

# connect to the database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")

# create a cursor
cur = conn.cursor()

# create a query
query = "SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > 0"

# execute the query
cur.execute(query)

# fetch the results
results = cur.fetchall()

# print the results
print(results)

# close the cursor
cur.close()

# close the connection
conn.close()


====================================================================================================

PROMPT 15:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average house price for each zip code in a given year.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 15:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average house price for each zip code in a given year.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	year: 2015
	zipcode: 90210

Sample Output:
	SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

"""

# Write your MySQL query statement below

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT house_value_avg FROM housing_value WHERE year = 2015 AND zipcode = 90210

# SELECT

====================================================================================================

PROMPT 16:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get the average rent and maintenance cost for households without mortgage.

Schema: 
	household_income_percent_without_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 16:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get the average rent and maintenance cost for households without mortgage.

Schema: 
	household_income_percent_without_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(host="localhost", port=5432, database="postgres", user="postgres", password="postgres")

# create a cursor
cur = conn.cursor()

# create a function to get the average rent and maintenance cost for households without mortgage
def get_average_rent_and_maintenance_cost_for_households_without_mortgage(zipcode):
	# get the average rent and maintenance cost for households without mortgage
	cur.execute("""
		SELECT 
			avg(rent_value) as average_rent,
			avg(maintenance_cost) as average_maintenance_cost
		FROM housing_rent
		WHERE
			zipcode = %s
			AND number_of_units = 1
			AND rent_value_min = 0
			AND rent_value_max = 0
			AND maintenance_cost_min = 0
			AND maintenance_cost_max = 0
	""", (zipcode,))
	# get the results
	results = cur.fetchall()
	# return the results
	return results[0]

# create a function to get the average income and housing cost for households without mortgage
def get_average_income_and_housing_cost_for_households_without_mortgage(zipcode):
	# get the average income and housing cost for households without mortgage
	cur.execute("""
		SELECT 
			avg(income_percent) as average_income,
			avg(rent_value) as average_housing_cost
		FROM household_income_percent_without_mortgage
		WHERE
			zipcode = %s
			AND number_of_units = 1
			AND income_percent_min = 0
			AND income_percent_max = 0
			AND rent_value_min = 0
			AND rent_value_max = 0
			AND maintenance_cost_min = 0
			AND maintenance_cost_max = 0
	""", (zipcode,))
	# get the results
	results = cur.fetchall()
	# return the results
	return results[0]

# create a function to get the average income and housing cost for households without mortgage
def get_average_income_and_housing_cost_for_households_without_mortgage_by_year(zipcode, year):
	# get the average income and housing cost for households without mortgage
	cur.execute("""
		SELECT 
			avg(income_percent) as average_income,
			avg(rent_value) as average_housing_cost
		FROM household_income_percent_without_mortgage
		WHERE
			zipcode = %s
			AND year = %s
			AND number_of_units = 1
			AND income_percent_min = 0
			AND income_percent_max = 0
			AND rent_value_min = 0
			AND rent_value_max = 0
			AND maintenance_cost_min = 0
			AND maintenance_cost_max = 0
	""", (zipcode, year))
	# get the results
	results = cur.fetchall()
	# return the results
	return results[0]

# create a function to get the average income and housing cost for households without mortgage
def get_average_income_and_housing_cost_for_households_without_mortgage_by_year_and_unit(zipcode, year, unit_number):
	# get the average income and housing cost for households without mortgage
	cur.execute("""
		SELECT 
			avg(income_percent) as average_income,
			avg(rent_value) as average_housing_cost
		FROM household_income_percent_without_mortgage
		WHERE
			zipcode = %s
			AND year = %s
			AND number_of_units = %s
			AND income_percent_min = 0
			AND income_percent_max = 0
			AND rent_value_min = 0
			AND rent_value_max = 0
			AND maintenance_cost_min = 0
			AND maintenance_cost_max = 0
	""", (zipcode, year, unit_number))
	# get the results
	results = cur.fetchall()
	# return the results
	return results[0]

# create a function to get the average income and housing cost for households without mortgage
def get_average_income_and_housing_cost_for_households_without_mortgage_by_year_and_unit_and_unit_type(zipcode, year, unit_number, unit_type):
	# get the average income and housing cost for households without mortgage
	cur.execute("""
		SELECT 
			avg(income_percent) as average_income,
			avg(rent_value) as average_housing_cost
		FROM household_income_percent_without_mortgage
		WHERE
			zipcode = %s
			AND year = %s
			AND number_of_units = %s
			AND unit_type = %s
			AND income_percent_min = 0
			AND income_percent_max = 0
			AND rent_value_min = 0
			AND rent_value_max = 0
			AND maintenance_cost_min = 0
			AND maintenance_cost_max = 0
	""", (zipcode, year, unit_number, unit_type))
	# get the results
	results = cur.fetchall()
	# return the results
	return results[0]

# create a function to get the average income and housing cost for households without mortgage
def get_average_income_and_housing_cost_for_households_without_mortgage_by_year_and_unit_and_unit_type_and_unit_size(zipcode, year, unit_number, unit_type, unit_size):
	# get the average income and housing cost for households without mortgage
	cur.execute("""
		SELECT 
			avg(income_percent) as average_income,
			avg(rent_value) as average_housing_cost
		FROM household_income_percent_without_mortgage
		WHERE
			zipcode = %s
			AND year = %s
			AND number_of_units = %s
			AND unit_type = %s
			AND unit_size = %s
			AND income_percent_min = 0
			AND income_percent_max = 0
			AND rent_value_min = 0
			AND rent_value_max = 0
			AND maintenance_cost_min = 0
			AND maintenance_cost_max = 0
	""", (zipcode, year, unit_number, unit_type, unit_size))
	# get the results
	results = cur.fetchall()
	# return the results
	return results[0]

# create a function to get the average income and housing cost for households without mortgage
def get_average_income_and_housing_cost_for_households_without_mortgage_by_year_and_unit_and_unit_type_and_unit_size_and_unit_type(zipcode, year, unit_number, unit_type, unit_size, unit_type2):
	# get the average income and housing cost for households without mortgage
	cur.execute("""
		SELECT 
			avg(income_percent) as average_income,
			avg(rent_value) as average_housing_cost
		FROM household_income_percent_without_mortgage
		WHERE
			zipcode = %s
			AND year = %s
			AND number_of_units = %s
			AND unit_type = %s
			AND unit_size = %s
			AND unit_type2 = %s
			AND income_percent_min = 0
			AND income_percent_max = 0
			AND rent_value_min = 0
			AND rent_value_max = 0
			AND maintenance_cost_min = 0
			AND maintenance_cost_max = 0
	""", (zipcode, year, unit_number

====================================================================================================

PROMPT 17:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get median housing value by zipcode.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 17:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get median housing value by zipcode.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	Get median housing value by zipcode.

Sample Output:
	SELECT house_value_min, house_value_max, house_value_median, house_value_mode, house_value_median_diff FROM housing_value WHERE zipcode = '90210'

"""

# Write your MySQL query statement below

SELECT house_value_min, house_value_max, house_value_median, house_value_mode, house_value_median_diff FROM housing_value WHERE zipcode = '90210'


====================================================================================================

PROMPT 18:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022 and for each zipcode, get average rent value and house price.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 18:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022 and for each zipcode, get average rent value and house price.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	year: int
	zipcode: int

Output:
	SQL statement: str
"""

# Your code here

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.
# SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = 94110;
# SELECT AVG(rent_value_min) FROM housing_rent WHERE year = 2022 AND zipcode = 94110;

# For year 2022 and for each zipcode, get average rent value and house price.


====================================================================================================

PROMPT 19:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get average rent value and house price.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 19:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get average rent value and house price.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample input:
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1, '$1,000,000', '$1,200,000')
	(1, 1, '90210', 1

====================================================================================================

PROMPT 20:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get total housing units in 2022 grouped by zipcode.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 20:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get total housing units in 2022 grouped by zipcode.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	year: 2022
	id: 1
	zipcode: 94110
	number_of_units: 10
	house_value_min: 100
	house_value_max: 200
	rent_value_min: 100
	rent_value_max: 200

Sample Output:
	SELECT SUM(number_of_units) FROM housing_value WHERE year = 2022 AND id = 1 AND zipcode = 94110

"""

# Write your code here

# Get the input
year = int(input("year: "))
id = int(input("id: "))
zipcode = int(input("zipcode: "))
number_of_units = int(input("number_of_units: "))
house_value_min = int(input("house_value_min: "))
house_value_max = int(input("house_value_max: "))
rent_value_min = int(input("rent_value_min: "))
rent_value_max = int(input("rent_value_max: "))

# Generate the SQL statement
sql_statement = "SELECT SUM(number_of_units) FROM housing_value WHERE year = " + str(year) + " AND id = " + str(id) + " AND zipcode = " + str(zipcode)

# Print the SQL statement
print(sql_statement)


====================================================================================================

PROMPT 21:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, count houses built in or after 2020.

Schema: 
	housing_year_built (year, id, zipcode, number_of_units, year_built_min, year_built_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 21:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, count houses built in or after 2020.

Schema: 
	housing_year_built (year, id, zipcode, number_of_units, year_built_min, year_built_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here


====================================================================================================

PROMPT 22:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having GRAPI greater than 28% in year 2022

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 22:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having GRAPI greater than 28% in year 2022

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to database
conn = psycopg2.connect(
    host = "localhost",
    database = "housing_gross_rent_percent",
    user = "postgres",
    password = "postgres"
)

# create cursor
cur = conn.cursor()

# create query
query = "SELECT * FROM housing_gross_rent_percent WHERE year = 2022 AND income_percent_min > 28"

# execute query
cur.execute(query)

# fetch results
results = cur.fetchall()

# close connection
conn.close()

# print results
print(results)

# print results to csv
df = pd.DataFrame(results)
df.to_csv("housing_gross_rent_percent.csv", index=False)


====================================================================================================

PROMPT 23:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having SMOCAPI greater than 30% in year 2022.

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 23:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having SMOCAPI greater than 30% in year 2022.

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")

# create a cursor
cur = conn.cursor()

# create a query
query = """
SELECT 
	household_income_percent_with_mortgage.year,
	household_income_percent_with_mortgage.id,
	household_income_percent_with_mortgage.zipcode,
	household_income_percent_with_mortgage.number_of_units,
	household_income_percent_with_mortgage.income_percent_min,
	household_income_percent_with_mortgage.income_percent_max
FROM 
	household_income_percent_with_mortgage
WHERE
	household_income_percent_with_mortgage.year = 2022
	AND
	household_income_percent_with_mortgage.income_percent_max > 0.3
	AND
	household_income_percent_with_mortgage.income_percent_min < 0.3
	AND
	household_income_percent_with_mortgage.number_of_units > 0
	AND
	household_income_percent_with_mortgage.zipcode <> '0'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99999'
	AND
	household_income_percent_with_mortgage.zipcode <> '99

====================================================================================================

PROMPT 24:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average population of males and females by year in Georgia

Schema: 
	demographic_basics (year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 24:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average population of males and females by year in Georgia

Schema: 
	demographic_basics (year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import sqlite3
# import pandas as pd
# import numpy as np
# import matplotlib.pyplot as plt
# import seaborn as sns
# from sqlalchemy import create_engine
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy import Column, Integer, String, Float, Date, ForeignKey, DateTime, Boolean, Text, Time, BigInteger
# from sqlalchemy.ext.declarative import declarative_base
# from sqlalchemy.orm import relationship, backref
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import relationship, backref
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.orm import scoped_session
# from sqlalchemy.orm import sessionmaker
# from

====================================================================================================

PROMPT 25:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get gender ratio between males and females for each zipcode in Georgia.

Schema: 
	demographic_basics (year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 25:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get gender ratio between males and females for each zipcode in Georgia.

Schema: 
	demographic_basics (year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import libraries
import pandas as pd

# import data
df = pd.read_csv('data/demographic_basics.csv')

# create a list of zipcodes
zipcodes = list(df['zipcode'].unique())

# create a list of years
years = list(df['year'].unique())

# create a list of columns
columns = list(df.columns)

# create a list of columns to be used in the SQL statement
columns_to_use = ['year', 'zipcode', 'total_population', 'total_population_male', 'total_population_female', 'total_population_sex_ratio', 'total_population_median_age', 'total_housing_units', 'voting_age_population', 'voting_age_popul', 'voting_age_population_female']

# create a list of columns to be used in the SQL statement
columns_to_use_2 = ['year', 'zipcode', 'total_population', 'total_population_male', 'total_population_female', 'total_population_sex_ratio', 'total_population_median_age', 'total_housing_units', 'voting_age_population', 'voting_age_popul', 'voting_age_population_female']

# create a list of columns to be used in the SQL statement
columns_to_use_3 = ['year', 'zipcode', 'total_population', 'total_population_male', 'total_population_female', 'total_population_sex_ratio', 'total_population_median_age', 'total_housing_units', 'voting_age_population', 'voting_age_popul', 'voting_age_population_female']

# create a list of columns to be used in the SQL statement
columns_to_use_4 = ['year', 'zipcode', 'total_population', 'total_population_male', 'total_population_female', 'total_population_sex_ratio', 'total_population_median_age', 'total_housing_units', 'voting_age_population', 'voting_age_popul', 'voting_age_population_female']

# create a list of columns to be used in the SQL statement
columns_to_use_5 = ['year', 'zipcode', 'total_population', 'total_population_male', 'total_population_female', 'total_population_sex_ratio', 'total_population_median_age', 'total_housing_units', 'voting_age_population', 'voting_age_popul', 'voting_age_population_female']

# create a list of columns to be used in the SQL statement
columns_to_use_6 = ['year', 'zipcode', 'total_population', 'total_population_male', 'total_population_female', 'total_population_sex_ratio', 'total_population_median_age', 'total_housing_units', 'voting_age_population', 'voting_age_popul', 'voting_age_population_female']

# create a list of columns to be used in the SQL statement
columns_to_use_7 = ['year', 'zipcode', 'total_population', 'total_population_male', 'total_population_female', 'total_population_sex_ratio', 'total_population_median_age', 'total_housing_units', 'voting_age_population', 'voting_age_popul', 'voting_age_population_female']

# create a list of columns to be used in the SQL statement
columns_to_use_8 = ['year', 'zipcode', 'total_population', 'total_population_male', 'total_population_female', 'total_population_sex_ratio', 'total_population_median_age', 'total_housing_units', 'voting_age_population', 'voting_age_popul', 'voting_age_population_female']

# create a list of columns to be used in the SQL statement
columns_to_use_9 = ['year', 'zipcode', 'total_population', 'total_population_male', 'total_population_female', 'total_population_sex_ratio', 'total_population_median_age', 'total_housing_units', 'voting_age_population', 'voting_age_popul', 'voting_age_population_female']

# create a list of columns to be used in the SQL statement
columns_to_use_10 = ['year', 'zipcode', 'total_population', 'total_population_male', 'total_population_female', 'total_population_sex_ratio', 'total_population_median_age', 'total_housing_units', 'voting_age_population', 'voting_age_popul', 'voting_age_population_female']

# create a list of columns to be used in the SQL statement
columns_to_use_11 = ['year', 'zipcode', 'total_population', 'total_population_male', 'total_population_female', 'total_population_sex_ratio', 'total_population_median_age', 'total_housing_units', 'voting_age_population', 'voting_age_popul', 'voting_age_population_female']

# create a list of columns to be used in the SQL statement
columns_to_use_12 = ['year', 'zipcode', 'total_population', 'total_population_male', 'total_population_female', 'total_population_sex_ratio', 'total_population_median_age', 'total_housing_units', 'voting_age_population', 'voting_age_popul', 'voting_age_population_female']

# create a list of columns to be used in the SQL statement
columns_to_use_13 = ['year', 'zipcode', 'total_population', 'total_population_male', 'total_population_female', 'total_population_sex_ratio', 'total_population_median_age', 'total_housing_units', 'voting_age_population', 'voting_age_popul', 'voting_age_population_female']

# create a list of columns to be used in the SQL statement
columns_to_use_14 = ['year', 'zipcode', 'total_population', 'total_population_male', 'total_population_female', 'total_population_sex_ratio', 'total_population_median_age', 'total_housing_units', 'voting_age_population', 'voting_age_popul', 'voting_age_population_female']

# create a list of columns to be used in the SQL statement
columns_to_use_15 = ['year', 'zipcode', 'total_population', 'total_population_male', 'total_population_female', 'total_population_sex_ratio', 'total_population_median_age', 'total_housing_units', 'voting_age_population', 'voting_age_popul', 'voting_age_population_female']

# create a list of columns to be used in the SQL statement
columns_to_use_16 = ['year', 'zipcode', 'total_population', 'total_population_male', 'total_population_female', 'total_population_sex_ratio', 'total_population_median_age', 'total_housing_units', 'voting_age_population', 'voting_age_popul', 'voting_age_population_female']

# create a list of columns to be used in the SQL statement
columns_to_use_17 = ['year', 'zipcode', 'total_population', 'total_population_male', 'total_population_female', 'total_population_sex_ratio', 'total_population_median_age', 'total_housing_units', 'voting_age_population', 'voting_age_popul', 'voting_age_population_female']

#

====================================================================================================

PROMPT 26:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each year after 2016, get average count of each ethnicity in Georgia.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 26:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each year after 2016, get average count of each ethnicity in Georgia.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each

====================================================================================================

PROMPT 27:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get average count of each ethnicity grouped by zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 27:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get average count of each ethnicity grouped by zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import psycopg2.extras

# connect to database
conn = psycopg2.connect("host=localhost dbname=postgres user=postgres password=postgres")
cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

# get average count of each ethnicity grouped by zipcode
cur.execute("""
	SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	FROM demographic_race
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY zipcode
""")

# get results
results = cur.fetchall()

# print results
for result in results:
	print(result)

# close the connection
cur.close()
conn.close()


====================================================================================================

PROMPT 28:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of American Indian and Alaskan Natives with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 28:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of American Indian and Alaskan Natives with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# create cursor
cur = conn.cursor()

# create query
query = """
SELECT
	demographic_race.year,
	demographic_race.zipcode,
	demographic_race.race_total_populatio,
	demographic_race.one_race,
	demographic_race.two_or_more_races,
	demographic_race.white,
	demographic_race.black,
	demographic_race.american_indian_and_alaska_native,
	demographic_race.asian,
	demographic_race.native_hawaiian_and_other_pacific_islander,
	demographic_race.some_other_race,
	demographic_race.hispanic_or_latino_total,
	demographic_race.hispanic_or_latino,
	demographic_race.not_hispanic_or_latino
FROM
	demographic_race
WHERE
	demographic_race.year = 2022;
"""

# execute query
cur.execute(query)

# get results
rows = cur.fetchall()

# create dataframe
df = pd.DataFrame(rows, columns = ['year', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino'])

# get total population
df['race_total_populatio'] = df['race_total_populatio'].astype(int)
df['race_total_populatio'] = df['race_total_populatio'].sum()

# get percentage of each race
df['one_race'] = df['one_race']/df['race_total_populatio']
df['two_or_more_races'] = df['two_or_more_races']/df['race_total_populatio']
df['white'] = df['white']/df['race_total_populatio']
df['black'] = df['black']/df['race_total_populatio']
df['american_indian_and_alaska_native'] = df['american_indian_and_alaska_native']/df['race_total_populatio']
df['asian'] = df['asian']/df['race_total_populatio']
df['native_hawaiian_and_other_pacific_islander'] = df['native_hawaiian_and_other_pacific_islander']/df['race_total_populatio']
df['some_other_race'] = df['some_other_race']/df['race_total_populatio']
df['hispanic_or_latino_total'] = df['hispanic_or_latino_total']/df['race_total_populatio']
df['hispanic_or_latino'] = df['hispanic_or_latino']/df['race_total_populatio']
df['not_hispanic_or_latino'] = df['not_hispanic_or_latino']/df['race_total_populatio']

# get most accurate answer
df['answer'] = (df['one_race'] + df['two_or_more_races'] + df['white'] + df['black'] + df['american_indian_and_alaska_native'] + df['asian'] + df['native_hawaiian_and_other_pacific_islander'] + df['some_other_race'] + df['hispanic_or_latino_total'] + df['hispanic_or_latino'] + df['not_hispanic_or_latino'])/8

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].idxmax()

# get most accurate answer
df['answer'] = df['answer'].

====================================================================================================

PROMPT 29:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Asians with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 29:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Asians with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(host="localhost", port=5432, database="postgres", user="postgres", password="postgres")

# create a cursor
cur = conn.cursor()

# create a query
query = """
SELECT
	demographic_race.year,
	demographic_race.zipcode,
	demographic_race.race_total_populatio,
	demographic_race.one_race,
	demographic_race.two_or_more_races,
	demographic_race.white,
	demographic_race.black,
	demographic_race.american_indian_and_alaska_native,
	demographic_race.asian,
	demographic_race.native_hawaiian_and_other_pacific_islander,
	demographic_race.some_other_race,
	demographic_race.hispanic_or_latino_total,
	demographic_race.hispanic_or_latino,
	demographic_race.not_hispanic_or_latino
FROM
	demographic_race
WHERE
	demographic_race.year = 2022
	AND demographic_race.zipcode = '92601'
	AND demographic_race.race_total_populatio > 0
	AND demographic_race.one_race = 'asian'
	AND demographic_race.two_or_more_races = 'asian'
	AND demographic_race.white = 0
	AND demographic_race.black = 0
	AND demographic_race.american_indian_and_alaska_native = 0
	AND demographic_race.asian = 0
	AND demographic_race.native_hawaiian_and_other_pacific_islander = 0
	AND demographic_race.some_other_race = 0
	AND demographic_race.hispanic_or_latino_total = 0
	AND demographic_race.hispanic_or_latino = 0
	AND demographic_race.not_hispanic_or_latino = 0
	AND demographic_race.race_total_populatio > 0
	AND demographic_race.one_race = 'asian'
	AND demographic_race.two_or_more_races = 'asian'
	AND demographic_race.white = 0
	AND demographic_race.black = 0
	AND demographic_race.american_indian_and_alaska_native = 0
	AND demographic_race.asian = 0
	AND demographic_race.native_hawaiian_and_other_pacific_islander = 0
	AND demographic_race.some_other_race = 0
	AND demographic_race.hispanic_or_latino_total = 0
	AND demographic_race.hispanic_or_latino = 0
	AND demographic_race.not_hispanic_or_latino = 0
	AND demographic_race.race_total_populatio > 0
	AND demographic_race.one_race = 'asian'
	AND demographic_race.two_or_more_races = 'asian'
	AND demographic_race.white = 0
	AND demographic_race.black = 0
	AND demographic_race.american_indian_and_alaska_native = 0
	AND demographic_race.asian = 0
	AND demographic_race.native_hawaiian_and_other_pacific_islander = 0
	AND demographic_race.some_other_race = 0
	AND demographic_race.hispanic_or_latino_total = 0
	AND demographic_race.hispanic_or_latino = 0
	AND demographic_race.not_hispanic_or_latino = 0
	AND demographic_race.race_total_populatio > 0
	AND demographic_race.one_race = 'asian'
	AND demographic_race.two_or_more_races = 'asian'
	AND demographic_race.white = 0
	AND demographic_race.black = 0
	AND demographic_race.american_indian_and_alaska_native = 0
	AND demographic_race.asian = 0
	AND demographic_race.native_hawaiian_and_other_pacific_islander = 0
	AND demographic_race.some_other_race = 0
	AND demographic_race.hispanic_or_latino_total = 0
	AND demographic_race.hispanic_or_latino = 0
	AND demographic_race.not_hispanic_or_latino = 0
	AND demographic_race.race_total_populatio > 0
	AND demographic_race.one_race = 'asian'
	AND demographic_race.two_or_more_races = 'asian'
	AND demographic_race.white = 0
	AND demographic_race.black = 0
	AND demographic_race.american_indian_and_alaska_native = 0
	AND demographic_race.asian = 0
	AND demographic_race.native_hawaiian_and_other_pacific_islander = 0
	AND demographic_race.some_other_race = 0
	AND demographic_race.hispanic_or_latino_total = 0
	AND demographic_race.hispanic_or_latino = 0
	AND demographic_race.not_hispanic_or_latino = 0
	AND demographic_race.race_total_populatio > 0
	AND demographic_race.one_race = 'asian'
	AND demographic_race.two_or_more_races = 'asian'
	AND demographic_race.white = 0
	AND demographic_race.black = 0
	AND demographic_race.american_indian_and_alaska_native = 0
	AND demographic_race.asian = 0
	AND demographic_race.native_hawaiian_and_other_pacific_islander = 0
	AND demographic_race.some_other_race = 0
	AND demographic_race.hispanic_or_latino_total = 0
	AND demographic_race.hispanic_or_latino = 0
	AND demographic_race.not_hispanic_or_latino = 0
	AND demographic_race.race_total_populatio > 0
	AND demographic_race.one_race = 'asian'
	AND demographic_race.two_or_more_races = 'asian'
	AND demographic_race.white = 0
	AND demographic_race.black = 0
	AND demographic_race.american_indian_and_alaska_native = 0
	AND demographic_race.asian = 0
	AND demographic_race.native_hawaiian_and_other_pacific_islander = 0
	AND demographic_race.some_other_race = 0
	AND demographic_race.hispanic_or_latino_total = 0
	AND demographic_race.hispanic_or_latino = 0
	AND demographic_race.not_hispanic_or_latino = 0
	AND demographic_race.race_total_populatio > 0
	AND demographic_race.one_race = 'asian'
	AND demographic_race.two_or_more_races = 'asian'
	AND demographic_race.white = 0
	AND demographic_race.black = 0
	AND demographic_race.american_indian_and_alaska_native = 0
	AND demographic_race.asian = 0
	AND demographic_race.native_hawaiian_and_other_pacific_islander = 0
	AND demographic_race.some_other_race = 0
	AND demographic_race.hispanic_or_latino_total = 0
	AND demographic_race.hispanic_or_latino = 0
	AND demographic_race.not_hispanic_or_lat

====================================================================================================

PROMPT 30:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 30:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")

# create a cursor
cur = conn.cursor()

# create a query
query = """
SELECT
	demographic_race.zipcode,
	demographic_race.black,
	demographic_race.white,
	demographic_race.asian,
	demographic_race.native_hawaiian_and_other_pacific_islander,
	demographic_race.some_other_race,
	demographic_race.hispanic_or_latino,
	demographic_race.not_hispanic_or_latino,
	demographic_race.hispanic_or_latino_total,
	demographic_race.race_total_populatio,
	demographic_race.one_race,
	demographic_race.two_or_more_races,
	demographic_race.year
FROM
	demographic_race
WHERE
	demographic_race.year = 2022
	AND demographic_race.zipcode = '94501'
	AND demographic_race.race_total_populatio > 0
	AND demographic_race.one_race = 'black'
	AND demographic_race.two_or_more_races = 'black'
	AND demographic_race.hispanic_or_latino_total = 'black'
	AND demographic_race.not_hispanic_or_latino = 'black'
	AND demographic_race.white = 0
	AND demographic_race.asian = 0
	AND demographic_race.native_hawaiian_and_other_pacific_islander = 0
	AND demographic_race.some_other_race = 0
	AND demographic_race.hispanic_or_latino = 0
	AND demographic_race.not_hispanic_or_latino = 0
	AND demographic_race.black = 1
	AND demographic_race.race_total_populatio = 1
	AND demographic_race.one_race = 1
	AND demographic_race.two_or_more_races = 1
	AND demographic_race.year = 2022
	AND demographic_race.zipcode = '94501'
	AND demographic_race.race_total_populatio = 1
	AND demographic_race.one_race = 1
	AND demographic_race.two_or_more_races = 1
	AND demographic_race.hispanic_or_latino_total = 1
	AND demographic_race.not_hispanic_or_latino = 1
	AND demographic_race.black = 1
	AND demographic_race.race_total_populatio = 1
	AND demographic_race.one_race = 1
	AND demographic_race.two_or_more_races = 1
	AND demographic_race.year = 2022
	AND demographic_race.zipcode = '94501'
	AND demographic_race.race_total_populatio = 1
	AND demographic_race.one_race = 1
	AND demographic_race.two_or_more_races = 1
	AND demographic_race.hispanic_or_latino_total = 1
	AND demographic_race.not_hispanic_or_latino = 1
	AND demographic_race.black = 1
	AND demographic_race.race_total_populatio = 1
	AND demographic_race.one_race = 1
	AND demographic_race.two_or_more_races = 1
	AND demographic_race.year = 2022
	AND demographic_race.zipcode = '94501'
	AND demographic_race.race_total_populatio = 1
	AND demographic_race.one_race = 1
	AND demographic_race.two_or_more_races = 1
	AND demographic_race.hispanic_or_latino_total = 1
	AND demographic_race.not_hispanic_or_latino = 1
	AND demographic_race.black = 1
	AND demographic_race.race_total_populatio = 1
	AND demographic_race.one_race = 1
	AND demographic_race.two_or_more_races = 1
	AND demographic_race.year = 2022
	AND demographic_race.zipcode = '94501'
	AND demographic_race.race_total_populatio = 1
	AND demographic_race.one_race = 1
	AND demographic_race.two_or_more_races = 1
	AND demographic_race.hispanic_or_latino_total = 1
	AND demographic_race.not_hispanic_or_latino = 1
	AND demographic_race.black = 1
	AND demographic_race.race_total_populatio = 1
	AND demographic_race.one_race = 1
	AND demographic_race.two_or_more_races = 1
	AND demographic_race.year = 2022
	AND demographic_race.zipcode = '94501'
	AND demographic_race.race_total_populatio = 1
	AND demographic_race.one_race = 1
	AND demographic_race.two_or_more_races = 1
	AND demographic_race.hispanic_or_latino_total = 1
	AND demographic_race.not_hispanic_or_latino = 1
	AND demographic_race.black = 1
	AND demographic_race.race_total_populatio = 1
	AND demographic_race.one_race = 1
	AND demographic_race.two_or_more_races = 1
	AND demographic_race.year = 2022
	AND demographic_race.zipcode = '94501'
	AND demographic_race.race_total_populatio = 1
	AND demographic_race.one_race = 1
	AND demographic_race.two_or_more_races = 1
	AND demographic_race.hispanic_or_latino_total = 1
	AND demographic_race.not_hispanic_or_latino = 1
	AND demographic_race.black = 1
	AND demographic_race.race_total_populatio = 1
	AND demographic_race.one_race = 1
	AND demographic_race.two_or_more_races = 1
	AND demographic_race.year = 2022
	AND demographic_race.zipcode = '94501'
	AND demographic_race.race_total_populatio = 1
	AND demographic_race.one_race = 1
	AND demographic_race.two_or_more_races = 1
	AND demographic_race.hispanic_or_latino_total = 1
	AND demographic_race.not_hispanic_or_latino = 1
	AND demographic_race.black = 1
	AND demographic_race.race_total_populatio = 1
	AND demographic_race.one_race = 1
	AND demographic_race.two_or_more_races = 1
	AND demographic_race.year = 2022
	AND demographic_race.zipcode = '94501'
	AND demographic_race.race_total_populatio = 1
	AND demographic_race.one_race = 1
	AND demographic_race.two_or_more_races = 1
	AND demographic_race.hispanic_or_latino_total = 1
	AND demographic_race.not_hispanic_or_latino = 1
	AND demographic_race.black = 1
	AND demographic_race.race_total_populatio = 1
	AND demographic_race.one_race = 1
	AND demographic_race.two_or_more_races = 1
	AND demographic_race.year = 2022
	AND demographic_race.zipcode = '94501'
	AND demographic_race.race_total_populatio = 1

====================================================================================================

PROMPT 31:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Hispanics/Latinos with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 31:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Hispanics/Latinos with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import psycopg2.extras

# connect to database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")

# create a cursor
cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

# execute a query
cur.execute("""
	SELECT 
		demographic_race.year,
		demographic_race.zipcode,
		demographic_race.race_total_populatio,
		demographic_race.one_race,
		demographic_race.two_or_more_races,
		demographic_race.white,
		demographic_race.black,
		demographic_race.american_indian_and_alaska_native,
		demographic_race.asian,
		demographic_race.native_hawaiian_and_other_pacific_islander,
		demographic_race.some_other_race,
		demographic_race.hispanic_or_latino_total,
		demographic_race.hispanic_or_latino,
		demographic_race.not_hispanic_or_latino
	FROM
		demographic_race
	WHERE
		demographic_race.year = 2022
	ORDER BY
		demographic_race.zipcode;
""")

# get the results
results = cur.fetchall()

# print the results
for result in results:
	print(result)

# close the cursor
cur.close()

# close the connection
conn.close()

====================================================================================================

PROMPT 32:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Native Hawaiian and other Pacific Inlander with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 32:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Native Hawaiian and other Pacific Inlander with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import psycopg2.extras

# connect to the database
try:
	conn = psycopg2.connect("dbname=postgres user=postgres password=postgres host=localhost port=5432")
	cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
except:
	print("I am unable to connect to the database")

# get the data
cur.execute("""
	SELECT *
	FROM demographic_race
	WHERE year = 2022
	ORDER BY zipcode
""")

# get the data
data = cur.fetchall()

# close the connection
cur.close()
conn.close()

# create a dictionary to hold the data
data_dict = {}

# loop through the data
for row in data:
	# if the zipcode is not in the dictionary, add it
	if row[1] not in data_dict:
		data_dict[row[1]] = {
			"zipcode": row[1],
			"one_race": 0,
			"two_or_more_races": 0,
			"white": 0,
			"black": 0,
			"american_indian_and_alaska_native": 0,
			"asian": 0,
			"native_hawaiian_and_other_pacific_islander": 0,
			"some_other_race": 0,
			"hispanic_or_latino_total": 0,
			"hispanic_or_latino": 0,
			"not_hispanic_or_latino": 0,
			"race_total_populatio": 0,
			"total_population": 0
		}
	# add the data to the dictionary
	data_dict[row[1]]["one_race"] += row[3]
	data_dict[row[1]]["two_or_more_races"] += row[4]
	data_dict[row[1]]["white"] += row[5]
	data_dict[row[1]]["black"] += row[6]
	data_dict[row[1]]["american_indian_and_alaska_native"] += row[7]
	data_dict[row[1]]["asian"] += row[8]
	data_dict[row[1]]["native_hawaiian_and_other_pacific_islander"] += row[9]
	data_dict[row[1]]["some_other_race"] += row[10]
	data_dict[row[1]]["hispanic_or_latino_total"] += row[11]
	data_dict[row[1]]["hispanic_or_latino"] += row[12]
	data_dict[row[1]]["not_hispanic_or_latino"] += row[13]
	data_dict[row[1]]["race_total_populatio"] += row[2]
	data_dict[row[1]]["total_population"] += row[14]

# create a list to hold the SQL statements
statements = []

# loop through the data
for zipcode in data_dict:
	# if the zipcode is in the dictionary, add the SQL statement
	if data_dict[zipcode]["one_race"] > 0:
		statements.append(f"SELECT zipcode, one_race, total_population, one_race / total_population * 100 as one_race_percentage FROM demographic_race WHERE zipcode = '{zipcode}'")
	if data_dict[zipcode]["two_or_more_races"] > 0:
		statements.append(f"SELECT zipcode, two_or_more_races, total_population, two_or_more_races / total_population * 100 as two_or_more_races_percentage FROM demographic_race WHERE zipcode = '{zipcode}'")
	if data_dict[zipcode]["white"] > 0:
		statements.append(f"SELECT zipcode, white, total_population, white / total_population * 100 as white_percentage FROM demographic_race WHERE zipcode = '{zipcode}'")
	if data_dict[zipcode]["black"] > 0:
		statements.append(f"SELECT zipcode, black, total_population, black / total_population * 100 as black_percentage FROM demographic_race WHERE zipcode = '{zipcode}'")
	if data_dict[zipcode]["american_indian_and_alaska_native"] > 0:
		statements.append(f"SELECT zipcode, american_indian_and_alaska_native, total_population, american_indian_and_alaska_native / total_population * 100 as american_indian_and_alaska_native_percentage FROM demographic_race WHERE zipcode = '{zipcode}'")
	if data_dict[zipcode]["asian"] > 0:
		statements.append(f"SELECT zipcode, asian, total_population, asian / total_population * 100 as asian_percentage FROM demographic_race WHERE zipcode = '{zipcode}'")
	if data_dict[zipcode]["native_hawaiian_and_other_pacific_islander"] > 0:
		statements.append(f"SELECT zipcode, native_hawaiian_and_other_pacific_islander, total_population, native_hawaiian_and_other_pacific_islander / total_population * 100 as native_hawaiian_and_other_pacific_islander_percentage FROM demographic_race WHERE zipcode = '{zipcode}'")
	if data_dict[zipcode]["some_other_race"] > 0:
		statements.append(f"SELECT zipcode, some_other_race, total_population, some_other_race / total_population * 100 as some_other_race_percentage FROM demographic_race WHERE zipcode = '{zipcode}'")
	if data_dict[zipcode]["hispanic_or_latino_total"] > 0:
		statements.append(f"SELECT zipcode, hispanic_or_latino_total, total_population, hispanic_or_latino_total / total_population * 100 as hispanic_or_latino_total_percentage FROM demographic_race WHERE zipcode = '{zipcode}'")
	if data_dict[zipcode]["hispanic_or_latino"] > 0:
		statements.append(f"SELECT zipcode, hispanic_or_latino, total_population, hispanic_or_latino / total_population * 100 as hispanic_or_latino_percentage FROM demographic_race WHERE zipcode = '{zipcode}'")
	if data_dict[zipcode]["not_hispanic_or_latino"] > 0:
		statements.append(f"SELECT zipcode, not_hispanic_or_latino, total_population, not_hispanic_or_latino / total_population * 100 as not_hispanic_or_latino_percentage FROM demographic_race WHERE zipcode = '{zipcode}'")

# if the list is not empty, print the list
if statements:
	print("\n".join(statements))
else:
	print("INSUFFICENT")


====================================================================================================

PROMPT 33:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Whites with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 33:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Whites with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")

# create a cursor
cur = conn.cursor()

# create a query
query = """
SELECT demographic_race.zipcode, demographic_race.white, demographic_race.black, demographic_race.american_indian_and_alaska_native, demographic_race.asian, demographic_race.native_hawaiian_and_other_pacific_islander, demographic_race.some_other_race, demographic_race.hispanic_or_latino, demographic_race.not_hispanic_or_latino
FROM demographic_race
WHERE demographic_race.year = 2022
ORDER BY demographic_race.zipcode;
"""

# execute the query
cur.execute(query)

# get the results
rows = cur.fetchall()

# create a dataframe
df = pd.DataFrame(rows, columns=['zipcode', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino', 'not_hispanic_or_latino'])

# print the dataframe
print(df)

# get the total population for each zipcode
total_population = df.groupby('zipcode').sum()

# get the total population for each race
total_race_population = df.groupby(['zipcode', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino', 'not_hispanic_or_latino']).sum()

# get the percentage of each race
percentage_race = total_race_population.div(total_population)

# get the percentage of each race
percentage_race = percentage_race.round(2)

# get the percentage of each race
percentage_race = percentage_race.reset_index()

# print the percentage of each race
print(percentage_race)

# get the most common race
most_common_race = percentage_race.groupby('zipcode').sum().idxmax(axis=1)

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.reset_index()

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'id':'most_common_race'})

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'zipcode':'zipcode'})

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'most_common_race':'most_common_race'})

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'most_common_race':'most_common_race'})

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'most_common_race':'most_common_race'})

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'most_common_race':'most_common_race'})

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'most_common_race':'most_common_race'})

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'most_common_race':'most_common_race'})

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'most_common_race':'most_common_race'})

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'most_common_race':'most_common_race'})

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'most_common_race':'most_common_race'})

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'most_common_race':'most_common_race'})

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'most_common_race':'most_common_race'})

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'most_common_race':'most_common_race'})

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'most_common_race':'most_common_race'})

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'most_common_race':'most_common_race'})

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'most_common_race':'most_common_race'})

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'most_common_race':'most_common_race'})

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'most_common_race':'most_common_race'})

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'most_common_race':'most_common_race'})

# print the most common race
print(most_common_race)

# get the most common race
most_common_race = most_common_race.rename(columns={'most_common_race':'most_common_

====================================================================================================

PROMPT 34:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)
household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 34:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)
household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import pandas as pd
import numpy as np

# import data
df_demo_race = pd.read_csv('../data/demographic_race.csv')
df_household_income_percent_with_mortgage = pd.read_csv('../data/household_income_percent_with_mortgage.csv')

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_race['zipcode'].unique())

# create a list of years
years = list(df_demo_race['year'].unique())

# create a list

====================================================================================================

PROMPT 35:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those travelling in car alone between year 2019 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 35:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those travelling in car alone between year 2019 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(
	host = "localhost",
	database = "postgres",
	user = "postgres",
	password = "postgres"
)

# create a cursor
cur = conn.cursor()

# create a query
query = """
	SELECT
		zipcode,
		(CAST(car_alone AS FLOAT) - CAST(car_pool AS FLOAT)) / CAST(car_alone AS FLOAT)
	FROM
		economic_commute_to_work
	WHERE
		year = 2019
	AND
		zipcode = '30303'
	ORDER BY
		(CAST(car_alone AS FLOAT) - CAST(car_pool AS FLOAT)) / CAST(car_alone AS FLOAT)
	DESC
	LIMIT 1;
"""

# execute the query
cur.execute(query)

# get the results
results = cur.fetchall()

# print the results
print(results)

# close the cursor
cur.close()

# close the connection
conn.close()

====================================================================================================

PROMPT 36:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in mean commute time between 2017 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 36:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in mean commute time between 2017 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(
	host = "localhost",
	database = "postgres",
	user = "postgres",
	password = "postgres"
)

# create a cursor
cur = conn.cursor()

# create a query
query = """
	SELECT 
		economic_commute_to_work.year,
		economic_commute_to_work.id,
		economic_commute_to_work.zipcode,
		economic_commute_to_work.total_workers,
		economic_commute_to_work.car_alone,
		economic_commute_to_work.car_pool,
		economic_commute_to_work.public_transport,
		economic_commute_to_work.walk,
		economic_commute_to_work.other,
		economic_commute_to_work.work_from_home,
		economic_commute_to_work.mean_travel_time
	FROM economic_commute_to_work
	WHERE economic_commute_to_work.zipcode = '30303'
	ORDER BY economic_commute_to_work.year, economic_commute_to_work.id;
"""

# execute the query
cur.execute(query)

# get the results
results = cur.fetchall()

# close the cursor
cur.close()

# close the connection
conn.close()

# create a dataframe
df = pd.DataFrame(results)

# print the dataframe
print(df)

# create a query
query = """
	SELECT 
		economic_commute_to_work.year,
		economic_commute_to_work.id,
		economic_commute_to_work.zipcode,
		economic_commute_to_work.total_workers,
		economic_commute_to_work.car_alone,
		economic_commute_to_work.car_pool,
		economic_commute_to_work.public_transport,
		economic_commute_to_work.walk,
		economic_commute_to_work.other,
		economic_commute_to_work.work_from_home,
		economic_commute_to_work.mean_travel_time
	FROM economic_commute_to_work
	WHERE economic_commute_to_work.zipcode = '30303'
	ORDER BY economic_commute_to_work.year, economic_commute_to_work.id;
"""

# execute the query
cur.execute(query)

# get the results
results = cur.fetchall()

# close the cursor
cur.close()

# close the connection
conn.close()

# create a dataframe
df = pd.DataFrame(results)

# print the dataframe
print(df)

# create a query
query = """
	SELECT 
		economic_commute_to_work.year,
		economic_commute_to_work.id,
		economic_commute_to_work.zipcode,
		economic_commute_to_work.total_workers,
		economic_commute_to_work.car_alone,
		economic_commute_to_work.car_pool,
		economic_commute_to_work.public_transport,
		economic_commute_to_work.walk,
		economic_commute_to_work.other,
		economic_commute_to_work.work_from_home,
		economic_commute_to_work.mean_travel_time
	FROM economic_commute_to_work
	WHERE economic_commute_to_work.zipcode = '30303'
	ORDER BY economic_commute_to_work.year, economic_commute_to_work.id;
"""

# execute the query
cur.execute(query)

# get the results
results = cur.fetchall()

# close the cursor
cur.close()

# close the connection
conn.close()

# create a dataframe
df = pd.DataFrame(results)

# print the dataframe
print(df)

# create a query
query = """
	SELECT 
		economic_commute_to_work.year,
		economic_commute_to_work.id,
		economic_commute_to_work.zipcode,
		economic_commute_to_work.total_workers,
		economic_commute_to_work.car_alone,
		economic_commute_to_work.car_pool,
		economic_commute_to_work.public_transport,
		economic_commute_to_work.walk,
		economic_commute_to_work.other,
		economic_commute_to_work.work_from_home,
		economic_commute_to_work.mean_travel_time
	FROM economic_commute_to_work
	WHERE economic_commute_to_work.zipcode = '30303'
	ORDER BY economic_commute_to_work.year, economic_commute_to_work.id;
"""

# execute the query
cur.execute(query)

# get the results
results = cur.fetchall()

# close the cursor
cur.close()

# close the connection
conn.close()

# create a dataframe
df = pd.DataFrame(results)

# print the dataframe
print(df)

# create a query
query = """
	SELECT 
		economic_commute_to_work.year,
		economic_commute_to_work.id,
		economic_commute_to_work.zipcode,
		economic_commute_to_work.total_workers,
		economic_commute_to_work.car_alone,
		economic_commute_to_work.car_pool,
		economic_commute_to_work.public_transport,
		economic_commute_to_work.walk,
		economic_commute_to_work.other,
		economic_commute_to_work.work_from_home,
		economic_commute_to_work.mean_travel_time
	FROM economic_commute_to_work
	WHERE economic_commute_to_work.zipcode = '30303'
	ORDER BY economic_commute_to_work.year, economic_commute_to_work.id;
"""

# execute the query
cur.execute(query)

# get the results
results = cur.fetchall()

# close the cursor
cur.close()

# close the connection
conn.close()

# create a dataframe
df = pd.DataFrame(results)

# print the dataframe
print(df)

# create a query
query = """
	SELECT 
		economic_commute_to_work.year,
		economic_commute_to_work.id,
		economic_commute_to_work.zipcode,
		economic_commute_to_work.total_workers,
		economic_commute_to_work.car_alone,
		economic_commute_to_work.car_pool,
		economic_commute_to_work.public_transport,
		economic_commute_to_work.walk,
		economic_commute_to_work.other,
		economic_commute_to_work.work_from_home,
		economic_commute_to_work.mean_travel_time
	FROM economic_commute_to_work
	WHERE economic_commute_to_work.zipcode = '30303'
	ORDER BY economic_commute_to_work.year, economic_commute_to_work.id;
"""

# execute the query
cur.execute(query)

# get the results
results = cur.

====================================================================================================

PROMPT 37:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those working from home between year 2019 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 37:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those working from home between year 2019 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# create a cursor
cur = conn.cursor()

# create a query
query = """
SELECT
	zipcode,
	(CAST(2019 as float) - CAST(2020 as float))/CAST(2019 as float)
FROM
	economic_commute_to_work
WHERE
	zipcode = '30303'
"""

# execute the query
cur.execute(query)

# get the results
results = cur.fetchall()

# print the results
print(results)

# close the cursor
cur.close()

# close the connection
conn.close()

====================================================================================================

PROMPT 38:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of each commute type when commuting to work.

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 38:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of each commute type when commuting to work.

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd
import numpy as np

# Create a dataframe of the relavent data
df = pd.read_csv('economic_commute_to_work.csv')

# Create a list of the relevant columns
cols = ['year', 'id', 'zipcode', 'total_workers', 'car_alone', 'car_pool', 'public_transport', 'walk', 'other', 'work_from_home', 'mean_travel_time']

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df_new = df[cols]

# Create a new dataframe with the relevant columns
df

====================================================================================================

PROMPT 39:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get median and mean household income for each year.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 39:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get median and mean household income for each year.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;

# Get the median and mean income for each year
# SELECT year, median_household_income, mean_household_income
# FROM economic_income_and_benefits
# GROUP BY year
# ORDER BY year;


====================================================================================================

PROMPT 40:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of households with and without mortgage for each year.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 40:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of households with and without mortgage for each year.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your code here

# Get the year, id, and zipcode
# Get the number of units with and without mortgage
# Get the number of units with and without mortgage for each year
# Get the percentage of households with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number of units with and without mortgage for each year
# Get the average number

====================================================================================================

PROMPT 41:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get mean commute time and average housing value.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 41:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get mean commute time and average housing value.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "housing_prices",
    user = "postgres",
    password = "postgres"
)

# create a cursor
cur = conn.cursor()

# create a function to get the mean commute time and housing value for a given zipcode
def get_commute_and_housing_value(zipcode):
    # get the mean commute time and housing value for a given zipcode
    commute_time_query = """
        SELECT mean_commute_time, housing_value
        FROM economic_income_and_benefits
        WHERE zipcode = %s
    """
    housing_value_query = """
        SELECT housing_value
        FROM housing_value
        WHERE zipcode = %s
    """
    # execute the query
    cur.execute(commute_time_query, (zipcode,))
    commute_time = cur.fetchone()
    cur.execute(housing_value_query, (zipcode,))
    housing_value = cur.fetchone()
    # return the mean commute time and housing value
    return (commute_time, housing_value)

# create a function to get the mean commute time and housing value for a given zipcode
def get_mean_commute_time(zipcode):
    # get the mean commute time for a given zipcode
    commute_time_query = """
        SELECT mean_commute_time
        FROM economic_income_and_benefits
        WHERE zipcode = %s
    """
    # execute the query
    cur.execute(commute_time_query, (zipcode,))
    commute_time = cur.fetchone()
    # return the mean commute time
    return commute_time[0]

# create a function to get the housing value for a given zipcode
def get_housing_value(zipcode):
    # get the housing value for a given zipcode
    housing_value_query = """
        SELECT housing_value
        FROM housing_value
        WHERE zipcode = %s
    """
    # execute the query
    cur.execute(housing_value_query, (zipcode,))
    housing_value = cur.fetchone()
    # return the housing value
    return housing_value[0]

# create a function to get the median commute time and housing value for a given zipcode
def get_median_commute_time(zipcode):
    # get the median commute time for a given zipcode
    commute_time_query = """
        SELECT median_commute_time
        FROM economic_income_and_benefits
        WHERE zipcode = %s
    """
    # execute the query
    cur.execute(commute_time_query, (zipcode,))
    commute_time = cur.fetchone()
    # return the median commute time
    return commute_time[0]

# create a function to get the median housing value for a given zipcode
def get_median_housing_value(zipcode):
    # get the median housing value for a given zipcode
    housing_value_query = """
        SELECT housing_value
        FROM housing_value
        WHERE zipcode = %s
    """
    # execute the query
    cur.execute(housing_value_query, (zipcode,))
    housing_value = cur.fetchone()
    # return the median housing value
    return housing_value[0]

# create a function to get the average housing value for a given zipcode
def get_average_housing_value(zipcode):
    # get the average housing value for a given zipcode
    housing_value_query = """
        SELECT housing_value
        FROM housing_value
        WHERE zipcode = %s
    """
    # execute the query
    cur.execute(housing_value_query, (zipcode,))
    housing_value = cur.fetchone()
    # return the average housing value
    return housing_value[0]

# create a function to get the average commute time for a given zipcode
def get_average_commute_time(zipcode):
    # get the average commute time for a given zipcode
    commute_time_query = """
        SELECT mean_commute_time
        FROM economic_income_and_benefits
        WHERE zipcode = %s
    """
    # execute the query
    cur.execute(commute_time_query, (zipcode,))
    commute_time = cur.fetchone()
    # return the average commute time
    return commute_time[0]

# create a function to get the average housing value for a given zipcode
def get_average_housing_value(zipcode):
    # get the average housing value for a given zipcode
    housing_value_query = """
        SELECT housing_value
        FROM housing_value
        WHERE zipcode = %s
    """
    # execute the query
    cur.execute(housing_value_query, (zipcode,))
    housing_value = cur.fetchone()
    # return the average housing value
    return housing_value[0]

# create a function to get the average commute time for a given zipcode
def get_average_commute_time(zipcode):
    # get the average commute time for a given zipcode
    commute_time_query = """
        SELECT mean_commute_time
        FROM economic_income_and_benefits
        WHERE zipcode = %s
    """
    # execute the query
    cur.execute(commute_time_query, (zipcode,))
    commute_time = cur.fetchone()
    # return the average commute time
    return commute_time[0]

# create a function to get the average housing value for a given zipcode
def get_average_housing_value(zipcode):
    # get the average housing value for a given zipcode
    housing_value_query = """
        SELECT housing_value
        FROM housing_value
        WHERE zipcode = %s
    """
    # execute the query
    cur.execute(housing_value_query, (zipcode,))
    housing_value = cur.fetchone()
    # return the average housing value
    return housing_value[0]

# create a function to get the average commute time for a given zipcode
def get_average_commute_time(zipcode):
    # get the average commute time for a given zipcode
    commute_time_query = """
        SELECT mean_commute_time
        FROM economic_income_and_benefits
        WHERE zipcode = %s
    """
    # execute the query
    cur.execute(commute_time_query, (zipcode,))
    commute_time = cur.fetchone()
    # return the average commute time
    return commute_time[0]

# create a function to get the average housing value for a given zipcode
def get_average_housing_value(zipcode):
    # get the average housing value for a given zipcode
    housing_value_query = """
        SELECT housing_value
        FROM housing_value
        WHERE zipcode = %s
    """
    # execute the query
    cur.execute(housing_value_query, (zipcode,))
    housing_value = cur.fetchone()
    # return the average housing value
    return housing_value[0]

# create a function to get the average commute time for a given zipcode
def get_average_commute_time(zipcode):
    # get the average commute time for a given zipcode
    commute_time_query = """
        SELECT mean_commute_time
        FROM economic_income_and_benefits
        WHERE zipcode = %s
    """
    # execute the query
    cur.execute(commute_time_query, (zipcode,))
    commute_time = cur.fetch

====================================================================================================

PROMPT 42:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get mean commute time by zipcode in the year 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 42:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get mean commute time by zipcode in the year 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2

# connect to the database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")

# create a cursor
cur = conn.cursor()

# create a query
query = "SELECT mean_household_income, total_households, zipcode FROM economic_income_and_benefits WHERE year = 2022 AND mean_household_income > 0 AND total_households > 0 AND zipcode = '94501' ORDER BY mean_household_income DESC LIMIT 1"

# execute the query
cur.execute(query)

# fetch the results
rows = cur.fetchall()

# print the results
for row in rows:
	print(row)

# close the cursor
cur.close()

# close the connection
conn.close()


====================================================================================================

PROMPT 43:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average housing rent and mean household income across all zipcodes for the year 2022.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)
economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 43:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average housing rent and mean household income across all zipcodes for the year 2022.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)
economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import pandas as pd

# get the data
housing_rent = pd.read_csv("housing_rent.csv")
economic_income_and_benefits = pd.read_csv("economic_income_and_benefits.csv")

# get the year
year = 2022

# get the average housing rent and mean household income
# for the year 2022
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
# for the zipcode
#

====================================================================================================

PROMPT 44:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 44:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")

# create a cursor
cur = conn.cursor()

# create a query
query = """
SELECT 
	zipcode, 
	total_households, 
	median_household_income, 
	mean_household_income
FROM economic_income_and_benefits
WHERE year = 2022;
"""

# execute the query
cur.execute(query)

# get the results
rows = cur.fetchall()

# close the cursor
cur.close()

# close the connection
conn.close()

# create a dataframe
df = pd.DataFrame(rows)

# print the dataframe
print(df)

# get the median household income
median_household_income = df.iloc[0,2]

# get the mean household income
mean_household_income = df.iloc[0,3]

# print the median household income
print(median_household_income)

# print the mean household income
print(mean_household_income)

# create a query
query = """
SELECT 
	zipcode, 
	total_households, 
	median_household_income, 
	mean_household_income
FROM economic_income_and_benefits
WHERE year = 2022 AND median_household_income > mean_household_income;
"""

# execute the query
cur.execute(query)

# get the results
rows = cur.fetchall()

# close the cursor
cur.close()

# close the connection
conn.close()

# create a dataframe
df = pd.DataFrame(rows)

# print the dataframe
print(df)

# get the median household income
median_household_income = df.iloc[0,2]

# get the mean household income
mean_household_income = df.iloc[0,3]

# print the median household income
print(median_household_income)

# print the mean household income
print(mean_household_income)

# create a query
query = """
SELECT 
	zipcode, 
	total_households, 
	median_household_income, 
	mean_household_income
FROM economic_income_and_benefits
WHERE year = 2022 AND median_household_income < mean_household_income;
"""

# execute the query
cur.execute(query)

# get the results
rows = cur.fetchall()

# close the cursor
cur.close()

# close the connection
conn.close()

# create a dataframe
df = pd.DataFrame(rows)

# print the dataframe
print(df)

# get the median household income
median_household_income = df.iloc[0,2]

# get the mean household income
mean_household_income = df.iloc[0,3]

# print the median household income
print(median_household_income)

# print the mean household income
print(mean_household_income)

# create a query
query = """
SELECT 
	zipcode, 
	total_households, 
	median_household_income, 
	mean_household_income
FROM economic_income_and_benefits
WHERE year = 2022 AND median_household_income < mean_household_income;
"""

# execute the query
cur.execute(query)

# get the results
rows = cur.fetchall()

# close the cursor
cur.close()

# close the connection
conn.close()

# create a dataframe
df = pd.DataFrame(rows)

# print the dataframe
print(df)

# get the median household income
median_household_income = df.iloc[0,2]

# get the mean household income
mean_household_income = df.iloc[0,3]

# print the median household income
print(median_household_income)

# print the mean household income
print(mean_household_income)

# create a query
query = """
SELECT 
	zipcode, 
	total_households, 
	median_household_income, 
	mean_household_income
FROM economic_income_and_benefits
WHERE year = 2022 AND median_household_income < mean_household_income;
"""

# execute the query
cur.execute(query)

# get the results
rows = cur.fetchall()

# close the cursor
cur.close()

# close the connection
conn.close()

# create a dataframe
df = pd.DataFrame(rows)

# print the dataframe
print(df)

# get the median household income
median_household_income = df.iloc[0,2]

# get the mean household income
mean_household_income = df.iloc[0,3]

# print the median household income
print(median_household_income)

# print the mean household income
print(mean_household_income)

# create a query
query = """
SELECT 
	zipcode, 
	total_households, 
	median_household_income, 
	mean_household_income
FROM economic_income_and_benefits
WHERE year = 2022 AND median_household_income < mean_household_income;
"""

# execute the query
cur.execute(query)

# get the results
rows = cur.fetchall()

# close the cursor
cur.close()

# close the connection
conn.close()

# create a dataframe
df = pd.DataFrame(rows)

# print the dataframe
print(df)

# get the median household income
median_household_income = df.iloc[0,2]

# get the mean household income
mean_household_income = df.iloc[0,3]

# print the median household income
print(median_household_income)

# print the mean household income
print(mean_household_income)

# create a query
query = """
SELECT 
	zipcode, 
	total_households, 
	median_household_income, 
	mean_household_income
FROM economic_income_and_benefits
WHERE year = 2022 AND median_household_income < mean_household_income;
"""

# execute the query
cur.execute(query)

# get the results
rows = cur.fetchall()

# close the cursor
cur.close()

# close the connection
conn.close()

# create a dataframe
df = pd.DataFrame(rows)

# print the dataframe
print(df)

# get the median household income
median_household_income = df.iloc[0,2]

# get the mean household income
mean_household_income = df.iloc[0,3]

# print the median household income
print(median_household_income)

# print the mean household income
print(mean_household_income)

# create a query
query = """
SELECT 
	zipcode, 
	total_households, 
	median_household_income, 
	mean_household_income
FROM economic_income_and_benefits
WHERE year = 2022 AND median_household_income < mean_household_income;
"""

# execute the query
cur.execute(query)

# get the results
rows = cur.fetchall()

# close the cursor
cur.close()

# close the connection
conn.close()

# create a dataframe


====================================================================================================

PROMPT 45:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get change in averaged median household income from 2017 to 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 45:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get change in averaged median household income from 2017 to 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2

# connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# create a cursor
cur = conn.cursor()

# create a query
query = "SELECT * FROM economic_income_and_benefits WHERE year = 2022 AND total_households > 0"

# execute the query
cur.execute(query)

# get the results
results = cur.fetchall()

# print the results
for result in results:
	print(result)

# close the cursor
cur.close()

# close the connection
conn.close()

====================================================================================================

PROMPT 46:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, get median and mean household income over all the years.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 46:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, get median and mean household income over all the years.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your SQL query statement below

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC
# LIMIT 1;

# SELECT zipcode, AVG(mean_household_income)
# FROM economic_income_and_benefits
# WHERE year = 2012
# GROUP BY zipcode
# ORDER BY AVG(mean_household_income) DESC

====================================================================================================

PROMPT 47:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get percentage of units with mortgage and median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 47:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get percentage of units with mortgage and median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2

# connect to database
conn = psycopg2.connect(
	host = "localhost",
	database = "housing_data",
	user = "postgres",
	password = "postgres"
)

# create a cursor
cur = conn.cursor()

# create a query
query = """
SELECT 
	economic_income_and_benefits.median_household_income, housing_mortgage.units_with_mortgage, housing_mortgage.units_without_mortgage
FROM 
	economic_income_and_benefits, housing_mortgage
WHERE 
	economic_income_and_benefits.year = housing_mortgage.year
	AND economic_income_and_benefits.id = housing_mortgage.id
	AND economic_income_and_benefits.zipcode = housing_mortgage.zipcode
	AND economic_income_and_benefits.median_household_income = housing_mortgage.median_household_income
	AND economic_income_and_benefits.year = '2010'
	AND economic_income_and_benefits.id = '1'
	AND housing_mortgage.units_with_mortgage > housing_mortgage.units_without_mortgage
	AND housing_mortgage.units_with_mortgage > 0
	AND housing_mortgage.units_without_mortgage > 0
	AND housing_mortgage.median_household_income > 0
	AND housing_mortgage.median_household_income > 0
	AND housing_mortgage.zipcode = '94601'
	AND housing_mortgage.units_with_mortgage < 100
	AND housing_mortgage.units_without_mortgage < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.zipcode = '94601'
	AND housing_mortgage.units_with_mortgage < 100
	AND housing_mortgage.units_without_mortgage < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.zipcode = '94601'
	AND housing_mortgage.units_with_mortgage < 100
	AND housing_mortgage.units_without_mortgage < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.zipcode = '94601'
	AND housing_mortgage.units_with_mortgage < 100
	AND housing_mortgage.units_without_mortgage < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.zipcode = '94601'
	AND housing_mortgage.units_with_mortgage < 100
	AND housing_mortgage.units_without_mortgage < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.zipcode = '94601'
	AND housing_mortgage.units_with_mortgage < 100
	AND housing_mortgage.units_without_mortgage < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.zipcode = '94601'
	AND housing_mortgage.units_with_mortgage < 100
	AND housing_mortgage.units_without_mortgage < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.zipcode = '94601'
	AND housing_mortgage.units_with_mortgage < 100
	AND housing_mortgage.units_without_mortgage < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.zipcode = '94601'
	AND housing_mortgage.units_with_mortgage < 100
	AND housing_mortgage.units_without_mortgage < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.zipcode = '94601'
	AND housing_mortgage.units_with_mortgage < 100
	AND housing_mortgage.units_without_mortgage < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.zipcode = '94601'
	AND housing_mortgage.units_with_mortgage < 100
	AND housing_mortgage.units_without_mortgage < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.zipcode = '94601'
	AND housing_mortgage.units_with_mortgage < 100
	AND housing_mortgage.units_without_mortgage < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.zipcode = '94601'
	AND housing_mortgage.units_with_mortgage < 100
	AND housing_mortgage.units_without_mortgage < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.zipcode = '94601'
	AND housing_mortgage.units_with_mortgage < 100
	AND housing_mortgage.units_without_mortgage < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.zipcode = '94601'
	AND housing_mortgage.units_with_mortgage < 100
	AND housing_mortgage.units_without_mortgage < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.zipcode = '94601'
	AND housing_mortgage.units_with_mortgage < 100
	AND housing_mortgage.units_without_mortgage < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.zipcode = '94601'
	AND housing_mortgage.units_with_mortgage < 100
	AND housing_mortgage.units_without_mortgage < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.zipcode = '94601'
	AND housing_mortgage.units_with_mortgage < 100
	AND housing_mortgage.units_without_mortgage < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.median_household_income < 100
	AND housing_mortgage.zipcode = '94601'
	AND housing_mortgage.units_with_mortgage < 100
	AND housing_mortgage.units_without_mortgage < 100
	AND

====================================================================================================

PROMPT 48:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in the year 2022, get average housing value and median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 48:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in the year 2022, get average housing value and median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2

# connect to the database
conn = psycopg2.connect(
	host = "localhost",
	database = "housing_data",
	user = "postgres",
	password = "postgres"
)

# create a cursor
cur = conn.cursor()

# create a query
query = "SELECT housing_value.house_value_min, housing_value.house_value_max, economic_income_and_benefits.median_household_income, economic_income_and_benefits.total_households FROM housing_value, economic_income_and_benefits WHERE housing_value.year = 2022 AND housing_value.zipcode = economic_income_and_benefits.zipcode"

# execute the query
cur.execute(query)

# get the results
results = cur.fetchall()

# print the results
for result in results:
	print(result)

# close the cursor
cur.close()

# close the connection
conn.close()


====================================================================================================

PROMPT 49:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, find the change in percentage of population with no health insurance from year 2017 to 2022.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 49:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, find the change in percentage of population with no health insurance from year 2017 to 2022.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write your code here

# Write your code here
# Write

====================================================================================================

PROMPT 50:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 50:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2

# connect to database
conn = psycopg2.connect(
	host = "localhost",
	database = "postgres",
	user = "postgres",
	password = "postgres"
)

# create cursor
cur = conn.cursor()

# create query
cur.execute("""
	SELECT 
		economic_health_insurance.zipcode,
		economic_health_insurance.no_health_insurance,
		economic_health_insurance.total_population,
		housing_rent.rent_value_min,
		housing_rent.rent_value_max
	FROM economic_health_insurance
	INNER JOIN housing_rent
	ON economic_health_insurance.id = housing_rent.id
	WHERE economic_health_insurance.year = 2022
	AND economic_health_insurance.id = 1
	AND housing_rent.year = 2022
	AND housing_rent.id = 1
	AND economic_health_insurance.zipcode = housing_rent.zipcode
	AND economic_health_insurance.zipcode = '92601'
	AND housing_rent.zipcode = '92601'
""")

# fetch results
rows = cur.fetchall()

# print results
for row in rows:
	print(row)

# close cursor
cur.close()

# close connection
conn.close()

====================================================================================================

PROMPT 51:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average housing price.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 51:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average housing price.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2

# connect to database
conn = psycopg2.connect(
	host = "localhost",
	database = "postgres",
	user = "postgres",
	password = "postgres"
)

# create a cursor
cur = conn.cursor()

# create a query
cur.execute("""
	SELECT 
		economic_health_insurance.zipcode,
		economic_health_insurance.no_health_insurance,
		economic_health_insurance.with_health_insurance,
		housing_value.house_value_min,
		housing_value.house_value_max,
		economic_health_insurance.total_population,
		economic_health_insurance.year
	FROM housing_value
	INNER JOIN economic_health_insurance
	ON housing_value.id = economic_health_insurance.id
	WHERE housing_value.year = 2022
	AND economic_health_insurance.year = 2022
	AND housing_value.zipcode = economic_health_insurance.zipcode
	ORDER BY economic_health_insurance.zipcode, economic_health_insurance.year;
""")

# fetch the results
rows = cur.fetchall()

# print the results
for row in rows:
	print(f"{row[0]}, {row[1]}, {row[2]}, {row[3]}, {row[4]}, {row[5]}, {row[6]}")

# close the cursor
cur.close()

# close the connection
conn.close()

====================================================================================================

PROMPT 52:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the change in percentage of population commuting via public transport from year 2017 to 2022.

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 52:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the change in percentage of population commuting via public transport from year 2017 to 2022.

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd
import numpy as np

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    port = "5432",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT 
		economic_commute_to_work.year,
		economic_commute_to_work.id,
		economic_commute_to_work.zipcode,
		economic_commute_to_work.total_workers,
		economic_commute_to_work.car_alone,
		economic_commute_to_work.car_pool,
		economic_commute_to_work.public_transport,
		economic_commute_to_work.walk,
		economic_commute_to_work.other,
		economic_commute_to_work.work_from_home,
		economic_commute_to_work.mean_travel_time
	FROM economic_commute_to_work
	WHERE economic_commute_to_work.zipcode = '30303'
	AND economic_commute_to_work.year = '2022'
""")

# Obtain query results
rows = cur.fetchall()

# Close the cursor
cur.close()

# Close the database connection
conn.close()

# Convert query results to a dataframe
df = pd.DataFrame(rows)

# Rename the columns
df.columns = [
	"year",
	"id",
	"zipcode",
	"total_workers",
	"car_alone",
	"car_pool",
	"public_transport",
	"walk",
	"other",
	"work_from_home",
	"mean_travel_time"
]

# Convert the dataframe to a csv
df.to_csv("economic_commute_to_work.csv", index = False)

# Print the dataframe
print(df)

# Create a new dataframe
df_new = pd.DataFrame()

# Iterate over the rows of the dataframe
for i in range(0, len(df)):
	# Obtain the row
	row = df.iloc[i]

	# Obtain the year
	year = row["year"]

	# Obtain the mean travel time
	mean_travel_time = row["mean_travel_time"]

	# Obtain the number of workers
	total_workers = row["total_workers"]

	# Obtain the number of workers who commute by car alone
	car_alone = row["car_alone"]

	# Obtain the number of workers who commute by car pool
	car_pool = row["car_pool"]

	# Obtain the number of workers who commute by public transport
	public_transport = row["public_transport"]

	# Obtain the number of workers who commute by walking
	walk = row["walk"]

	# Obtain the number of workers who commute by other means
	other = row["other"]

	# Obtain the number of workers who commute from home
	work_from_home = row["work_from_home"]

	# Obtain the mean travel time
	mean_travel_time = row["mean_travel_time"]

	# Create a new row
	row_new = [
		year,
		total_workers,
		car_alone,
		car_pool,
		public_transport,
		walk,
		other,
		work_from_home,
		mean_travel_time
	]

	# Append the new row to the new dataframe
	df_new.loc[i] = row_new

# Convert the new dataframe to a csv
df_new.to_csv("economic_commute_to_work_new.csv", index = False)

# Print the new dataframe
print(df_new)

# Create a new dataframe
df_new_2 = pd.DataFrame()

# Iterate over the rows of the new dataframe
for i in range(0, len(df_new)):
	# Obtain the row
	row = df_new.iloc[i]

	# Obtain the year
	year = row[0]

	# Obtain the number of workers
	total_workers = row[1]

	# Obtain the number of workers who commute by car alone
	car_alone = row[2]

	# Obtain the number of workers who commute by car pool
	car_pool = row[3]

	# Obtain the number of workers who commute by public transport
	public_transport = row[4]

	# Obtain the number of workers who commute by walking
	walk = row[5]

	# Obtain the number of workers who commute by other means
	other = row[6]

	# Obtain the number of workers who commute from home
	work_from_home = row[7]

	# Obtain the mean travel time
	mean_travel_time = row[8]

	# Create a new row
	row_new = [
		year,
		total_workers,
		car_alone,
		car_pool,
		public_transport,
		walk,
		other,
		work_from_home,
		mean_travel_time
	]

	# Append the new row to the new dataframe
	df_new_2.loc[i] = row_new

# Convert the new dataframe to a csv
df_new_2.to_csv("economic_commute_to_work_new_2.csv", index = False)

# Print the new dataframe
print(df_new_2)

# Create a new dataframe
df_new_3 = pd.DataFrame()

# Iterate over the rows of the new dataframe
for i in range(0, len(df_new_2)):
	# Obtain the row
	row = df_new_2.iloc[i]

	# Obtain the year
	year = row[0]

	# Obtain the number of workers
	total_workers = row[1]

	# Obtain the number of workers who commute by car alone
	car_alone = row[2]

	# Obtain the number of workers who commute by car pool
	car_pool = row[3]

	# Obtain the number of workers who commute by public transport
	public_transport = row[4]

	# Obtain the number of workers who commute by walking
	walk = row[5]

	# Obtain the number of workers who commute by other means
	other = row[6]

	# Obtain the number of workers who commute from home
	work_from_home = row[7]

	# Obtain the mean travel time
	mean_travel_time = row[8]

	# Create a new row
	row_new = [
		year,
		total_workers,
		car_alone,
		car_pool,
		public_transport,
		walk,
		other,
		work_from_home,
		mean_travel_time
	]

	# Append the new row to the new dataframe
	df_new_3.loc[i] = row_new

# Convert the new dataframe to a csv
df_new_3.to_csv("economic_commute_to_work_new_3.csv", index = False)

# Print the new dataframe
print(df_new_3)

# Create a new dataframe
df_new_4 = pd.DataFrame()

# Iterate over the rows of the new dataframe
for i in range(0, len(df_new_3)):
	# Obtain the row
	row = df_new_3.iloc[i]

	# Obtain the year
	year = row

====================================================================================================

PROMPT 53:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the count of non-US citizens and foreign born population

Schema: 
	social_citizenship_status (year, id, zipcode, foreign_born_population, naturalized_us_citizen, not_a_us_citizen)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 53:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the count of non-US citizens and foreign born population

Schema: 
	social_citizenship_status (year, id, zipcode, foreign_born_population, naturalized_us_citizen, not_a_us_citizen)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here


====================================================================================================

PROMPT 54:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get the average of each ethnic group (black, white, asian) by year.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 54:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get the average of each ethnic group (black, white, asian) by year.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of the columns to be used
cols = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
cols = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
cols = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
cols = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
cols = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
cols = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
cols = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
cols = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
cols = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
cols = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
cols = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
cols = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
cols = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
cols = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
cols = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races',

====================================================================================================

PROMPT 55:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get the percentage of types of education attained by population aged 25 and above for each year.

Schema: 
	social_education_attainment (year, id, zipcode, population_25_years_and_over, less_than_9th_grade, 9th_to_12th_grade_no_diploma, high_school_graduate, some_college_no_degree, associate_degree, bachelors_degree, graduate_or_professional_degree, high_school graduate_or_higher, bachelors_degree_or_higher)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 55:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get the percentage of types of education attained by population aged 25 and above for each year.

Schema: 
	social_education_attainment (year, id, zipcode, population_25_years_and_over, less_than_9th_grade, 9th_to_12th_grade_no_diploma, high_school_graduate, some_college_no_degree, associate_degree, bachelors_degree, graduate_or_professional_degree, high_school graduate_or_higher, bachelors_degree_or_higher)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Get the year, population, and education attainment for each year.
# Get the total population for each year.
# Get the total education attainment for each year.
# Get the total education attainment for each year, divided by the total population for each year.
# Get the total education attainment for each year, divided by the total population for each year, for the population aged 25 and above.
# Get the total education attainment for each year, divided by the total population for each year, for the population aged 25 and above, and the population aged less than 9th grade.
# Get the total education attainment for each year, divided by the total population for each year, for the population aged 25 and above, and the population aged less than 9th grade, and the population aged 9th to 12th grade.
# Get the total education attainment for each year, divided by the total population for each year, for the population aged 25 and above, and the population aged less than 9th grade, and the population aged 9th to 12th grade, and the population aged high school graduate.
# Get the total education attainment for each year, divided by the total population for each year, for the population aged 25 and above, and the population aged less than 9th grade, and the population aged 9th to 12th grade, and the population aged high school graduate, and the population aged some college.
# Get the total education attainment for each year, divided by the total population for each year, for the population aged 25 and above, and the population aged less than 9th grade, and the population aged 9th to 12th grade, and the population aged high school graduate, and the population aged some college, and the population aged associate degree.
# Get the total education attainment for each year, divided by the total population for each year, for the population aged 25 and above, and the population aged less than 9th grade, and the population aged 9th to 12th grade, and the population aged high school graduate, and the population aged some college, and the population aged associate degree, and the population aged bachelors degree.
# Get the total education attainment for each year, divided by the total population for each year, for the population aged 25 and above, and the population aged less than 9th grade, and the population aged 9th to 12th grade, and the population aged high school graduate, and the population aged some college, and the population aged associate degree, and the population aged bachelors degree, and the population aged graduate or professional degree.
# Get the total education attainment for each year, divided by the total population for each year, for the population aged 25 and above, and the population aged less than 9th grade, and the population aged 9th to 12th grade, and the population aged high school graduate, and the population aged some college, and the population aged associate degree, and the population aged bachelors degree, and the population aged graduate or professional degree, and the population aged high school graduate or higher.
# Get the total education attainment for each year, divided by the total population for each year, for the population aged 25 and above, and the population aged less than 9th grade, and the population aged 9th to 12th grade, and the population aged high school graduate, and the population aged some college, and the population aged associate degree, and the population aged bachelors degree, and the population aged graduate or professional degree, and the population aged high school graduate or higher, and the population aged bachelors degree or higher.
# Get the total education attainment for each year, divided by the total population for each year, for the population aged 25 and above, and the population aged less than 9th grade, and the population aged 9th to 12th grade, and the population aged high school graduate, and the population aged some college, and the population aged associate degree, and the population aged bachelors degree, and the population aged graduate or professional degree, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher.
# Get the total education attainment for each year, divided by the total population for each year, for the population aged 25 and above, and the population aged less than 9th grade, and the population aged 9th to 12th grade, and the population aged high school graduate, and the population aged some college, and the population aged associate degree, and the population aged bachelors degree, and the population aged graduate or professional degree, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the population aged bachelors degree or higher, and the population aged graduate or professional degree or higher, and the population aged high school graduate or higher, and the

====================================================================================================

PROMPT 56:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	In year 2022, for each zipcode in Georgia, get the percentage of population with associate and bachelors degree or higher and average housing price.

Schema: 
	social_education_attainment (year, id, zipcode, population_25_years_and_over, less_than_9th_grade, 9th_to_12th_grade_no_diploma, high_school_graduate, some_college_no_degree, associate_degree, bachelors_degree, graduate_or_professional_degree, high_school graduate_or_higher, bachelors_degree_or_higher)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 56:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	In year 2022, for each zipcode in Georgia, get the percentage of population with associate and bachelors degree or higher and average housing price.

Schema: 
	social_education_attainment (year, id, zipcode, population_25_years_and_over, less_than_9th_grade, 9th_to_12th_grade_no_diploma, high_school_graduate, some_college_no_degree, associate_degree, bachelors_degree, graduate_or_professional_degree, high_school graduate_or_higher, bachelors_degree_or_higher)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	year: 2022
	id: 1
	zipcode: 30301
	question: what is the average housing value in zipcode 30301 in year 2022?

Sample Output:
	SELECT AVG(house_value_min) FROM housing_value WHERE year = 2022 AND id = 1 AND zipcode = 30301;

"""

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code

====================================================================================================

PROMPT 57:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  price and percentage of houses having broadband subscription.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 57:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  price and percentage of houses having broadband subscription.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	For all years after 2016, for each zipcode get average housing  price and percentage of houses having broadband subscription.

Sample Output:
	SELECT housing_value.zipcode, AVG(housing_value.house_value_min) AS avg_housing_value, AVG(housing_value.house_value_max) AS avg_housing_value, AVG(housing_value.house_value_min) / AVG(housing_value.house_value_max) AS avg_housing_value_percentage, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription
	FROM housing_value, social_computer_internet_usage
	WHERE housing_value.year > 2016 AND housing_value.id = social_computer_internet_usage.id
	GROUP BY housing_value.zipcode
	HAVING AVG(housing_value.house_value_min) / AVG(housing_value.house_value_max) > 0.5
	ORDER BY avg_housing_value_percentage DESC
	LIMIT 1;

"""

# Write your MySQL query statement below

SELECT housing_value.zipcode, AVG(housing_value.house_value_min) AS avg_housing_value, AVG(housing_value.house_value_max) AS avg_housing_value, AVG(housing_value.house_value_min) / AVG(housing_value.house_value_max) AS avg_housing_value_percentage, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription
FROM housing_value, social_computer_internet_usage
WHERE housing_value.year > 2016 AND housing_value.id = social_computer_internet_usage.id
GROUP BY housing_value.zipcode
HAVING AVG(housing_value.house_value_min) / AVG(housing_value.house_value_max) > 0.5
ORDER BY avg_housing_value_percentage DESC
LIMIT 1;


====================================================================================================

PROMPT 58:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)
social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 58:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)
social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.

# SELECT AVG(rent_value_min)
# FROM housing_rent
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY rent_value_min;

# SELECT AVG(with_a_computer)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_a_computer;

# SELECT AVG(with_broadband_internet_subscription)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_broadband_internet_subscription;

# SELECT AVG(rent_value_min)
# FROM housing_rent
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY rent_value_min;

# SELECT AVG(with_a_computer)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_a_computer;

# SELECT AVG(with_broadband_internet_subscription)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_broadband_internet_subscription;

# SELECT AVG(rent_value_min)
# FROM housing_rent
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY rent_value_min;

# SELECT AVG(with_a_computer)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_a_computer;

# SELECT AVG(with_broadband_internet_subscription)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_broadband_internet_subscription;

# SELECT AVG(rent_value_min)
# FROM housing_rent
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY rent_value_min;

# SELECT AVG(with_a_computer)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_a_computer;

# SELECT AVG(with_broadband_internet_subscription)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_broadband_internet_subscription;

# SELECT AVG(rent_value_min)
# FROM housing_rent
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY rent_value_min;

# SELECT AVG(with_a_computer)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_a_computer;

# SELECT AVG(with_broadband_internet_subscription)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_broadband_internet_subscription;

# SELECT AVG(rent_value_min)
# FROM housing_rent
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY rent_value_min;

# SELECT AVG(with_a_computer)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_a_computer;

# SELECT AVG(with_broadband_internet_subscription)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_broadband_internet_subscription;

# SELECT AVG(rent_value_min)
# FROM housing_rent
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY rent_value_min;

# SELECT AVG(with_a_computer)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_a_computer;

# SELECT AVG(with_broadband_internet_subscription)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_broadband_internet_subscription;

# SELECT AVG(rent_value_min)
# FROM housing_rent
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY rent_value_min;

# SELECT AVG(with_a_computer)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_a_computer;

# SELECT AVG(with_broadband_internet_subscription)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_broadband_internet_subscription;

# SELECT AVG(rent_value_min)
# FROM housing_rent
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY rent_value_min;

# SELECT AVG(with_a_computer)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_a_computer;

# SELECT AVG(with_broadband_internet_subscription)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_broadband_internet_subscription;

# SELECT AVG(rent_value_min)
# FROM housing_rent
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY rent_value_min;

# SELECT AVG(with_a_computer)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_a_computer;

# SELECT AVG(with_broadband_internet_subscription)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_broadband_internet_subscription;

# SELECT AVG(rent_value_min)
# FROM housing_rent
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY rent_value_min;

# SELECT AVG(with_a_computer)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_a_computer;

# SELECT AVG(with_broadband_internet_subscription)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_broadband_internet_subscription;

# SELECT AVG(rent_value_min)
# FROM housing_rent
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY rent_value_min;

# SELECT AVG(with_a_computer)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_a_computer;

# SELECT AVG(with_broadband_internet_subscription)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_broadband_internet_subscription;

# SELECT AVG(rent_value_min)
# FROM housing_rent
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY rent_value_min;

# SELECT AVG(with_a_computer)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_a_computer;

# SELECT AVG(with_broadband_internet_subscription)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_broadband_internet_subscription;

# SELECT AVG(rent_value_min)
# FROM housing_rent
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY rent_value_min;

# SELECT AVG(with_a_computer)
# FROM social_computer_internet_usage
# WHERE year > 2016
# GROUP BY zipcode
# ORDER BY with_a_computer;

#

====================================================================================================

PROMPT 59:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode, get percentage of households with a computer and percentage of housholds with broadband subscription.

Schema: 
	social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 59:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode, get percentage of households with a computer and percentage of housholds with broadband subscription.

Schema: 
	social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# For all years after 2016, for each zipcode, get percentage of households with a computer and percentage of housholds with broadband subscription.

# SELECT
# 	year,
# 	zipcode,
# 	(with_a_computer / total_households) as percent_with_a_computer,
# 	(with_broadband_internet_subscription / total_households) as percent_with_broadband_internet_subscription
# FROM
# 	social_computer_internet_usage
# WHERE
# 	year > 2016
# ORDER BY
# 	year,
# 	zipcode

# SELECT
# 	year,
# 	zipcode,
# 	(with_a_computer / total_households) as percent_with_a_computer,
# 	(with_broadband_internet_subscription / total_households) as percent_with_broadband_internet_subscription
# FROM
# 	social_computer_internet_usage
# WHERE
# 	year > 2016
# ORDER BY
# 	year,
# 	zipcode
# LIMIT
# 	1

# SELECT
# 	year,
# 	zipcode,
# 	(with_a_computer / total_households) as percent_with_a_computer,
# 	(with_broadband_internet_subscription / total_households) as percent_with_broadband_internet_subscription
# FROM
# 	social_computer_internet_usage
# WHERE
# 	year > 2016
# ORDER BY
# 	year,
# 	zipcode
# LIMIT
# 	1

# SELECT
# 	year,
# 	zipcode,
# 	(with_a_computer / total_households) as percent_with_a_computer,
# 	(with_broadband_internet_subscription / total_households) as percent_with_broadband_internet_subscription
# FROM
# 	social_computer_internet_usage
# WHERE
# 	year > 2016
# ORDER BY
# 	year,
# 	zipcode
# LIMIT
# 	1

# SELECT
# 	year,
# 	zipcode,
# 	(with_a_computer / total_households) as percent_with_a_computer,
# 	(with_broadband_internet_subscription / total_households) as percent_with_broadband_internet_subscription
# FROM
# 	social_computer_internet_usage
# WHERE
# 	year > 2016
# ORDER BY
# 	year,
# 	zipcode
# LIMIT
# 	1

# SELECT
# 	year,
# 	zipcode,
# 	(with_a_computer / total_households) as percent_with_a_computer,
# 	(with_broadband_internet_subscription / total_households) as percent_with_broadband_internet_subscription
# FROM
# 	social_computer_internet_usage
# WHERE
# 	year > 2016
# ORDER BY
# 	year,
# 	zipcode
# LIMIT
# 	1

# SELECT
# 	year,
# 	zipcode,
# 	(with_a_computer / total_households) as percent_with_a_computer,
# 	(with_broadband_internet_subscription / total_households) as percent_with_broadband_internet_subscription
# FROM
# 	social_computer_internet_usage
# WHERE
# 	year > 2016
# ORDER BY
# 	year,
# 	zipcode
# LIMIT
# 	1

# SELECT
# 	year,
# 	zipcode,
# 	(with_a_computer / total_households) as percent_with_a_computer,
# 	(with_broadband_internet_subscription / total_households) as percent_with_broadband_internet_subscription
# FROM
# 	social_computer_internet_usage
# WHERE
# 	year > 2016
# ORDER BY
# 	year,
# 	zipcode
# LIMIT
# 	1

# SELECT
# 	year,
# 	zipcode,
# 	(with_a_computer / total_households) as percent_with_a_computer,
# 	(with_broadband_internet_subscription / total_households) as percent_with_broadband_internet_subscription
# FROM
# 	social_computer_internet_usage
# WHERE
# 	year > 2016
# ORDER BY
# 	year,
# 	zipcode
# LIMIT
# 	1

# SELECT
# 	year,
# 	zipcode,
# 	(with_a_computer / total_households) as percent_with_a_computer,
# 	(with_broadband_internet_subscription / total_households) as percent_with_broadband_internet_subscription
# FROM
# 	social_computer_internet_usage
# WHERE
# 	year > 2016
# ORDER BY
# 	year,
# 	zipcode
# LIMIT
# 	1

# SELECT
# 	year,
# 	zipcode,
# 	(with_a_computer / total_households) as percent_with_a_computer,
# 	(with_broadband_internet_subscription / total_households) as percent_with_broadband_internet_subscription
# FROM
# 	social_computer_internet_usage
# WHERE
# 	year > 2016
# ORDER BY
# 	year,
# 	zipcode
# LIMIT
# 	1

# SELECT
# 	year,
# 	zipcode,
# 	(with_a_computer / total_households) as percent_with_a_computer,
# 	(with_broadband_internet_subscription / total_households) as percent_with_broadband_internet_subscription
# FROM
# 	social_computer_internet_usage
# WHERE
# 	year > 2016
# ORDER BY
# 	year,
# 	zipcode
# LIMIT
# 	1

# SELECT
# 	year,
# 	zipcode,
# 	(with_a_computer / total_households) as percent_with_a_computer,
# 	(with_broadband_internet_subscription / total_households) as percent_with_broadband_internet_subscription
# FROM
# 	social_computer_internet_usage
# WHERE
# 	year > 2016
# ORDER BY
# 	year,
# 	zipcode
# LIMIT
# 	1

# SELECT
# 	year,
# 	zipcode,
# 	(with_a_computer / total_households) as percent_with_a_computer,
# 	(with_broadband_internet_subscription / total_households) as percent_with_broadband_internet_subscription
# FROM
# 	social_computer_internet_usage
# WHERE
# 	year > 2016
# ORDER BY
# 	year,
# 	zipcode
# LIMIT
# 	1

# SELECT
# 	year,
# 	zipcode,
# 	(with_a_computer / total_households) as percent_with_a_computer,
# 	(with_broadband_internet_subscription / total_households) as percent_with_broadband_internet_subscription
# FROM
# 	social_computer_internet_usage
# WHERE
# 	year > 2016
# ORDER BY
# 	year,
# 	zipcode
# LIMIT
# 	1

# SELECT
# 	year

====================================================================================================

