PROMPT 1:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, give the change in average house rent from 2019 to 2022, i.e., from pre-COVID to post-COVID period.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 1:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, give the change in average house rent from 2019 to 2022, i.e., from pre-COVID to post-COVID period.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode = '30303'
	AND year = 2020
	)
```

```sql
SELECT
	AVG(rent_value)
FROM
	housing_rent
WHERE
	zipcode = '30303'
	AND year = 2020
	AND id IN (
	SELECT
	id
	FROM
	housing_rent
	WHERE
	zipcode =

====================================================================================================

PROMPT 2:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 2:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT year, id, zipcode, number_of_units, income_percent_min, income_percent_max,
		(income_percent_max - income_percent_min) / income_percent_min AS change_in_percent
	FROM housing_gross_rent_percent
	WHERE year = '2015'
	ORDER BY change_in_percent DESC
	LIMIT 1

Expected output:
	2015, 1, '90001', 1, 0.0, 1.0, 0.0
	2015, 1, '90001', 2, 0.0, 1.0, 0.0
	2015, 1, '90001', 3, 0.0, 1.0, 0.0
	2015, 1, '90001', 4, 0.0, 1.0, 0.0
	2015, 1, '90001', 5, 0.0, 1.0, 0.0
	2015, 1, '90001', 6, 0.0, 1.0, 0.0
	2015, 1, '90001', 7, 0.0, 1.0, 0.0
	2015, 1, '90001', 8, 0.0, 1.0, 0.0
	2015, 1, '90001', 9, 0.0, 1.0, 0.0
	2015, 1, '90001', 10, 0.0, 1.0, 0.0
	2015, 1, '90001', 11, 0.0, 1.0, 0.0
	2015, 1, '90001', 12, 0.0, 1.0, 0.0
	2015, 1, '90001', 13, 0.0, 1.0, 0.0
	2015, 1, '90001', 14, 0.0, 1.0, 0.0
	2015, 1, '90001', 15, 0.0, 1.0, 0.0
	2015, 1, '90001', 16, 0.0, 1.0, 0.0
	2015, 1, '90001', 17, 0.0, 1.0, 0.0
	2015, 1, '90001', 18, 0.0, 1.0, 0.0
	2015, 1, '90001', 19, 0.0, 1.0, 0.0
	2015, 1, '90001', 20, 0.0, 1.0, 0.0
	2015, 1, '90001', 21, 0.0, 1.0, 0.0
	2015, 1, '90001', 22, 0.0, 1.0, 0.0
	2015, 1, '90001', 23, 0.0, 1.0, 0.0
	2015, 1, '90001', 24, 0.0, 1.0, 0.0
	2015, 1, '90001', 25, 0.0, 1.0, 0.0
	2015, 1, '90001', 26, 0.0, 1.0, 0.0
	2015, 1, '90001', 27, 0.0, 1.0, 0.0
	2015, 1, '90001', 28, 0.0, 1.0, 0.0
	2015, 1, '90001', 29, 0.0, 1.0, 0.0
	2015, 1, '90001', 30, 0.0, 1.0, 0.0
	2015, 1, '90001', 31, 0.0, 1.0, 0.0
	2015, 1, '90001', 32, 0.0, 1.0, 0.0
	2015, 1, '90001', 33, 0.0, 1.0, 0.0
	2015, 1, '90001', 34, 0.0, 1.0, 0.0
	2015, 1, '90001', 35, 0.0, 1.0, 0.0
	2015, 1, '90001', 36, 0.0, 1.0, 0.0
	2015, 1, '90001', 37, 0.0, 1.0, 0.0
	2015, 1, '90001', 38, 0.0, 1.0, 0.0
	2015, 1, '90001', 39, 0.0, 1.0, 0.0
	2015, 1, '90001', 40, 0.0, 1.0, 0.0
	2015, 1, '90001', 41, 0.0, 1.0, 0.0
	2015, 1, '90001', 42, 0.0, 1.0, 0.0
	2015, 1, '90001', 43, 0.0, 1.0, 0.0
	2015, 1, '90001', 44, 0.0, 1.0, 0.0
	2015, 1, '90001', 45, 0.0, 1.0, 0.0
	2015, 1, '90001', 46, 0.0, 1.0, 0.0
	2015, 1, '90001', 47, 0.0, 1.0, 0.0
	2015, 1, '90001', 48, 0.0, 1.0, 0.0
	2015, 1, '90001', 49, 0.0, 1.0, 0.0
	2015, 1, '90001', 50, 0.0, 1.0, 0.0
	2015, 1, '90001', 51, 0.0, 1.0, 0.0
	2015, 1, '90001', 52, 0.0, 1.0, 0.0
	2015, 1, '90001', 53, 0.0, 1.0, 0.0
	2015, 1, '90001', 54, 0.0, 1.0, 0.0
	2015, 1, '90001', 55, 0.0, 1.0, 0.0
	2015, 1, '90001', 56, 0.0, 1.0, 0.0
	2015, 1, '90001', 57, 0.0, 1.0, 0.0
	2015, 1, '90001', 58, 0.0, 1.0, 0.0
	2015, 1, '90001', 59, 0.0, 1.0, 0.0
	2015, 1, '90001', 60, 0.0, 1.0, 0.0
	2015, 1, '90001', 61, 0.0, 1.0, 0.0
	2015, 1, '90001', 62, 0.0, 1.0, 0.0
	2015, 1, '90001', 63, 0.0, 1.0, 0.0
	2015, 1, '90001', 64, 0.0, 1.0, 0.0
	2015, 1, '90001', 65, 0.0, 1.0, 0.0
	2015, 1, '90001', 66, 0.0, 1.0, 0.0
	2015, 1, '90001', 67, 0.0, 1.0, 0.0
	2015, 1, '90001', 68, 0.0, 1.0, 0.0
	2015, 1, '90001', 69, 0.0, 1.0, 0.0
	2015, 1, '90001', 70, 0.0, 1.0, 0.0
	2015, 1, '90001', 71, 0.0, 1.0, 0.0
	2015, 1, '90001', 72, 0.0, 1.0, 0.0
	2015, 1, '90001', 73, 0.0, 1.0, 0.0
	2015, 1, '90001', 74, 0.0, 1.0, 0.0
	2015, 1, '90001', 75, 0.0, 1.0, 0.0
	2015, 1, '90001', 76, 0.0, 1.0, 0.0
	2015, 1, '90001', 77, 0.0, 1.0, 0.0
	2015, 1, '90001', 78, 0.0, 1.0, 0.0
	2015, 1, '90001', 79, 0.0, 1.0, 0.0
	2015, 1, '90001

====================================================================================================

PROMPT 3:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in SMOCAPI, where SMOCAPI is selected monthly home-ownership costs as a percent of household income

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 3:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in SMOCAPI, where SMOCAPI is selected monthly home-ownership costs as a percent of household income

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT year, id, zipcode, number_of_units, income_percent_min, income_percent_max, income_percent_with_mortgage, income_percent_with_mortgage - income_percent_min AS change_in_SMOCAPI
	FROM household_income_percent_with_mortgage
	WHERE income_percent_with_mortgage - income_percent_min > 0.1
	ORDER BY income_percent_with_mortgage - income_percent_min DESC
	LIMIT 1

Expected Output:
	year, id, zipcode, number_of_units, income_percent_min, income_percent_max, income_percent_with_mortgage, income_percent_with_mortgage - income_percent_min AS change_in_SMOCAPI
	2015, 1, 90210, 1, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 2, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 3, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 4, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 5, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 6, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 7, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 8, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 9, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 10, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 11, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 12, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 13, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 14, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 15, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 16, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 17, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 18, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 19, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 20, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 21, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 22, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 23, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 24, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 25, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 26, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 27, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 28, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 29, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 30, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 31, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 32, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 33, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 34, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 35, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 36, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 37, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 38, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 39, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 40, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 41, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 42, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 43, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 44, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 45, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 46, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 47, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 48, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 49, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 50, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 51, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 52, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 53, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 54, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 55, 0.1, 0.2, 0.1, 0.1, 0.1
	2015, 1, 90210, 56, 0.1, 0.2, 0.1, 0.

====================================================================================================

PROMPT 4:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in average house rent from 2017 to 2022.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 4:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in average house rent from 2017 to 2022.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

```sql
SELECT zipcode,
	house_value_min,
	house_value_max,
	house_value_min - house_value_max
FROM housing_value
WHERE year = 2017
	AND zipcode IN ('30303', '30305', '30307', '30309', '30310', '30312', '30314', '30316', '30318', '30319', '30320', '30322', '30324', '30326', '30328', '30330', '30332', '30334', '30336', '30338', '30340', '30342', '30344', '30346', '30348', '30350', '30352', '30354', '30356', '30358', '30360', '30362', '30364', '30366', '30368', '30370', '30372', '30374', '30376', '30378', '30380', '30382', '30384', '30386', '30388', '30390', '30392', '30394', '30396', '30398', '30400', '30402', '30404', '30406', '30408', '30410', '30412', '30414', '30416', '30418', '30420', '30422', '30424', '30426', '30428', '30430', '30432', '30434', '30436', '30438', '30440', '30442', '30444', '30446', '30448', '30450', '30452', '30454', '30456', '30458', '30460', '30462', '30464', '30466', '30468', '30470', '30472', '30474', '30475', '30476', '30477', '30478', '30479', '30480', '30481', '30482', '30483', '30484', '30485', '30486', '30487', '30488', '30489', '30490', '30491', '30492', '30493', '30494', '30495', '30496', '30497', '30498', '30499', '30500', '30501', '30502', '30503', '30504', '30505', '30506', '30507', '30508', '30509', '30510', '30511', '30512', '30513', '30514', '30515', '30516', '30517', '30518', '30519', '30520', '30521', '30522', '30523', '30524', '30525', '30526', '30527', '30528', '30529', '30530', '30531', '30532', '30533', '30534', '30535', '30536', '30537', '30538', '30539', '30540', '30541', '30542', '30543', '30544', '30545', '30546', '30547', '30548', '30549', '30550', '30551', '30552', '30553', '30554', '30555', '30556', '30557', '30558', '30559', '30560', '30561', '30562', '30563', '30564', '30565', '30566', '30567', '30568', '30569', '30570', '30571', '30572', '30573', '30574', '30575', '30576', '30577', '30578', '30579', '30580', '30581', '30582', '30583', '30584', '30585', '30586', '30587', '30588', '30589', '30590', '30591', '30592', '30593', '30594', '30595', '30596', '30597', '30598', '30599', '30600', '30601', '30602', '30603', '30604', '30605', '30606', '30607', '30608', '30609', '30610', '30611', '30612', '30613', '30614', '30615', '30616', '30617', '30618', '30619', '30620', '30621', '30622', '30623', '30624', '30625', '30626', '30627', '30628', '30629', '30630', '30631', '30632', '30633', '30634', '30635', '30636', '30637', '30638', '30639', '30640', '30641', '30642', '30643', '30644', '30645', '30646', '30647', '30648', '30649', '30650', '30651', '30652', '30653', '30654', '30655', '30656', '30657', '30658', '30659', '30660', '30661', '30662', '30663', '30664', '30665', '30666', '30667', '30668', '30669', '30670', '30671', '30672', '30673', '30674', '30675', '30676', '30677', '30678', '30679', '30680', '30681', '30682', '30683', '30684', '30685', '30686', '30687', '30688', '30689', '30690', '30691', '30692', '30693', '30694', '30695', '30696', '30697', '30698', '30699', '30700', '30701', '30702', '30703', '30704', '30705', '30706', '30707', '30708', '30709', '30710', '30711', '30712', '30713', '30714', '30715', '30716', '30717', '30718', '30719', '30720', '30721', '30722', '30723', '30724', '30725', '30726', '30727', '30728', '30729', '30730', '30731', '30732', '30733', '30734', '30735', '30736', '30737', '30738', '30739', '30740', '30741', '30742', '30743', '30744', '30745', '30746', '30747', '30748', '30749', '30750', '30751', '30752', '30753', '30754', '30755', '30756', '30757', '30758', '30759', '30760', '30761', '30762', '30763', '30764', '30765', '30766', '30767', '30768', '30769', '30770', '30771', '30772', '30773', '30774', '30775', '30776', '30777', '30778', '30779', '30780', '30781', '30782', '30783', '30784', '30785', '30786', '30787', '30788', '30789', '30790', '30791', '30792', '30793', '30794', '30795', '30796', '30797', '30798', '30799', '30800', '30801', '30802', '30803', '30804', '30805', '30806', '30807', '30808', '30809', '30810', '30811', '30812', '30813', '30814', '30815', '30816', '30817', '30818', '30819', '30820', '30821', '30822', '30823', '30824', '30825', '30826', '30827', '30828', '30829', '30830', '30831', '30832', '30833', '30834', '30835', '30836', '30837', '30838', '30839', '30840', '30841', '30842', '30843', '30844', '30845', '30846', '30847', '30848', '30849', '30850', '30851', '30852', '30853', '30854', '30855', '30856

====================================================================================================

PROMPT 5:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

Schema: 
	household_income_percent_without_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 5:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

Schema: 
	household_income_percent_without_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	2017, 1, '30606', 1, '0.0', '100.0'
	2017, 1, '30606', 2, '0.0', '100.0'
	2017, 1, '30606', 3, '0.0', '100.0'
	2017, 1, '30606', 4, '0.0', '100.0'
	2017, 1, '30606', 5, '0.0', '100.0'
	2017, 1, '30606', 6, '0.0', '100.0'
	2017, 1, '30606', 7, '0.0', '100.0'
	2017, 1, '30606', 8, '0.0', '100.0'
	2017, 1, '30606', 9, '0.0', '100.0'
	2017, 1, '30606', 10, '0.0', '100.0'
	2017, 1, '30606', 11, '0.0', '100.0'
	2017, 1, '30606', 12, '0.0', '100.0'
	2017, 1, '30606', 13, '0.0', '100.0'
	2017, 1, '30606', 14, '0.0', '100.0'
	2017, 1, '30606', 15, '0.0', '100.0'
	2017, 1, '30606', 16, '0.0', '100.0'
	2017, 1, '30606', 17, '0.0', '100.0'
	2017, 1, '30606', 18, '0.0', '100.0'
	2017, 1, '30606', 19, '0.0', '100.0'
	2017, 1, '30606', 20, '0.0', '100.0'
	2017, 1, '30606', 21, '0.0', '100.0'
	2017, 1, '30606', 22, '0.0', '100.0'
	2017, 1, '30606', 23, '0.0', '100.0'
	2017, 1, '30606', 24, '0.0', '100.0'
	2017, 1, '30606', 25, '0.0', '100.0'
	2017, 1, '30606', 26, '0.0', '100.0'
	2017, 1, '30606', 27, '0.0', '100.0'
	2017, 1, '30606', 28, '0.0', '100.0'
	2017, 1, '30606', 29, '0.0', '100.0'
	2017, 1, '30606', 30, '0.0', '100.0'
	2017, 1, '30606', 31, '0.0', '100.0'
	2017, 1, '30606', 32, '0.0', '100.0'
	2017, 1, '30606', 33, '0.0', '100.0'
	2017, 1, '30606', 34, '0.0', '100.0'
	2017, 1, '30606', 35, '0.0', '100.0'
	2017, 1, '30606', 36, '0.0', '100.0'
	2017, 1, '30606', 37, '0.0', '100.0'
	2017, 1, '30606', 38, '0.0', '100.0'
	2017, 1, '30606', 39, '0.0', '100.0'
	2017, 1, '30606', 40, '0.0', '100.0'
	2017, 1, '30606', 41, '0.0', '100.0'
	2017, 1, '30606', 42, '0.0', '100.0'
	2017, 1, '30606', 43, '0.0', '100.0'
	2017, 1, '30606', 44, '0.0', '100.0'
	2017, 1, '30606', 45, '0.0', '100.0'
	2017, 1, '30606', 46, '0.0', '100.0'
	2017, 1, '30606', 47, '0.0', '100.0'
	2017, 1, '30606', 48, '0.0', '100.0'
	2017, 1, '30606', 49, '0.0', '100.0'
	2017, 1, '30606', 50, '0.0', '100.0'
	2017, 1, '30606', 51, '0.0', '100.0'
	2017, 1, '30606', 52, '0.0', '100.0'
	2017, 1, '30606', 53, '0.0', '100.0'
	2017, 1, '30606', 54, '0.0', '100.0'
	2017, 1, '30606', 55, '0.0', '100.0'
	2017, 1, '30606', 56, '0.0', '100.0'
	2017, 1, '30606', 57, '0.0', '100.0'
	2017, 1, '30606', 58, '0.0', '100.0'
	2017, 1, '30606', 59, '0.0', '100.0'
	2017, 1, '30606', 60, '0.0', '100.0'
	2017, 1, '30606', 61, '0.0', '100.0'
	2017, 1, '30606', 62, '0.0', '100.0'
	2017, 1, '30606', 63, '0.0', '100.0'
	2017, 1, '30606', 64, '0.0', '100.0'
	2017, 1, '30606', 65, '0.0', '100.0'
	2017, 1, '30606', 66, '0.0', '100.0'
	2017, 1, '30606', 67, '0.0', '100.0'
	2017, 1, '30606', 68, '0.0', '100.0'
	2017, 1, '30606', 69, '0.0', '100.0'
	2017, 1, '30606', 70, '0.0', '100.0'
	2017, 1, '30606', 71, '0.0', '100.0'
	2017, 1, '30606', 72, '0.0', '100.0'
	2017, 1, '30606', 73, '0.0', '100.0'
	2017, 1, '30606', 74, '0.0', '100.0'
	2017, 1, '30606', 75, '0.0', '100.0'
	2017, 1, '30606', 76, '0.0', '100.0'
	2017, 1, '30606', 77, '0.0', '100.0'
	2017, 1, '30606', 78, '0.0', '100.0'
	2017, 1, '30606', 79, '0.0', '100.0'
	2017, 1, '30606', 80, '0.0', '100.0'
	2017, 1, '30606', 81, '0.0', '100.0'
	2017, 1, '30606', 82, '0.0', '100.0'
	2017, 1, '30606', 83, '0.0', '100.0'
	2017, 1, '30606', 84, '0.0', '100.0'
	2017, 1, '30606', 85, '0.0', '100.0'
	2017, 1, '30606', 86, '0.0', '100.0'
	2017, 1, '30606', 87, '0.0', '100.0'
	2017, 1, '30606',

====================================================================================================

PROMPT 6:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 6:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	Prompt: For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.
	Schema: housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)
	Response: SELECT zipcode FROM housing_gross_rent_percent WHERE year = 2017 AND income_percent_min >= 30 AND income_percent_max <= 30

### 3.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.

====================================================================================================

PROMPT 7:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get zipcodes in Georgia where GRAPI is greater than 30.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 7:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get zipcodes in Georgia where GRAPI is greater than 30.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get zipcodes in Georgia where GRAPI is greater than 30.
	INSUFFICENT

Expected output:
	SELECT zipcode FROM housing_gross_rent_percent WHERE year = 2022 AND GRAPI > 30;

## 3.2.2.2.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.

====================================================================================================

PROMPT 8:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Select share of each fuel source for heating in year 2022.

Schema: 
	housing_heating_fuel (year, id, zipcode, total_heating_units, utility_gas, bottled_tank_or_LP_gas, electricity, fuel_oil_kerosene, coal_or_coke, wood, solar_energy, other_fuel, no_fuel_used)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 8:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Select share of each fuel source for heating in year 2022.

Schema: 
	housing_heating_fuel (year, id, zipcode, total_heating_units, utility_gas, bottled_tank_or_LP_gas, electricity, fuel_oil_kerosene, coal_or_coke, wood, solar_energy, other_fuel, no_fuel_used)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT share FROM housing_heating_fuel WHERE year = 2022;

Expected output:
	[
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},
	{
		"share": "0.0"
	},


====================================================================================================

PROMPT 9:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For the year 2022, select zipcodes in Georgia where Home-ownership costs as a %age of household income is more than 28%

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 9:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For the year 2022, select zipcodes in Georgia where Home-ownership costs as a %age of household income is more than 28%

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT zipcode FROM household_income_percent_with_mortgage WHERE year = 2022 AND income_percent_min > 28.0;

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:
	'ATLANTA, GA'

Expected output:


====================================================================================================

PROMPT 10:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each year, get rent and value of house averaged over all zip codes.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 10:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each year, get rent and value of house averaged over all zip codes.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house averaged over all zip codes.
	For each year, get rent and value of house

====================================================================================================

PROMPT 11:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get rent and value of house averaged over all years.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 11:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get rent and value of house averaged over all years.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zip code, get rent and value of house averaged over all years.

Solution:
	SELECT AVG(house_value_min + house_value_max) / 2, AVG(rent_value_min + rent_value_max) / 2
	FROM housing_value, housing_rent
	WHERE housing_value.zipcode = housing_rent.zipcode
	GROUP BY zipcode
	ORDER BY zipcode

Expected Output:
	[
		{
			"zipcode": "12345",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12346",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12347",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12348",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12349",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12350",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12351",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12352",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12353",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12354",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12355",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12356",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12357",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12358",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12359",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12360",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12361",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12362",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12363",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12364",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12365",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12366",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12367",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12368",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12369",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12370",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12371",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12372",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12373",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12374",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12375",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12376",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12377",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12378",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12379",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12380",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12381",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12382",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12383",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12384",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12385",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12386",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12387",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12388",
			"avg_rent": "0.5",
			"avg_value": "0.5"
		},
		{
			"zipcode": "12389",
			"avg_rent": "0.5",
			"avg_value": "0.5"

====================================================================================================

PROMPT 12:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get count of units with and without mortgage in year 2022.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 12:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get count of units with and without mortgage in year 2022.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)
	1, 1, '10001', 1, 0
	1, 1, '10001', 0, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '10001', 1, 1
	1, 1, '

====================================================================================================

PROMPT 13:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage averaged over years.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 13:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage averaged over years.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode

Expected output:
	'0.5'

Expected error:
	'INSUFFICENT'

Expected input:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected output:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected error:
	'INSUFFICENT'

Expected input:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected output:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected error:
	'INSUFFICENT'

Expected input:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected output:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected error:
	'INSUFFICENT'

Expected input:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected output:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected error:
	'INSUFFICENT'

Expected input:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected output:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected error:
	'INSUFFICENT'

Expected input:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected output:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected error:
	'INSUFFICENT'

Expected input:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected output:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected error:
	'INSUFFICENT'

Expected input:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected output:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected error:
	'INSUFFICENT'

Expected input:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected output:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected error:
	'INSUFFICENT'

Expected input:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected output:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected error:
	'INSUFFICENT'

Expected input:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected output:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected error:
	'INSUFFICENT'

Expected input:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected output:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected error:
	'INSUFFICENT'

Expected input:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected output:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected error:
	'INSUFFICENT'

Expected input:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected output:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '2000'
	GROUP BY zipcode
	ORDER BY zipcode'

Expected error:
	'INSUFFICENT'

Expected input:
	'SELECT AVG(units_with_mortgage) / AVG(units_without_mortgage)
	FROM housing_mortgage
	WHERE year = '

====================================================================================================

PROMPT 14:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage for year 2022.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 14:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage for year 2022.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022;
```

## 2.1.1.1.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.

====================================================================================================

PROMPT 15:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average house price for each zip code in a given year.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 15:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average house price for each zip code in a given year.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	Get average house price for each zip code in a given year.
	INSUFFICENT
	Get average house price for each zip code in a given year.
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value) FROM housing_value WHERE year = '2015' AND zipcode = '12345'
	SELECT AVG(house_value

====================================================================================================

PROMPT 16:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get the average rent and maintenance cost for households without mortgage.

Schema: 
	household_income_percent_without_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 16:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get the average rent and maintenance cost for households without mortgage.

Schema: 
	household_income_percent_without_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For the schema above, the following SQL statement would be the most accurate:
	SELECT AVG(rent) FROM housing_rent WHERE zipcode = '12345' AND number_of_units = 1 AND income_percent_min = 0 AND income_percent_max = 100
	The following SQL statement would be the most accurate:
	SELECT AVG(rent) FROM housing_rent WHERE zipcode = '12345' AND number_of_units = 1 AND income_percent_min = 0 AND income_percent_max = 100 AND rent_value_min = 0 AND rent_value_max = 100
	The following SQL statement would be the most accurate:
	SELECT AVG(rent) FROM housing_rent WHERE zipcode = '12345' AND number_of_units = 1 AND income_percent_min = 0 AND income_percent_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100
	The following SQL statement would be the most accurate:
	SELECT AVG(rent) FROM housing_rent WHERE zipcode = '12345' AND number_of_units = 1 AND income_percent_min = 0 AND income_percent_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100
	The following SQL statement would be the most accurate:
	SELECT AVG(rent) FROM housing_rent WHERE zipcode = '12345' AND number_of_units = 1 AND income_percent_min = 0 AND income_percent_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100
	The following SQL statement would be the most accurate:
	SELECT AVG(rent) FROM housing_rent WHERE zipcode = '12345' AND number_of_units = 1 AND income_percent_min = 0 AND income_percent_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100
	The following SQL statement would be the most accurate:
	SELECT AVG(rent) FROM housing_rent WHERE zipcode = '12345' AND number_of_units = 1 AND income_percent_min = 0 AND income_percent_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100 AND rent_value_min = 0 AND rent_value_max = 100

====================================================================================================

PROMPT 17:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get median housing value by zipcode.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 17:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get median housing value by zipcode.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	[year, id, zipcode, number_of_units, house_value_min, house_value_max]

Output:
	SQL statement to answer the question.

Sample Input:
	[2015, 1, 90210, 1, 0, 1]

Sample Output:
	SELECT AVG(house_value) FROM housing_value WHERE zipcode = 90210

## Solution

```sql
SELECT AVG(house_value) FROM housing_value WHERE zipcode = 90210
```

## Resources

- [SQL Tutorial: Aggregate Functions](https://www.w3schools.com/sql/sql_aggregate.asp)
- [SQL Tutorial: SELECT](https://www.w3schools.com/sql/sql_select.asp)
- [SQL Tutorial: WHERE](https://www.w3schools.com/sql/sql_where.asp)
- [SQL Tutorial: GROUP BY](https://www.w3schools.com/sql/sql_groupby.asp)
- [SQL Tutorial: HAVING](https://www.w3schools.com/sql/sql_having.asp)
- [SQL Tutorial: ORDER BY](https://www.w3schools.com/sql/sql_orderby.asp)
- [SQL Tutorial: LIMIT](https://www.w3schools.com/sql/sql_limit.asp)
- [SQL Tutorial: JOIN](https://www.w3schools.com/sql/sql_join.asp)
- [SQL Tutorial: IN](https://www.w3schools.com/sql/sql_in.asp)
- [SQL Tutorial: EXISTS](https://www.w3schools.com/sql/sql_exists.asp)
- [SQL Tutorial: EXCEPT](https://www.w3schools.com/sql/sql_except.asp)
- [SQL Tutorial: EXCEPT ALL](https://www.w3schools.com/sql/sql_except_all.asp)
- [SQL Tutorial: INTERSECT](https://www.w3schools.com/sql/sql_intersect.asp)
- [SQL Tutorial: INTERSECT ALL](https://www.w3schools.com/sql/sql_intersect_all.asp)
- [SQL Tutorial: UNION](https://www.w3schools.com/sql/sql_union.asp)
- [SQL Tutorial: UNION ALL](https://www.w3schools.com/sql/sql_union_all.asp)
- [SQL Tutorial: EXCEPT](https://www.w3schools.com/sql/sql_except.asp)
- [SQL Tutorial: EXCEPT ALL](https://www.w3schools.com/sql/sql_except_all.asp)
- [SQL Tutorial: INTERSECT](https://www.w3schools.com/sql/sql_intersect.asp)
- [SQL Tutorial: INTERSECT ALL](https://www.w3schools.com/sql/sql_intersect_all.asp)
- [SQL Tutorial: UNION](https://www.w3schools.com/sql/sql_union.asp)
- [SQL Tutorial: UNION ALL](https://www.w3schools.com/sql/sql_union_all.asp)
- [SQL Tutorial: GROUP BY](https://www.w3schools.com/sql/sql_groupby.asp)
- [SQL Tutorial: HAVING](https://www.w3schools.com/sql/sql_having.asp)
- [SQL Tutorial: ORDER BY](https://www.w3schools.com/sql/sql_orderby.asp)
- [SQL Tutorial: LIMIT](https://www.w3schools.com/sql/sql_limit.asp)
- [SQL Tutorial: JOIN](https://www.w3schools.com/sql/sql_join.asp)
- [SQL Tutorial: IN](https://www.w3schools.com/sql/sql_in.asp)
- [SQL Tutorial: EXISTS](https://www.w3schools.com/sql/sql_exists.asp)
- [SQL Tutorial: EXCEPT](https://www.w3schools.com/sql/sql_except.asp)
- [SQL Tutorial: EXCEPT ALL](https://www.w3schools.com/sql/sql_except_all.asp)
- [SQL Tutorial: INTERSECT](https://www.w3schools.com/sql/sql_intersect.asp)
- [SQL Tutorial: INTERSECT ALL](https://www.w3schools.com/sql/sql_intersect_all.asp)
- [SQL Tutorial: UNION](https://www.w3schools.com/sql/sql_union.asp)
- [SQL Tutorial: UNION ALL](https://www.w3schools.com/sql/sql_union_all.asp)
- [SQL Tutorial: EXCEPT](https://www.w3schools.com/sql/sql_except.asp)
- [SQL Tutorial: EXCEPT ALL](https://www.w3schools.com/sql/sql_except_all.asp)
- [SQL Tutorial: INTERSECT](https://www.w3schools.com/sql/sql_intersect.asp)
- [SQL Tutorial: INTERSECT ALL](https://www.w3schools.com/sql/sql_intersect_all.asp)
- [SQL Tutorial: UNION](https://www.w3schools.com/sql/sql_union.asp)
- [SQL Tutorial: UNION ALL](https://www.w3schools.com/sql/sql_union_all.asp)
- [SQL Tutorial: GROUP BY](https://www.w3schools.com/sql/sql_groupby.asp)
- [SQL Tutorial: HAVING](https://www.w3schools.com/sql/sql_having.asp)
- [SQL Tutorial: ORDER BY](https://www.w3schools.com/sql/sql_orderby.asp)
- [SQL Tutorial: LIMIT](https://www.w3schools.com/sql/sql_limit.asp)
- [SQL Tutorial: JOIN](https://www.w3schools.com/sql/sql_join.asp)
- [SQL Tutorial: IN](https://www.w3schools.com/sql/sql_in.asp)
- [SQL Tutorial: EXISTS](https://www.w3schools.com/sql/sql_exists.asp)
- [SQL Tutorial: EXCEPT](https://www.w3schools.com/sql/sql_except.asp)
- [SQL Tutorial: EXCEPT ALL](https://www.w3schools.com/sql/sql_except_all.asp)
- [SQL Tutorial: INTERSECT](https://www.w3schools.com/sql/sql_intersect.asp)
- [SQL Tutorial: INTERSECT ALL](https://www.w3schools.com/sql/sql_intersect_all.asp)
- [SQL Tutorial: UNION](https://www.w3schools.com/sql/sql_union.asp)
- [SQL Tutorial: UNION ALL](https://www.w3schools.com/sql/sql_union_all.asp)
- [SQL Tutorial: EXCEPT](https://www.w3schools.com/sql/sql_except.asp)
- [SQL Tutorial: EXCEPT ALL](https://www.w3schools.com/sql/sql_except_all.asp)
- [SQL Tutorial: INTERSECT](https://www.w3schools.com/sql/sql_intersect.asp)
- [SQL Tutorial: INTERSECT ALL](https://www.w3schools.com/sql/sql_intersect_all.asp)
- [SQL Tutorial: UNION](https://www.w3schools.com/sql/sql_union.asp)
- [SQL Tutorial: UNION ALL](https://www.w3schools.com/sql/sql_union

====================================================================================================

PROMPT 18:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022 and for each zipcode, get average rent value and house price.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 18:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022 and for each zipcode, get average rent value and house price.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022 and for each zipcode, get average rent value and house price.
	INSUFFICENT
	For year 2022 and for each zipcode, get average rent value and house price.
	SELECT AVG(housing_rent.rent_value_min) AS rent_value,
	AVG(housing_value.house_value_min) AS house_value
	FROM housing_rent, housing_value
	WHERE housing_rent.year = 2022
	AND housing_rent.zipcode = housing_value.zipcode
	AND housing_rent.number_of_units = housing_value.number_of_units
	AND housing_rent.zipcode = '90001'
	AND housing_value.year = 2022
	AND housing_value.zipcode = '90001'
	AND housing_value.number_of_units = 1
	AND housing_value.house_value_min > 0
	AND housing_value.house_value_max > 0
	AND housing_value.house_value_min < 100
	AND housing_value.house_value_max < 100
	AND housing_value.house_value_min < 1000
	AND housing_value.house_value_max < 1000
	AND housing_value.house_value_min < 10000
	AND housing_value.house_value_max < 10000
	AND housing_value.house_value_min < 100000
	AND housing_value.house_value_max < 100000
	AND housing_value.house_value_min < 1000000
	AND housing_value.house_value_max < 1000000
	AND housing_value.house_value_min < 10000000
	AND housing_value.house_value_max < 10000000
	AND housing_value.house_value_min < 100000000
	AND housing_value.house_value_max < 100000000
	AND housing_value.house_value_min < 1000000000
	AND housing_value.house_value_max < 1000000000
	AND housing_value.house_value_min < 10000000000
	AND housing_value.house_value_max < 10000000000
	AND housing_value.house_value_min < 100000000000
	AND housing_value.house_value_max < 100000000000
	AND housing_value.house_value_min < 1000000000000
	AND housing_value.house_value_max < 1000000000000
	AND housing_value.house_value_min < 10000000000000
	AND housing_value.house_value_max < 10000000000000
	AND housing_value.house_value_min < 100000000000000
	AND housing_value.house_value_max < 100000000000000
	AND housing_value.house_value_min < 1000000000000000
	AND housing_value.house_value_max < 1000000000000000
	AND housing_value.house_value_min < 10000000000000000
	AND housing_value.house_value_max < 10000000000000000
	AND housing_value.house_value_min < 100000000000000000
	AND housing_value.house_value_max < 100000000000000000
	AND housing_value.house_value_min < 1000000000000000000
	AND housing_value.house_value_max < 1000000000000000000
	AND housing_value.house_value_min < 10000000000000000000
	AND housing_value.house_value_max < 10000000000000000000
	AND housing_value.house_value_min < 100000000000000000000
	AND housing_value.house_value_max < 100000000000000000000
	AND housing_value.house_value_min < 1000000000000000000000
	AND housing_value.house_value_max < 1000000000000000000000
	AND housing_value.house_value_min < 10000000000000000000000
	AND housing_value.house_value_max < 10000000000000000000000
	AND housing_value.house_value_min < 100000000000000000000000
	AND housing_value.house_value_max < 100000000000000000000000
	AND housing_value.house_value_min < 1000000000000000000000000
	AND housing_value.house_value_max < 1000000000000000000000000
	AND housing_value.house_value_min < 10000000000000000000000000
	AND housing_value.house_value_max < 10000000000000000000000000
	AND housing_value.house_value_min < 100000000000000000000000000
	AND housing_value.house_value_max < 100000000000000000000000000
	AND housing_value.house_value_min < 1000000000000000000000000000
	AND housing_value.house_value_max < 1000000000000000000000000000
	AND housing_value.house_value_min < 10000000000000000000000000000
	AND housing_value.house_value_max < 10000000000000000000000000000
	AND housing_value.house_value_min < 100000000000000000000000000000
	AND housing_value.house_value_max < 100000000000000000000000000000
	AND housing_value.house_value_min < 1000000000000000000000000000000
	AND housing_value.house_value_max < 1000000000000000000000000000000
	AND housing_value.house_value_min < 10000000000000000000000000000000
	AND housing_value.house_value_max < 10000000000000000000000000000000
	AND housing_value.house_value_min < 100000000000000000000000000000000
	AND housing_value.house_value_max < 100000000000000000000000000000000
	AND housing_value.house_value_min < 1000000000000000000000000000000000
	AND housing_value.house_value_max < 1000000000000000000000000000000000
	AND housing_value.house_value_min < 10000000000000000000000000000000000
	AND housing_value.house_value_max < 10000000000000000000000000000000000
	AND housing_value.house_value_min < 100000000000000000000000000000000000
	AND housing_value.house_value_max < 100000000000000000000000000000000000
	AND housing_value.house_value_min < 1000000000000000000000000000000000000
	AND housing_value.house_value_max < 1000000000000000000000000000000000000
	AND housing_value.house_value_min < 10000000000000000000000000000000000000
	AND housing_value.house_value_max < 10000000000000000000000000000000000000
	AND housing_value.house_value_min < 100000000000000000000000000000000000000
	AND housing_value.house_value_max < 100000000000000000000000000000000000000
	AND housing_value.house_value_min < 1000000000000000000000000000000000000000
	AND housing_value.house_value_max < 1000000000000000000000000000000000000000
	AND housing_value.house_value_min < 10000000000000000000000000000000000000000
	AND housing_value.house_value_max < 10000000000000000000000000000000000000000
	AND housing_value.house_value_min < 1000000000000000000000000000000000
	AND housing_value.house_value_max < 1000000000000000000000000000000000
	AND housing_value.house_value_min < 10000000000000000000000000000000000
	AND housing_value.house_value_max < 10000000000000000000000000000000000
	AND housing_value.house_value_min < 100000000000000000000000000000000000
	AND housing_value.house_value_max < 100000000000000000000000000000000000
	AND housing_value.house_value_min < 1000000000000000000000000000000000000
	AND housing_value.house_value_max < 1000000000000000000000000000000000000
	AND housing_value.house_value_min < 10000000000000000000000000000000000000
	AND housing_value.house_value_max < 10000000000000000000000000000000000000
	AND housing_value.house_value_min < 100000000000000000000000000000000000000
	AND housing_value.house_value_max < 100000000000000000000000000000000000000
	AND housing_value.house_value_min < 1000000000000000000000000000000000000000
	AND housing_value.house_value_max < 1000000000000000000000000000000000000000
	AND housing_value.house_value_min < 10000000000000000000000000000000000000000
	AND housing_value.house_value_max < 10000000000000000000000000000000000000000
	AND housing_value.house_value_min < 1000000000000000000000000000000000
	AND housing_value.house_value_max < 1000000000000000000000000000000000
	AND housing_value.house_value_min < 10000000000000000000000000000000000
	AND housing_value.house_value_max < 10000000000000000000000000000000000
	AND housing_value.house_value_min < 100000000000000000000000000000000000
	AND housing_value.house_value_max < 100000000000000000000000000000000000
	AND housing_

====================================================================================================

PROMPT 19:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get average rent value and house price.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 19:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get average rent value and house price.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT AVG(house_value) AS house_value, AVG(rent_value) AS rent_value
	FROM housing_value
	WHERE zipcode = '12345'
	AND year = '2015'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND year = '2015'
	AND zipcode = '12345'
	AND number_of_units = '1'
	AND house_value_min = '1'
	AND house_value_max = '1'
	AND rent_value_min = '1'
	AND rent_value_max = '1'
	AND id = '1'
	AND

====================================================================================================

PROMPT 20:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get total housing units in 2022 grouped by zipcode.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 20:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get total housing units in 2022 grouped by zipcode.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT zipcode, count(*)
	FROM housing_value
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) > 0
	ORDER BY count(*) DESC
	LIMIT 1

Expected Output:
	zipcode, count(*)
	'10001', '1'
	'10001', '2'
	'10001', '3'
	'10001', '4'
	'10001', '5'
	'10001', '6'
	'10001', '7'
	'10001', '8'
	'10001', '9'
	'10001', '10'
	'10001', '11'
	'10001', '12'
	'10001', '13'
	'10001', '14'
	'10001', '15'
	'10001', '16'
	'10001', '17'
	'10001', '18'
	'10001', '19'
	'10001', '20'
	'10001', '21'
	'10001', '22'
	'10001', '23'
	'10001', '24'
	'10001', '25'
	'10001', '26'
	'10001', '27'
	'10001', '28'
	'10001', '29'
	'10001', '30'
	'10001', '31'
	'10001', '32'
	'10001', '33'
	'10001', '34'
	'10001', '35'
	'10001', '36'
	'10001', '37'
	'10001', '38'
	'10001', '39'
	'10001', '40'
	'10001', '41'
	'10001', '42'
	'10001', '43'
	'10001', '44'
	'10001', '45'
	'10001', '46'
	'10001', '47'
	'10001', '48'
	'10001', '49'
	'10001', '50'
	'10001', '51'
	'10001', '52'
	'10001', '53'
	'10001', '54'
	'10001', '55'
	'10001', '56'
	'10001', '57'
	'10001', '58'
	'10001', '59'
	'10001', '60'
	'10001', '61'
	'10001', '62'
	'10001', '63'
	'10001', '64'
	'10001', '65'
	'10001', '66'
	'10001', '67'
	'10001', '68'
	'10001', '69'
	'10001', '70'
	'10001', '71'
	'10001', '72'
	'10001', '73'
	'10001', '74'
	'10001', '75'
	'10001', '76'
	'10001', '77'
	'10001', '78'
	'10001', '79'
	'10001', '80'
	'10001', '81'
	'10001', '82'
	'10001', '83'
	'10001', '84'
	'10001', '85'
	'10001', '86'
	'10001', '87'
	'10001', '88'
	'10001', '89'
	'10001', '90'
	'10001', '91'
	'10001', '92'
	'10001', '93'
	'10001', '94'
	'10001', '95'
	'10001', '96'
	'10001', '97'
	'10001', '98'
	'10001', '99'
	'10001', '100'
	'10001', '101'
	'10001', '102'
	'10001', '103'
	'10001', '104'
	'10001', '105'
	'10001', '106'
	'10001', '107'
	'10001', '108'
	'10001', '109'
	'10001', '110'
	'10001', '111'
	'10001', '112'
	'10001', '113'
	'10001', '114'
	'10001', '115'
	'10001', '116'
	'10001', '117'
	'10001', '118'
	'10001', '119'
	'10001', '120'
	'10001', '121'
	'10001', '122'
	'10001', '123'
	'10001', '124'
	'10001', '125'
	'10001', '126'
	'10001', '127'
	'10001', '128'
	'10001', '129'
	'10001', '130'
	'10001', '131'
	'10001', '132'
	'10001', '133'
	'10001', '134'
	'10001', '135'
	'10001', '136'
	'10001', '137'
	'10001', '138'
	'10001', '139'
	'10001', '140'
	'10001', '141'
	'10001', '142'
	'10001', '143'
	'10001', '144'
	'10001', '145'
	'10001', '146'
	'10001', '147'
	'10001', '148'
	'10001', '149'
	'10001', '150'
	'10001', '151'
	'10001', '152'
	'10001', '153'
	'10001', '154'
	'10001', '155'
	'10001', '156'
	'10001', '157'
	'10001', '158'
	'10001', '159'
	'10001', '160'
	'10001', '161'
	'10001', '162'
	'10001', '163'
	'10001', '164'
	'10001', '165'
	'10001', '166'
	'10001', '167'
	'10001', '168'
	'10001', '169'
	'10001', '170'
	'10001', '171'
	'10001', '172'
	'10001', '173'
	'10001', '174'
	'10001', '175'
	'10001', '176'
	'10001', '177'
	'10001', '178'
	'10001', '179'
	'10001', '180'
	'10001', '181'
	'10001', '182'
	'10001', '183'
	'10001', '184'
	'10001', '185'
	'10001', '186'
	'10001', '187'
	'10001', '188'
	'10001', '189'
	'10001', '190'
	'10001', '191'
	'10001', '192'
	'10001', '193'
	'10001', '194'
	'10001', '195'
	'10001', '196'
	'10001', '197'
	'10001', '198'
	'10001', '199'
	'10001', '200'
	'10001', '201'
	'10001', '202'
	'10001', '203'
	'10001', '204'
	'10001

====================================================================================================

PROMPT 21:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, count houses built in or after 2020.

Schema: 
	housing_year_built (year, id, zipcode, number_of_units, year_built_min, year_built_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 21:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, count houses built in or after 2020.

Schema: 
	housing_year_built (year, id, zipcode, number_of_units, year_built_min, year_built_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:

Input:
	[
	[1, 1, '10001', 1, 2020, 2050],
	[1, 2, '10001', 1, 2020, 2050],
	[1, 3, '10001', 1, 2020, 2050],
	[1, 4, '10001', 1, 2020, 2050],
	[1, 5, '10001', 1, 2020, 2050],
	[1, 6, '10001', 1, 2020, 2050],
	[1, 7, '10001', 1, 2020, 2050],
	[1, 8, '10001', 1, 2020, 2050],
	[1, 9, '10001', 1, 2020, 2050],
	[1, 10, '10001', 1, 2020, 2050],
	[1, 11, '10001', 1, 2020, 2050],
	[1, 12, '10001', 1, 2020, 2050],
	[1, 13, '10001', 1, 2020, 2050],
	[1, 14, '10001', 1, 2020, 2050],
	[1, 15, '10001', 1, 2020, 2050],
	[1, 16, '10001', 1, 2020, 2050],
	[1, 17, '10001', 1, 2020, 2050],
	[1, 18, '10001', 1, 2020, 2050],
	[1, 19, '10001', 1, 2020, 2050],
	[1, 20, '10001', 1, 2020, 2050],
	[1, 21, '10001', 1, 2020, 2050],
	[1, 22, '10001', 1, 2020, 2050],
	[1, 23, '10001', 1, 2020, 2050],
	[1, 24, '10001', 1, 2020, 2050],
	[1, 25, '10001', 1, 2020, 2050],
	[1, 26, '10001', 1, 2020, 2050],
	[1, 27, '10001', 1, 2020, 2050],
	[1, 28, '10001', 1, 2020, 2050],
	[1, 29, '10001', 1, 2020, 2050],
	[1, 30, '10001', 1, 2020, 2050],
	[1, 31, '10001', 1, 2020, 2050],
	[1, 32, '10001', 1, 2020, 2050],
	[1, 33, '10001', 1, 2020, 2050],
	[1, 34, '10001', 1, 2020, 2050],
	[1, 35, '10001', 1, 2020, 2050],
	[1, 36, '10001', 1, 2020, 2050],
	[1, 37, '10001', 1, 2020, 2050],
	[1, 38, '10001', 1, 2020, 2050],
	[1, 39, '10001', 1, 2020, 2050],
	[1, 40, '10001', 1, 2020, 2050],
	[1, 41, '10001', 1, 2020, 2050],
	[1, 42, '10001', 1, 2020, 2050],
	[1, 43, '10001', 1, 2020, 2050],
	[1, 44, '10001', 1, 2020, 2050],
	[1, 45, '10001', 1, 2020, 2050],
	[1, 46, '10001', 1, 2020, 2050],
	[1, 47, '10001', 1, 2020, 2050],
	[1, 48, '10001', 1, 2020, 2050],
	[1, 49, '10001', 1, 2020, 2050],
	[1, 50, '10001', 1, 2020, 2050],
	[1, 51, '10001', 1, 2020, 2050],
	[1, 52, '10001', 1, 2020, 2050],
	[1, 53, '10001', 1, 2020, 2050],
	[1, 54, '10001', 1, 2020, 2050],
	[1, 55, '10001', 1, 2020, 2050],
	[1, 56, '10001', 1, 2020, 2050],
	[1, 57, '10001', 1, 2020, 2050],
	[1, 58, '10001', 1, 2020, 2050],
	[1, 59, '10001', 1, 2020, 2050],
	[1, 60, '10001', 1, 2020, 2050],
	[1, 61, '10001', 1, 2020, 2050],
	[1, 62, '10001', 1, 2020, 2050],
	[1, 63, '10001', 1, 2020, 2050],
	[1, 64, '10001', 1, 2020, 2050],
	[1, 65, '10001', 1, 2020, 2050],
	[1, 66, '10001', 1, 2020, 2050],
	[1, 67, '10001', 1, 2020, 2050],
	[1, 68, '10001', 1, 2020, 2050],
	[1, 69, '10001', 1, 2020, 2050],
	[1, 70, '10001', 1, 2020, 2050],
	[1, 71, '10001', 1, 2020, 2050],
	[1, 72, '10001', 1, 2020, 2050],
	[1, 73, '10001', 1, 2020, 2050],
	[1, 74, '10001', 1, 2020, 2050],
	[1, 75, '10001', 1, 2020, 2050],
	[1, 76, '10001', 1, 2020, 2050],
	[1, 77, '10001', 1, 2020, 2050],
	[1, 78, '10001', 1, 2020, 2050],
	[1, 79, '10001', 1, 2020, 2050],
	[1, 80, '10001', 1, 2020, 2050],
	[1, 81, '10001', 1, 2020, 2050],
	[1, 82, '10001', 1, 2020, 2050],
	[1, 83, '10001', 1, 2020, 2050],
	[1, 84, '10001', 1, 2020, 2050],
	[1, 85, '10001', 1, 2020, 2050],
	[1, 86, '10001', 1, 2020, 2050],
	[1, 87, '10001', 1, 2020, 2050],
	[1, 88, '10001', 1, 2020, 2050],
	[1, 89, '10001', 1, 2020, 2050],
	[1, 90, '10001', 1, 2020, 2050],
	[1, 91, '10001', 1, 2020, 2050],
	[1, 92, '10001', 1, 2020, 2050],
	[1, 93, '10001', 1, 2020, 2050],
	[1, 94, '10001', 1, 2020, 2050],
	[1, 95, '10001', 1, 2020, 2050],
	[1, 96, '10001', 1, 2020, 2050],
	[1, 97, '10001', 1, 2020, 2050],
	[1, 98, '10001', 1, 2020, 2050],
	[1, 99, '10001', 1, 2020, 2050],
	[1, 100, '10001', 1, 2020, 2050],
	[1, 101, '10001', 1, 2020, 2050],
	[1, 102, '10001', 1, 2020, 2050],
	[1, 103, '10001', 1, 2020, 2050],
	[1, 104, '10001', 1, 2020, 2050],
	[1, 105, '10001', 1, 2020, 2050],
	[1, 106, '10001', 1, 2020, 2050],
	[1, 107, '10001', 1, 2020, 2050],


====================================================================================================

PROMPT 22:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having GRAPI greater than 28% in year 2022

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 22:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having GRAPI greater than 28% in year 2022

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(*)
	FROM housing_gross_rent_percent
	WHERE year = 2022
	AND zipcode IN (
		SELECT zipcode
		FROM housing_gross_rent_percent
		WHERE year = 2022
		AND income_percent_min > 28
	)
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max > 28
	AND income_percent_min > 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28
	AND income_percent_max < 28
	AND income_percent_min < 28


====================================================================================================

PROMPT 23:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having SMOCAPI greater than 30% in year 2022.

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 23:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having SMOCAPI greater than 30% in year 2022.

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Expected Output:
	SELECT SUM(household_income_percent_with_mortgage.income_percent_max) / COUNT(household_income_percent_with_mortgage.id)
	FROM household_income_percent_with_mortgage
	WHERE household_income_percent_with_mortgage.year = 2022
	AND household_income_percent_with_mortgage.zipcode = '92601'
	AND household_income_percent_with_mortgage.income_percent_max > 30
	GROUP BY household_income_percent_with_mortgage.id
	HAVING SUM(household_income_percent_with_mortgage.income_percent_max) / COUNT(household_income_percent_with_mortgage.id) > 0.5
	ORDER BY household_income_percent_with_mortgage.id

Solution:
	SELECT SUM(household_income_percent_with_mortgage.income_percent_max) / COUNT(household_income_percent_with_mortgage.id)
	FROM household_income_percent_with_mortgage
	WHERE household_income_percent_with_mortgage.year = 2022
	AND household_income_percent_with_mortgage.zipcode = '92601'
	AND household_income_percent_with_mortgage.income_percent_max > 30
	GROUP BY household_income_percent_with_mortgage.id
	HAVING SUM(household_income_percent_with_mortgage.income_percent_max) / COUNT(household_income_percent_with_mortgage.id) > 0.5
	ORDER BY household_income_percent_with_mortgage.id


====================================================================================================

PROMPT 24:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average population of males and females by year in Georgia

Schema: 
	demographic_basics (year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 24:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average population of males and females by year in Georgia

Schema: 
	demographic_basics (year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)
	(year

====================================================================================================

PROMPT 25:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get gender ratio between males and females for each zipcode in Georgia.

Schema: 
	demographic_basics (year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 25:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get gender ratio between males and females for each zipcode in Georgia.

Schema: 
	demographic_basics (year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get gender ratio between males and females for each zipcode in Georgia.
	INSUFFICENT

Expected output:
	SELECT zipcode, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female
	FROM demographic_basics
	WHERE year = '2022'
	ORDER BY total_population_male DESC, total_population_female DESC
	LIMIT 10

## 2.2.2.2.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.

====================================================================================================

PROMPT 26:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each year after 2016, get average count of each ethnicity in Georgia.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 26:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each year after 2016, get average count of each ethnicity in Georgia.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	Prompt: For each year after 2016, get average count of each ethnicity in Georgia.
	Schema: demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)
	Answer:
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year >= 2016 AND year < 2017;

## 3.2.2.2.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1

====================================================================================================

PROMPT 27:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get average count of each ethnicity grouped by zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 27:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get average count of each ethnicity grouped by zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get average count of each ethnicity grouped by zipcode.
	INSUFFICENT
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = 2022 AND zipcode = '12345'
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = 2022 AND zipcode = '12345' AND one_race = 'white'
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = 2022 AND zipcode = '12345' AND two_or_more_races = 'white'
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = 2022 AND zipcode = '12345' AND two_or_more_races = 'white' AND two_or_more_races = 'white'
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = 2022 AND zipcode = '12345' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white' AND two_or_more_races = 'white'

====================================================================================================

PROMPT 28:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of American Indian and Alaskan Natives with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 28:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of American Indian and Alaskan Natives with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get percentage of American Indian and Alaskan Natives with respect to the total population in each zipcode.
	INSUFFICENT

Expected output:
	SELECT zipcode,
	(
		SELECT SUM(one_race)
		FROM demographic_race
		WHERE year = 2022
		AND zipcode = zipcode
	) / (
		SELECT SUM(two_or_more_races)
		FROM demographic_race
		WHERE year = 2022
		AND zipcode = zipcode
	) AS percentage
	FROM demographic_race
	WHERE year = 2022
	AND zipcode = zipcode
	AND race_total_populatio = 'American Indian and Alaskan Natives'
	AND one_race = 'American Indian and Alaskan Natives'
	AND two_or_more_races = 'American Indian and Alaskan Natives'
	AND white = 'American Indian and Alaskan Natives'
	AND black = 'American Indian and Alaskan Natives'
	AND american_indian_and_alaska_native = 'American Indian and Alaskan Natives'
	AND asian = 'American Indian and Alaskan Natives'
	AND native_hawaiian_and_other_pacific_islander = 'American Indian and Alaskan Natives'
	AND some_other_race = 'American Indian and Alaskan Natives'
	AND hispanic_or_latino_total = 'American Indian and Alaskan Natives'
	AND hispanic_or_latino = 'American Indian and Alaskan Natives'
	AND not_hispanic_or_latino = 'American Indian and Alaskan Natives'
	AND race_total_populatio = 'American Indian and Alaskan Natives'
	AND one_race = 'American Indian and Alaskan Natives'
	AND two_or_more_races = 'American Indian and Alaskan Natives'
	AND white = 'American Indian and Alaskan Natives'
	AND black = 'American Indian and Alaskan Natives'
	AND american_indian_and_alaska_native = 'American Indian and Alaskan Natives'
	AND asian = 'American Indian and Alaskan Natives'
	AND native_hawaiian_and_other_pacific_islander = 'American Indian and Alaskan Natives'
	AND some_other_race = 'American Indian and Alaskan Natives'
	AND hispanic_or_latino_total = 'American Indian and Alaskan Natives'
	AND hispanic_or_latino = 'American Indian and Alaskan Natives'
	AND not_hispanic_or_latino = 'American Indian and Alaskan Natives'
	AND race_total_populatio = 'American Indian and Alaskan Natives'
	AND one_race = 'American Indian and Alaskan Natives'
	AND two_or_more_races = 'American Indian and Alaskan Natives'
	AND white = 'American Indian and Alaskan Natives'
	AND black = 'American Indian and Alaskan Natives'
	AND american_indian_and_alaska_native = 'American Indian and Alaskan Natives'
	AND asian = 'American Indian and Alaskan Natives'
	AND native_hawaiian_and_other_pacific_islander = 'American Indian and Alaskan Natives'
	AND some_other_race = 'American Indian and Alaskan Natives'
	AND hispanic_or_latino_total = 'American Indian and Alaskan Natives'
	AND hispanic_or_latino = 'American Indian and Alaskan Natives'
	AND not_hispanic_or_latino = 'American Indian and Alaskan Natives'
	AND race_total_populatio = 'American Indian and Alaskan Natives'
	AND one_race = 'American Indian and Alaskan Natives'
	AND two_or_more_races = 'American Indian and Alaskan Natives'
	AND white = 'American Indian and Alaskan Natives'
	AND black = 'American Indian and Alaskan Natives'
	AND american_indian_and_alaska_native = 'American Indian and Alaskan Natives'
	AND asian = 'American Indian and Alaskan Natives'
	AND native_hawaiian_and_other_pacific_islander = 'American Indian and Alaskan Natives'
	AND some_other_race = 'American Indian and Alaskan Natives'
	AND hispanic_or_latino_total = 'American Indian and Alaskan Natives'
	AND hispanic_or_latino = 'American Indian and Alaskan Natives'
	AND not_hispanic_or_latino = 'American Indian and Alaskan Natives'
	AND race_total_populatio = 'American Indian and Alaskan Natives'
	AND one_race = 'American Indian and Alaskan Natives'
	AND two_or_more_races = 'American Indian and Alaskan Natives'
	AND white = 'American Indian and Alaskan Natives'
	AND black = 'American Indian and Alaskan Natives'
	AND american_indian_and_alaska_native = 'American Indian and Alaskan Natives'
	AND asian = 'American Indian and Alaskan Natives'
	AND native_hawaiian_and_other_pacific_islander = 'American Indian and Alaskan Natives'
	AND some_other_race = 'American Indian and Alaskan Natives'
	AND hispanic_or_latino_total = 'American Indian and Alaskan Natives'
	AND hispanic_or_latino = 'American Indian and Alaskan Natives'
	AND not_hispanic_or_latino = 'American Indian and Alaskan Natives'
	AND race_total_populatio = 'American Indian and Alaskan Natives'
	AND one_race = 'American Indian and Alaskan Natives'
	AND two_or_more_races = 'American Indian and Alaskan Natives'
	AND white = 'American Indian and Alaskan Natives'
	AND black = 'American Indian and Alaskan Natives'
	AND american_indian_and_alaska_native = 'American Indian and Alaskan Natives'
	AND asian = 'American Indian and Alaskan Natives'
	AND native_hawaiian_and_other_pacific_islander = 'American Indian and Alaskan Natives'
	AND some_other_race = 'American Indian and Alaskan Natives'
	AND hispanic_or_latino_total = 'American Indian and Alaskan Natives'
	AND hispanic_or_latino = 'American Indian and Alaskan Natives'
	AND not_hispanic_or_latino = 'American Indian and Alaskan Natives'
	AND race_total_populatio = 'American Indian and Alaskan Natives'
	AND one_race = 'American Indian and Alaskan Natives'
	AND two_or_more_races = 'American Indian and Alaskan Natives'
	AND white = 'American Indian and Alaskan Natives'
	AND black = 'American Indian and Alaskan Natives'
	AND american_indian_and_alaska_native = 'American Indian and Alaskan Natives'
	AND asian = 'American Indian and Alaskan Natives'
	AND native_hawaiian_and_other_pacific_islander = 'American Indian and Alaskan Natives'
	AND some_other_race = 'American Indian and Alaskan Natives'
	AND hispanic_or_latino_total = 'American Indian and Alaskan Natives'
	AND hispanic_or_latino = 'American Indian and Alaskan

====================================================================================================

PROMPT 29:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Asians with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 29:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Asians with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	FROM demographic_race
	WHERE year = 2022
	ORDER BY zipcode
	LIMIT 1

Expected Output:
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	zipcode, race_total_populatio, one_race, two_or

====================================================================================================

PROMPT 30:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 30:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	2022
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zipcode
	zip

====================================================================================================

PROMPT 31:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Hispanics/Latinos with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 31:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Hispanics/Latinos with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get percentage of Hispanics/Latinos with respect to the total population in each zipcode.
	INSUFFICENT

Expected Output:
	SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, (hispanic_or_latino_total / race_total_populatio) as percentage
	FROM demographic_race
	WHERE year = 2022
	AND zipcode = '94501'
	AND race_total_populatio = '1,945,000'
	AND one_race = '1,945,000'
	AND two_or_more_races = '0'
	AND white = '0'
	AND black = '0'
	AND american_indian_and_alaska_native = '0'
	AND asian = '0'
	AND native_hawaiian_and_other_pacific_islander = '0'
	AND some_other_race = '0'
	AND hispanic_or_latino_total = '1,945,000'
	AND hispanic_or_latino = '1,945,000'
	AND not_hispanic_or_latino = '0'
	AND (hispanic_or_latino_total / race_total_populatio) = '0.945'
	AND zipcode = '94501'
	AND race_total_populatio = '1,945,000'
	AND one_race = '1,945,000'
	AND two_or_more_races = '0'
	AND white = '0'
	AND black = '0'
	AND american_indian_and_alaska_native = '0'
	AND asian = '0'
	AND native_hawaiian_and_other_pacific_islander = '0'
	AND some_other_race = '0'
	AND hispanic_or_latino_total = '1,945,000'
	AND hispanic_or_latino = '1,945,000'
	AND not_hispanic_or_latino = '0'
	AND (hispanic_or_latino_total / race_total_populatio) = '0.945'
	AND zipcode = '94501'
	AND race_total_populatio = '1,945,000'
	AND one_race = '1,945,000'
	AND two_or_more_races = '0'
	AND white = '0'
	AND black = '0'
	AND american_indian_and_alaska_native = '0'
	AND asian = '0'
	AND native_hawaiian_and_other_pacific_islander = '0'
	AND some_other_race = '0'
	AND hispanic_or_latino_total = '1,945,000'
	AND hispanic_or_latino = '1,945,000'
	AND not_hispanic_or_latino = '0'
	AND (hispanic_or_latino_total / race_total_populatio) = '0.945'
	AND zipcode = '94501'
	AND race_total_populatio = '1,945,000'
	AND one_race = '1,945,000'
	AND two_or_more_races = '0'
	AND white = '0'
	AND black = '0'
	AND american_indian_and_alaska_native = '0'
	AND asian = '0'
	AND native_hawaiian_and_other_pacific_islander = '0'
	AND some_other_race = '0'
	AND hispanic_or_latino_total = '1,945,000'
	AND hispanic_or_latino = '1,945,000'
	AND not_hispanic_or_latino = '0'
	AND (hispanic_or_latino_total / race_total_populatio) = '0.945'
	AND zipcode = '94501'
	AND race_total_populatio = '1,945,000'
	AND one_race = '1,945,000'
	AND two_or_more_races = '0'
	AND white = '0'
	AND black = '0'
	AND american_indian_and_alaska_native = '0'
	AND asian = '0'
	AND native_hawaiian_and_other_pacific_islander = '0'
	AND some_other_race = '0'
	AND hispanic_or_latino_total = '1,945,000'
	AND hispanic_or_latino = '1,945,000'
	AND not_hispanic_or_latino = '0'
	AND (hispanic_or_latino_total / race_total_populatio) = '0.945'
	AND zipcode = '94501'
	AND race_total_populatio = '1,945,000'
	AND one_race = '1,945,000'
	AND two_or_more_races = '0'
	AND white = '0'
	AND black = '0'
	AND american_indian_and_alaska_native = '0'
	AND asian = '0'
	AND native_hawaiian_and_other_pacific_islander = '0'
	AND some_other_race = '0'
	AND hispanic_or_latino_total = '1,945,000'
	AND hispanic_or_latino = '1,945,000'
	AND not_hispanic_or_latino = '0'
	AND (hispanic_or_latino_total / race_total_populatio) = '0.945'
	AND zipcode = '94501'
	AND race_total_populatio = '1,945,000'
	AND one_race = '1,945,000'
	AND two_or_more_races = '0'
	AND white = '0'
	AND black = '0'
	AND american_indian_and_alaska_native = '0'
	AND asian = '0'
	AND native_hawaiian_and_other_pacific_islander = '0'
	AND some_other_race = '0'
	AND hispanic_or_latino_total = '1,945,000'
	AND hispanic_or_latino = '1,945,000'
	AND not_hispanic_or_latino = '0'
	AND (hispanic_or_latino_total / race_total_populatio) = '0.945'
	AND zipcode = '94501'
	AND race_total_populatio = '1,945,000'
	AND one_race = '1,945,000'
	AND two_or_more_races = '0'
	AND white = '0'
	AND black = '0'
	AND american_indian_and_alaska_native = '0'
	AND asian = '0'
	AND native_hawaiian_and_other_pacific_

====================================================================================================

PROMPT 32:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Native Hawaiian and other Pacific Inlander with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 32:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Native Hawaiian and other Pacific Inlander with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get percentage of Native Hawaiian and other Pacific Inlander with respect to the total population in each zipcode.

Solution:
	SELECT zipcode,
	(SELECT SUM(race_total_populatio) FROM demographic_race WHERE year = 2022 AND id = 1) /
	(SELECT SUM(race_total_populatio) FROM demographic_race WHERE year = 2022) * 100 AS percentage
	FROM demographic_race
	WHERE year = 2022 AND id = 1
	GROUP BY zipcode
	ORDER BY percentage DESC
	LIMIT 1

Expected Output:
	zipcode, percentage
	10001, 0.0
	10002, 0.0
	10003, 0.0
	10004, 0.0
	10005, 0.0
	10006, 0.0
	10007, 0.0
	10008, 0.0
	10009, 0.0
	10010, 0.0
	10011, 0.0
	10012, 0.0
	10013, 0.0
	10014, 0.0
	10015, 0.0
	10016, 0.0
	10017, 0.0
	10018, 0.0
	10019, 0.0
	10020, 0.0
	10021, 0.0
	10022, 0.0
	10023, 0.0
	10024, 0.0
	10025, 0.0
	10026, 0.0
	10027, 0.0
	10028, 0.0
	10029, 0.0
	10030, 0.0
	10031, 0.0
	10032, 0.0
	10033, 0.0
	10034, 0.0
	10035, 0.0
	10036, 0.0
	10037, 0.0
	10038, 0.0
	10039, 0.0
	10040, 0.0
	10041, 0.0
	10042, 0.0
	10043, 0.0
	10044, 0.0
	10045, 0.0
	10046, 0.0
	10047, 0.0
	10048, 0.0
	10049, 0.0
	10050, 0.0
	10051, 0.0
	10052, 0.0
	10053, 0.0
	10054, 0.0
	10055, 0.0
	10056, 0.0
	10057, 0.0
	10058, 0.0
	10059, 0.0
	10060, 0.0
	10061, 0.0
	10062, 0.0
	10063, 0.0
	10064, 0.0
	10065, 0.0
	10066, 0.0
	10067, 0.0
	10068, 0.0
	10069, 0.0
	10070, 0.0
	10071, 0.0
	10072, 0.0
	10073, 0.0
	10074, 0.0
	10075, 0.0
	10076, 0.0
	10077, 0.0
	10078, 0.0
	10079, 0.0
	10080, 0.0
	10081, 0.0
	10082, 0.0
	10083, 0.0
	10084, 0.0
	10085, 0.0
	10086, 0.0
	10087, 0.0
	10088, 0.0
	10089, 0.0
	10090, 0.0
	10091, 0.0
	10092, 0.0
	10093, 0.0
	10094, 0.0
	10095, 0.0
	10096, 0.0
	10097, 0.0
	10098, 0.0
	10099, 0.0
	10100, 0.0
	10101, 0.0
	10102, 0.0
	10103, 0.0
	10104, 0.0
	10105, 0.0
	10106, 0.0
	10107, 0.0
	10108, 0.0
	10109, 0.0
	10110, 0.0
	10111, 0.0
	10112, 0.0
	10113, 0.0
	10114, 0.0
	10115, 0.0
	10116, 0.0
	10117, 0.0
	10118, 0.0
	10119, 0.0
	10120, 0.0
	10121, 0.0
	10122, 0.0
	10123, 0.0
	10124, 0.0
	10125, 0.0
	10126, 0.0
	10127, 0.0
	10128, 0.0
	10129, 0.0
	10130, 0.0
	10131, 0.0
	10132, 0.0
	10133, 0.0
	10134, 0.0
	10135, 0.0
	10136, 0.0
	10137, 0.0
	10138, 0.0
	10139, 0.0
	10140, 0.0
	10141, 0.0
	10142, 0.0
	10143, 0.0
	10144, 0.0
	10145, 0.0
	10146, 0.0
	10147, 0.0
	10148, 0.0
	10149, 0.0
	10150, 0.0
	10151, 0.0
	10152, 0.0
	10153, 0.0
	10154, 0.0
	10155, 0.0
	10156, 0.0
	10157, 0.0
	10158, 0.0
	10159, 0.0
	10160, 0.0
	10161, 0.0
	10162, 0.0
	10163, 0.0
	10164, 0.0
	10165, 0.0
	10166, 0.0
	10167, 0.0
	10168, 0.0
	10169, 0.0
	10170, 0.0
	10171, 0.0
	10172, 0.0
	10173, 0.0
	10174, 0.0
	10175, 0.0
	10176, 0.0
	10177, 0.0
	10178, 0.0
	10179, 0.0
	10180, 0.0
	10181, 0.0
	10182, 0.0
	10183, 0.0
	10184, 0.0
	10185, 0.0
	10186, 0.0
	10187, 0.0
	10188, 0.0
	10189, 0.0
	10190, 0.0
	10191, 0.0
	10192, 0.0
	10193, 0.0
	10194, 0.0
	10195, 0.0
	10196, 0.0
	10197, 0.0
	10198, 0.0
	10199, 0.0
	10200, 0.0
	10201, 0.0
	10202, 0.0
	10203, 0.0
	10204, 0.0
	10205, 0.0
	10206, 0.0
	10207, 0.0
	10208, 0.0
	10209, 0.0
	10210, 0.0
	10211, 0.0
	10212, 0.0
	10213, 0.0
	10214,

====================================================================================================

PROMPT 33:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Whites with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 33:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Whites with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	Prompt: For year 2022, get percentage of Whites with respect to the total population in each zipcode.
	Schema: demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)
	Answer:
	SELECT zipcode, (white / (white + black + american_indian_and_alaska_native + asian + native_hawaiian_and_other_pacific_islander + some_other_race + hispanic_or_latino_total + hispanic_or_latino + not_hispanic_or_latino)) * 100 AS percentage
	FROM demographic_race
	WHERE year = 2022
	AND id = 1
	AND zipcode = '94501'
	AND race_total_populatio = '1,945,000'
	AND one_race = 'White'
	AND two_or_more_races = 'Black'
	AND american_indian_and_alaska_native = '0'
	AND asian = '0'
	AND native_hawaiian_and_other_pacific_islander = '0'
	AND some_other_race = '0'
	AND hispanic_or_latino_total = '0'
	AND hispanic_or_latino = '0'
	AND not_hispanic_or_latino = '0'

## 3.2.2.2.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.

====================================================================================================

PROMPT 34:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)
household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 34:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)
household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

SQL:
	SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, SMOCAPI
	FROM demographic_race
	WHERE year >= 2016
	ORDER BY SMOCAPI DESC
	LIMIT 10

Expected Output:
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, SMOCAPI
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, SMOCAPI
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, SMOCAPI
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, SMOCAPI
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, SMOCAPI
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, SMOCAPI
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, SMOCAPI
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, SMOCAPI
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, SMOCAPI
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, SMOCAPI
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, SMOCAPI
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, SMOCAPI
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, SMOCAPI
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, SMOCAPI
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, SMOCAPI
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, SMOCAPI
	zipcode, race_total_populatio, one_race, two_or_

====================================================================================================

PROMPT 35:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those travelling in car alone between year 2019 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 35:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those travelling in car alone between year 2019 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

```sql
SELECT
	zipcode,
	(car_alone - car_pool) / car_alone * 100 AS car_alone_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_pool_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_pool_change_percent,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_pool_change_percent_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_pool_change_percent_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change_change,
	(car_alone - car_pool) / (car_alone + car_pool) * 100 AS car_alone_change_percent_change_change

====================================================================================================

PROMPT 36:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in mean commute time between 2017 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 36:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in mean commute time between 2017 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

```sql
SELECT zipcode, mean_travel_time_2017, mean_travel_time_2022, mean_travel_time_change_2017_2022
FROM economic_commute_to_work
WHERE zipcode IN ('30303', '30305', '30306', '30307', '30308', '30309', '30310', '30311', '30312', '30313', '30314', '30315', '30316', '30317', '30318', '30319', '30320', '30321', '30322', '30323', '30324', '30325', '30326', '30327', '30328', '30329', '30330', '30331', '30332', '30333', '30334', '30335', '30336', '30337', '30338', '30339', '30340', '30341', '30342', '30343', '30344', '30345', '30346', '30347', '30348', '30349', '30350', '30351', '30352', '30353', '30354', '30355', '30356', '30357', '30358', '30359', '30360', '30361', '30362', '30363', '30364', '30365', '30366', '30367', '30368', '30369', '30370', '30371', '30372', '30373', '30374', '30375', '30376', '30377', '30378', '30379', '30380', '30381', '30382', '30383', '30384', '30385', '30386', '30387', '30388', '30389', '30390', '30391', '30392', '30393', '30394', '30395', '30396', '30397', '30398', '30399', '30400', '30401', '30402', '30403', '30404', '30405', '30406', '30407', '30408', '30409', '30410', '30411', '30412', '30413', '30414', '30415', '30416', '30417', '30418', '30419', '30420', '30421', '30422', '30423', '30424', '30425', '30426', '30427', '30428', '30429', '30430', '30431', '30432', '30433', '30434', '30435', '30436', '30437', '30438', '30439', '30440', '30441', '30442', '30443', '30444', '30445', '30446', '30447', '30448', '30449', '30450', '30451', '30452', '30453', '30454', '30455', '30456', '30457', '30458', '30459', '30460', '30461', '30462', '30463', '30464', '30465', '30466', '30467', '30468', '30469', '30470', '30471', '30472', '30473', '30474', '30475', '30476', '30477', '30478', '30479', '30480', '30481', '30482', '30483', '30484', '30485', '30486', '30487', '30488', '30489', '30490', '30491', '30492', '30493', '30494', '30495', '30496', '30497', '30498', '30499', '30500', '30501', '30502', '30503', '30504', '30505', '30506', '30507', '30508', '30509', '30510', '30511', '30512', '30513', '30514', '30515', '30516', '30517', '30518', '30519', '30520', '30521', '30522', '30523', '30524', '30525', '30526', '30527', '30528', '30529', '30530', '30531', '30532', '30533', '30534', '30535', '30536', '30537', '30538', '30539', '30540', '30541', '30542', '30543', '30544', '30545', '30546', '30547', '30548', '30549', '30550', '30551', '30552', '30553', '30554', '30555', '30556', '30557', '30558', '30559', '30560', '30561', '30562', '30563', '30564', '30565', '30566', '30567', '30568', '30569', '30570', '30571', '30572', '30573', '30574', '30575', '30576', '30577', '30578', '30579', '30580', '30581', '30582', '30583', '30584', '30585', '30586', '30587', '30588', '30589', '30590', '30591', '30592', '30593', '30594', '30595', '30596', '30597', '30598', '30599', '30600', '30601', '30602', '30603', '30604', '30605', '30606', '30607', '30608', '30609', '30610', '30611', '30612', '30613', '30614', '30615', '30616', '30617', '30618', '30619', '30620', '30621', '30622', '30623', '30624', '30625', '30626', '30627', '30628', '30629', '30630', '30631', '30632', '30633', '30634', '30635', '30636', '30637', '30638', '30639', '30640', '30641', '30642', '30643', '30644', '30645', '30646', '30647', '30648', '30649', '30650', '30651', '30652', '30653', '30654', '30655', '30656', '30657', '30658', '30659', '30660', '30661', '30662', '30663', '30664', '30665', '30666', '30667', '30668', '30669', '30670', '30671', '30672', '30673', '30674', '30675', '30676', '30677', '30678', '30679', '30680', '30681', '30682', '30683', '30684', '30685', '30686', '30687', '30688', '30689', '30690', '30691', '30692', '30693', '30694', '30695', '30696', '30697', '30698', '30699', '30700', '30701', '30702', '30703', '30704', '30705', '30706', '30707', '30708', '30709', '30710', '30711', '30712', '30713', '30714', '30715', '30716', '30717', '30718', '30719', '30720', '30721', '30722', '30723', '30724', '30725', '30726', '30727', '30728', '30729', '30730', '30731', '30732', '30733', '30734', '30735', '30736', '30737', '30738', '30739', '30740', '30741', '30742', '30743', '30744', '30745', '30746', '30747', '30748', '30749', '30750', '30751', '30752', '30753', '30754', '30755', '30756', '30757', '30758', '30759', '30760', '30761', '30762', '30763', '30764', '30765', '30766', '30767', '30768', '30769

====================================================================================================

PROMPT 37:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those working from home between year 2019 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 37:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those working from home between year 2019 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk) / total_workers AS car_alone_percent,
	(car_alone + car_pool + public_transport + walk) / total_workers AS car_pool_percent,
	(car_alone + car_pool + public_transport + walk) / total_workers AS public_transport_percent,
	(car_alone + car_pool + public_transport + walk) / total_workers AS walk_percent,
	(car_alone + car_pool + public_transport + walk) / total_workers AS other_percent,
	(car_alone + car_pool + public_transport + walk) / total_workers AS work_from_home_percent,
	(car_alone + car_pool + public_transport + walk) / total_workers AS mean_travel_time_percent
FROM economic_commute_to_work
WHERE year = 2019
AND zipcode

====================================================================================================

PROMPT 38:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of each commute type when commuting to work.

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 38:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of each commute type when commuting to work.

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get percentage of each commute type when commuting to work.
	INSUFFICENT

Expected output:
	SELECT year,
	car_alone,
	car_pool,
	public_transport,
	walk,
	other,
	work_from_home,
	mean_travel_time,
	car_alone + car_pool + public_transport + walk + other AS total_commute_type
	FROM economic_commute_to_work
	WHERE year = 2022
	AND work_from_home = 1
	AND mean_travel_time = 0
	AND car_alone = 1
	AND car_pool = 1
	AND public_transport = 1
	AND walk = 1
	AND other = 1
	AND work_from_home = 1
	AND mean_travel_time = 0
	AND car_alone + car_pool + public_transport + walk + other = 1
	ORDER BY total_commute_type DESC
	LIMIT 1

Expected output:
	SELECT year,
	car_alone,
	car_pool,
	public_transport,
	walk,
	other,
	work_from_home,
	mean_travel_time,
	car_alone + car_pool + public_transport + walk + other AS total_commute_type
	FROM economic_commute_to_work
	WHERE year = 2022
	AND work_from_home = 1
	AND mean_travel_time = 0
	AND car_alone = 1
	AND car_pool = 1
	AND public_transport = 1
	AND walk = 1
	AND other = 1
	AND work_from_home = 1
	AND mean_travel_time = 0
	AND car_alone + car_pool + public_transport + walk + other = 1
	ORDER BY total_commute_type DESC
	LIMIT 1

Expected output:
	SELECT year,
	car_alone,
	car_pool,
	public_transport,
	walk,
	other,
	work_from_home,
	mean_travel_time,
	car_alone + car_pool + public_transport + walk + other AS total_commute_type
	FROM economic_commute_to_work
	WHERE year = 2022
	AND work_from_home = 1
	AND mean_travel_time = 0
	AND car_alone = 1
	AND car_pool = 1
	AND public_transport = 1
	AND walk = 1
	AND other = 1
	AND work_from_home = 1
	AND mean_travel_time = 0
	AND car_alone + car_pool + public_transport + walk + other = 1
	ORDER BY total_commute_type DESC
	LIMIT 1

Expected output:
	SELECT year,
	car_alone,
	car_pool,
	public_transport,
	walk,
	other,
	work_from_home,
	mean_travel_time,
	car_alone + car_pool + public_transport + walk + other AS total_commute_type
	FROM economic_commute_to_work
	WHERE year = 2022
	AND work_from_home = 1
	AND mean_travel_time = 0
	AND car_alone = 1
	AND car_pool = 1
	AND public_transport = 1
	AND walk = 1
	AND other = 1
	AND work_from_home = 1
	AND mean_travel_time = 0
	AND car_alone + car_pool + public_transport + walk + other = 1
	ORDER BY total_commute_type DESC
	LIMIT 1

Expected output:
	SELECT year,
	car_alone,
	car_pool,
	public_transport,
	walk,
	other,
	work_from_home,
	mean_travel_time,
	car_alone + car_pool + public_transport + walk + other AS total_commute_type
	FROM economic_commute_to_work
	WHERE year = 2022
	AND work_from_home = 1
	AND mean_travel_time = 0
	AND car_alone = 1
	AND car_pool = 1
	AND public_transport = 1
	AND walk = 1
	AND other = 1
	AND work_from_home = 1
	AND mean_travel_time = 0
	AND car_alone + car_pool + public_transport + walk + other = 1
	ORDER BY total_commute_type DESC
	LIMIT 1

Expected output:
	SELECT year,
	car_alone,
	car_pool,
	public_transport,
	walk,
	other,
	work_from_home,
	mean_travel_time,
	car_alone + car_pool + public_transport + walk + other AS total_commute_type
	FROM economic_commute_to_work
	WHERE year = 2022
	AND work_from_home = 1
	AND mean_travel_time = 0
	AND car_alone = 1
	AND car_pool = 1
	AND public_transport = 1
	AND walk = 1
	AND other = 1
	AND work_from_home = 1
	AND mean_travel_time = 0
	AND car_alone + car_pool + public_transport + walk + other = 1
	ORDER BY total_commute_type DESC
	LIMIT 1

Expected output:
	SELECT year,
	car_alone,
	car_pool,
	public_transport,
	walk,
	other,
	work_from_home,
	mean_travel_time,
	car_alone + car_pool + public_transport + walk + other AS total_commute_type
	FROM economic_commute_to_work
	WHERE year = 2022
	AND work_from_home = 1
	AND mean_travel_time = 0
	AND car_alone = 1
	AND car_pool = 1
	AND public_transport = 1
	AND walk = 1
	AND other = 1
	AND work_from_home = 1
	AND mean_travel_time = 0
	AND car_alone + car_pool + public_transport + walk + other = 1
	ORDER BY total_commute_type DESC
	LIMIT 1

Expected output:
	SELECT year,
	car_alone,
	car_pool,
	public_transport,
	walk,
	other,
	work_from_home,
	mean_travel_time,
	car_alone + car_pool + public_transport + walk + other AS total_commute_type
	FROM economic_commute_to_work
	WHERE year = 2022
	AND work_from_home = 1
	AND mean_travel_time = 0
	AND car_alone = 1
	AND car_pool = 1
	AND public_transport = 1
	AND walk = 1
	AND other = 1
	AND work_from_home = 1
	AND mean_travel_time = 0
	AND car_alone + car_pool + public_transport + walk + other = 1
	ORDER BY total_commute_type DESC
	LIMIT 1

Expected output:
	SELECT year,
	car_alone,
	car_pool,
	public_transport,
	walk,
	other,
	work_from_home,
	mean_travel_time,
	car_alone + car_pool + public_transport + walk + other AS total_commute_type
	FROM economic_commute_to_work
	WHERE year = 2022
	AND work_from_home = 1
	AND mean_travel_time = 0
	AND car_alone = 1
	AND car_pool = 1
	AND public_transport = 1
	AND walk = 1
	AND other = 1
	AND work_from_home = 1
	AND mean_travel_time = 0
	AND car_alone + car_pool + public_transport + walk + other = 1
	ORDER BY total_commute_type DESC
	LIMIT 1

Expected output:
	SELECT year,
	car_alone,
	car_pool,
	public_transport

====================================================================================================

PROMPT 39:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get median and mean household income for each year.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 39:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get median and mean household income for each year.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT median_household_income, mean_household_income
	FROM economic_income_and_benefits
	WHERE year = '2010'
	AND zipcode = '12345'
	AND total_households > 0
	AND median_household_income > 0
	AND mean_household_income > 0
	AND median_household_income < mean_household_income
	ORDER BY median_household_income DESC
	LIMIT 1

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_household_income
	'10,000'

Expected output:
	median_household_income, mean_house

====================================================================================================

PROMPT 40:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of households with and without mortgage for each year.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 40:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of households with and without mortgage for each year.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT year, SUM(units_with_mortgage) / SUM(units_without_mortgage)
	FROM housing_mortgage
	GROUP BY year
	ORDER BY year;

Expected Output:
	year, units_with_mortgage, units_without_mortgage, units_with_mortgage / units_without_mortgage
	2000, 0, 0, 0
	2001, 0, 0, 0
	2002, 0, 0, 0
	2003, 0, 0, 0
	2004, 0, 0, 0
	2005, 0, 0, 0
	2006, 0, 0, 0
	2007, 0, 0, 0
	2008, 0, 0, 0
	2009, 0, 0, 0
	2010, 0, 0, 0
	2011, 0, 0, 0
	2012, 0, 0, 0
	2013, 0, 0, 0
	2014, 0, 0, 0
	2015, 0, 0, 0
	2016, 0, 0, 0
	2017, 0, 0, 0
	2018, 0, 0, 0
	2019, 0, 0, 0
	2020, 0, 0, 0
	2021, 0, 0, 0
	2022, 0, 0, 0
	2023, 0, 0, 0
	2024, 0, 0, 0
	2025, 0, 0, 0
	2026, 0, 0, 0
	2027, 0, 0, 0
	2028, 0, 0, 0
	2029, 0, 0, 0
	2030, 0, 0, 0
	2031, 0, 0, 0
	2032, 0, 0, 0
	2033, 0, 0, 0
	2034, 0, 0, 0
	2035, 0, 0, 0
	2036, 0, 0, 0
	2037, 0, 0, 0
	2038, 0, 0, 0
	2039, 0, 0, 0
	2040, 0, 0, 0
	2041, 0, 0, 0
	2042, 0, 0, 0
	2043, 0, 0, 0
	2044, 0, 0, 0
	2045, 0, 0, 0
	2046, 0, 0, 0
	2047, 0, 0, 0
	2048, 0, 0, 0
	2049, 0, 0, 0
	2050, 0, 0, 0
	2051, 0, 0, 0
	2052, 0, 0, 0
	2053, 0, 0, 0
	2054, 0, 0, 0
	2055, 0, 0, 0
	2056, 0, 0, 0
	2057, 0, 0, 0
	2058, 0, 0, 0
	2059, 0, 0, 0
	2060, 0, 0, 0
	2061, 0, 0, 0
	2062, 0, 0, 0
	2063, 0, 0, 0
	2064, 0, 0, 0
	2065, 0, 0, 0
	2066, 0, 0, 0
	2067, 0, 0, 0
	2068, 0, 0, 0
	2069, 0, 0, 0
	2070, 0, 0, 0
	2071, 0, 0, 0
	2072, 0, 0, 0
	2073, 0, 0, 0
	2074, 0, 0, 0
	2075, 0, 0, 0
	2076, 0, 0, 0
	2077, 0, 0, 0
	2078, 0, 0, 0
	2079, 0, 0, 0
	2080, 0, 0, 0
	2081, 0, 0, 0
	2082, 0, 0, 0
	2083, 0, 0, 0
	2084, 0, 0, 0
	2085, 0, 0, 0
	2086, 0, 0, 0
	2087, 0, 0, 0
	2088, 0, 0, 0
	2089, 0, 0, 0
	2090, 0, 0, 0
	2091, 0, 0, 0
	2092, 0, 0, 0
	2093, 0, 0, 0
	2094, 0, 0, 0
	2095, 0, 0, 0
	2096, 0, 0, 0
	2097, 0, 0, 0
	2098, 0, 0, 0
	2099, 0, 0, 0
	2100, 0, 0, 0
	2101, 0, 0, 0
	2102, 0, 0, 0
	2103, 0, 0, 0
	2104, 0, 0, 0
	2105, 0, 0, 0
	2106, 0, 0, 0
	2107, 0, 0, 0
	2108, 0, 0, 0
	2109, 0, 0, 0
	2110, 0, 0, 0
	2111, 0, 0, 0
	2112, 0, 0, 0
	2113, 0, 0, 0
	2114, 0, 0, 0
	2115, 0, 0, 0
	2116, 0, 0, 0
	2117, 0, 0, 0
	2118, 0, 0, 0
	2119, 0, 0, 0
	2120, 0, 0, 0
	2121, 0, 0, 0
	2122, 0, 0, 0
	2123, 0, 0, 0
	2124, 0, 0, 0
	2125, 0, 0, 0
	2126, 0, 0, 0
	2127, 0, 0, 0
	2128, 0, 0, 0
	2129, 0, 0, 0
	2130, 0, 0, 0
	2131, 0, 0, 0
	2132, 0, 0, 0
	2133, 0, 0, 0
	2134, 0, 0, 0
	2135, 0, 0, 0
	2136, 0, 0, 0
	2137, 0, 0, 0
	2138, 0, 0, 0
	2139, 0, 0, 0
	2140, 0, 0, 0
	2141, 0, 0, 0
	2142, 0, 0, 0
	2143, 0, 0, 0
	2144, 0, 0, 0
	2145, 0, 0, 0
	2146, 0, 0, 0
	2147, 0, 0, 0
	2148, 0, 0, 0
	2149, 0, 0, 0
	2150, 0, 0, 0
	2151, 0, 0, 0
	2152, 0, 0, 0
	2153, 0, 0, 0
	2154, 0, 0, 0
	2155, 0, 0, 0
	2156, 0, 0, 0
	2157, 0, 0, 0
	2158, 0, 0, 0
	2159, 0, 0, 0
	2160, 0, 0, 0
	2161, 0, 0, 0
	2162, 0, 0, 0
	2163, 0, 0, 0
	2164, 0, 0, 0
	2165, 0, 0, 0
	2166, 0, 0, 0
	2167, 0, 0, 0
	2168, 0, 0, 0
	2169, 0, 0, 0
	2170, 0, 0, 0
	2171, 0, 0, 0
	2172, 0, 0, 0
	2173, 0, 0, 0
	2174, 0, 0, 0
	2175, 0, 0, 0
	2176, 0, 0, 0
	2177, 0, 0, 0
	2178, 0, 0, 0
	2179, 0, 0, 0
	2180, 0, 0, 0
	2181, 0, 0, 0
	2182, 0, 0, 0
	2183, 0, 0, 0
	2184, 0, 0, 0
	2185, 0, 0, 0
	2186, 0, 0, 0
	2187, 0, 0, 0
	2188,

====================================================================================================

PROMPT 41:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get mean commute time and average housing value.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 41:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get mean commute time and average housing value.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode, get mean commute time and average housing value.

Solution:
	SELECT zipcode, AVG(commute_time) AS mean_commute_time, AVG(housing_value) AS mean_housing_value
	FROM economic_income_and_benefits
	GROUP BY zipcode
	ORDER BY mean_commute_time DESC
	LIMIT 1

## 3.1.2.2.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1

====================================================================================================

PROMPT 42:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get mean commute time by zipcode in the year 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 42:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get mean commute time by zipcode in the year 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT AVG(median_household_income)
	FROM economic_income_and_benefits
	WHERE year = 2022
	AND zipcode = '12345'
	AND total_households > 100000
	AND total_households < 200000
	AND median_household_income > 100000
	AND median_household_income < 200000
	AND mean_household_income > 100000
	AND mean_household_income < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	AND total_households > 100000
	AND total_households < 200000
	

====================================================================================================

PROMPT 43:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average housing rent and mean household income across all zipcodes for the year 2022.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)
economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 43:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average housing rent and mean household income across all zipcodes for the year 2022.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)
economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Hint:
	Use the following query to get the average housing rent and mean household income across all zipcodes for the year 2022.
	SELECT avg(housing_rent.rent_value_min), avg(housing_rent.rent_value_max)
	FROM housing_rent
	WHERE housing_rent.year = 2022
	GROUP BY housing_rent.zipcode
	ORDER BY housing_rent.zipcode

Hint:
	Use the following query to get the total number of households and the median household income for all zipcodes for the year 2022.
	SELECT economic_income_and_benefits.total_households, economic_income_and_benefits.median_household_income
	FROM economic_income_and_benefits
	WHERE economic_income_and_benefits.year = 2022
	ORDER BY economic_income_and_benefits.zipcode

Hint:
	Use the following query to get the mean household income for all zipcodes for the year 2022.
	SELECT economic_income_and_benefits.mean_household_income
	FROM economic_income_and_benefits
	WHERE economic_income_and_benefits.year = 2022
	ORDER BY economic_income_and_benefits.zipcode

Hint:
	Use the following query to get the total number of households and the median household income for all zipcodes for the year 2022.
	SELECT economic_income_and_benefits.total_households, economic_income_and_benefits.median_household_income
	FROM economic_income_and_benefits
	WHERE economic_income_and_benefits.year = 2022
	ORDER BY economic_income_and_benefits.zipcode

Hint:
	Use the following query to get the mean household income for all zipcodes for the year 2022.
	SELECT economic_income_and_benefits.mean_household_income
	FROM economic_income_and_benefits
	WHERE economic_income_and_benefits.year = 2022
	ORDER BY economic_income_and_benefits.zipcode

Hint:
	Use the following query to get the total number of households and the median household income for all zipcodes for the year 2022.
	SELECT economic_income_and_benefits.total_households, economic_income_and_benefits.median_household_income
	FROM economic_income_and_benefits
	WHERE economic_income_and_benefits.year = 2022
	ORDER BY economic_income_and_benefits.zipcode

Hint:
	Use the following query to get the mean household income for all zipcodes for the year 2022.
	SELECT economic_income_and_benefits.mean_household_income
	FROM economic_income_and_benefits
	WHERE economic_income_and_benefits.year = 2022
	ORDER BY economic_income_and_benefits.zipcode

Hint:
	Use the following query to get the total number of households and the median household income for all zipcodes for the year 2022.
	SELECT economic_income_and_benefits.total_households, economic_income_and_benefits.median_household_income
	FROM economic_income_and_benefits
	WHERE economic_income_and_benefits.year = 2022
	ORDER BY economic_income_and_benefits.zipcode

Hint:
	Use the following query to get the mean household income for all zipcodes for the year 2022.
	SELECT economic_income_and_benefits.mean_household_income
	FROM economic_income_and_benefits
	WHERE economic_income_and_benefits.year = 2022
	ORDER BY economic_income_and_benefits.zipcode

Hint:
	Use the following query to get the total number of households and the median household income for all zipcodes for the year 2022.
	SELECT economic_income_and_benefits.total_households, economic_income_and_benefits.median_household_income
	FROM economic_income_and_benefits
	WHERE economic_income_and_benefits.year = 2022
	ORDER BY economic_income_and_benefits.zipcode

Hint:
	Use the following query to get the mean household income for all zipcodes for the year 2022.
	SELECT economic_income_and_benefits.mean_household_income
	FROM economic_income_and_benefits
	WHERE economic_income_and_benefits.year = 2022
	ORDER BY economic_income_and_benefits.zipcode

Hint:
	Use the following query to get the total number of households and the median household income for all zipcodes for the year 2022.
	SELECT economic_income_and_benefits.total_households, economic_income_and_benefits.median_household_income
	FROM economic_income_and_benefits
	WHERE economic_income_and_benefits.year = 2022
	ORDER BY economic_income_and_benefits.zipcode

Hint:
	Use the following query to get the mean household income for all zipcodes for the year 2022.
	SELECT economic_income_and_benefits.mean_household_income
	FROM economic_income_and_benefits
	WHERE economic_income_and_benefits.year = 2022
	ORDER BY economic_income_and_benefits.zipcode

Hint:
	Use the following query to get the total number of households and the median household income for all zipcodes for the year 2022.
	SELECT economic_income_and_benefits.total_households, economic_income_and_benefits.median_household_income
	FROM economic_income_and_benefits
	WHERE economic_income_and_benefits.year = 2022
	ORDER BY economic_income_and_benefits.zipcode

Hint:
	Use the following query to get the mean household income for all zipcodes for the year 2022.
	SELECT economic_income_and_benefits.mean_household_income
	FROM economic_income_and_benefits
	WHERE economic_income_and_benefits.year = 2022
	ORDER BY economic_income_and_benefits.zipcode

Hint:
	Use the following query to get the total number of households and the median household income for all zipcodes for the year 2022.
	SELECT economic_income_and_benefits.total_households, economic_income_and_benefits.median_household_income
	FROM economic_income_and_benefits
	WHERE economic_income_and_benefits.year = 2022
	ORDER BY economic_income_and_benefits.zipcode

Hint:
	Use the following query to get the mean household income for all zipcodes for the year 2022.
	SELECT economic_income_and_benefits.mean_household_income
	FROM economic_income_and_benefits
	WHERE economic_income_and_benefits.year = 2022
	ORDER BY economic_income_and_benefits.zipcode

Hint:
	Use the following query to get the total number of households and the median household income for all zipcodes for the year 2022.
	SELECT economic_income_and_benefits.total_households, economic_income_and_benefits.median_household_income
	FROM economic_income_and_benefits
	WHERE economic_income_and_benefits.year = 2022
	ORDER BY economic_income_and_benefits.zipcode

Hint:
	Use the following query to get the mean household income for all zipcodes for the year 2022.
	SELECT economic_income_and_benefits.mean_household_income
	FROM economic_income_and_benefits
	WHERE economic_income_and_benefits.year = 2022
	ORDER BY economic_income_and_benefits.zipcode

Hint:
	Use the following query to get the total number of households and the median household income for all zipcodes for the year 2022.
	SELECT economic_income_and_benefits.total_households, economic_income_and_benefits.median_household_income
	FROM economic_income_and_

====================================================================================================

PROMPT 44:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 44:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode in year 2022, get median household income.
	INSUFFICENT

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_income_and_benefics WHERE year = 2022 AND zipcode = '12345'

Expected output:
	SELECT median_household_income FROM economic_

====================================================================================================

PROMPT 45:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get change in averaged median household income from 2017 to 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 45:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get change in averaged median household income from 2017 to 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

```sql
SELECT zipcode,
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2017 AND id = 1) -
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2022 AND id = 1)
FROM economic_income_and_benefits
WHERE year = 2022 AND id = 1;
```

```sql
SELECT zipcode,
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2017 AND id = 1) -
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2022 AND id = 1)
FROM economic_income_and_benefits
WHERE year = 2017 AND id = 1;
```

```sql
SELECT zipcode,
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2017 AND id = 1) -
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2022 AND id = 1)
FROM economic_income_and_benefits
WHERE year = 2022 AND id = 1;
```

```sql
SELECT zipcode,
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2017 AND id = 1) -
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2022 AND id = 1)
FROM economic_income_and_benefits
WHERE year = 2017 AND id = 1;
```

```sql
SELECT zipcode,
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2017 AND id = 1) -
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2022 AND id = 1)
FROM economic_income_and_benefits
WHERE year = 2022 AND id = 1;
```

```sql
SELECT zipcode,
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2017 AND id = 1) -
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2022 AND id = 1)
FROM economic_income_and_benefits
WHERE year = 2017 AND id = 1;
```

```sql
SELECT zipcode,
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2017 AND id = 1) -
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2022 AND id = 1)
FROM economic_income_and_benefits
WHERE year = 2022 AND id = 1;
```

```sql
SELECT zipcode,
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2017 AND id = 1) -
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2022 AND id = 1)
FROM economic_income_and_benefits
WHERE year = 2017 AND id = 1;
```

```sql
SELECT zipcode,
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2017 AND id = 1) -
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2022 AND id = 1)
FROM economic_income_and_benefits
WHERE year = 2022 AND id = 1;
```

```sql
SELECT zipcode,
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2017 AND id = 1) -
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2022 AND id = 1)
FROM economic_income_and_benefits
WHERE year = 2017 AND id = 1;
```

```sql
SELECT zipcode,
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2017 AND id = 1) -
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2022 AND id = 1)
FROM economic_income_and_benefits
WHERE year = 2022 AND id = 1;
```

```sql
SELECT zipcode,
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2017 AND id = 1) -
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2022 AND id = 1)
FROM economic_income_and_benefits
WHERE year = 2017 AND id = 1;
```

```sql
SELECT zipcode,
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2017 AND id = 1) -
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2022 AND id = 1)
FROM economic_income_and_benefits
WHERE year = 2022 AND id = 1;
```

```sql
SELECT zipcode,
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2017 AND id = 1) -
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2022 AND id = 1)
FROM economic_income_and_benefits
WHERE year = 2017 AND id = 1;
```

```sql
SELECT zipcode,
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2017 AND id = 1) -
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2022 AND id = 1)
FROM economic_income_and_benefits
WHERE year = 2022 AND id = 1;
```

```sql
SELECT zipcode,
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2017 AND id = 1) -
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2022 AND id = 1)
FROM economic_income_and_benefits
WHERE year = 2017 AND id = 1;
```

```sql
SELECT zipcode,
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2017 AND id = 1) -
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2022 AND id = 1)
FROM economic_income_and_benefits
WHERE year = 2022 AND id = 1;
```

```sql
SELECT zipcode,
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2017 AND id = 1) -
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2022 AND id = 1)
FROM economic_income_and_benefits
WHERE year = 2017 AND id = 1;
```

```sql
SELECT zipcode,
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2017 AND id = 1) -
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2022 AND id = 1)
FROM economic_income_and_benefits
WHERE year = 2017 AND id = 1;
```

```sql
SELECT zipcode,
	(SELECT avg(median_household_income) FROM economic_income_and_benefits WHERE year = 2017 AND id = 1) -
	(SELECT avg(median_household_income) FROM economic_income_and_benefics WHERE year = 2022 AND id = 1)
FROM economic

====================================================================================================

PROMPT 46:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, get median and mean household income over all the years.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 46:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, get median and mean household income over all the years.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	[['1990', '1', '1', '1', '1', '1'], ['1991', '1', '1', '1', '1', '1'], ['1992', '1', '1', '1', '1', '1'], ['1993', '1', '1', '1', '1', '1'], ['1994', '1', '1', '1', '1', '1'], ['1995', '1', '1', '1', '1', '1'], ['1996', '1', '1', '1', '1', '1'], ['1997', '1', '1', '1', '1', '1'], ['1998', '1', '1', '1', '1', '1'], ['1999', '1', '1', '1', '1', '1'], ['2000', '1', '1', '1', '1', '1'], ['2001', '1', '1', '1', '1', '1'], ['2002', '1', '1', '1', '1', '1'], ['2003', '1', '1', '1', '1', '1'], ['2004', '1', '1', '1', '1', '1'], ['2005', '1', '1', '1', '1', '1'], ['2006', '1', '1', '1', '1', '1'], ['2007', '1', '1', '1', '1', '1'], ['2008', '1', '1', '1', '1', '1'], ['2009', '1', '1', '1', '1', '1'], ['2010', '1', '1', '1', '1', '1'], ['2011', '1', '1', '1', '1', '1'], ['2012', '1', '1', '1', '1', '1'], ['2013', '1', '1', '1', '1', '1'], ['2014', '1', '1', '1', '1', '1'], ['2015', '1', '1', '1', '1', '1'], ['2016', '1', '1', '1', '1', '1'], ['2017', '1', '1', '1', '1', '1'], ['2018', '1', '1', '1', '1', '1'], ['2019', '1', '1', '1', '1', '1'], ['2020', '1', '1', '1', '1', '1'], ['2021', '1', '1', '1', '1', '1'], ['2022', '1', '1', '1', '1', '1'], ['2023', '1', '1', '1', '1', '1'], ['2024', '1', '1', '1', '1', '1'], ['2025', '1', '1', '1', '1', '1'], ['2026', '1', '1', '1', '1', '1'], ['2027', '1', '1', '1', '1', '1'], ['2028', '1', '1', '1', '1', '1'], ['2029', '1', '1', '1', '1', '1'], ['2030', '1', '1', '1', '1', '1'], ['2031', '1', '1', '1', '1', '1'], ['2032', '1', '1', '1', '1', '1'], ['2033', '1', '1', '1', '1', '1'], ['2034', '1', '1', '1', '1', '1'], ['2035', '1', '1', '1', '1', '1'], ['2036', '1', '1', '1', '1', '1'], ['2037', '1', '1', '1', '1', '1'], ['2038', '1', '1', '1', '1', '1'], ['2039', '1', '1', '1', '1', '1'], ['2040', '1', '1', '1', '1', '1'], ['2041', '1', '1', '1', '1', '1'], ['2042', '1', '1', '1', '1', '1'], ['2043', '1', '1', '1', '1', '1'], ['2044', '1', '1', '1', '1', '1'], ['2045', '1', '1', '1', '1', '1'], ['2046', '1', '1', '1', '1', '1'], ['2047', '1', '1', '1', '1', '1'], ['2048', '1', '1', '1', '1', '1'], ['2049', '1', '1', '1', '1', '1'], ['2050', '1', '1', '1', '1', '1'], ['2051', '1', '1', '1', '1', '1'], ['2052', '1', '1', '1', '1', '1'], ['2053', '1', '1', '1', '1', '1'], ['2054', '1', '1', '1', '1', '1'], ['2055', '1', '1', '1', '1', '1'], ['2056', '1', '1', '1', '1', '1'], ['2057', '1', '1', '1', '1', '1'], ['2058', '1', '1', '1', '1', '1'], ['2059', '1', '1', '1', '1', '1'], ['2060', '1', '1', '1', '1', '1'], ['2061', '1', '1', '1', '1', '1'], ['2062', '1', '1', '1', '1', '1'], ['2063', '1', '1', '1', '1', '1'], ['2064', '1', '1', '1', '1', '1'], ['2065', '1', '1', '1', '1', '1'], ['2066', '1', '1', '1', '1', '1'], ['2067', '1', '1', '1', '1', '1'], ['2068', '1', '1', '1', '1', '1'], ['2069', '1', '1', '1', '1', '1'], ['2070', '1', '1', '1', '1', '1'], ['2071', '1', '1', '1', '1', '1'], ['2072', '1', '1', '1', '1', '1'], ['2073', '1', '1', '1', '1', '1'], ['2074', '1', '1', '1', '1', '1'], ['2075', '1', '1', '1', '1', '1'], ['2076', '1', '1', '1', '1', '1'], ['2077', '1', '1', '1', '1', '1'], ['2078', '1', '1', '1', '1', '1'], ['2079', '1', '1', '1', '1', '1'], ['2080', '1', '1', '1', '1', '1'], ['2081', '1', '1', '1', '1', '1'], ['2082', '1', '1', '1', '1', '1'], ['2083', '1', '1', '1', '1', '1'], ['2084', '1', '1', '1', '1', '1'], ['2085', '1', '1', '1', '1', '1'], ['2086', '1', '1', '1', '1', '1'], ['2087', '1', '1', '1', '1', '1'], ['2088', '1', '1', '1', '1', '1'], ['2089', '1', '1', '1', '1', '1'], ['2090', '1', '1', '1', '1', '1'], ['2091', '1', '1', '1', '1', '1'], ['2092', '1', '1', '1', '1',

====================================================================================================

PROMPT 47:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get percentage of units with mortgage and median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 47:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get percentage of units with mortgage and median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:

Input:
	[
		[
			'year',
			'id',
			'zipcode',
			'units_with_mortgage',
			'units_without_mortgage'
		],
		[
			'2015',
			'1',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'2',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'3',
			'10001',
			'15',
			'30'
		],
		[
			'2015',
			'4',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'5',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'6',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'7',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'8',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'9',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'10',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'11',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'12',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'13',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'14',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'15',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'16',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'17',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'18',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'19',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'20',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'21',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'22',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'23',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'24',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'25',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'26',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'27',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'28',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'29',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'30',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'31',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'32',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'33',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'34',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'35',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'36',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'37',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'38',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'39',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'40',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'41',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'42',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'43',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'44',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'45',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'46',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'47',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'48',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'49',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'50',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'51',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'52',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'53',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'54',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'55',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'56',
			'10001',
			'10',
			'20'
		],
		[
			'2015',
			'57',
			'10001',
			'5',
			'15'
		],
		[
			'2015',
			'58',
			'10001',
			'10',
			'

====================================================================================================

PROMPT 48:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in the year 2022, get average housing value and median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 48:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in the year 2022, get average housing value and median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each zipcode in the year 2022, get average housing value and median household income.
	For each

====================================================================================================

PROMPT 49:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, find the change in percentage of population with no health insurance from year 2017 to 2022.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 49:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, find the change in percentage of population with no health insurance from year 2017 to 2022.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

```sql
SELECT zipcode,
	(no_health_insurance / total_population) * 100 AS no_health_insurance_percentage,
	(with_health_insurance / total_population) * 100 AS with_health_insurance_percentage
FROM economic_health_insurance
WHERE year = '2017'
ORDER BY zipcode
```

## Solution

```sql
SELECT zipcode,
	(no_health_insurance / total_population) * 100 AS no_health_insurance_percentage,
	(with_health_insurance / total_population) * 100 AS with_health_insurance_percentage
FROM economic_health_insurance
WHERE year = '2017'
ORDER BY zipcode
```

## Reference

[1] https://www.census.gov/data/tables/time-series/demo/popest/pst-est2016.html


====================================================================================================

PROMPT 50:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 50:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.
	SELECT zipcode, (100 * no_health_insurance) / total_population AS no_health_insurance, (100 * rent_value_max) / number_of_units AS rent_value_max
	FROM economic_health_insurance
	WHERE year = 2022
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND zipcode IN (SELECT zipcode FROM zip_code_table)
	AND

====================================================================================================

PROMPT 51:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average housing price.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 51:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average housing price.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:

```
Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average housing price.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```

```


====================================================================================================

PROMPT 52:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the change in percentage of population commuting via public transport from year 2017 to 2022.

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 52:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the change in percentage of population commuting via public transport from year 2017 to 2022.

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers - 1
FROM economic_commute_to_work
WHERE year = 2017
AND zipcode IN ('30303', '30305', '30306', '30307', '30308', '30309', '30310', '30311', '30313', '30315', '30316', '30317', '30318', '30319', '30320', '30321', '30322', '30323', '30324', '30325', '30326', '30327', '30328', '30329', '30330', '30331', '30332', '30333', '30334', '30335', '30336', '30337', '30338', '30339', '30340', '30341', '30342', '30343', '30344', '30345', '30346', '30347', '30348', '30349', '30350', '30351', '30352', '30353', '30354', '30355', '30356', '30357', '30358', '30359', '30360', '30361', '30362', '30363', '30364', '30365', '30366', '30367', '30368', '30369', '30370', '30371', '30372', '30373', '30374', '30375', '30376', '30377', '30378', '30379', '30380', '30381', '30382', '30383', '30384', '30385', '30386', '30387', '30388', '30389', '30390', '30391', '30392', '30393', '30394', '30395', '30396', '30397', '30398', '30399', '30400', '30401', '30402', '30403', '30404', '30405', '30406', '30407', '30408', '30409', '30410', '30411', '30412', '30413', '30414', '30415', '30416', '30417', '30418', '30419', '30420', '30421', '30422', '30423', '30424', '30425', '30426', '30427', '30428', '30429', '30430', '30431', '30432', '30433', '30434', '30435', '30436', '30437', '30438', '30439', '30440', '30441', '30442', '30443', '30444', '30445', '30446', '30447', '30448', '30449', '30450', '30451', '30452', '30453', '30454', '30455', '30456', '30457', '30458', '30459', '30460', '30461', '30462', '30463', '30464', '30465', '30466', '30467', '30468', '30469', '30470', '30471', '30472', '30473', '30474', '30475', '30476', '30477', '30478', '30479', '30480', '30481', '30482', '30483', '30484', '30485', '30486', '30487', '30488', '30489', '30490', '30491', '30492', '30493', '30494', '30495', '30496', '30497', '30498', '30499', '30500', '30501', '30502', '30503', '30504', '30505', '30506', '30507', '30508', '30509', '30510', '30511', '30512', '30513', '30514', '30515', '30516', '30517', '30518', '30519', '30520', '30521', '30522', '30523', '30524', '30525', '30526', '30527', '30528', '30529', '30530', '30531', '30532', '30533', '30534', '30535', '30536', '30537', '30538', '30539', '30540', '30541', '30542', '30543', '30544', '30545', '30546', '30547', '30548', '30549', '30550', '30551', '30552', '30553', '30554', '30555', '30556', '30557', '30558', '30559', '30560', '30561', '30562', '30563', '30564', '30565', '30566', '30567', '30568', '30569', '30570', '30571', '30572', '30573', '30574', '30575', '30576', '30577', '30578', '30579', '30580', '30581', '30582', '30583', '30584', '30585', '30586', '30587', '30588', '30589', '30590', '30591', '30592', '30593', '30594', '30595', '30596', '30597', '30598', '30599', '30600', '30601', '30602', '30603', '30604', '30605', '30606', '30607', '30608', '30609', '30610', '30611', '30612', '30613', '30614', '30615', '30616', '30617', '30618', '30619', '30620', '30621', '30622', '30623', '30624', '30625', '30626', '30627', '30628', '30629', '30630', '30631', '30632', '30633', '30634', '30635', '30636', '30637', '30638', '30639', '30640', '30641', '30642', '30643', '30644', '30645', '30646', '30647', '30648', '30649', '30650', '30651', '30652', '30653', '30654', '30655', '30656', '30657', '30658', '30659', '30660', '30661', '30662', '30663', '30664', '30665', '30666', '30667', '30668', '30669', '30670', '30671', '30672', '30673', '30674', '30675', '30676', '30677', '30678', '30679', '30680', '30681', '30682', '30683', '30684', '30685', '30686', '30687', '30688', '30689', '30690', '30691', '30692', '30693', '30694', '30695', '30696', '30697', '30698', '30699', '30700', '30701', '30702', '30703', '30704', '30705', '30706', '30707', '30708', '30709', '30710', '30711', '30712', '30713', '30714', '30715', '30716', '30717', '30718', '30719', '30720', '30721', '30722', '30723', '30724', '30725', '30726', '30727', '30728', '30729', '30730', '30731', '30732', '30733', '30734', '30735', '30736', '30737', '30738', '30739', '30740', '30741', '30742', '30743', '30744', '30745', '30746', '30747', '30748', '30749', '30750', '30751', '30752', '30753', '30754', '30755', '30756', '30757', '30758', '30759', '30760', '30761', '30762', '30763', '30764', '30765', '30766', '30767', '30768', '30769',

====================================================================================================

PROMPT 53:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the count of non-US citizens and foreign born population

Schema: 
	social_citizenship_status (year, id, zipcode, foreign_born_population, naturalized_us_citizen, not_a_us_citizen)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 53:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the count of non-US citizens and foreign born population

Schema: 
	social_citizenship_status (year, id, zipcode, foreign_born_population, naturalized_us_citizen, not_a_us_citizen)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	Prompt: For each zipcode in Georgia, get the count of non-US citizens and foreign born population
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30305'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30306'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30307'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30308'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30309'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30310'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30311'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30312'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30313'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30314'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30315'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30316'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30317'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30318'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30319'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30320'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30321'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30322'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30323'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30324'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30325'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30326'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30327'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30328'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30329'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30330'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30331'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30332'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30333'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30334'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30335'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30336'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30337'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30338'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30339'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30340'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30341'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30342'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30343'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30344'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30345'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30346'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30347'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30348'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30349'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30350'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30351'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30352'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30353'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30354'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30355'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30356'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30357'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30358'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30359'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30360'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30361'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30362'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30363'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30364'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30365'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30366'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30367'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30368'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30369'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30370'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30371'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30372'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30373'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30374'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30375'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30376'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30377'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30378'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30379'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30380'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30381'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30382'
	SQL: SELECT COUNT(*) FROM social_citizenship_status WHERE zipcode = '30383'
	

====================================================================================================

PROMPT 54:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get the average of each ethnic group (black, white, asian) by year.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 54:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get the average of each ethnic group (black, white, asian) by year.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	Get the average of each ethnic group (black, white, asian) by year.
	INSUFFICENT
	Get the average of each ethnic group (black, white, asian) by year.
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race_total_populatio > 0;
	SELECT AVG(race_total_populatio) FROM demographic_race WHERE year = '1990' AND race

====================================================================================================

PROMPT 55:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get the percentage of types of education attained by population aged 25 and above for each year.

Schema: 
	social_education_attainment (year, id, zipcode, population_25_years_and_over, less_than_9th_grade, 9th_to_12th_grade_no_diploma, high_school_graduate, some_college_no_degree, associate_degree, bachelors_degree, graduate_or_professional_degree, high_school graduate_or_higher, bachelors_degree_or_higher)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 55:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get the percentage of types of education attained by population aged 25 and above for each year.

Schema: 
	social_education_attainment (year, id, zipcode, population_25_years_and_over, less_than_9th_grade, 9th_to_12th_grade_no_diploma, high_school_graduate, some_college_no_degree, associate_degree, bachelors_degree, graduate_or_professional_degree, high_school graduate_or_higher, bachelors_degree_or_higher)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(population_25_years_and_over) / SUM(population_25_years_and_over) * 100 AS percentage
FROM social_education_attainment
WHERE population_25_years_and_over > 0
GROUP

====================================================================================================

PROMPT 56:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	In year 2022, for each zipcode in Georgia, get the percentage of population with associate and bachelors degree or higher and average housing price.

Schema: 
	social_education_attainment (year, id, zipcode, population_25_years_and_over, less_than_9th_grade, 9th_to_12th_grade_no_diploma, high_school_graduate, some_college_no_degree, associate_degree, bachelors_degree, graduate_or_professional_degree, high_school graduate_or_higher, bachelors_degree_or_higher)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 56:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	In year 2022, for each zipcode in Georgia, get the percentage of population with associate and bachelors degree or higher and average housing price.

Schema: 
	social_education_attainment (year, id, zipcode, population_25_years_and_over, less_than_9th_grade, 9th_to_12th_grade_no_diploma, high_school_graduate, some_college_no_degree, associate_degree, bachelors_degree, graduate_or_professional_degree, high_school graduate_or_higher, bachelors_degree_or_higher)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	In year 2022, for each zipcode in Georgia, get the percentage of population with associate and bachelors degree or higher and average housing price.

Solution:
	SELECT zipcode, population_25_years_and_over, less_than_9th_grade, 9th_to_12th_grade_no_diploma, high_school_graduate, some_college_no_degree, associate_degree, bachelors_degree, graduate_or_professional_degree, high_school graduate_or_higher, bachelors_degree_or_higher, avg(house_value)
	FROM social_education_attainment, housing_value
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY avg(house_value) DESC
	LIMIT 10


====================================================================================================

PROMPT 57:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  price and percentage of houses having broadband subscription.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 57:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  price and percentage of houses having broadband subscription.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For all years after 2016, for each zipcode get average housing  price and percentage of houses having broadband subscription.
	SELECT AVG(house_value) AS avg_house_value,
	(SELECT COUNT(*) FROM social_computer_internet_usage WHERE with_broadband_internet_subscription = 1) AS broadband_subscription_count,
	(SELECT COUNT(*) FROM social_computer_internet_usage WHERE with_a_computer = 1) AS with_a_computer_count
	FROM housing_value
	WHERE year >= 2016
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 10
	INSUFFICENT

Hint:
	You can use the following query to get the average house value:
	SELECT AVG(house_value) AS avg_house_value
	FROM housing_value
	WHERE year >= 2016
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 10
	INSUFFICENT

Hint:
	You can use the following query to get the number of households:
	SELECT COUNT(*) AS total_households
	FROM social_computer_internet_usage
	WHERE year >= 2016
	GROUP BY zipcode
	ORDER BY total_households DESC
	LIMIT 10
	INSUFFICENT

Hint:
	You can use the following query to get the number of households with a computer:
	SELECT COUNT(*) AS with_a_computer_count
	FROM social_computer_internet_usage
	WHERE year >= 2016
	GROUP BY zipcode
	ORDER BY with_a_computer_count DESC
	LIMIT 10
	INSUFFICENT

Hint:
	You can use the following query to get the number of households with broadband internet subscription:
	SELECT COUNT(*) AS with_broadband_internet_subscription_count
	FROM social_computer_internet_usage
	WHERE year >= 2016
	GROUP BY zipcode
	ORDER BY with_broadband_internet_subscription_count DESC
	LIMIT 10
	INSUFFICENT

Hint:
	You can use the following query to get the number of households with a computer and broadband internet subscription:
	SELECT COUNT(*) AS with_a_computer_count
	FROM social_computer_internet_usage
	WHERE year >= 2016
	GROUP BY zipcode
	ORDER BY with_a_computer_count DESC
	LIMIT 10
	INSUFFICENT

Hint:
	You can use the following query to get the number of households with broadband internet subscription and a computer:
	SELECT COUNT(*) AS with_broadband_internet_subscription_count
	FROM social_computer_internet_usage
	WHERE year >= 2016
	GROUP BY zipcode
	ORDER BY with_broadband_internet_subscription_count DESC
	LIMIT 10
	INSUFFICENT

Hint:
	You can use the following query to get the number of households with broadband internet subscription and a computer and a car:
	SELECT COUNT(*) AS with_broadband_internet_subscription_count
	FROM social_computer_internet_usage
	WHERE year >= 2016
	GROUP BY zipcode
	ORDER BY with_broadband_internet_subscription_count DESC
	LIMIT 10
	INSUFFICENT

Hint:
	You can use the following query to get the number of households with broadband internet subscription and a computer and a car and a dog:
	SELECT COUNT(*) AS with_broadband_internet_subscription_count
	FROM social_computer_internet_usage
	WHERE year >= 2016
	GROUP BY zipcode
	ORDER BY with_broadband_internet_subscription_count DESC
	LIMIT 10
	INSUFFICENT

Hint:
	You can use the following query to get the number of households with broadband internet subscription and a computer and a car and a dog and a cat:
	SELECT COUNT(*) AS with_broadband_internet_subscription_count
	FROM social_computer_internet_usage
	WHERE year >= 2016
	GROUP BY zipcode
	ORDER BY with_broadband_internet_subscription_count DESC
	LIMIT 10
	INSUFFICENT

Hint:
	You can use the following query to get the number of households with broadband internet subscription and a computer and a car and a dog and a cat and a horse:
	SELECT COUNT(*) AS with_broadband_internet_subscription_count
	FROM social_computer_internet_usage
	WHERE year >= 2016
	GROUP BY zipcode
	ORDER BY with_broadband_internet_subscription_count DESC
	LIMIT 10
	INSUFFICENT

Hint:
	You can use the following query to get the number of households with broadband internet subscription and a computer and a car and a dog and a cat and a horse and a cow:
	SELECT COUNT(*) AS with_broadband_internet_subscription_count
	FROM social_computer_internet_usage
	WHERE year >= 2016
	GROUP BY zipcode
	ORDER BY with_broadband_internet_subscription_count DESC
	LIMIT 10
	INSUFFICENT

Hint:
	You can use the following query to get the number of households with broadband internet subscription and a computer and a car and a dog and a cat and a horse and a cow and a pig:
	SELECT COUNT(*) AS with_broadband_internet_subscription_count
	FROM social_computer_internet_usage
	WHERE year >= 2016
	GROUP BY zipcode
	ORDER BY with_broadband_internet_subscription_count DESC
	LIMIT 10
	INSUFFICENT

Hint:
	You can use the following query to get the number of households with broadband internet subscription and a computer and a car and a dog and a cat and a horse and a cow and a pig and a chicken:
	SELECT COUNT(*) AS with_broadband_internet_subscription_count
	FROM social_computer_internet_usage
	WHERE year >= 2016
	GROUP BY zipcode
	ORDER BY with_broadband_internet_subscription_count DESC
	LIMIT 10
	INSUFFICENT

Hint:
	You can use the following query to get the number of households with broadband internet subscription and a computer and a car and a dog and a cat and a horse and a cow and a pig and a chicken and a duck:
	SELECT COUNT(*) AS with_broadband_internet_subscription_count
	FROM social_computer_internet_usage
	WHERE year >= 2016
	GROUP BY zipcode
	ORDER BY with_broadband_internet_subscription_count DESC
	LIMIT 10
	INSUFFICENT

Hint:
	You can use the following query to get the number of households with broadband internet subscription and a computer and a car and a dog and a cat and a horse and a cow and a pig and a chicken and a duck and a goose:
	SELECT COUNT(*) AS with_broadband_internet_subscription_count
	FROM social_computer_internet_usage
	WHERE year >= 2016
	GROUP BY zipcode
	ORDER BY with_broadband_internet_subscription_count DESC
	LIMIT 10
	INSUFFICENT

Hint:
	You can use the following query to get the number of households with broadband internet subscription and a computer and a car and a dog and a cat and a horse and a cow and a pig and a chicken and a duck and a goose and a cow:
	SELECT COUNT(*) AS with_broadband_internet_subscription_count
	FROM social_computer_internet_usage
	WHERE year >= 2016
	GROUP BY zipcode
	ORDER BY with_broadband_internet_subscription_count DESC
	LIMIT 10
	INSUFFICENT

Hint:
	You can use the following query to get the number of households with broadband internet subscription and a computer and a car and a dog and a cat and a horse and a cow and a pig and a chicken and a duck and a goose and a cow and a pig:
	SELECT COUNT(*) AS with_

====================================================================================================

PROMPT 58:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)
social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 58:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)
social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.
	INSUFFICENT
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.
	SELECT avg(rent) as avg_rent, count(*) as num_houses, sum(with_broadband_internet_subscription) as num_houses_with_broadband_subscription
	FROM housing_rent
	WHERE year >= 2016
	GROUP BY zipcode
	HAVING num_houses_with_broadband_subscription > 0
	INSUFFICENT
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.
	SELECT avg(rent) as avg_rent, count(*) as num_houses, sum(with_broadband_internet_subscription) as num_houses_with_broadband_subscription
	FROM housing_rent
	WHERE year >= 2016
	GROUP BY zipcode
	HAVING num_houses_with_broadband_subscription > 0
	INSUFFICENT
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.
	SELECT avg(rent) as avg_rent, count(*) as num_houses, sum(with_broadband_internet_subscription) as num_houses_with_broadband_subscription
	FROM housing_rent
	WHERE year >= 2016
	GROUP BY zipcode
	HAVING num_houses_with_broadband_subscription > 0
	INSUFFICENT
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.
	SELECT avg(rent) as avg_rent, count(*) as num_houses, sum(with_broadband_internet_subscription) as num_houses_with_broadband_subscription
	FROM housing_rent
	WHERE year >= 2016
	GROUP BY zipcode
	HAVING num_houses_with_broadband_subscription > 0
	INSUFFICENT
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.
	SELECT avg(rent) as avg_rent, count(*) as num_houses, sum(with_broadband_internet_subscription) as num_houses_with_broadband_subscription
	FROM housing_rent
	WHERE year >= 2016
	GROUP BY zipcode
	HAVING num_houses_with_broadband_subscription > 0
	INSUFFICENT
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.
	SELECT avg(rent) as avg_rent, count(*) as num_houses, sum(with_broadband_internet_subscription) as num_houses_with_broadband_subscription
	FROM housing_rent
	WHERE year >= 2016
	GROUP BY zipcode
	HAVING num_houses_with_broadband_subscription > 0
	INSUFFICENT
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.
	SELECT avg(rent) as avg_rent, count(*) as num_houses, sum(with_broadband_internet_subscription) as num_houses_with_broadband_subscription
	FROM housing_rent
	WHERE year >= 2016
	GROUP BY zipcode
	HAVING num_houses_with_broadband_subscription > 0
	INSUFFICENT
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.
	SELECT avg(rent) as avg_rent, count(*) as num_houses, sum(with_broadband_internet_subscription) as num_houses_with_broadband_subscription
	FROM housing_rent
	WHERE year >= 2016
	GROUP BY zipcode
	HAVING num_houses_with_broadband_subscription > 0
	INSUFFICENT
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.
	SELECT avg(rent) as avg_rent, count(*) as num_houses, sum(with_broadband_internet_subscription) as num_houses_with_broadband_subscription
	FROM housing_rent
	WHERE year >= 2016
	GROUP BY zipcode
	HAVING num_houses_with_broadband_subscription > 0
	INSUFFICENT
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.
	SELECT avg(rent) as avg_rent, count(*) as num_houses, sum(with_broadband_internet_subscription) as num_houses_with_broadband_subscription
	FROM housing_rent
	WHERE year >= 2016
	GROUP BY zipcode
	HAVING num_houses_with_broadband_subscription > 0
	INSUFFICENT
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.
	SELECT avg(rent) as avg_rent, count(*) as num_houses, sum(with_broadband_internet_subscription) as num_houses_with_broadband_subscription
	FROM housing_rent
	WHERE year >= 2016
	GROUP BY zipcode
	HAVING num_houses_with_broadband_subscription > 0
	INSUFFICENT
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.
	SELECT avg(rent) as avg_rent, count(*) as num_houses, sum(with_broadband_internet_subscription) as num_houses_with_broadband_subscription
	FROM housing_rent
	WHERE year >= 2016
	GROUP BY zipcode
	HAVING num_houses_with_broadband_subscription > 0
	INSUFFICENT
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.
	SELECT avg(rent) as avg_rent, count(*) as num_houses, sum(with_broadband_internet_subscription) as num_houses_with_broadband_subscription
	FROM housing_rent
	WHERE year >= 2016
	GROUP BY zipcode
	HAVING num_houses_with_broadband_subscription > 0
	INSUFFICENT
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.
	SELECT avg(rent) as avg_rent, count(*) as num_houses, sum(with_broadband_internet_subscription) as num_houses_with_broadband_subscription
	FROM housing_rent
	WHERE year >= 2016
	GROUP BY zipcode
	HAVING num_houses_with_broadband_subscription > 0
	INSUFFICENT
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.
	SELECT avg(rent) as avg_rent, count(*) as num_houses, sum(with_broadband_internet_subscription) as num_houses_with_broadband_subscription
	FROM housing_rent
	WHERE year >= 2016
	GROUP BY zipcode
	HAVING num_houses_with_broadband_subscription > 0
	INSUFFICENT
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.
	SELECT avg(rent) as avg_rent, count(*) as num_houses, sum(with_broadband_internet_subscription) as num_houses_with_broadband_subscription
	FROM housing_rent
	WHERE year >= 2016
	GROUP BY zipcode
	HAVING num_houses_with_broadband_subscription > 0
	INSUFFICENT
	For all years after 2016, for each zipcode get average housing

====================================================================================================

PROMPT 59:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode, get percentage of households with a computer and percentage of housholds with broadband subscription.

Schema: 
	social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 59:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode, get percentage of households with a computer and percentage of housholds with broadband subscription.

Schema: 
	social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	2016, 1, 90210, 100, 0, 0
	2016, 2, 90210, 100, 0, 0
	2016, 3, 90210, 100, 0, 0
	2016, 4, 90210, 100, 0, 0
	2016, 5, 90210, 100, 0, 0
	2016, 6, 90210, 100, 0, 0
	2016, 7, 90210, 100, 0, 0
	2016, 8, 90210, 100, 0, 0
	2016, 9, 90210, 100, 0, 0
	2016, 10, 90210, 100, 0, 0
	2016, 11, 90210, 100, 0, 0
	2016, 12, 90210, 100, 0, 0
	2017, 1, 90210, 100, 0, 0
	2017, 2, 90210, 100, 0, 0
	2017, 3, 90210, 100, 0, 0
	2017, 4, 90210, 100, 0, 0
	2017, 5, 90210, 100, 0, 0
	2017, 6, 90210, 100, 0, 0
	2017, 7, 90210, 100, 0, 0
	2017, 8, 90210, 100, 0, 0
	2017, 9, 90210, 100, 0, 0
	2017, 10, 90210, 100, 0, 0
	2017, 11, 90210, 100, 0, 0
	2017, 12, 90210, 100, 0, 0
	2018, 1, 90210, 100, 0, 0
	2018, 2, 90210, 100, 0, 0
	2018, 3, 90210, 100, 0, 0
	2018, 4, 90210, 100, 0, 0
	2018, 5, 90210, 100, 0, 0
	2018, 6, 90210, 100, 0, 0
	2018, 7, 90210, 100, 0, 0
	2018, 8, 90210, 100, 0, 0
	2018, 9, 90210, 100, 0, 0
	2018, 10, 90210, 100, 0, 0
	2018, 11, 90210, 100, 0, 0
	2018, 12, 90210, 100, 0, 0
	2019, 1, 90210, 100, 0, 0
	2019, 2, 90210, 100, 0, 0
	2019, 3, 90210, 100, 0, 0
	2019, 4, 90210, 100, 0, 0
	2019, 5, 90210, 100, 0, 0
	2019, 6, 90210, 100, 0, 0
	2019, 7, 90210, 100, 0, 0
	2019, 8, 90210, 100, 0, 0
	2019, 9, 90210, 100, 0, 0
	2019, 10, 90210, 100, 0, 0
	2019, 11, 90210, 100, 0, 0
	2019, 12, 90210, 100, 0, 0
	2020, 1, 90210, 100, 0, 0
	2020, 2, 90210, 100, 0, 0
	2020, 3, 90210, 100, 0, 0
	2020, 4, 90210, 100, 0, 0
	2020, 5, 90210, 100, 0, 0
	2020, 6, 90210, 100, 0, 0
	2020, 7, 90210, 100, 0, 0
	2020, 8, 90210, 100, 0, 0
	2020, 9, 90210, 100, 0, 0
	2020, 10, 90210, 100, 0, 0
	2020, 11, 90210, 100, 0, 0
	2020, 12, 90210, 100, 0, 0
	2021, 1, 90210, 100, 0, 0
	2021, 2, 90210, 100, 0, 0
	2021, 3, 90210, 100, 0, 0
	2021, 4, 90210, 100, 0, 0
	2021, 5, 90210, 100, 0, 0
	2021, 6, 90210, 100, 0, 0
	2021, 7, 90210, 100, 0, 0
	2021, 8, 90210, 100, 0, 0
	2021, 9, 90210, 100, 0, 0
	2021, 10, 90210, 100, 0, 0
	2021, 11, 90210, 100, 0, 0
	2021, 12, 90210, 100, 0, 0
	2022, 1, 90210, 100, 0, 0
	2022, 2, 90210, 100, 0, 0
	2022, 3, 90210, 100, 0, 0
	2022, 4, 90210, 100, 0, 0
	2022, 5, 90210, 100, 0, 0
	2022, 6, 90210, 100, 0, 0
	2022, 7, 90210, 100, 0, 0
	2022, 8, 90210, 100, 0, 0
	2022, 9, 90210, 100, 0, 0
	2022, 10, 90210, 100, 0, 0
	2022, 11, 90210, 100, 0, 0
	2022, 12, 90210, 100, 0, 0
	2023, 1, 90210, 100, 0, 0
	2023, 2, 90210, 100, 0, 0
	2023, 3, 90210, 100, 0, 0
	2023, 4, 90210, 100, 0, 0
	2023, 5, 90210, 100, 0, 0
	2023, 6, 90210, 100, 0, 0
	2023, 7, 90210, 100, 0, 0
	2023, 8, 90210, 100, 0, 0
	2023, 9, 90210, 100, 0, 0
	2023, 10, 90210, 100, 0, 0
	2023, 11, 90210, 100, 0, 0
	2023, 12, 90210, 100, 0, 0
	2024, 1, 90210, 100, 0, 0
	2024, 2, 90210, 100, 0, 0
	2024, 3, 90210, 100, 0, 0
	2024, 4, 90210, 100, 0, 0
	2024, 5, 90210, 100, 0, 0
	2024, 6, 90210, 100, 0, 0
	2024, 7, 90210, 100, 0, 0
	2024, 8, 90210, 100, 0, 0
	2024, 9, 90210, 100, 0, 0
	2024, 10, 90210, 100, 0, 0
	2024, 11, 90210, 100, 0, 0
	2024, 12, 90210, 100, 0, 0
	2025, 1, 90210, 100, 0, 0
	2025, 2, 90210, 100, 0, 0
	2025, 3, 90210, 100, 0, 0
	2025, 4, 90210, 100, 0, 0
	2025, 5, 90210, 100, 0, 0
	2025, 6, 90210, 100, 0, 0
	2025, 7, 90210, 100, 0, 0
	2025, 8, 90210, 100, 0, 0
	2025, 9, 90210, 100, 0, 0
	2025, 10, 90210, 100, 0, 0
	2025, 11, 90210, 100, 0, 0
	2025, 12, 90210, 100, 0, 0
	2026, 1, 90210, 100, 0, 0
	2026, 2, 90210, 100, 0, 0
	2026, 3, 90210, 100, 0, 0
	2026, 4

====================================================================================================

