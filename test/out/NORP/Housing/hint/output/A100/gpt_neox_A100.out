PROMPT 1:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, give the change in average house rent from 2019 to 2022, i.e., from pre-COVID to post-COVID period.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 1:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, give the change in average house rent from 2019 to 2022, i.e., from pre-COVID to post-COVID period.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year = 2020
  AND zipcode = '30303'
  AND id = '1'
  AND number_of_units = '1'
  AND rent_value_min = '0'
  AND rent_value_max = '0'
```

```sql
SELECT avg(rent_value)
FROM housing_rent
WHERE year

====================================================================================================

PROMPT 2:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 2:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	year, id, zipcode, number_of_units, income_percent_min, income_percent_max

Output:
	SQL statement

Sample Input:
	(year, id, zipcode, number_of_units, income_percent_min, income_percent_max)
	(2015, 1, '10001', 1, 0, 100)
	(2015, 2, '10001', 1, 0, 100)
	(2015, 3, '10001', 1, 0, 100)
	(2015, 4, '10001', 1, 0, 100)
	(2015, 5, '10001', 1, 0, 100)
	(2015, 6, '10001', 1, 0, 100)
	(2015, 7, '10001', 1, 0, 100)
	(2015, 8, '10001', 1, 0, 100)
	(2015, 9, '10001', 1, 0, 100)
	(2015, 10, '10001', 1, 0, 100)
	(2015, 11, '10001', 1, 0, 100)
	(2015, 12, '10001', 1, 0, 100)
	(2015, 13, '10001', 1, 0, 100)
	(2015, 14, '10001', 1, 0, 100)
	(2015, 15, '10001', 1, 0, 100)
	(2015, 16, '10001', 1, 0, 100)
	(2015, 17, '10001', 1, 0, 100)
	(2015, 18, '10001', 1, 0, 100)
	(2015, 19, '10001', 1, 0, 100)
	(2015, 20, '10001', 1, 0, 100)
	(2015, 21, '10001', 1, 0, 100)
	(2015, 22, '10001', 1, 0, 100)
	(2015, 23, '10001', 1, 0, 100)
	(2015, 24, '10001', 1, 0, 100)
	(2015, 25, '10001', 1, 0, 100)
	(2015, 26, '10001', 1, 0, 100)
	(2015, 27, '10001', 1, 0, 100)
	(2015, 28, '10001', 1, 0, 100)
	(2015, 29, '10001', 1, 0, 100)
	(2015, 30, '10001', 1, 0, 100)
	(2015, 31, '10001', 1, 0, 100)
	(2015, 32, '10001', 1, 0, 100)
	(2015, 33, '10001', 1, 0, 100)
	(2015, 34, '10001', 1, 0, 100)
	(2015, 35, '10001', 1, 0, 100)
	(2015, 36, '10001', 1, 0, 100)
	(2015, 37, '10001', 1, 0, 100)
	(2015, 38, '10001', 1, 0, 100)
	(2015, 39, '10001', 1, 0, 100)
	(2015, 40, '10001', 1, 0, 100)
	(2015, 41, '10001', 1, 0, 100)
	(2015, 42, '10001', 1, 0, 100)
	(2015, 43, '10001', 1, 0, 100)
	(2015, 44, '10001', 1, 0, 100)
	(2015, 45, '10001', 1, 0, 100)
	(2015, 46, '10001', 1, 0, 100)
	(2015, 47, '10001', 1, 0, 100)
	(2015, 48, '10001', 1, 0, 100)
	(2015, 49, '10001', 1, 0, 100)
	(2015, 50, '10001', 1, 0, 100)
	(2015, 51, '10001', 1, 0, 100)
	(2015, 52, '10001', 1, 0, 100)
	(2015, 53, '10001', 1, 0, 100)
	(2015, 54, '10001', 1, 0, 100)
	(2015, 55, '10001', 1, 0, 100)
	(2015, 56, '10001', 1, 0, 100)
	(2015, 57, '10001', 1, 0, 100)
	(2015, 58, '10001', 1, 0, 100)
	(2015, 59, '10001', 1, 0, 100)
	(2015, 60, '10001', 1, 0, 100)
	(2015, 61, '10001', 1, 0, 100)
	(2015, 62, '10001', 1, 0, 100)
	(2015, 63, '10001', 1, 0, 100)
	(2015, 64, '10001', 1, 0, 100)
	(2015, 65, '10001', 1, 0, 100)
	(2015, 66, '10001', 1, 0, 100)
	(2015, 67, '10001', 1, 0, 100)
	(2015, 68, '10001', 1, 0, 100)
	(2015, 69, '10001', 1, 0, 100)
	(2015, 70, '10001', 1, 0, 100)
	(2015, 71, '10001', 1, 0, 100)
	(2015, 72, '10001', 1, 0, 100)
	(2015, 73, '10001', 1, 0, 100)
	(2015, 74, '10001', 1, 0, 100)
	(2015, 75, '10001', 1, 0, 100)
	(2015, 76, '10001', 1, 0, 100)
	(2015, 77, '10001', 1, 0, 100)
	(2015, 78, '10001', 1, 0, 100)
	(2015, 79, '10001', 1, 0, 100)
	(2015, 80, '10001', 1, 0, 100)
	(2015, 81, '10001', 1, 0, 100)
	(2015, 82, '10001', 1, 0, 100)
	(2015, 83, '10001', 1, 0, 100)
	(2015, 84, '10001', 1, 0, 100)
	(2015, 85, '10001', 1, 0, 100)
	(2015, 86, '10001', 1, 0, 100)
	(2015, 87, '10001', 1, 0, 100)
	(2015, 88, '10001', 1, 0, 100)
	(2015, 89, '10001', 1, 0, 100)
	(2015, 90, '10001', 1, 0, 100)
	(2015, 91, '10001', 1, 0, 100)
	(2015, 92, '10001', 1, 0, 100)
	(2015, 93, '10001', 1, 0, 100)
	(2015, 94, '10001', 1, 0, 100)
	(2015, 95, '10001', 1, 0, 100)
	(2015, 96, '10001', 1, 0, 100)
	(2015, 97, '10001', 1, 0, 100)
	(2015, 98, '10001', 1, 0, 100)
	(2015, 99, '10001', 1, 0, 100)
	(2015, 100, '10001', 1, 0, 100)
	(2015, 101, '10001', 1, 0, 100)
	(2015, 102, '10001', 1, 0, 100)
	(2015, 103, '10001', 1, 0, 100)
	(2015, 104, '10001', 1, 0, 100)
	(2015, 105, '10001', 1, 0, 100)
	(2015, 106, '10001', 1, 0, 100)
	(2015, 107, '10001', 1, 0, 100)
	(2015, 108, '10001', 1, 0, 100)
	(2015, 109, '10001', 1, 0, 100)


====================================================================================================

PROMPT 3:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in SMOCAPI, where SMOCAPI is selected monthly home-ownership costs as a percent of household income

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 3:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in SMOCAPI, where SMOCAPI is selected monthly home-ownership costs as a percent of household income

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT year, id, zipcode, number_of_units, income_percent_min, income_percent_max, income_percent_min - income_percent_max AS change_in_percent FROM household_income_percent_with_mortgage WHERE income_percent_min - income_percent_max > 0.1

Expected Output:
	year, id, zipcode, number_of_units, income_percent_min, income_percent_max, income_percent_min - income_percent_max AS change_in_percent
	2015, 1, '90001', 1, 0.1, 0.2, 0.1
	2015, 2, '90001', 1, 0.1, 0.2, 0.1
	2015, 3, '90001', 1, 0.1, 0.2, 0.1
	2015, 4, '90001', 1, 0.1, 0.2, 0.1
	2015, 5, '90001', 1, 0.1, 0.2, 0.1
	2015, 6, '90001', 1, 0.1, 0.2, 0.1
	2015, 7, '90001', 1, 0.1, 0.2, 0.1
	2015, 8, '90001', 1, 0.1, 0.2, 0.1
	2015, 9, '90001', 1, 0.1, 0.2, 0.1
	2015, 10, '90001', 1, 0.1, 0.2, 0.1
	2015, 11, '90001', 1, 0.1, 0.2, 0.1
	2015, 12, '90001', 1, 0.1, 0.2, 0.1
	2015, 13, '90001', 1, 0.1, 0.2, 0.1
	2015, 14, '90001', 1, 0.1, 0.2, 0.1
	2015, 15, '90001', 1, 0.1, 0.2, 0.1
	2015, 16, '90001', 1, 0.1, 0.2, 0.1
	2015, 17, '90001', 1, 0.1, 0.2, 0.1
	2015, 18, '90001', 1, 0.1, 0.2, 0.1
	2015, 19, '90001', 1, 0.1, 0.2, 0.1
	2015, 20, '90001', 1, 0.1, 0.2, 0.1
	2015, 21, '90001', 1, 0.1, 0.2, 0.1
	2015, 22, '90001', 1, 0.1, 0.2, 0.1
	2015, 23, '90001', 1, 0.1, 0.2, 0.1
	2015, 24, '90001', 1, 0.1, 0.2, 0.1
	2015, 25, '90001', 1, 0.1, 0.2, 0.1
	2015, 26, '90001', 1, 0.1, 0.2, 0.1
	2015, 27, '90001', 1, 0.1, 0.2, 0.1
	2015, 28, '90001', 1, 0.1, 0.2, 0.1
	2015, 29, '90001', 1, 0.1, 0.2, 0.1
	2015, 30, '90001', 1, 0.1, 0.2, 0.1
	2015, 31, '90001', 1, 0.1, 0.2, 0.1
	2016, 1, '90001', 1, 0.1, 0.2, 0.1
	2016, 2, '90001', 1, 0.1, 0.2, 0.1
	2016, 3, '90001', 1, 0.1, 0.2, 0.1
	2016, 4, '90001', 1, 0.1, 0.2, 0.1
	2016, 5, '90001', 1, 0.1, 0.2, 0.1
	2016, 6, '90001', 1, 0.1, 0.2, 0.1
	2016, 7, '90001', 1, 0.1, 0.2, 0.1
	2016, 8, '90001', 1, 0.1, 0.2, 0.1
	2016, 9, '90001', 1, 0.1, 0.2, 0.1
	2016, 10, '90001', 1, 0.1, 0.2, 0.1
	2016, 11, '90001', 1, 0.1, 0.2, 0.1
	2016, 12, '90001', 1, 0.1, 0.2, 0.1
	2016, 13, '90001', 1, 0.1, 0.2, 0.1
	2016, 14, '90001', 1, 0.1, 0.2, 0.1
	2016, 15, '90001', 1, 0.1, 0.2, 0.1
	2016, 16, '90001', 1, 0.1, 0.2, 0.1
	2016, 17, '90001', 1, 0.1, 0.2, 0.1
	2016, 18, '90001', 1, 0.1, 0.2, 0.1
	2016, 19, '90001', 1, 0.1, 0.2, 0.1
	2016, 20, '90001', 1, 0.1, 0.2, 0.1
	2016, 21, '90001', 1, 0.1, 0.2, 0.1
	2016, 22, '90001', 1, 0.1, 0.2, 0.1
	2016, 23, '90001', 1, 0.1, 0.2, 0.1
	2016, 24, '90001', 1, 0.1, 0.2, 0.1
	2016, 25, '90001', 1, 0.1, 0.2, 0.1
	2016, 26, '90001', 1, 0.1, 0.2, 0.1
	2016, 27, '90001', 1, 0.1, 0.2, 0.1
	2016, 28, '90001', 1, 0.1, 0.2, 0.1
	2016, 29, '90001', 1, 0.1, 0.2, 0.1
	2016, 30, '90001', 1, 0.1, 0.2, 0.1
	2016, 31, '90001', 1, 0.1, 0.2, 0.1
	2017, 1, '90001', 1, 0.1, 0.2, 0.1
	2017, 2, '90001', 1, 0.1, 0.2, 0.1
	2017, 3, '90001', 1, 0.1, 0.2, 0.1
	2017, 4, '90001', 1, 0.1, 0.2, 0.1
	2017, 5, '90001', 1, 0.1, 0.2, 0.1
	2017, 6, '90001', 1, 0.1, 0.2, 0.1
	2017, 7, '90001', 1, 0.1, 0.2, 0.1
	2017, 8, '90001', 1, 0.1, 0.2, 0.1
	2017, 9, '90001', 1, 0.1, 0.2, 0.1
	2017, 10, '90001', 1, 0.1, 0.2, 0.1
	2017, 11, '90001', 1, 0.1, 0.2, 0.1
	2017, 12, '90001', 1, 0.1, 0.2, 0.1
	2017, 13, '90001', 1, 0.1, 0.2, 0.1
	2017, 14, '90001', 1, 0.1, 0.2, 0.1
	2017, 15, '90001', 1, 0.1, 0.2, 0.1
	2017, 16, '90001', 1, 0.1, 0.2,

====================================================================================================

PROMPT 4:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in average house rent from 2017 to 2022.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 4:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in average house rent from 2017 to 2022.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode in Georgia, give the change in average house rent from 2017 to 2022.
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value DESC
	LIMIT 1
	INSUFFICENT

Expected output:
	SELECT avg(house_value) AS avg_house_value, zipcode
	FROM housing_value
	WHERE year = 2017
	AND zipcode IN (SELECT zipcode FROM housing_value WHERE year = 2022)
	GROUP BY zipcode
	ORDER BY avg_house_value

====================================================================================================

PROMPT 5:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

Schema: 
	household_income_percent_without_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 5:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

Schema: 
	household_income_percent_without_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.
	INSUFFICENT

Expected Output:
	SELECT zipcode FROM household_income_percent_without_mortgage WHERE year = 2017 AND income_percent_min > 28 AND income_percent_max > 28;

</textarea>
<br>
<div id="query-result"></div>
<div id="query-info">
	<div id="query-info-title">Query Info</div>
	<div id="query-info-content">
	<div id="query-info-content-title">Query</div>
	<div id="query-info-content-content">
	<div id="query-info-content-content-title">Result</div>
	<div id="query-info-content-content-content">
	<div id="query-info-content-content-content-title">Query Plan</div>
	<div id="query-info-content-content-content-content">
	<div id="query-info-content-content-content-content-title">Statistics</div>
	<div id="query-info-content-content-content-content-content">
	<div id="query-info-content-content-content-content-content-title">Planning Time</div>
	<div id="query-info-content-content-content-content-content-content">
	<div id="query-info-content-content-content-content-content-content-title">Optimizer</div>
	<div id="query-info-content-content-content-content-content-content-content">
	<div id="query-info-content-content-content-content-content-content-title">Execution Time</div>
	<div id="query-info-content-content-content-content-content-content-content">
	<div id="query-info-content-content-content-content-content-content-content-title">Memory Usage</div>
	<div id="query-info-content-content-content-content-content-content-content-content">
	<div id="query-info-content-content-content-content-content-content-content-content-title">Cost</div>
	<div id="query-info-content-content-content-content-content-content-content-content-content">
	<div id="query-info-content-content-content-content-content-content-content-content-content-title">Statistics</div>
	<div id="query-info-content-content-content-content-content-content-content-content-content-content">
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-title">Planning Time</div>
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content">
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-title">Optimizer</div>
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content">
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-title">Execution Time</div>
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content">
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content-title">Memory Usage</div>
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content">
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-title">Cost</div>
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content">
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-title">Statistics</div>
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content">
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-title">Planning Time</div>
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content">
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-title">Optimizer</div>
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content">
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-title">Execution Time</div>
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content">
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-title">Memory Usage</div>
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content">
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-title">Cost</div>
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content">
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-title">Statistics</div>
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content">
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-title">Planning Time</div>
	<div id="query-info-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content-content">
	<div id="query-info-content-content-content-

====================================================================================================

PROMPT 6:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 6:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.
	INSUFFICENT

Expected Output:
	SELECT zipcode FROM housing_gross_rent_percent WHERE year = 2017 AND income_percent_min >= 30 AND income_percent_max >= 30;

## 2.2.2.2.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.

====================================================================================================

PROMPT 7:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get zipcodes in Georgia where GRAPI is greater than 30.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 7:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get zipcodes in Georgia where GRAPI is greater than 30.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get zipcodes in Georgia where GRAPI is greater than 30.
	INSUFFICIENT

Expected Output:
	SELECT zipcode FROM housing_gross_rent_percent WHERE year = 2022 AND income_percent_min > 30 AND income_percent_max < 30;

## 3.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2

====================================================================================================

PROMPT 8:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Select share of each fuel source for heating in year 2022.

Schema: 
	housing_heating_fuel (year, id, zipcode, total_heating_units, utility_gas, bottled_tank_or_LP_gas, electricity, fuel_oil_kerosene, coal_or_coke, wood, solar_energy, other_fuel, no_fuel_used)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 8:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Select share of each fuel source for heating in year 2022.

Schema: 
	housing_heating_fuel (year, id, zipcode, total_heating_units, utility_gas, bottled_tank_or_LP_gas, electricity, fuel_oil_kerosene, coal_or_coke, wood, solar_energy, other_fuel, no_fuel_used)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT share FROM housing_heating_fuel WHERE year = 2022;

Expected output:
	share
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0.5
	0

====================================================================================================

PROMPT 9:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For the year 2022, select zipcodes in Georgia where Home-ownership costs as a %age of household income is more than 28%

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 9:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For the year 2022, select zipcodes in Georgia where Home-ownership costs as a %age of household income is more than 28%

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

SQL Statement:
	SELECT zipcode FROM household_income_percent_with_mortgage WHERE year = 2022 AND income_percent_min > 28.0

Expected Output:
	'INSUFFICENT'

Expected Error:
	'INSUFFICENT'

Expected Warnings:
	'INSUFFICENT'

Expected Results:
	'INSUFFICENT'

Table Definition:
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Table Data:
	year	id	zipcode	number_of_units	income_percent_min	income_percent_max
	2022	1	32000	1	0.0	100.0
	2022	2	32000	1	0.0	100.0
	2022	3	32000	1	0.0	100.0
	2022	4	32000	1	0.0	100.0
	2022	5	32000	1	0.0	100.0
	2022	6	32000	1	0.0	100.0
	2022	7	32000	1	0.0	100.0
	2022	8	32000	1	0.0	100.0
	2022	9	32000	1	0.0	100.0
	2022	10	32000	1	0.0	100.0
	2022	11	32000	1	0.0	100.0
	2022	12	32000	1	0.0	100.0
	2022	13	32000	1	0.0	100.0
	2022	14	32000	1	0.0	100.0
	2022	15	32000	1	0.0	100.0
	2022	16	32000	1	0.0	100.0
	2022	17	32000	1	0.0	100.0
	2022	18	32000	1	0.0	100.0
	2022	19	32000	1	0.0	100.0
	2022	20	32000	1	0.0	100.0
	2022	21	32000	1	0.0	100.0
	2022	22	32000	1	0.0	100.0
	2022	23	32000	1	0.0	100.0
	2022	24	32000	1	0.0	100.0
	2022	25	32000	1	0.0	100.0
	2022	26	32000	1	0.0	100.0
	2022	27	32000	1	0.0	100.0
	2022	28	32000	1	0.0	100.0
	2022	29	32000	1	0.0	100.0
	2022	30	32000	1	0.0	100.0
	2022	31	32000	1	0.0	100.0
	2022	32	32000	1	0.0	100.0
	2022	33	32000	1	0.0	100.0
	2022	34	32000	1	0.0	100.0
	2022	35	32000	1	0.0	100.0
	2022	36	32000	1	0.0	100.0
	2022	37	32000	1	0.0	100.0
	2022	38	32000	1	0.0	100.0
	2022	39	32000	1	0.0	100.0
	2022	40	32000	1	0.0	100.0
	2022	41	32000	1	0.0	100.0
	2022	42	32000	1	0.0	100.0
	2022	43	32000	1	0.0	100.0
	2022	44	32000	1	0.0	100.0
	2022	45	32000	1	0.0	100.0
	2022	46	32000	1	0.0	100.0
	2022	47	32000	1	0.0	100.0
	2022	48	32000	1	0.0	100.0
	2022	49	32000	1	0.0	100.0
	2022	50	32000	1	0.0	100.0
	2022	51	32000	1	0.0	100.0
	2022	52	32000	1	0.0	100.0
	2022	53	32000	1	0.0	100.0
	2022	54	32000	1	0.0	100.0
	2022	55	32000	1	0.0	100.0
	2022	56	32000	1	0.0	100.0
	2022	57	32000	1	0.0	100.0
	2022	58	32000	1	0.0	100.0
	2022	59	32000	1	0.0	100.0
	2022	60	32000	1	0.0	100.0
	2022	61	32000	1	0.0	100.0
	2022	62	32000	1	0.0	100.0
	2022	63	32000	1	0.0	100.0
	2022	64	32000	1	0.0	100.0
	2022	65	32000	1	0.0	100.0
	2022	66	32000	1	0.0	100.0
	2022	67	32000	1	0.0	100.0
	2022	68	32000	1	0.0	100.0
	2022	69	32000	1	0.0	100.0
	2022	70	32000	1	0.0	100.0
	2022	71	32000	1	0.0	100.0
	2022	72	32000	1	0.0	100.0
	2022	73	32000	1	0.0	100.0
	2022	74	32000	1	0.0	100.0
	2022	75	32000	1	0.0	100.0
	2022	76	32000	1	0.0	100.0
	2022	77	32000	1	0.0	100.0
	2022	78	32000	1	0.0	100.0
	2022	79	32000	1	0.0	100.0
	2022	80	32000	1	0.0	100.0
	2022	81	32000	1	0.0	100.0
	2022	82	32000	1	0.0	100.0
	2022	83	32000	1	0.0	100.0
	2022	84	32000	1	0.0	100.0
	2022	85	32000	1	0.0	100.0
	2022	86	32000	1	0.0	100.0
	2022	87	32000	1	0.0	100.0
	2022	88	32000	1	0.0	100.0
	2022	89	32000	1	0.0	100.0
	2022	90	32000	1	0.0	100.0
	2022	91	32000	1	0.0	100.0
	2022	92	32000	1	0.0	100.0


====================================================================================================

PROMPT 10:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each year, get rent and value of house averaged over all zip codes.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 10:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each year, get rent and value of house averaged over all zip codes.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:

Input:
	[
		[1, 1, 1, 1, 1, 1],
		[2, 2, 2, 2, 2, 2],
		[3, 3, 3, 3, 3, 3],
		[4, 4, 4, 4, 4, 4],
		[5, 5, 5, 5, 5, 5]
	]

Output:
	'SELECT AVG(house_value) AS house_value, AVG(rent) AS rent FROM housing_value, housing_rent WHERE housing_value.year = housing_rent.year AND housing_value.zipcode = housing_rent.zipcode'

Explanation:
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year.
	The query is to get the average house value and rent for each year

====================================================================================================

PROMPT 11:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get rent and value of house averaged over all years.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 11:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get rent and value of house averaged over all years.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	housing_value_min, housing_value_max, housing_rent_min, housing_rent_max, number_of_units, zipcode

Output:
	SQL statement

Sample Input:
	housing_value_min = 1, housing_value_max = 2, housing_rent_min = 3, housing_rent_max = 4, number_of_units = 5, zipcode = 6

Sample Output:
	SELECT AVG(housing_value) FROM housing_value WHERE housing_value_min <= housing_value AND housing_value <= housing_value_max AND zipcode = 6

Sample Input:
	housing_value_min = 1, housing_value_max = 2, housing_rent_min = 3, housing_rent_max = 4, number_of_units = 5, zipcode = 6

Sample Output:
	SELECT AVG(housing_rent) FROM housing_rent WHERE housing_rent_min <= housing_rent AND housing_rent <= housing_rent_max AND zipcode = 6

Sample Input:
	housing_value_min = 1, housing_value_max = 2, housing_rent_min = 3, housing_rent_max = 4, number_of_units = 5, zipcode = 6

Sample Output:
	SELECT AVG(housing_value) FROM housing_value WHERE housing_value_min <= housing_value AND housing_value <= housing_value_max AND zipcode = 6

Sample Input:
	housing_value_min = 1, housing_value_max = 2, housing_rent_min = 3, housing_rent_max = 4, number_of_units = 5, zipcode = 6

Sample Output:
	SELECT AVG(housing_rent) FROM housing_rent WHERE housing_rent_min <= housing_rent AND housing_rent <= housing_rent_max AND zipcode = 6

Sample Input:
	housing_value_min = 1, housing_value_max = 2, housing_rent_min = 3, housing_rent_max = 4, number_of_units = 5, zipcode = 6

Sample Output:
	SELECT AVG(housing_value) FROM housing_value WHERE housing_value_min <= housing_value AND housing_value <= housing_value_max AND zipcode = 6

Sample Input:
	housing_value_min = 1, housing_value_max = 2, housing_rent_min = 3, housing_rent_max = 4, number_of_units = 5, zipcode = 6

Sample Output:
	SELECT AVG(housing_rent) FROM housing_rent WHERE housing_rent_min <= housing_rent AND housing_rent <= housing_rent_max AND zipcode = 6

Sample Input:
	housing_value_min = 1, housing_value_max = 2, housing_rent_min = 3, housing_rent_max = 4, number_of_units = 5, zipcode = 6

Sample Output:
	SELECT AVG(housing_value) FROM housing_value WHERE housing_value_min <= housing_value AND housing_value <= housing_value_max AND zipcode = 6

Sample Input:
	housing_value_min = 1, housing_value_max = 2, housing_rent_min = 3, housing_rent_max = 4, number_of_units = 5, zipcode = 6

Sample Output:
	SELECT AVG(housing_rent) FROM housing_rent WHERE housing_rent_min <= housing_rent AND housing_rent <= housing_rent_max AND zipcode = 6

Sample Input:
	housing_value_min = 1, housing_value_max = 2, housing_rent_min = 3, housing_rent_max = 4, number_of_units = 5, zipcode = 6

Sample Output:
	SELECT AVG(housing_value) FROM housing_value WHERE housing_value_min <= housing_value AND housing_value <= housing_value_max AND zipcode = 6

Sample Input:
	housing_value_min = 1, housing_value_max = 2, housing_rent_min = 3, housing_rent_max = 4, number_of_units = 5, zipcode = 6

Sample Output:
	SELECT AVG(housing_rent) FROM housing_rent WHERE housing_rent_min <= housing_rent AND housing_rent <= housing_rent_max AND zipcode = 6

Sample Input:
	housing_value_min = 1, housing_value_max = 2, housing_rent_min = 3, housing_rent_max = 4, number_of_units = 5, zipcode = 6

Sample Output:
	SELECT AVG(housing_value) FROM housing_value WHERE housing_value_min <= housing_value AND housing_value <= housing_value_max AND zipcode = 6

Sample Input:
	housing_value_min = 1, housing_value_max = 2, housing_rent_min = 3, housing_rent_max = 4, number_of_units = 5, zipcode = 6

Sample Output:
	SELECT AVG(housing_rent) FROM housing_rent WHERE housing_rent_min <= housing_rent AND housing_rent <= housing_rent_max AND zipcode = 6

Sample Input:
	housing_value_min = 1, housing_value_max = 2, housing_rent_min = 3, housing_rent_max = 4, number_of_units = 5, zipcode = 6

Sample Output:
	SELECT AVG(housing_value) FROM housing_value WHERE housing_value_min <= housing_value AND housing_value <= housing_value_max AND zipcode = 6

Sample Input:
	housing_value_min = 1, housing_value_max = 2, housing_rent_min = 3, housing_rent_max = 4, number_of_units = 5, zipcode = 6

Sample Output:
	SELECT AVG(housing_rent) FROM housing_rent WHERE housing_rent_min <= housing_rent AND housing_rent <= housing_rent_max AND zipcode = 6

Sample Input:
	housing_value_min = 1, housing_value_max = 2, housing_rent_min = 3, housing_rent_max = 4, number_of_units = 5, zipcode = 6

Sample Output:
	SELECT AVG(housing_value) FROM housing_value WHERE housing_value_min <= housing_value AND housing_value <= housing_value_max AND zipcode = 6

Sample Input:
	housing_value_min = 1, housing_value_max = 2, housing_rent_min = 3, housing_rent_max = 4, number_of_units = 5, zipcode = 6

Sample Output:
	SELECT AVG(housing_rent) FROM housing_rent WHERE housing_rent_min <= housing_rent AND housing_rent <= housing_rent_max AND zipcode = 6

Sample Input:
	housing_value_min = 1, housing_value_max = 2, housing_rent_min = 3, housing_rent_max = 4, number_of_units = 5, zipcode = 6

Sample Output:
	SELECT AVG(housing_value) FROM housing_value WHERE housing_value_min <= housing_value AND housing_value <= housing_value_max AND zipcode = 6

Sample Input:
	housing_value_min = 1, housing_value_max = 2, housing_rent_min = 3, housing_rent_max = 4, number_of_units = 5, zipcode = 6

Sample Output:
	SELECT AVG(housing_rent) FROM housing_rent WHERE housing_rent_min <= housing_rent AND housing_rent <= housing_rent_max AND zipcode = 6

Sample Input:
	housing_value_min = 1, housing_value_max = 2, housing_rent_min = 3, housing_rent_max = 4, number_of_units = 5, zipcode = 6

Sample Output:
	SELECT AVG(housing_value) FROM housing_value WHERE housing_value_min <= housing_value AND housing_value <= housing_value_max AND zipcode = 6

Sample Input:
	housing_value_min = 1,

====================================================================================================

PROMPT 12:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get count of units with and without mortgage in year 2022.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 12:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get count of units with and without mortgage in year 2022.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode, get count of units with and without mortgage in year 2022.
	INSUFFICENT

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected output:
	SELECT zipcode, count(*)
	FROM housing_mortgage
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) = count(units_with_mortgage)
	OR count(*) = count(units_without_mortgage)

Expected

====================================================================================================

PROMPT 13:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage averaged over years.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 13:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage averaged over years.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	(1, '2000', '12345', 1, 0)
	(2, '2000', '12345', 0, 1)
	(3, '2000', '12345', 1, 1)
	(4, '2000', '12345', 1, 0)
	(5, '2000', '12345', 0, 1)
	(6, '2000', '12345', 1, 1)
	(7, '2000', '12345', 1, 0)
	(8, '2000', '12345', 0, 1)
	(9, '2000', '12345', 1, 1)
	(10, '2000', '12345', 1, 0)
	(11, '2000', '12345', 0, 1)
	(12, '2000', '12345', 1, 1)
	(13, '2000', '12345', 1, 0)
	(14, '2000', '12345', 0, 1)
	(15, '2000', '12345', 1, 1)
	(16, '2000', '12345', 1, 0)
	(17, '2000', '12345', 0, 1)
	(18, '2000', '12345', 1, 1)
	(19, '2000', '12345', 1, 0)
	(20, '2000', '12345', 0, 1)
	(21, '2000', '12345', 1, 1)
	(22, '2000', '12345', 1, 0)
	(23, '2000', '12345', 0, 1)
	(24, '2000', '12345', 1, 1)
	(25, '2000', '12345', 1, 0)
	(26, '2000', '12345', 0, 1)
	(27, '2000', '12345', 1, 1)
	(28, '2000', '12345', 1, 0)
	(29, '2000', '12345', 0, 1)
	(30, '2000', '12345', 1, 1)
	(31, '2000', '12345', 1, 0)
	(32, '2000', '12345', 0, 1)
	(33, '2000', '12345', 1, 1)
	(34, '2000', '12345', 1, 0)
	(35, '2000', '12345', 0, 1)
	(36, '2000', '12345', 1, 1)
	(37, '2000', '12345', 1, 0)
	(38, '2000', '12345', 0, 1)
	(39, '2000', '12345', 1, 1)
	(40, '2000', '12345', 1, 0)
	(41, '2000', '12345', 0, 1)
	(42, '2000', '12345', 1, 1)
	(43, '2000', '12345', 1, 0)
	(44, '2000', '12345', 0, 1)
	(45, '2000', '12345', 1, 1)
	(46, '2000', '12345', 1, 0)
	(47, '2000', '12345', 0, 1)
	(48, '2000', '12345', 1, 1)
	(49, '2000', '12345', 1, 0)
	(50, '2000', '12345', 0, 1)
	(51, '2000', '12345', 1, 1)
	(52, '2000', '12345', 1, 0)
	(53, '2000', '12345', 0, 1)
	(54, '2000', '12345', 1, 1)
	(55, '2000', '12345', 1, 0)
	(56, '2000', '12345', 0, 1)
	(57, '2000', '12345', 1, 1)
	(58, '2000', '12345', 1, 0)
	(59, '2000', '12345', 0, 1)
	(60, '2000', '12345', 1, 1)
	(61, '2000', '12345', 1, 0)
	(62, '2000', '12345', 0, 1)
	(63, '2000', '12345', 1, 1)
	(64, '2000', '12345', 1, 0)
	(65, '2000', '12345', 0, 1)
	(66, '2000', '12345', 1, 1)
	(67, '2000', '12345', 1, 0)
	(68, '2000', '12345', 0, 1)
	(69, '2000', '12345', 1, 1)
	(70, '2000', '12345', 1, 0)
	(71, '2000', '12345', 0, 1)
	(72, '2000', '12345', 1, 1)
	(73, '2000', '12345', 1, 0)
	(74, '2000', '12345', 0, 1)
	(75, '2000', '12345', 1, 1)
	(76, '2000', '12345', 1, 0)
	(77, '2000', '12345', 0, 1)
	(78, '2000', '12345', 1, 1)
	(79, '2000', '12345', 1, 0)
	(80, '2000', '12345', 0, 1)
	(81, '2000', '12345', 1, 1)
	(82, '2000', '12345', 1, 0)
	(83, '2000', '12345', 0, 1)
	(84, '2000', '12345', 1, 1)
	(85, '2000', '12345', 1, 0)
	(86, '2000', '12345', 0, 1)
	(87, '2000', '12345', 1, 1)
	(88, '2000', '12345', 1, 0)
	(89, '2000', '12345', 0, 1)
	(90, '2000', '12345', 1, 1)
	(91, '2000', '12345', 1, 0)
	(92, '2000', '12345', 0, 1)
	(93, '2000', '12345', 1, 1)
	(94, '2000', '12345', 1, 0)
	(95, '2000', '12345', 0, 1)
	(96, '2000', '12345', 1, 1)
	(97, '2000', '12345', 1, 0)
	(98, '2000', '12345', 0, 1)
	(99, '2000', '12345', 1, 1)
	(100, '2000', '12345', 1, 0)
	(101, '2000', '12345', 0, 1)
	(102, '2000', '12345', 1, 1)
	(103, '2000', '12345', 1, 0)
	(104, '2000', '12345', 0, 1)
	(105, '2000', '12345', 1, 1)
	(106, '2000', '12345', 1, 0)
	(107, '2000', '12345', 0, 1)
	(108, '2000', '12345', 1, 1)
	(109, '2000', '12345', 1, 0)
	(110, '2000', '12345', 0, 1)
	(111, '2000', '12345', 1, 1)
	(112, '2000', '12345', 1, 0)
	(113, '2000', '12345', 0, 1)
	(114, '2000', '12345', 1, 1)
	(115, '2000', '12345', 1, 0)
	(116, '2000', '12345', 0, 1)
	(117, '2000', '12345', 1, 1)
	(118, '2000', '12345', 1, 0)
	(119, '2000', '12345', 0, 1)
	(120, '2000', '12345', 1, 1)
	(121, '2000', '12345', 1, 0)
	(122, '2000', '12345', 0, 1)
	(123, '2000', '12345', 1, 1)
	(124, '2000', '12345', 1, 0)
	(125, '2000', '12345', 0, 1)
	(126, '2000', '12345', 1, 1)
	(127, '2000', '12345', 1, 0)
	(128, '2000', '12345', 0, 1)
	(129, '2000', '12345', 1, 1)
	(130,

====================================================================================================

PROMPT 14:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage for year 2022.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 14:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage for year 2022.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage

Expected output:
	INSUFFICENT

Expected input:
	None

Expected output format:
	SQL statement

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > units_without_mortgage
```

----

## Get count of units with and without mortgage for year 2022.

```sql
SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_

====================================================================================================

PROMPT 15:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average house price for each zip code in a given year.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 15:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average house price for each zip code in a given year.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	year (int)
	zipcode (int)
	number_of_units (int)
	house_value_min (int)
	house_value_max (int)

Output:
	SQL statement

Sample Input:
	year = 2010
	zipcode = 90210
	number_of_units = 2
	house_value_min = 1
	house_value_max = 2

Sample Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Expected Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Input:
	year = 2010
	zipcode = 90210
	number_of_units = 2
	house_value_min = 1
	house_value_max = 2

Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Expected Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Input:
	year = 2010
	zipcode = 90210
	number_of_units = 2
	house_value_min = 1
	house_value_max = 2

Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Expected Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Input:
	year = 2010
	zipcode = 90210
	number_of_units = 2
	house_value_min = 1
	house_value_max = 2

Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Expected Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Input:
	year = 2010
	zipcode = 90210
	number_of_units = 2
	house_value_min = 1
	house_value_max = 2

Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Expected Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Input:
	year = 2010
	zipcode = 90210
	number_of_units = 2
	house_value_min = 1
	house_value_max = 2

Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Expected Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Input:
	year = 2010
	zipcode = 90210
	number_of_units = 2
	house_value_min = 1
	house_value_max = 2

Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Expected Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Input:
	year = 2010
	zipcode = 90210
	number_of_units = 2
	house_value_min = 1
	house_value_max = 2

Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Expected Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Input:
	year = 2010
	zipcode = 90210
	number_of_units = 2
	house_value_min = 1
	house_value_max = 2

Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Expected Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Input:
	year = 2010
	zipcode = 90210
	number_of_units = 2
	house_value_min = 1
	house_value_max = 2

Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Expected Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Input:
	year = 2010
	zipcode = 90210
	number_of_units = 2
	house_value_min = 1
	house_value_max = 2

Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE year = 2010
	AND zipcode = 90210
	AND number_of_units = 2
	AND house_value_min = 1
	AND house_value_max = 2

Expected Output:
	SELECT AVG(house_value)
	FROM housing_value
	WHERE

====================================================================================================

PROMPT 16:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get the average rent and maintenance cost for households without mortgage.

Schema: 
	household_income_percent_without_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 16:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get the average rent and maintenance cost for households without mortgage.

Schema: 
	household_income_percent_without_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance cost for households without mortgage.
	For each zip code, get the average rent and maintenance

====================================================================================================

PROMPT 17:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get median housing value by zipcode.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 17:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get median housing value by zipcode.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	(none)

Output:
	SQL statement(s)

Expected Output:
	SELECT AVG(house_value_max) FROM housing_value WHERE zipcode = '94501'

Input:
	(none)

Output:
	SQL statement(s)

Expected Output:
	SELECT AVG(house_value_max) FROM housing_value WHERE zipcode = '94501' AND house_value_min = 0

Input:
	(none)

Output:
	SQL statement(s)

Expected Output:
	SELECT AVG(house_value_max) FROM housing_value WHERE zipcode = '94501' AND house_value_min = 0 AND house_value_max = 0

Input:
	(none)

Output:
	SQL statement(s)

Expected Output:
	SELECT AVG(house_value_max) FROM housing_value WHERE zipcode = '94501' AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0

Input:
	(none)

Output:
	SQL statement(s)

Expected Output:
	SELECT AVG(house_value_max) FROM housing_value WHERE zipcode = '94501' AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0

Input:
	(none)

Output:
	SQL statement(s)

Expected Output:
	SELECT AVG(house_value_max) FROM housing_value WHERE zipcode = '94501' AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0

Input:
	(none)

Output:
	SQL statement(s)

Expected Output:
	SELECT AVG(house_value_max) FROM housing_value WHERE zipcode = '94501' AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0

Input:
	(none)

Output:
	SQL statement(s)

Expected Output:
	SELECT AVG(house_value_max) FROM housing_value WHERE zipcode = '94501' AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0

Input:
	(none)

Output:
	SQL statement(s)

Expected Output:
	SELECT AVG(house_value_max) FROM housing_value WHERE zipcode = '94501' AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0

Input:
	(none)

Output:
	SQL statement(s)

Expected Output:
	SELECT AVG(house_value_max) FROM housing_value WHERE zipcode = '94501' AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0

Input:
	(none)

Output:
	SQL statement(s)

Expected Output:
	SELECT AVG(house_value_max) FROM housing_value WHERE zipcode = '94501' AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0

Input:
	(none)

Output:
	SQL statement(s)

Expected Output:
	SELECT AVG(house_value_max) FROM housing_value WHERE zipcode = '94501' AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0

Input:
	(none)

Output:
	SQL statement(s)

Expected Output:
	SELECT AVG(house_value_max) FROM housing_value WHERE zipcode = '94501' AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0

Input:
	(none)

Output:
	SQL statement(s)

Expected Output:
	SELECT AVG(house_value_max) FROM housing_value WHERE zipcode = '94501' AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0

Input:
	(none)

Output:
	SQL statement(s)

Expected Output:
	SELECT AVG(house_value_max) FROM housing_value WHERE zipcode = '94501' AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0

Input:
	(none)

Output:
	SQL statement(s)

Expected Output:
	SELECT AVG(house_value_max) FROM housing_value WHERE zipcode = '94501' AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0

Input:
	(none)

Output:
	SQL statement(s)

Expected Output:
	SELECT AVG(house_value_max) FROM housing_value WHERE zipcode = '94501' AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0 AND house_value_max = 0 AND house_value_min = 0

Input:
	(none)

Output:
	SQL statement(s)

Expected Output:
	SELECT AVG(house_value_max) FROM housing_value WHERE zipcode = '94501' AND house_value_

====================================================================================================

PROMPT 18:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022 and for each zipcode, get average rent value and house price.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 18:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022 and for each zipcode, get average rent value and house price.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022 and for each zipcode, get average rent value and house price.
	INSUFFICENT

Expected Output:
	SELECT avg(housing_value.house_value_min, housing_value.house_value_max) as house_value, avg(housing_rent.rent_value_min, housing_rent.rent_value_max) as rent_value
	FROM housing_value, housing_rent
	WHERE housing_value.year = 2022
	AND housing_rent.year = 2022
	AND housing_value.zipcode = housing_rent.zipcode
	AND housing_value.zipcode = '00000'
	AND housing_rent.zipcode = '00000'
	AND housing_value.number_of_units = housing_rent.number_of_units
	AND housing_value.number_of_units = '1'
	AND housing_rent.number_of_units = '1'
	AND housing_value.house_value_min = housing_rent.rent_value_min
	AND housing_value.house_value_max = housing_rent.rent_value_max
	AND housing_rent.house_value_min = housing_rent.rent_value_min
	AND housing_rent.house_value_max = housing_rent.rent_value_max
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house_value_max = '0'
	AND housing_value.house_value_min = '0'
	AND housing_value.house_value_max = '0'
	AND housing_rent.house_value_min = '0'
	AND housing_rent.house

====================================================================================================

PROMPT 19:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get average rent value and house price.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 19:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get average rent value and house price.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode, get average rent value and house price.

SQL:
	SELECT AVG(housing_value.house_value_min, housing_value.house_value_max) AS house_value, AVG(housing_rent.rent_value_min, housing_rent.rent_value_max) AS rent_value
	FROM housing_value
	JOIN housing_rent
	ON housing_value.id = housing_rent.id
	WHERE housing_value.zipcode = '12345'
	AND housing_rent.zipcode = '12345'
	AND housing_rent.year = '2017'
	AND housing_rent.year = '2018'
	AND housing_rent.year = '2019'
	AND housing_rent.year = '2020'
	AND housing_rent.year = '2021'
	AND housing_rent.year = '2022'
	AND housing_rent.year = '2023'
	AND housing_rent.year = '2024'
	AND housing_rent.year = '2025'
	AND housing_rent.year = '2026'
	AND housing_rent.year = '2027'
	AND housing_rent.year = '2028'
	AND housing_rent.year = '2029'
	AND housing_rent.year = '2030'
	AND housing_rent.year = '2031'
	AND housing_rent.year = '2032'
	AND housing_rent.year = '2033'
	AND housing_rent.year = '2034'
	AND housing_rent.year = '2035'
	AND housing_rent.year = '2036'
	AND housing_rent.year = '2037'
	AND housing_rent.year = '2038'
	AND housing_rent.year = '2039'
	AND housing_rent.year = '2040'
	AND housing_rent.year = '2041'
	AND housing_rent.year = '2042'
	AND housing_rent.year = '2043'
	AND housing_rent.year = '2044'
	AND housing_rent.year = '2045'
	AND housing_rent.year = '2046'
	AND housing_rent.year = '2047'
	AND housing_rent.year = '2048'
	AND housing_rent.year = '2049'
	AND housing_rent.year = '2050'
	AND housing_rent.year = '2051'
	AND housing_rent.year = '2052'
	AND housing_rent.year = '2053'
	AND housing_rent.year = '2054'
	AND housing_rent.year = '2055'
	AND housing_rent.year = '2056'
	AND housing_rent.year = '2057'
	AND housing_rent.year = '2058'
	AND housing_rent.year = '2059'
	AND housing_rent.year = '2060'
	AND housing_rent.year = '2061'
	AND housing_rent.year = '2062'
	AND housing_rent.year = '2063'
	AND housing_rent.year = '2064'
	AND housing_rent.year = '2065'
	AND housing_rent.year = '2066'
	AND housing_rent.year = '2067'
	AND housing_rent.year = '2068'
	AND housing_rent.year = '2069'
	AND housing_rent.year = '2070'
	AND housing_rent.year = '2071'
	AND housing_rent.year = '2072'
	AND housing_rent.year = '2073'
	AND housing_rent.year = '2074'
	AND housing_rent.year = '2075'
	AND housing_rent.year = '2076'
	AND housing_rent.year = '2077'
	AND housing_rent.year = '2078'
	AND housing_rent.year = '2079'
	AND housing_rent.year = '2080'
	AND housing_rent.year = '2081'
	AND housing_rent.year = '2082'
	AND housing_rent.year = '2083'
	AND housing_rent.year = '2084'
	AND housing_rent.year = '2085'
	AND housing_rent.year = '2086'
	AND housing_rent.year = '2087'
	AND housing_rent.year = '2088'
	AND housing_rent.year = '2089'
	AND housing_rent.year = '2090'
	AND housing_rent.year = '2091'
	AND housing_rent.year = '2092'
	AND housing_rent.year = '2093'
	AND housing_rent.year = '2094'
	AND housing_rent.year = '2095'
	AND housing_rent.year = '2096'
	AND housing_rent.year = '2097'
	AND housing_rent.year = '2098'
	AND housing_rent.year = '2099'
	AND housing_rent.year = '2100'
	AND housing_rent.year = '2101'
	AND housing_rent.year = '2102'
	AND housing_rent.year = '2103'
	AND housing_rent.year = '2104'
	AND housing_rent.year = '2105'
	AND housing_rent.year = '2106'
	AND housing_rent.year = '2107'
	AND housing_rent.year = '2108'
	AND housing_rent.year = '2109'
	AND housing_rent.year = '2110'
	AND housing_rent.year = '2111'
	AND housing_rent.year = '2112'
	AND housing_rent.year = '2113'
	AND housing_rent.year = '2114'
	AND housing_rent.year = '2115'
	AND housing_rent.year = '2116'
	AND housing_rent.year = '2117'
	AND housing_rent.year = '2118'
	AND housing_rent.year = '2119'
	AND housing_rent.year = '2120'
	AND housing_rent.year = '2121'
	AND housing_rent.year = '2122'
	AND housing_rent.year = '2123'
	AND housing_rent.year = '2124'
	AND housing_rent.year = '2125'
	AND housing_rent.year = '2126'
	AND housing_rent.year = '2127'
	AND housing_rent.year = '2128'
	AND housing_rent.year = '2129'
	AND housing_rent.year = '2130'
	AND housing_rent.year = '2131'
	AND housing_rent.year = '2132'
	AND housing_rent.year = '2133'
	AND housing_rent.year = '2134'
	AND housing_rent.year = '2135'
	AND housing_rent.year = '2136'
	AND housing_rent.year = '2137'
	AND housing_rent.year = '2138'
	AND housing_rent.year = '2139'
	AND housing_rent.year = '2140'
	AND housing_rent.year = '2141'
	AND housing_rent.year = '2142'
	AND housing_rent.year = '2143'
	AND housing_rent.year = '2144'
	AND housing_rent.year = '2145'
	AND housing_rent.year = '2146'
	AND housing_rent.year = '2147'
	AND housing_rent.year = '2148'
	AND housing_rent.year = '2149'
	AND housing_rent.year = '2150'
	AND housing_rent.year = '2151'
	AND housing_rent.year = '2152'
	AND housing_rent.year = '2

====================================================================================================

PROMPT 20:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get total housing units in 2022 grouped by zipcode.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 20:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get total housing units in 2022 grouped by zipcode.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT zipcode, count(*)
	FROM housing_value
	WHERE year = 2022
	GROUP BY zipcode
	HAVING count(*) > 0
	ORDER BY count(*) DESC
	LIMIT 1

Expected Output:
	zipcode, count(*)
	'00000', '1'
	'00001', '1'
	'00002', '1'
	'00003', '1'
	'00004', '1'
	'00005', '1'
	'00006', '1'
	'00007', '1'
	'00008', '1'
	'00009', '1'
	'00010', '1'
	'00011', '1'
	'00012', '1'
	'00013', '1'
	'00014', '1'
	'00015', '1'
	'00016', '1'
	'00017', '1'
	'00018', '1'
	'00019', '1'
	'00020', '1'
	'00021', '1'
	'00022', '1'
	'00023', '1'
	'00024', '1'
	'00025', '1'
	'00026', '1'
	'00027', '1'
	'00028', '1'
	'00029', '1'
	'00030', '1'
	'00031', '1'
	'00032', '1'
	'00033', '1'
	'00034', '1'
	'00035', '1'
	'00036', '1'
	'00037', '1'
	'00038', '1'
	'00039', '1'
	'00040', '1'
	'00041', '1'
	'00042', '1'
	'00043', '1'
	'00044', '1'
	'00045', '1'
	'00046', '1'
	'00047', '1'
	'00048', '1'
	'00049', '1'
	'00050', '1'
	'00051', '1'
	'00052', '1'
	'00053', '1'
	'00054', '1'
	'00055', '1'
	'00056', '1'
	'00057', '1'
	'00058', '1'
	'00059', '1'
	'00060', '1'
	'00061', '1'
	'00062', '1'
	'00063', '1'
	'00064', '1'
	'00065', '1'
	'00066', '1'
	'00067', '1'
	'00068', '1'
	'00069', '1'
	'00070', '1'
	'00071', '1'
	'00072', '1'
	'00073', '1'
	'00074', '1'
	'00075', '1'
	'00076', '1'
	'00077', '1'
	'00078', '1'
	'00079', '1'
	'00080', '1'
	'00081', '1'
	'00082', '1'
	'00083', '1'
	'00084', '1'
	'00085', '1'
	'00086', '1'
	'00087', '1'
	'00088', '1'
	'00089', '1'
	'00090', '1'
	'00091', '1'
	'00092', '1'
	'00093', '1'
	'00094', '1'
	'00095', '1'
	'00096', '1'
	'00097', '1'
	'00098', '1'
	'00099', '1'
	'00100', '1'
	'00101', '1'
	'00102', '1'
	'00103', '1'
	'00104', '1'
	'00105', '1'
	'00106', '1'
	'00107', '1'
	'00108', '1'
	'00109', '1'
	'00110', '1'
	'00111', '1'
	'00112', '1'
	'00113', '1'
	'00114', '1'
	'00115', '1'
	'00116', '1'
	'00117', '1'
	'00118', '1'
	'00119', '1'
	'00120', '1'
	'00121', '1'
	'00122', '1'
	'00123', '1'
	'00124', '1'
	'00125', '1'
	'00126', '1'
	'00127', '1'
	'00128', '1'
	'00129', '1'
	'00130', '1'
	'00131', '1'
	'00132', '1'
	'00133', '1'
	'00134', '1'
	'00135', '1'
	'00136', '1'
	'00137', '1'
	'00138', '1'
	'00139', '1'
	'00140', '1'
	'00141', '1'
	'00142', '1'
	'00143', '1'
	'00144', '1'
	'00145', '1'
	'00146', '1'
	'00147', '1'
	'00148', '1'
	'00149', '1'
	'00150', '1'
	'00151', '1'
	'00152', '1'
	'00153', '1'
	'00154', '1'
	'00155', '1'
	'00156', '1'
	'00157', '1'
	'00158', '1'
	'00159', '1'
	'00160', '1'
	'00161', '1'
	'00162', '1'
	'00163', '1'
	'00164', '1'
	'00165', '1'
	'00166', '1'
	'00167', '1'
	'00168', '1'
	'00169', '1'
	'00170', '1'
	'00171', '1'
	'00172', '1'
	'00173', '1'
	'00174', '1'
	'00175', '1'
	'00176', '1'
	'00177', '1'
	'00178', '1'
	'00179', '1'
	'00180', '1'
	'00181', '1'
	'00182', '1'
	'00183', '1'
	'00184', '1'
	'00185', '1'
	'00186', '1'
	'00187', '1'
	'00188', '1'
	'00189', '1'
	'00190', '1'
	'00191', '1'
	'00192', '1'
	'00193', '1'
	'00194', '1'
	'00195', '1'
	'00196', '1'
	'00197', '1'
	'00198', '1'
	'00199', '1'
	'00200', '1'
	'00201', '1'
	'00202', '1'
	'00203', '1'
	'00204', '

====================================================================================================

PROMPT 21:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, count houses built in or after 2020.

Schema: 
	housing_year_built (year, id, zipcode, number_of_units, year_built_min, year_built_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 21:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, count houses built in or after 2020.

Schema: 
	housing_year_built (year, id, zipcode, number_of_units, year_built_min, year_built_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	(none)

Output:
	SQL statement(s)

Expected Output:
	SELECT count(*)
	FROM housing_year_built
	WHERE year >= 2020
	AND zipcode = '12345'

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output:
	INSUFFICENT

Expected Input:
	(none)

Expected Output

====================================================================================================

PROMPT 22:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having GRAPI greater than 28% in year 2022

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 22:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having GRAPI greater than 28% in year 2022

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(*) FROM housing_gross_rent_percent WHERE year = 2022 AND income_percent_min > 28.0

Expected Output:
	'INSUFFICENT'

Expected SQL:
	SELECT COUNT(*) FROM housing_gross_rent_percent WHERE year = 2022 AND income_percent_min > 28.0

Expected Response:
	'INSUFFICENT'

Expected Error:
	'INSUFFICENT'

Expected Data:
	'INSUFFICENT'

Expected Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

Expected End Scenario:
	'INSUFFICENT'

Expected Start Scenario:
	'INSUFFICENT'

====================================================================================================

PROMPT 23:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having SMOCAPI greater than 30% in year 2022.

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 23:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having SMOCAPI greater than 30% in year 2022.

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	Prompt:
	Get percentage of zipcodes having SMOCAPI greater than 30% in year 2022.
	Schema:
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)
	Note, only respond with a single most accurate SQL statement.
	If more information is required, simply respond with 'INSUFFICENT'.
	SQL:
	SELECT count(*)
	FROM household_income_percent_with_mortgage
	WHERE year = 2022
	AND zipcode IN (SELECT zipcode FROM zipcode_table)
	AND income_percent_min > 30
	AND income_percent_max < 30
	AND number_of_units > 0
	AND income_percent_min < income_percent_max
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income_percent_min < 100
	AND income_percent_max < 100
	AND income_percent_min > 0
	AND income_percent_max > 0
	AND income

====================================================================================================

PROMPT 24:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average population of males and females by year in Georgia

Schema: 
	demographic_basics (year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 24:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average population of males and females by year in Georgia

Schema: 
	demographic_basics (year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	INSUFFICENT

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_avg FROM demographic_basics WHERE year = '2010' AND zipcode = '30211'

Response:
	SELECT AVG(total_population_male) AS male_avg, AVG(total_population_female) AS female_

====================================================================================================

PROMPT 25:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get gender ratio between males and females for each zipcode in Georgia.

Schema: 
	demographic_basics (year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 25:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get gender ratio between males and females for each zipcode in Georgia.

Schema: 
	demographic_basics (year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get gender ratio between males and females for each zipcode in Georgia.
	INSUFFICENT

Expected Output:
	SELECT zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female
	FROM demographic_basics
	WHERE year = 2022
	AND zipcode IN (SELECT zipcode FROM zip_codes_georgia)
	AND total_population_sex_ratio > 0.5
	AND total_population_median_age > 18
	AND total_housing_units > 0
	AND voting_age_population > 0
	AND voting_age_popul > 0
	AND voting_age_population_female > 0
	AND total_population_male > 0
	AND total_population_female > 0
	AND total_population_sex_ratio > 0.5
	AND total_population_median_age > 18
	AND total_housing_units > 0
	AND voting_age_population > 0
	AND voting_age_popul > 0
	AND voting_age_population_female > 0
	AND total_population_male > 0
	AND total_population_female > 0
	AND total_population_sex_ratio > 0.5
	AND total_population_median_age > 18
	AND total_housing_units > 0
	AND voting_age_population > 0
	AND voting_age_popul > 0
	AND voting_age_population_female > 0
	AND total_population_male > 0
	AND total_population_female > 0
	AND total_population_sex_ratio > 0.5
	AND total_population_median_age > 18
	AND total_housing_units > 0
	AND voting_age_population > 0
	AND voting_age_popul > 0
	AND voting_age_population_female > 0
	AND total_population_male > 0
	AND total_population_female > 0
	AND total_population_sex_ratio > 0.5
	AND total_population_median_age > 18
	AND total_housing_units > 0
	AND voting_age_population > 0
	AND voting_age_popul > 0
	AND voting_age_population_female > 0
	AND total_population_male > 0
	AND total_population_female > 0
	AND total_population_sex_ratio > 0.5
	AND total_population_median_age > 18
	AND total_housing_units > 0
	AND voting_age_population > 0
	AND voting_age_popul > 0
	AND voting_age_population_female > 0
	AND total_population_male > 0
	AND total_population_female > 0
	AND total_population_sex_ratio > 0.5
	AND total_population_median_age > 18
	AND total_housing_units > 0
	AND voting_age_population > 0
	AND voting_age_popul > 0
	AND voting_age_population_female > 0
	AND total_population_male > 0
	AND total_population_female > 0
	AND total_population_sex_ratio > 0.5
	AND total_population_median_age > 18
	AND total_housing_units > 0
	AND voting_age_population > 0
	AND voting_age_popul > 0
	AND voting_age_population_female > 0
	AND total_population_male > 0
	AND total_population_female > 0
	AND total_population_sex_ratio > 0.5
	AND total_population_median_age > 18
	AND total_housing_units > 0
	AND voting_age_population > 0
	AND voting_age_popul > 0
	AND voting_age_population_female > 0
	AND total_population_male > 0
	AND total_population_female > 0
	AND total_population_sex_ratio > 0.5
	AND total_population_median_age > 18
	AND total_housing_units > 0
	AND voting_age_population > 0
	AND voting_age_popul > 0
	AND voting_age_population_female > 0
	AND total_population_male > 0
	AND total_population_female > 0
	AND total_population_sex_ratio > 0.5
	AND total_population_median_age > 18
	AND total_housing_units > 0
	AND voting_age_population > 0
	AND voting_age_popul > 0
	AND voting_age_population_female > 0
	AND total_population_male > 0
	AND total_population_female > 0
	AND total_population_sex_ratio > 0.5
	AND total_population_median_age > 18
	AND total_housing_units > 0
	AND voting_age_population > 0
	AND voting_age_popul > 0
	AND voting_age_population_female > 0
	AND total_population_male > 0
	AND total_population_female > 0
	AND total_population_sex_ratio > 0.5
	AND total_population_median_age > 18
	AND total_housing_units > 0
	AND voting_age_population > 0
	AND voting_age_popul > 0
	AND voting_age_population_female > 0
	AND total_population_male > 0
	AND total_population_female > 0
	AND total_population_sex_ratio > 0.5
	AND total_population_median_age > 18
	AND total_housing_units > 0
	AND voting_age_population > 0
	AND voting_age_popul > 0
	AND voting_age_population_female > 0
	AND total_population_male > 0
	AND total_population_female > 0
	AND total_population_sex_ratio > 0.5
	AND total_population_median_age > 18
	AND total_housing_units > 0
	AND voting_age_population > 0
	AND voting_age_popul > 0
	AND voting_age_population_female > 0
	AND total_population_male > 0
	AND total_population_female > 0
	AND total_population_sex_ratio > 0.5
	AND total_population_median_age > 18
	AND total_housing_units > 0
	AND voting_age_population > 0
	AND voting_age_popul > 0
	AND voting_age_population_female > 0
	AND total_population_male > 0
	AND total_population_female > 0
	AND total_population_sex_ratio > 0.5
	AND total_population_median_age > 18
	AND total_housing_units > 0
	AND voting_age_population > 0
	AND voting_age_popul > 0
	AND voting_age_population_female > 0
	AND total_population_male > 0
	AND total_population_female > 0
	AND total_population_sex_ratio > 0.5
	AND total_population_median_age > 18
	AND total_housing_units > 0
	AND voting_age_population > 0
	AND voting_age_popul > 0
	AND voting_age_population_female > 0
	AND total_population_male > 0
	AND total_population_female > 0
	AND total_population_sex_ratio > 0.5
	AND total_population_median_age > 18
	AND total_housing_units > 0
	AND voting_age_population > 0
	AND voting_age_popul > 0
	AND voting_age_population_female > 0
	AND total_population_male > 0
	AND total_population_female > 0
	AND total_population_sex_ratio > 0.5
	AND total_population_median_age > 18
	AND total_housing_units > 0
	AND voting_age_population >

====================================================================================================

PROMPT 26:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each year after 2016, get average count of each ethnicity in Georgia.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 26:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each year after 2016, get average count of each ethnicity in Georgia.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY year
	ORDER BY year
	LIMIT 1

Expected Output:
	For each year after 2016, get average count of each ethnicity in Georgia.
	SELECT AVG(race_total_populatio)
	FROM

====================================================================================================

PROMPT 27:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get average count of each ethnicity grouped by zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 27:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get average count of each ethnicity grouped by zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get average count of each ethnicity grouped by zipcode.
	INSUFFICENT

Expected Output:
	SELECT avg(race_total_populatio)
	FROM demographic_race
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY zipcode

*/

import (
	"database/sql"
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/jmoiron/sqlx"
)

// A query is a single SQL statement.
type query struct {
	sql string
}

// A statement is a single SQL statement.
type statement struct {
	sql string
}

// A statement_builder is a statement builder.
type statement_builder struct {
	sql string
}

// A statement_builder_with_statement is a statement builder with a statement.
type statement_builder_with_statement struct {
	sql string
	stmt statement
}

// A statement_with_statement is a statement with a statement.
type statement_with_statement struct {
	stmt statement
}

// A statement_with_statement_builder is a statement with a statement builder.
type statement_with_statement_builder struct {
	stmt statement
	builder statement_builder
}

// A statement_with_statement_builder_with_statement is a statement with a statement builder with a statement.
type statement_with_statement_builder_with_statement struct {
	stmt statement
	builder statement_builder
	stmt_builder statement_builder_with_statement
}

// A statement_with_statement_with_statement_builder is a statement with a statement with a statement builder.
type statement_with_statement_with_statement_builder struct {
	stmt statement
	stmt_builder statement_with_statement_builder
	builder statement_builder_with_statement
}

// A statement_with_statement_with_statement_builder_with_statement is a statement with a statement with a statement with a statement builder.
type statement_with_statement_with_statement_builder_with_statement struct {
	stmt statement
	stmt_builder statement_with_statement_with_statement_builder
	builder statement_with_statement_with_statement_builder
}

// A statement_with_statement_with_statement_builder_with_statement_with_statement is a statement with a statement with a statement with a statement with a statement builder.
type statement_with_statement_with_statement_builder_with_statement_with_statement struct {
	stmt statement
	stmt_builder statement_with_statement_with_statement_builder_with_statement
	builder statement_with_statement_with_statement_builder_with_statement
}

// A statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement is a statement with a statement with a statement with a statement with a statement with a statement builder.
type statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement struct {
	stmt statement
	stmt_builder statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement
	builder statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement
}

// A statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement_with_statement is a statement with a statement with a statement with a statement with a statement with a statement with a statement builder.
type statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement_with_statement struct {
	stmt statement
	stmt_builder statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement_with_statement
	builder statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement_with_statement
}

// A statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement_with_statement_with_statement is a statement with a statement with a statement with a statement with a statement with a statement with a statement with a statement builder.
type statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement_with_statement_with_statement struct {
	stmt statement
	stmt_builder statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement
	builder statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement
}

// A statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement is a statement with a statement with a statement with a statement with a statement with a statement with a statement with a statement with a statement builder.
type statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement struct {
	stmt statement
	stmt_builder statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement
	builder statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement
}

// A statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement is a statement with a statement with a statement with a statement with a statement with a statement with a statement with a statement with a statement with a statement builder.
type statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement struct {
	stmt statement
	stmt_builder statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement
	builder statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement
}

// A statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement is a statement with a statement with a statement with a statement with a statement with a statement with a statement with a statement with a statement with a statement with a statement builder.
type statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement struct {
	stmt statement
	stmt_builder statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement
	builder statement_with_statement_with_statement_builder_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement_with_statement
}

// A statement_with_statement

====================================================================================================

PROMPT 28:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of American Indian and Alaskan Natives with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 28:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of American Indian and Alaskan Natives with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get percentage of American Indian and Alaskan Natives with respect to the total population in each zipcode.
	INSUFFICENT
	SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	FROM demographic_race
	WHERE year = 2022
	AND zipcode IN (
	SELECT zipcode
	FROM demographic_race
	WHERE year = 2022
	AND race_total_populatio > 0
	)
	AND race_total_populatio > 0
	AND one_race = 'American Indian and Alaskan Natives'
	AND two_or_more_races = 'American Indian and Alaskan Natives'
	AND white = 'American Indian and Alaskan Natives'
	AND black = 'American Indian and Alaskan Natives'
	AND american_indian_and_alaska_native = 'American Indian and Alaskan Natives'
	AND asian = 'American Indian and Alaskan Natives'
	AND native_hawaiian_and_other_pacific_islander = 'American Indian and Alaskan Natives'
	AND some_other_race = 'American Indian and Alaskan Natives'
	AND hispanic_or_latino_total = 'American Indian and Alaskan Natives'
	AND hispanic_or_latino = 'American Indian and Alaskan Natives'
	AND not_hispanic_or_latino = 'American Indian and Alaskan Natives'

Correct Answer:
	SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	FROM demographic_race
	WHERE year = 2022
	AND zipcode IN (
	SELECT zipcode
	FROM demographic_race
	WHERE year = 2022
	AND race_total_populatio > 0
	)
	AND race_total_populatio > 0
	AND one_race = 'American Indian and Alaskan Natives'
	AND two_or_more_races = 'American Indian and Alaskan Natives'
	AND white = 'American Indian and Alaskan Natives'
	AND black = 'American Indian and Alaskan Natives'
	AND american_indian_and_alaska_native = 'American Indian and Alaskan Natives'
	AND asian = 'American Indian and Alaskan Natives'
	AND native_hawaiian_and_other_pacific_islander = 'American Indian and Alaskan Natives'
	AND some_other_race = 'American Indian and Alaskan Natives'
	AND hispanic_or_latino_total = 'American Indian and Alaskan Natives'
	AND hispanic_or_latino = 'American Indian and Alaskan Natives'
	AND not_hispanic_or_latino = 'American Indian and Alaskan Natives'

Explanation:
	The query is a bit tricky, but the idea is to find the zipcodes that have a total population greater than 0, and then find the ones that have a percentage of American Indian and Alaskan Natives greater than 0.
	The first part of the query is to find the zipcodes that have a total population greater than 0.
	The second part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The third part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The fourth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The fifth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The sixth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The seventh part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The eighth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The ninth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The tenth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The eleventh part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The twelfth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The thirteenth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The fourteenth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The fifteenth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The sixteenth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The seventeenth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The eighteenth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The nineteenth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The twentieth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The twenty-first part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The twenty-second part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The twenty-third part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The twenty-fourth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The twenty-fifth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The twenty-sixth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The twenty-seventh part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The twenty-eighth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The twenty-ninth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The thirtieth part of the query is to find the zipcodes that have a percentage of American Indian and Alaskan Natives greater than 0.
	The thirty-first part of the query is to find the zipcodes that have a percentage of American Indian and Alask

====================================================================================================

PROMPT 29:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Asians with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 29:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Asians with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get percentage of Asians with respect to the total population in each zipcode.
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFFICENT
	INSUFF

====================================================================================================

PROMPT 30:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 30:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.
	INSUFFICENT

Expected Output:
	SELECT zipcode, (100 * black_populatio / total_populatio) AS percentage
	FROM demographic_race
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY percentage DESC
	LIMIT 10

Solution:
	SELECT zipcode, (100 * black_populatio / total_populatio) AS percentage
	FROM demographic_race
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY percentage DESC
	LIMIT 10

---

## #2:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.
	INSUFFICENT

Expected Output:
	SELECT zipcode, (100 * black_populatio / total_populatio) AS percentage
	FROM demographic_race
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY percentage DESC
	LIMIT 10

Solution:
	SELECT zipcode, (100 * black_populatio / total_populatio) AS percentage
	FROM demographic_race
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY percentage DESC
	LIMIT 10

---

## #3:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.
	INSUFFICENT

Expected Output:
	SELECT zipcode, (100 * black_populatio / total_populatio) AS percentage
	FROM demographic_race
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY percentage DESC
	LIMIT 10

Solution:
	SELECT zipcode, (100 * black_populatio / total_populatio) AS percentage
	FROM demographic_race
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY percentage DESC
	LIMIT 10

---

## #4:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.
	INSUFFICENT

Expected Output:
	SELECT zipcode, (100 * black_populatio / total_populatio) AS percentage
	FROM demographic_race
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY percentage DESC
	LIMIT 10

Solution:
	SELECT zipcode, (100 * black_populatio / total_populatio) AS percentage
	FROM demographic_race
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY percentage DESC
	LIMIT 10

---

## #5:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.
	INSUFFICENT

Expected Output:
	SELECT zipcode, (100 * black_populatio / total_populatio) AS percentage
	FROM demographic_race
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY percentage DESC
	LIMIT 10

Solution:
	SELECT zipcode, (100 * black_populatio / total_populatio) AS percentage
	FROM demographic_race
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY percentage DESC
	LIMIT 10

---

## #6:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.
	INSUFFICENT

Expected Output:
	SELECT zipcode, (100 * black_populatio / total_populatio) AS percentage
	FROM demographic_race
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY percentage DESC
	LIMIT 10

Solution:
	SELECT zipcode, (

====================================================================================================

PROMPT 31:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Hispanics/Latinos with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 31:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Hispanics/Latinos with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

SQL:
	SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, total_hispanic_or_latino, percentage_hispanic_or_latino
	FROM demographic_race
	WHERE year = '2022'
	ORDER BY hispanic_or_latino_total DESC
	LIMIT 1;


====================================================================================================

PROMPT 32:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Native Hawaiian and other Pacific Inlander with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 32:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Native Hawaiian and other Pacific Inlander with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:

Input:
	(2022, 1, '90001', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '

====================================================================================================

PROMPT 33:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Whites with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 33:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Whites with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get percentage of Whites with respect to the total population in each zipcode.

Solution:
	SELECT zipcode,
	(
		SELECT COUNT(*)
		FROM demographic_race
		WHERE race_total_populatio = 'white'
	) / (
		SELECT COUNT(*)
		FROM demographic_race
	) AS percentage_of_whites
	FROM demographic_race
	WHERE year = '2022'
	GROUP BY zipcode
	ORDER BY percentage_of_whites DESC

Expected Output:
	zipcode, percentage_of_whites
	'10001', 0.9
	'10002', 0.8
	'10003', 0.7
	'10004', 0.6
	'10005', 0.5
	'10006', 0.4
	'10007', 0.3
	'10008', 0.2
	'10009', 0.1
	'10010', 0.0
	'10011', 0.0
	'10012', 0.0
	'10013', 0.0
	'10014', 0.0
	'10015', 0.0
	'10016', 0.0
	'10017', 0.0
	'10018', 0.0
	'10019', 0.0
	'10020', 0.0
	'10021', 0.0
	'10022', 0.0
	'10023', 0.0
	'10024', 0.0
	'10025', 0.0
	'10026', 0.0
	'10027', 0.0
	'10028', 0.0
	'10029', 0.0
	'10030', 0.0
	'10031', 0.0
	'10032', 0.0
	'10033', 0.0
	'10034', 0.0
	'10035', 0.0
	'10036', 0.0
	'10037', 0.0
	'10038', 0.0
	'10039', 0.0
	'10040', 0.0
	'10041', 0.0
	'10042', 0.0
	'10043', 0.0
	'10044', 0.0
	'10045', 0.0
	'10046', 0.0
	'10047', 0.0
	'10048', 0.0
	'10049', 0.0
	'10050', 0.0
	'10051', 0.0
	'10052', 0.0
	'10053', 0.0
	'10054', 0.0
	'10055', 0.0
	'10056', 0.0
	'10057', 0.0
	'10058', 0.0
	'10059', 0.0
	'10060', 0.0
	'10061', 0.0
	'10062', 0.0
	'10063', 0.0
	'10064', 0.0
	'10065', 0.0
	'10066', 0.0
	'10067', 0.0
	'10068', 0.0
	'10069', 0.0
	'10070', 0.0
	'10071', 0.0
	'10072', 0.0
	'10073', 0.0
	'10074', 0.0
	'10075', 0.0
	'10076', 0.0
	'10077', 0.0
	'10078', 0.0
	'10079', 0.0
	'10080', 0.0
	'10081', 0.0
	'10082', 0.0
	'10083', 0.0
	'10084', 0.0
	'10085', 0.0
	'10086', 0.0
	'10087', 0.0
	'10088', 0.0
	'10089', 0.0
	'10090', 0.0
	'10091', 0.0
	'10092', 0.0
	'10093', 0.0
	'10094', 0.0
	'10095', 0.0
	'10096', 0.0
	'10097', 0.0
	'10098', 0.0
	'10099', 0.0
	'10100', 0.0
	'10101', 0.0
	'10102', 0.0
	'10103', 0.0
	'10104', 0.0
	'10105', 0.0
	'10106', 0.0
	'10107', 0.0
	'10108', 0.0
	'10109', 0.0
	'10110', 0.0
	'10111', 0.0
	'10112', 0.0
	'10113', 0.0
	'10114', 0.0
	'10115', 0.0
	'10116', 0.0
	'10117', 0.0
	'10118', 0.0
	'10119', 0.0
	'10120', 0.0
	'10121', 0.0
	'10122', 0.0
	'10123', 0.0
	'10124', 0.0
	'10125', 0.0
	'10126', 0.0
	'10127', 0.0
	'10128', 0.0
	'10129', 0.0
	'10130', 0.0
	'10131', 0.0
	'10132', 0.0
	'10133', 0.0
	'10134', 0.0
	'10135', 0.0
	'10136', 0.0
	'10137', 0.0
	'10138', 0.0
	'10139', 0.0
	'10140', 0.0
	'10141', 0.0
	'10142', 0.0
	'10143', 0.0
	'10144', 0.0
	'10145', 0.0
	'10146', 0.0
	'10147', 0.0
	'10148', 0.0
	'10149', 0.0
	'10150', 0.0
	'10151', 0.0
	'10152', 0.0
	'10153', 0.0
	'10154', 0.0
	'10155', 0.0
	'10156', 0.0
	'10157', 0.0
	'10158', 0.0
	'10159', 0.0
	'10160', 0.0
	'10161', 0.0
	'10162', 0.0
	'10163', 0.0
	'10164', 0.0
	'10165', 0.0
	'10166', 0.0
	'10167', 0.0
	'10168', 0.0
	'10169', 0.0
	'10170', 0.0
	'10171', 0.0
	'10172', 0.0
	'10173', 0.0
	'10174', 0.0
	'10175', 0.0
	'10176', 0.0
	'10177', 0.0
	'10178', 0.0
	'10179', 0.0
	'10180', 0.0
	'10181', 0.0
	'10182', 0.0
	'10183', 0.0
	'10184', 0.0
	'10185', 0.0
	'10186', 0.0
	'10187', 0.0
	'10188', 0.0
	'10189', 0.0
	'10190', 0.0
	'10191', 0

====================================================================================================

PROMPT 34:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)
household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 34:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)
household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

SQL:
	SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, avg(income_percent_min), avg(income_percent_max), avg(SMOCAPI)
	FROM demographic_race
	WHERE year >= 2016
	GROUP BY zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
	HAVING avg(income_percent_min) >= 0.5
	AND avg(income_percent_max) >= 0.5
	AND avg(SMOCAPI) >= 0.5
	ORDER BY avg(SMOCAPI) DESC

Expected Output:
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, avg(income_percent_min), avg(income_percent_max), avg(SMOCAPI)
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, avg(income_percent_min), avg(income_percent_max), avg(SMOCAPI)
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, avg(income_percent_min), avg(income_percent_max), avg(SMOCAPI)
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, avg(income_percent_min), avg(income_percent_max), avg(SMOCAPI)
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, avg(income_percent_min), avg(income_percent_max), avg(SMOCAPI)
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, avg(income_percent_min), avg(income_percent_max), avg(SMOCAPI)
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, avg(income_percent_min), avg(income_percent_max), avg(SMOCAPI)
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, avg(income_percent_min), avg(income_percent_max), avg(SMOCAPI)
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, avg(income_percent_min), avg(income_percent_max), avg(SMOCAPI)
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, avg(income_percent_min), avg(income_percent_max), avg(SMOCAPI)
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, avg(income_percent_min), avg(income_percent_max), avg(SMOCAPI)
	zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino, avg(income_percent_min), avg(

====================================================================================================

PROMPT 35:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those travelling in car alone between year 2019 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 35:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those travelling in car alone between year 2019 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

```sql
SELECT zipcode,
	(car_alone - car_pool) / car_alone AS car_alone_change,
	(car_alone - public_transport) / car_alone AS public_transport_change,
	(car_alone - walk) / car_alone AS walk_change,
	(car_alone - other) / car_alone AS other_change,
	(car_alone - work_from_home) / car_alone AS work_from_home_change,
	(car_alone - mean_travel_time) / car_alone AS mean_travel_time_change
FROM economic_commute_to_work
WHERE year = 2019
AND id = 1
AND zipcode = '30303'
```

```sql
SELECT zipcode,
	(car_alone - car_pool) / car_alone AS car_alone_change,
	(car_alone - public_transport) / car_alone AS public_transport_change,
	(car_alone - walk) / car_alone AS walk_change,
	(car_alone - other) / car_alone AS other_change,
	(car_alone - work_from_home) / car_alone AS work_from_home_change,
	(car_alone - mean_travel_time) / car_alone AS mean_travel_time_change
FROM economic_commute_to_work
WHERE year = 2019
AND id = 1
AND zipcode = '30303'
```

```sql
SELECT zipcode,
	(car_alone - car_pool) / car_alone AS car_alone_change,
	(car_alone - public_transport) / car_alone AS public_transport_change,
	(car_alone - walk) / car_alone AS walk_change,
	(car_alone - other) / car_alone AS other_change,
	(car_alone - work_from_home) / car_alone AS work_from_home_change,
	(car_alone - mean_travel_time) / car_alone AS mean_travel_time_change
FROM economic_commute_to_work
WHERE year = 2019
AND id = 1
AND zipcode = '30303'
```

```sql
SELECT zipcode,
	(car_alone - car_pool) / car_alone AS car_alone_change,
	(car_alone - public_transport) / car_alone AS public_transport_change,
	(car_alone - walk) / car_alone AS walk_change,
	(car_alone - other) / car_alone AS other_change,
	(car_alone - work_from_home) / car_alone AS work_from_home_change,
	(car_alone - mean_travel_time) / car_alone AS mean_travel_time_change
FROM economic_commute_to_work
WHERE year = 2019
AND id = 1
AND zipcode = '30303'
```

```sql
SELECT zipcode,
	(car_alone - car_pool) / car_alone AS car_alone_change,
	(car_alone - public_transport) / car_alone AS public_transport_change,
	(car_alone - walk) / car_alone AS walk_change,
	(car_alone - other) / car_alone AS other_change,
	(car_alone - work_from_home) / car_alone AS work_from_home_change,
	(car_alone - mean_travel_time) / car_alone AS mean_travel_time_change
FROM economic_commute_to_work
WHERE year = 2019
AND id = 1
AND zipcode = '30303'
```

```sql
SELECT zipcode,
	(car_alone - car_pool) / car_alone AS car_alone_change,
	(car_alone - public_transport) / car_alone AS public_transport_change,
	(car_alone - walk) / car_alone AS walk_change,
	(car_alone - other) / car_alone AS other_change,
	(car_alone - work_from_home) / car_alone AS work_from_home_change,
	(car_alone - mean_travel_time) / car_alone AS mean_travel_time_change
FROM economic_commute_to_work
WHERE year = 2019
AND id = 1
AND zipcode = '30303'
```

```sql
SELECT zipcode,
	(car_alone - car_pool) / car_alone AS car_alone_change,
	(car_alone - public_transport) / car_alone AS public_transport_change,
	(car_alone - walk) / car_alone AS walk_change,
	(car_alone - other) / car_alone AS other_change,
	(car_alone - work_from_home) / car_alone AS work_from_home_change,
	(car_alone - mean_travel_time) / car_alone AS mean_travel_time_change
FROM economic_commute_to_work
WHERE year = 2019
AND id = 1
AND zipcode = '30303'
```

```sql
SELECT zipcode,
	(car_alone - car_pool) / car_alone AS car_alone_change,
	(car_alone - public_transport) / car_alone AS public_transport_change,
	(car_alone - walk) / car_alone AS walk_change,
	(car_alone - other) / car_alone AS other_change,
	(car_alone - work_from_home) / car_alone AS work_from_home_change,
	(car_alone - mean_travel_time) / car_alone AS mean_travel_time_change
FROM economic_commute_to_work
WHERE year = 2019
AND id = 1
AND zipcode = '30303'
```

```sql
SELECT zipcode,
	(car_alone - car_pool) / car_alone AS car_alone_change,
	(car_alone - public_transport) / car_alone AS public_transport_change,
	(car_alone - walk) / car_alone AS walk_change,
	(car_alone - other) / car_alone AS other_change,
	(car_alone - work_from_home) / car_alone AS work_from_home_change,
	(car_alone - mean_travel_time) / car_alone AS mean_travel_time_change
FROM economic_commute_to_work
WHERE year = 2019
AND id = 1
AND zipcode = '30303'
```

```sql
SELECT zipcode,
	(car_alone - car_pool) / car_alone AS car_alone_change,
	(car_alone - public_transport) / car_alone AS public_transport_change,
	(car_alone - walk) / car_alone AS walk_change,
	(car_alone - other) / car_alone AS other_change,
	(car_alone - work_from_home) / car_alone AS work_from_home_change,
	(car_alone - mean_travel_time) / car_alone AS mean_travel_time_change
FROM economic_commute_to_work
WHERE year = 2019
AND id = 1
AND zipcode = '30303'
```

```sql
SELECT zipcode,
	(car_alone - car_pool) / car_alone AS car_alone_change,
	(car_alone - public_transport) / car_alone AS public_transport_change,
	(car_alone - walk) / car_alone AS walk_change,
	(car_alone - other) / car_alone AS other_change,
	(car_alone - work_from_home) / car_alone AS work_from_home_change,
	(car_alone - mean_travel_time) / car_alone AS mean_travel_time_change
FROM economic_commute_to_work
WHERE year = 2019
AND id = 1
AND zipcode = '30303'
```

```sql
SELECT zipcode,
	(car_alone - car_pool) / car_alone AS car_alone_change,

====================================================================================================

PROMPT 36:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in mean commute time between 2017 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 36:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in mean commute time between 2017 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode in Georgia, give the change in mean commute time between 2017 and 2022

Answer:
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30303'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30305'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30306'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30307'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30308'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30309'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30310'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30312'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30314'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30315'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30316'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30317'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30318'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30319'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30320'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30321'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30322'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30323'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30324'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30325'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30326'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30327'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30328'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30329'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30330'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30331'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30332'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30333'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30334'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30335'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30336'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30337'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30338'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30339'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30340'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30341'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30342'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30343'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30344'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30345'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30346'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30347'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30348'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30349'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30350'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30351'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30352'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30353'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30354'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30355'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30356'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30357'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30358'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30359'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30360'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30361'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30362'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30363'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30364'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30365'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30366'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30367'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30368'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30369'
	SELECT mean_travel_time FROM economic_commute_to_work WHERE year = 2017 AND zipcode = '30370'
	

====================================================================================================

PROMPT 37:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those working from home between year 2019 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 37:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those working from home between year 2019 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

SQL Statement:
	SELECT zipcode,
	(SELECT (work_from_home / total_workers) - 1) AS change
	FROM economic_commute_to_work
	WHERE year = 2019 AND id = 1
	ORDER BY change DESC

Expected Output:
	zipcode, change
	30306, 0.0
	30307, 0.0
	30308, 0.0
	30309, 0.0
	30310, 0.0
	30311, 0.0
	30312, 0.0
	30313, 0.0
	30314, 0.0
	30315, 0.0
	30316, 0.0
	30317, 0.0
	30318, 0.0
	30319, 0.0
	30320, 0.0
	30321, 0.0
	30322, 0.0
	30323, 0.0
	30324, 0.0
	30325, 0.0
	30326, 0.0
	30327, 0.0
	30328, 0.0
	30329, 0.0
	30330, 0.0
	30331, 0.0
	30332, 0.0
	30333, 0.0
	30334, 0.0
	30335, 0.0
	30336, 0.0
	30337, 0.0
	30338, 0.0
	30339, 0.0
	30340, 0.0
	30341, 0.0
	30342, 0.0
	30343, 0.0
	30344, 0.0
	30345, 0.0
	30346, 0.0
	30347, 0.0
	30348, 0.0
	30349, 0.0
	30350, 0.0
	30351, 0.0
	30352, 0.0
	30353, 0.0
	30354, 0.0
	30355, 0.0
	30356, 0.0
	30357, 0.0
	30358, 0.0
	30359, 0.0
	30360, 0.0
	30361, 0.0
	30362, 0.0
	30363, 0.0
	30364, 0.0
	30365, 0.0
	30366, 0.0
	30367, 0.0
	30368, 0.0
	30369, 0.0
	30370, 0.0
	30371, 0.0
	30372, 0.0
	30373, 0.0
	30374, 0.0
	30375, 0.0
	30376, 0.0
	30377, 0.0
	30378, 0.0
	30379, 0.0
	30380, 0.0
	30381, 0.0
	30382, 0.0
	30383, 0.0
	30384, 0.0
	30385, 0.0
	30386, 0.0
	30387, 0.0
	30388, 0.0
	30389, 0.0
	30390, 0.0
	30391, 0.0
	30392, 0.0
	30393, 0.0
	30394, 0.0
	30395, 0.0
	30396, 0.0
	30397, 0.0
	30398, 0.0
	30399, 0.0
	30400, 0.0
	30401, 0.0
	30402, 0.0
	30403, 0.0
	30404, 0.0
	30405, 0.0
	30406, 0.0
	30407, 0.0
	30408, 0.0
	30409, 0.0
	30410, 0.0
	30411, 0.0
	30412, 0.0
	30413, 0.0
	30414, 0.0
	30415, 0.0
	30416, 0.0
	30417, 0.0
	30418, 0.0
	30419, 0.0
	30420, 0.0
	30421, 0.0
	30422, 0.0
	30423, 0.0
	30424, 0.0
	30425, 0.0
	30426, 0.0
	30427, 0.0
	30428, 0.0
	30429, 0.0
	30430, 0.0
	30431, 0.0
	30432, 0.0
	30433, 0.0
	30434, 0.0
	30435, 0.0
	30436, 0.0
	30437, 0.0
	30438, 0.0
	30439, 0.0
	30440, 0.0
	30441, 0.0
	30442, 0.0
	30443, 0.0
	30444, 0.0
	30445, 0.0
	30446, 0.0
	30447, 0.0
	30448, 0.0
	30449, 0.0
	30450, 0.0
	30451, 0.0
	30452, 0.0
	30453, 0.0
	30454, 0.0
	30455, 0.0
	30456, 0.0
	30457, 0.0
	30458, 0.0
	30459, 0.0
	30460, 0.0
	30461, 0.0
	30462, 0.0
	30463, 0.0
	30464, 0.0
	30465, 0.0
	30466, 0.0
	30467, 0.0
	30468, 0.0
	30469, 0.0
	30470, 0.0
	30471, 0.0
	30472, 0.0
	30473, 0.0
	30474, 0.0
	30475, 0.0
	30476, 0.0
	30477, 0.0
	30478, 0.0
	30479, 0.0
	30480, 0.0
	30481, 0.0
	30482, 0.0
	30483, 0.0
	30484, 0.0
	30485, 0.0
	30486, 0.0
	30487, 0.0
	30488, 0.0
	30489, 0.0
	30490, 0.0
	30491, 0.0
	30492, 0.0
	30493, 0.0
	30494, 0.0
	30495, 0.0
	30496, 0.0
	30497, 0.0
	30498, 0.0
	30499, 0.0
	30500, 0.0
	30501, 0.0
	30502, 0.0
	30503, 0.0
	30504, 0.0
	30505, 0.0
	30506, 0.0
	30507, 0.0
	30508, 0.0
	30509, 0.0
	30510, 0.0
	30511, 0.0
	30512, 0.0
	30513, 0.0
	30514, 0.0
	30515, 0.0
	30516, 0.0
	30517, 0.0
	30518, 0.0
	30519, 0.0
	30520, 0.0
	30521, 0.0
	30522, 0.0
	30523, 0.0
	30524, 0.0
	30525, 0.0
	30526, 0.0
	30527, 0.0
	30528, 0.0
	30529, 0.0
	30530, 0.0
	30531, 0.0
	30532, 0.0
	30533, 0.0
	30534, 0.0
	30535, 0.0
	305

====================================================================================================

PROMPT 38:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of each commute type when commuting to work.

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 38:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of each commute type when commuting to work.

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get percentage of each commute type when commuting to work.
	INSUFFICENT

Hint:
	Use the following query to get the number of workers in each commute type.
	SELECT year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time, count(*) as total_workers_count
	FROM economic_commute_to_work
	WHERE year = 2022
	GROUP BY year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time
	ORDER BY total_workers DESC
	LIMIT 1

Hint:
	Use the following query to get the number of workers in each commute type.
	SELECT year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time, count(*) as total_workers_count
	FROM economic_commute_to_work
	WHERE year = 2022
	GROUP BY year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time
	ORDER BY total_workers DESC
	LIMIT 1

Hint:
	Use the following query to get the number of workers in each commute type.
	SELECT year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time, count(*) as total_workers_count
	FROM economic_commute_to_work
	WHERE year = 2022
	GROUP BY year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time
	ORDER BY total_workers DESC
	LIMIT 1

Hint:
	Use the following query to get the number of workers in each commute type.
	SELECT year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time, count(*) as total_workers_count
	FROM economic_commute_to_work
	WHERE year = 2022
	GROUP BY year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time
	ORDER BY total_workers DESC
	LIMIT 1

Hint:
	Use the following query to get the number of workers in each commute type.
	SELECT year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time, count(*) as total_workers_count
	FROM economic_commute_to_work
	WHERE year = 2022
	GROUP BY year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time
	ORDER BY total_workers DESC
	LIMIT 1

Hint:
	Use the following query to get the number of workers in each commute type.
	SELECT year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time, count(*) as total_workers_count
	FROM economic_commute_to_work
	WHERE year = 2022
	GROUP BY year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time
	ORDER BY total_workers DESC
	LIMIT 1

Hint:
	Use the following query to get the number of workers in each commute type.
	SELECT year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time, count(*) as total_workers_count
	FROM economic_commute_to_work
	WHERE year = 2022
	GROUP BY year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time
	ORDER BY total_workers DESC
	LIMIT 1

Hint:
	Use the following query to get the number of workers in each commute type.
	SELECT year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time, count(*) as total_workers_count
	FROM economic_commute_to_work
	WHERE year = 2022
	GROUP BY year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time
	ORDER BY total_workers DESC
	LIMIT 1

Hint:
	Use the following query to get the number of workers in each commute type.
	SELECT year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time, count(*) as total_workers_count
	FROM economic_commute_to_work
	WHERE year = 2022
	GROUP BY year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time
	ORDER BY total_workers DESC
	LIMIT 1

Hint:
	Use the following query to get the number of workers in each commute type.
	SELECT year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time, count(*) as total_workers_count
	FROM economic_commute_to_work
	WHERE year = 2022
	GROUP BY year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time
	ORDER BY total_workers DESC
	LIMIT 1

Hint:
	Use the following query to get the number of workers in each commute type.
	SELECT year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time, count(*) as total_workers_count
	FROM economic_commute_to_work
	WHERE year = 2022
	GROUP BY year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time
	ORDER BY total_workers DESC
	LIMIT 1

Hint:
	Use the following query to get the number of workers in each commute type.
	SELECT year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time, count(*) as total_workers_count
	FROM economic_commute_to_work
	WHERE year = 2022
	GROUP BY year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time
	ORDER BY total_workers DESC
	LIMIT 1

Hint:
	Use the following query to get the number of workers in each commute type.
	SELECT year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time, count(*) as total_workers_count
	FROM economic_commute_to_work
	WHERE year = 2022
	GROUP BY year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time
	ORDER BY total_

====================================================================================================

PROMPT 39:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get median and mean household income for each year.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 39:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get median and mean household income for each year.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT median_household_income, mean_household_income
	FROM economic_income_and_benefits
	WHERE year = '2010'
	AND zipcode = '12345'
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100
	AND total_households > 0
	AND total_households < 100

====================================================================================================

PROMPT 40:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of households with and without mortgage for each year.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 40:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of households with and without mortgage for each year.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT year, count(*) as num_households, count(units_with_mortgage) as num_households_with_mortgage, count(units_without_mortgage) as num_households_without_mortgage FROM housing_mortgage GROUP BY year;

Input:
	[
		{
			"year": "2000",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2001",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2002",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2003",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2004",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2005",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2006",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2007",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2008",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2009",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2010",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2011",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2012",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2013",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2014",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2015",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2016",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2017",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2018",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2019",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2020",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2021",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2022",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2023",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2024",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2025",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2026",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2027",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2028",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2029",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2030",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2031",
			"num_households": "1",
			"num_households_with_mortgage": "1",
			"num_households_without_mortgage": "0"
		},
		{
			"year": "2032",
			"num_households": "1",
			"num_households_with_mortgage":

====================================================================================================

PROMPT 41:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get mean commute time and average housing value.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 41:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get mean commute time and average housing value.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode, get mean commute time and average housing value.
	INSUFFICENT

Solution:
	SELECT zipcode, avg(commute_time) AS mean_commute_time, avg(housing_value) AS mean_housing_value
	FROM economic_income_and_benefits
	GROUP BY zipcode
	ORDER BY mean_commute_time DESC
	LIMIT 1

Expected Output:
	zipcode, mean_commute_time, mean_housing_value
	'10001', '1.5', '1.5'
	'10002', '1.5', '1.5'
	'10003', '1.5', '1.5'
	'10004', '1.5', '1.5'
	'10005', '1.5', '1.5'
	'10006', '1.5', '1.5'
	'10007', '1.5', '1.5'
	'10008', '1.5', '1.5'
	'10009', '1.5', '1.5'
	'10010', '1.5', '1.5'
	'10011', '1.5', '1.5'
	'10012', '1.5', '1.5'
	'10013', '1.5', '1.5'
	'10014', '1.5', '1.5'
	'10015', '1.5', '1.5'
	'10016', '1.5', '1.5'
	'10017', '1.5', '1.5'
	'10018', '1.5', '1.5'
	'10019', '1.5', '1.5'
	'10020', '1.5', '1.5'
	'10021', '1.5', '1.5'
	'10022', '1.5', '1.5'
	'10023', '1.5', '1.5'
	'10024', '1.5', '1.5'
	'10025', '1.5', '1.5'
	'10026', '1.5', '1.5'
	'10027', '1.5', '1.5'
	'10028', '1.5', '1.5'
	'10029', '1.5', '1.5'
	'10030', '1.5', '1.5'
	'10031', '1.5', '1.5'
	'10032', '1.5', '1.5'
	'10033', '1.5', '1.5'
	'10034', '1.5', '1.5'
	'10035', '1.5', '1.5'
	'10036', '1.5', '1.5'
	'10037', '1.5', '1.5'
	'10038', '1.5', '1.5'
	'10039', '1.5', '1.5'
	'10040', '1.5', '1.5'
	'10041', '1.5', '1.5'
	'10042', '1.5', '1.5'
	'10043', '1.5', '1.5'
	'10044', '1.5', '1.5'
	'10045', '1.5', '1.5'
	'10046', '1.5', '1.5'
	'10047', '1.5', '1.5'
	'10048', '1.5', '1.5'
	'10049', '1.5', '1.5'
	'10050', '1.5', '1.5'
	'10051', '1.5', '1.5'
	'10052', '1.5', '1.5'
	'10053', '1.5', '1.5'
	'10054', '1.5', '1.5'
	'10055', '1.5', '1.5'
	'10056', '1.5', '1.5'
	'10057', '1.5', '1.5'
	'10058', '1.5', '1.5'
	'10059', '1.5', '1.5'
	'10060', '1.5', '1.5'
	'10061', '1.5', '1.5'
	'10062', '1.5', '1.5'
	'10063', '1.5', '1.5'
	'10064', '1.5', '1.5'
	'10065', '1.5', '1.5'
	'10066', '1.5', '1.5'
	'10067', '1.5', '1.5'
	'10068', '1.5', '1.5'
	'10069', '1.5', '1.5'
	'10070', '1.5', '1.5'
	'10071', '1.5', '1.5'
	'10072', '1.5', '1.5'
	'10073', '1.5', '1.5'
	'10074', '1.5', '1.5'
	'10075', '1.5', '1.5'
	'10076', '1.5', '1.5'
	'10077', '1.5', '1.5'
	'10078', '1.5', '1.5'
	'10079', '1.5', '1.5'
	'10080', '1.5', '1.5'
	'10081', '1.5', '1.5'
	'10082', '1.5', '1.5'
	'10083', '1.5', '1.5'
	'10084', '1.5', '1.5'
	'10085', '1.5', '1.5'
	'10086', '1.5', '1.5'
	'10087', '1.5', '1.5'
	'10088', '1.5', '1.5'
	'10089', '1.5', '1.5'
	'10090', '1.5', '1.5'
	'10091', '1.5', '1.5'
	'10092', '1.5', '1.5'
	'10093', '1.5', '1.5'
	'10094', '1.5', '1.5'
	'10095', '1.5', '1.5'
	'10096', '1.5', '1.5'
	'10097', '1.5', '1.5'
	'10098', '1.5', '1.5'
	'10099', '1.5', '1.5'
	'10100', '1.5', '1.5'
	'10101', '1.5', '1.5'
	'10102', '1.5', '1.5'
	'10103', '1.5', '1.5'
	'10104', '1.5', '1.5'
	'10105', '1.5', '1.5'
	'10106', '1.5', '1.5'
	'10107', '1.5', '1.5'
	'10108', '1.5', '1.5'
	'10109', '1.5', '1.5'
	'10110', '1.5', '1.5'
	'10111', '1.5', '1.5'
	

====================================================================================================

PROMPT 42:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get mean commute time by zipcode in the year 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 42:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get mean commute time by zipcode in the year 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT mean_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'

Expected Output:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:
	INSUFFICENT

Expected Error:

====================================================================================================

PROMPT 43:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average housing rent and mean household income across all zipcodes for the year 2022.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)
economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 43:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average housing rent and mean household income across all zipcodes for the year 2022.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)
economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	2022
	INSUFFICENT

Output:
	SELECT avg(rent_value) as avg_rent, mean(household_income) as mean_household_income
	FROM housing_rent
	WHERE year = 2022
	AND zipcode IN (SELECT zipcode FROM economic_income_and_benefits)
	GROUP BY zipcode
	ORDER BY avg_rent DESC
	LIMIT 1

Expected Output:
	avg_rent	mean_household_income
	$1,000	$50,000

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	2022
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	20

====================================================================================================

PROMPT 44:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 44:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	2022, 1, '90001', '5', '50000', '50000'
	2022, 2, '90001', '5', '50000', '50000'
	2022, 3, '90001', '5', '50000', '50000'
	2022, 4, '90001', '5', '50000', '50000'
	2022, 5, '90001', '5', '50000', '50000'
	2022, 6, '90001', '5', '50000', '50000'
	2022, 7, '90001', '5', '50000', '50000'
	2022, 8, '90001', '5', '50000', '50000'
	2022, 9, '90001', '5', '50000', '50000'
	2022, 10, '90001', '5', '50000', '50000'
	2022, 11, '90001', '5', '50000', '50000'
	2022, 12, '90001', '5', '50000', '50000'
	2022, 13, '90001', '5', '50000', '50000'
	2022, 14, '90001', '5', '50000', '50000'
	2022, 15, '90001', '5', '50000', '50000'
	2022, 16, '90001', '5', '50000', '50000'
	2022, 17, '90001', '5', '50000', '50000'
	2022, 18, '90001', '5', '50000', '50000'
	2022, 19, '90001', '5', '50000', '50000'
	2022, 20, '90001', '5', '50000', '50000'
	2022, 21, '90001', '5', '50000', '50000'
	2022, 22, '90001', '5', '50000', '50000'
	2022, 23, '90001', '5', '50000', '50000'
	2022, 24, '90001', '5', '50000', '50000'
	2022, 25, '90001', '5', '50000', '50000'
	2022, 26, '90001', '5', '50000', '50000'
	2022, 27, '90001', '5', '50000', '50000'
	2022, 28, '90001', '5', '50000', '50000'
	2022, 29, '90001', '5', '50000', '50000'
	2022, 30, '90001', '5', '50000', '50000'
	2022, 31, '90001', '5', '50000', '50000'
	2022, 32, '90001', '5', '50000', '50000'
	2022, 33, '90001', '5', '50000', '50000'
	2022, 34, '90001', '5', '50000', '50000'
	2022, 35, '90001', '5', '50000', '50000'
	2022, 36, '90001', '5', '50000', '50000'
	2022, 37, '90001', '5', '50000', '50000'
	2022, 38, '90001', '5', '50000', '50000'
	2022, 39, '90001', '5', '50000', '50000'
	2022, 40, '90001', '5', '50000', '50000'
	2022, 41, '90001', '5', '50000', '50000'
	2022, 42, '90001', '5', '50000', '50000'
	2022, 43, '90001', '5', '50000', '50000'
	2022, 44, '90001', '5', '50000', '50000'
	2022, 45, '90001', '5', '50000', '50000'
	2022, 46, '90001', '5', '50000', '50000'
	2022, 47, '90001', '5', '50000', '50000'
	2022, 48, '90001', '5', '50000', '50000'
	2022, 49, '90001', '5', '50000', '50000'
	2022, 50, '90001', '5', '50000', '50000'
	2022, 51, '90001', '5', '50000', '50000'
	2022, 52, '90001', '5', '50000', '50000'
	2022, 53, '90001', '5', '50000', '50000'
	2022, 54, '90001', '5', '50000', '50000'
	2022, 55, '90001', '5', '50000', '50000'
	2022, 56, '90001', '5', '50000', '50000'
	2022, 57, '90001', '5', '50000', '50000'
	2022, 58, '90001', '5', '50000', '50000'
	2022, 59, '90001', '5', '50000', '50000'
	2022, 60, '90001', '5', '50000', '50000'
	2022, 61, '90001', '5', '50000', '50000'
	2022, 62, '90001', '5', '50000', '50000'
	2022, 63, '90001', '5', '50000', '50000'
	2022, 64, '90001', '5', '50000', '50000'
	2022, 65, '90001', '5', '50000', '50000'
	2022, 66, '90001', '5', '50000', '50000'
	2022, 67, '90001', '5', '50000', '50000'
	2022, 68, '90001', '5', '50000', '50000'
	2022, 69, '90001', '5', '50000', '50000'
	2022, 70, '90001', '5', '50000', '50000'
	2022, 71, '90001', '5', '50000', '50000'
	2022, 72, '90001', '5', '50000', '50000'
	2022, 73, '90001', '5', '50000', '50000'
	2022, 74, '90001', '5', '50000', '50000'
	2022, 75, '90001', '5', '50000', '50000'
	2022, 76, '90001', '5', '50000', '50000'
	2022, 77, '90001', '5', '50000', '50000'
	2022, 78, '90001', '5', '50000', '50000'
	2022, 79, '90001', '5', '50000', '50000'
	2022, 80, '90001', '5', '50000', '50000'
	2022, 81, '90001', '5', '50000', '50000'
	2022, 82, '90001', '5', '50000', '50000'
	2022, 83, '90001', '5', '50000', '50000'
	2022, 84, '90001', '5', '50000', '50000'
	2022, 85, '90001', '5', '50000', '50000'
	2022, 86, '90001', '5', '50000', '50000'
	2022, 87, '90001', '5', '50000', '50000'
	2022, 88, '90001', '5', '5

====================================================================================================

PROMPT 45:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get change in averaged median household income from 2017 to 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 45:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get change in averaged median household income from 2017 to 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode, get change in averaged median household income from 2017 to 2022.
	INSUFFICENT

Expected Output:
	For each zipcode, get change in averaged median household income from 2017 to 2022.
	SELECT avg(median_household_income) AS median_household_income, avg(mean_household_income) AS mean_household_income, year, zipcode FROM economic_income_and_benefits WHERE year = 2017 AND zipcode = '12345' GROUP BY year, zipcode HAVING year = 2017 AND zipcode = '12345'

Solution:
	SELECT avg(median_household_income) AS median_household_income, avg(mean_household_income) AS mean_household_income, year, zipcode FROM economic_income_and_benefits WHERE year = 2017 AND zipcode = '12345' GROUP BY year, zipcode HAVING year = 2017 AND zipcode = '12345'

---

## SQL Queries

### SQL Queries

Prompt: 
	For each zipcode, get change in averaged median household income from 2017 to 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode, get change in averaged median household income from 2017 to 2022.
	INSUFFICENT

Expected Output:
	For each zipcode, get change in averaged median household income from 2017 to 2022.
	SELECT avg(median_household_income) AS median_household_income, avg(mean_household_income) AS mean_household_income, year, zipcode FROM economic_income_and_benefits WHERE year = 2017 AND zipcode = '12345' GROUP BY year, zipcode HAVING year = 2017 AND zipcode = '12345'

Solution:
	SELECT avg(median_household_income) AS median_household_income, avg(mean_household_income) AS mean_household_income, year, zipcode FROM economic_income_and_benefits WHERE year = 2017 AND zipcode = '12345' GROUP BY year, zipcode HAVING year = 2017 AND zipcode = '12345'

---

## SQL Queries

### SQL Queries

Prompt: 
	For each zipcode, get change in averaged median household income from 2017 to 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode, get change in averaged median household income from 2017 to 2022.
	INSUFFICENT

Expected Output:
	For each zipcode, get change in averaged median household income from 2017 to 2022.
	SELECT avg(median_household_income) AS median_household_income, avg(mean_household_income) AS mean_household_income, year, zipcode FROM economic_income_and_benefits WHERE year = 2017 AND zipcode = '12345' GROUP BY year, zipcode HAVING year = 2017 AND zipcode = '12345'

Solution:
	SELECT avg(median_household_income) AS median_household_income, avg(mean_household_income) AS mean_household_income, year, zipcode FROM economic_income_and_benefits WHERE year = 2017 AND zipcode = '12345' GROUP BY year, zipcode HAVING year = 2017 AND zipcode = '12345'

---

## SQL Queries

### SQL Queries

Prompt: 
	For each zipcode, get change in averaged median household income from 2017 to 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode, get change in averaged median household income from 2017 to 2022.
	INSUFFICENT

Expected Output:
	For each zipcode, get change in averaged median household income from 2017 to 2022.
	SELECT avg(median_household_income) AS median_household_income, avg(mean_household_income) AS mean_household_income, year, zipcode FROM economic_income_and_benefits WHERE year = 2017 AND zipcode = '12345' GROUP BY year, zipcode HAVING year = 2017 AND zipcode = '12345'

Solution:
	SELECT avg(median_household_income) AS median_household_income, avg(mean_household_income) AS mean_household_income, year, zipcode FROM economic_income_and_benefits WHERE year = 2017 AND zipcode = '12345' GROUP BY year, zipcode HAVING year = 2017 AND zipcode = '12345'

---

## SQL Queries

### SQL Queries

Prompt: 
	For each zipcode, get change in averaged median household income from 2017 to 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode, get change in averaged median household income from 2017 to 2022.
	INSUFFICENT

Expected Output:
	For each zipcode, get change in averaged median household income from 2017 to 2022.
	SELECT avg(median_household_income) AS median_household_income, avg(mean_household_income) AS mean_household_income, year, zipcode FROM economic_income_and_benefits WHERE year = 2017 AND zipcode = '12345' GROUP BY year, zipcode HAVING year = 2017 AND zipcode = '12345'

Solution:
	SELECT avg(median_household_income) AS median_household_income, avg(mean_household_income) AS mean_household_income, year, zipcode FROM economic_income_and_benefits WHERE year = 2017 AND zipcode = '12345' GROUP BY year, zipcode HAVING year = 2017 AND zipcode = '12345'

---

## SQL Queries

### SQL Queries

Prompt: 
	For each zipcode, get change in averaged median household income from 2017 to 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode, get change in averaged median household income from 2017 to 2022.
	INSUFFICENT

Expected Output:
	For each zipcode, get change in averaged median household income from 2017 to 2022.
	SELECT avg(median_household_income) AS median_household_income, avg(mean_household_income) AS mean_household_income, year, zipcode FROM economic_income_and_benefits WHERE year = 2017 AND zipcode = '12345' GROUP BY year, zipcode HAVING year = 2017 AND zipcode = '12345'

Solution:
	SELECT avg(median_household_income) AS median_household_income, avg(mean_household_income) AS mean_household_income, year, zipcode FROM economic_income_and_benefits WHERE year = 2017 AND zipcode = '12345' GROUP BY year, zipcode HAVING year = 2017 AND zipcode = '12345'

---

## SQL Queries

### SQL Queries

Prompt: 
	For each zipcode

====================================================================================================

PROMPT 46:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, get median and mean household income over all the years.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 46:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, get median and mean household income over all the years.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1', '0', '0')
	(1, 'GA', '30303', '1',

====================================================================================================

PROMPT 47:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get percentage of units with mortgage and median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 47:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get percentage of units with mortgage and median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of units with mortgage and median household income.
	For each zipcode, get percentage of

====================================================================================================

PROMPT 48:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in the year 2022, get average housing value and median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 48:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in the year 2022, get average housing value and median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode in the year 2022, get average housing value and median household income.
	INSUFFICENT

Expected Output:
	For each zipcode in the year 2022, get average housing value and median household income.
	SELECT year, id, zipcode, total_households, median_household_income, mean_household_income FROM economic_income_and_benefits WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM housing_value WHERE year = 2022 AND zipcode = '12345'
	SELECT year, id, zipcode, number_of_units, house_value_min, house_value_max FROM

====================================================================================================

PROMPT 49:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, find the change in percentage of population with no health insurance from year 2017 to 2022.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 49:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, find the change in percentage of population with no health insurance from year 2017 to 2022.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

```sql
SELECT zipcode,
	(no_health_insurance / total_population) * 100 AS change
FROM economic_health_insurance
WHERE year = '2017'
```

## Solution

```sql
SELECT zipcode,
	(no_health_insurance / total_population) * 100 AS change
FROM economic_health_insurance
WHERE year = '2017'
```

## Detailed Explanation

The `economic_health_insurance` table has a `zipcode` column, a `year` column, a `total_population` column, a `with_health_insurance` column, and a `no_health_insurance` column.

The `no_health_insurance` column is the number of people in the zipcode that do not have health insurance.

The `total_population` column is the total population of the zipcode.

The `with_health_insurance` column is the number of people in the zipcode that have health insurance.

The `change` column is the change in percentage of people without health insurance from 2017 to 2022.

The `zipcode` column is the zipcode of the zipcode.

The `year` column is the year of the zipcode.

The `change` column is the change in percentage of people without health insurance from 2017 to 2022.

The `no_health_insurance` column is the number of people in the zipcode that do not have health insurance.

The `total_population` column is the total population of the zipcode.

The `with_health_insurance` column is the number of people in the zipcode that have health insurance.

The `change` column is the change in percentage of people without health insurance from 2017 to 2022.

The `no_health_insurance` column is the number of people in the zipcode that do not have health insurance.

The `total_population` column is the total population of the zipcode.

The `with_health_insurance` column is the number of people in the zipcode that have health insurance.

The `change` column is the change in percentage of people without health insurance from 2017 to 2022.

The `no_health_insurance` column is the number of people in the zipcode that do not have health insurance.

The `total_population` column is the total population of the zipcode.

The `with_health_insurance` column is the number of people in the zipcode that have health insurance.

The `change` column is the change in percentage of people without health insurance from 2017 to 2022.

The `no_health_insurance` column is the number of people in the zipcode that do not have health insurance.

The `total_population` column is the total population of the zipcode.

The `with_health_insurance` column is the number of people in the zipcode that have health insurance.

The `change` column is the change in percentage of people without health insurance from 2017 to 2022.

The `no_health_insurance` column is the number of people in the zipcode that do not have health insurance.

The `total_population` column is the total population of the zipcode.

The `with_health_insurance` column is the number of people in the zipcode that have health insurance.

The `change` column is the change in percentage of people without health insurance from 2017 to 2022.

The `no_health_insurance` column is the number of people in the zipcode that do not have health insurance.

The `total_population` column is the total population of the zipcode.

The `with_health_insurance` column is the number of people in the zipcode that have health insurance.

The `change` column is the change in percentage of people without health insurance from 2017 to 2022.

The `no_health_insurance` column is the number of people in the zipcode that do not have health insurance.

The `total_population` column is the total population of the zipcode.

The `with_health_insurance` column is the number of people in the zipcode that have health insurance.

The `change` column is the change in percentage of people without health insurance from 2017 to 2022.

The `no_health_insurance` column is the number of people in the zipcode that do not have health insurance.

The `total_population` column is the total population of the zipcode.

The `with_health_insurance` column is the number of people in the zipcode that have health insurance.

The `change` column is the change in percentage of people without health insurance from 2017 to 2022.

The `no_health_insurance` column is the number of people in the zipcode that do not have health insurance.

The `total_population` column is the total population of the zipcode.

The `with_health_insurance` column is the number of people in the zipcode that have health insurance.

The `change` column is the change in percentage of people without health insurance from 2017 to 2022.

The `no_health_insurance` column is the number of people in the zipcode that do not have health insurance.

The `total_population` column is the total population of the zipcode.

The `with_health_insurance` column is the number of people in the zipcode that have health insurance.

The `change` column is the change in percentage of people without health insurance from 2017 to 2022.

The `no_health_insurance` column is the number of people in the zipcode that do not have health insurance.

The `total_population` column is the total population of the zipcode.

The `with_health_insurance` column is the number of people in the zipcode that have health insurance.

The `change` column is the change in percentage of people without health insurance from 2017 to 2022.

The `no_health_insurance` column is the number of people in the zipcode that do not have health insurance.

The `total_population` column is the total population of the zipcode.

The `with_health_insurance` column is the number of people in the zipcode that have health insurance.

The `change` column is the change in percentage of people without health insurance from 2017 to 2022.

The `no_health_insurance` column is the number of people in the zipcode that do not have health insurance.

The `total_population` column is the total population of the zipcode.

The `with_health_insurance` column is the number of people in the zipcode that have health insurance.

The `change` column is the change in percentage of people without health insurance from 2017 to 2022.

The `no_health_insurance` column is the number of people in the zipcode that do not have health insurance.

The `total_population` column is the total population of the zipcode.

The `with_health_insurance` column is the number of people in the zipcode that have health insurance.

The `change` column is the change in percentage of people without health insurance from 2017 to 2022.

The `no_health_insurance` column is the number of people in the zipcode that do not have health insurance.

The `total_population` column is the total population of the zipcode.

The `with_health_insurance` column is the number of people in the zipcode that have health insurance.

The `change` column is the change in percentage of people without health insurance from 2017 to 2022.

The `no_health_insurance` column is the number of people in the zipcode that do not have health insurance.

The `total_population` column is the total population of the zipcode.

The `with_health_insurance` column is the number of people in the zipcode that have health insurance.

The `change` column is the change in percentage of people without health insurance from 2017 to 2022.

The `no_health_insurance` column is the number of people in the zipcode that do not have health insurance.

The `total_population` column is the total population of the zipcode.

The `with_health_insurance` column is the number of people in the zipcode that have health insurance.

The `change` column is the change in percentage of people without health insurance from 2017 to 2022.

The `no_

====================================================================================================

PROMPT 50:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 50:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.
	INSUFFICENT

Expected Output:
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.
	SELECT zipcode, no_health_insurance, with_health_insurance, no_health_insurance/total_population*100 as percentage_no_health_insurance, avg(rent_value_min) as avg_house_rent
	FROM economic_health_insurance, housing_rent
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY percentage_no_health_insurance DESC
	LIMIT 1

Solution:
	SELECT zipcode, no_health_insurance, with_health_insurance, no_health_insurance/total_population*100 as percentage_no_health_insurance, avg(rent_value_min) as avg_house_rent
	FROM economic_health_insurance, housing_rent
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY percentage_no_health_insurance DESC
	LIMIT 1

---

## SQL Quiz

### Question 1

Prompt:
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.
	INSUFFICENT

Expected Output:
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.
	SELECT zipcode, no_health_insurance, with_health_insurance, no_health_insurance/total_population*100 as percentage_no_health_insurance, avg(rent_value_min) as avg_house_rent
	FROM economic_health_insurance, housing_rent
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY percentage_no_health_insurance DESC
	LIMIT 1

Solution:
	SELECT zipcode, no_health_insurance, with_health_insurance, no_health_insurance/total_population*100 as percentage_no_health_insurance, avg(rent_value_min) as avg_house_rent
	FROM economic_health_insurance, housing_rent
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY percentage_no_health_insurance DESC
	LIMIT 1

---

### Question 2

Prompt:
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.
	INSUFFICENT

Expected Output:
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.
	SELECT zipcode, no_health_insurance, with_health_insurance, no_health_insurance/total_population*100 as percentage_no_health_insurance, avg(rent_value_min) as avg_house_rent
	FROM economic_health_insurance, housing_rent
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY percentage_no_health_insurance DESC
	LIMIT 1

Solution:
	SELECT zipcode, no_health_insurance, with_health_insurance, no_health_insurance/total_population*100 as percentage_no_health_insurance, avg(rent_value_min) as avg_house_rent
	FROM economic_health_insurance, housing_rent
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY percentage_no_health_insurance DESC
	LIMIT 1

---

### Question 3

Prompt:
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.
	INSUFFICENT

Expected Output:
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.
	SELECT zipcode, no_health_insurance, with_health_insurance, no_health_insurance/total_population*100 as percentage_no_health_insurance, avg(rent_value_min) as avg_house_rent
	FROM economic_health_insurance, housing_rent
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY percentage_no_health_insurance DESC
	LIMIT 1

Solution:
	SELECT zipcode, no_health_insurance, with_health_insurance, no_health_insurance/total_population*100 as percentage_no_health_insurance, avg(rent_value_min) as avg_house_rent
	FROM economic_health_insurance, housing_rent
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY percentage_no_health_insurance DESC
	LIMIT 1

---

### Question 4

Prompt:
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.
	INSUFFICENT

Expected Output:
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.
	SELECT zipcode, no_health_insurance, with_health_insurance, no_health_insurance/total_population*100 as percentage_no_health_insurance, avg(rent_value_min) as avg_house_rent
	FROM economic_health_insurance, housing_rent
	WHERE year = 2022
	GROUP BY zipcode
	ORDER BY percentage_no_health_insurance DESC
	LIMIT 1

Solution:
	SELECT zipcode, no_health_insurance, with_health_insurance, no_health_insurance/total_population*100 as percentage_no_health_insurance, avg(rent_value_min) as avg_house_rent
	FROM economic_health_insurance, housing_rent
	WHERE year = 20

====================================================================================================

PROMPT 51:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average housing price.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 51:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average housing price.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each zipcode in year 2022, get percentage of population with no health insurance and average housing price.
	INSUFFICENT

Expected Output:
	For each zipcode in year 2022, get percentage of population with no health insurance and average housing price.
	SELECT zipcode,
	(SELECT COUNT(*) FROM economic_health_insurance WHERE year = 2022 AND zipcode = zipcode) AS total_population,
	(SELECT COUNT(*) FROM economic_health_insurance WHERE year = 2022 AND zipcode = zipcode AND with_health_insurance = 0) AS no_health_insurance,
	(SELECT AVG(house_value_max - house_value_min) FROM housing_value WHERE year = 2022 AND zipcode = zipcode) AS average_housing_price
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the average housing price:
	SELECT zipcode, AVG(house_value_max - house_value_min) AS average_housing_price
	FROM housing_value
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the number of units:
	SELECT zipcode, number_of_units
	FROM housing_value
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total population:
	SELECT zipcode, total_population
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the number of zipcodes:
	SELECT zipcode, COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of zipcodes:
	SELECT COUNT(*)
	FROM economic_health_insurance
	GROUP BY zipcode
	ORDER BY zipcode

Hint:
	Use the following query to get the total number of

====================================================================================================

PROMPT 52:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the change in percentage of population commuting via public transport from year 2017 to 2022.

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 52:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the change in percentage of population commuting via public transport from year 2017 to 2022.

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2017
AND id = 'GA'
```

## 解答

```sql
SELECT zipcode,
	(car_alone + car_pool + public_transport + walk + other) / total_workers * 100 AS percent_change
FROM economic_commute_to_

====================================================================================================

PROMPT 53:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the count of non-US citizens and foreign born population

Schema: 
	social_citizenship_status (year, id, zipcode, foreign_born_population, naturalized_us_citizen, not_a_us_citizen)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 53:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the count of non-US citizens and foreign born population

Schema: 
	social_citizenship_status (year, id, zipcode, foreign_born_population, naturalized_us_citizen, not_a_us_citizen)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

SQL Statement:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND foreign_born_population > 0 AND naturalized_us_citizen = 0;

Expected Output:
	'1'

Solution:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND foreign_born_population > 0 AND naturalized_us_citizen = 0;

SQL Statement:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 1;

Expected Output:
	'1'

Solution:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 1;

SQL Statement:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population > 0;

Expected Output:
	'1'

Solution:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population > 0;

SQL Statement:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population = 0;

Expected Output:
	'1'

Solution:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population = 0;

SQL Statement:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0;

Expected Output:
	'1'

Solution:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0;

SQL Statement:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 1;

Expected Output:
	'1'

Solution:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 1;

SQL Statement:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population = 0;

Expected Output:
	'1'

Solution:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population = 0;

SQL Statement:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0;

Expected Output:
	'1'

Solution:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0;

SQL Statement:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0;

Expected Output:
	'1'

Solution:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population = 0;

SQL Statement:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0;

Expected Output:
	'1'

Solution:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0;

SQL Statement:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0;

Expected Output:
	'1'

Solution:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0;

SQL Statement:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0;

Expected Output:
	'1'

Solution:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0;

SQL Statement:
	SELECT COUNT(*) FROM social_citizenship_status WHERE year = '2015' AND zipcode = '30303' AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us_citizen = 0 AND foreign_born_population > 0 AND naturalized_us

====================================================================================================

PROMPT 54:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get the average of each ethnic group (black, white, asian) by year.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 54:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get the average of each ethnic group (black, white, asian) by year.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT AVG(race_total_populatio)
	FROM demographic_race
	WHERE year = '2000'
	AND one_race = 'white'
	AND two_or_more_races = 'black'
	AND not_hispanic_or_latino = 'white'
	AND not_hispanic_or_latino = 'black'
	AND not_hispanic_or_latino = 'asian'
	AND not_hispanic_or_latino = 'native_hawaiian_and_other_pacific_islander'
	AND not_hispanic_or_latino = 'some_other_race'
	AND not_hispanic_or_latino = 'hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_hispanic_or_latino = 'not_hispanic_or_latino'
	AND not_

====================================================================================================

PROMPT 55:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get the percentage of types of education attained by population aged 25 and above for each year.

Schema: 
	social_education_attainment (year, id, zipcode, population_25_years_and_over, less_than_9th_grade, 9th_to_12th_grade_no_diploma, high_school_graduate, some_college_no_degree, associate_degree, bachelors_degree, graduate_or_professional_degree, high_school graduate_or_higher, bachelors_degree_or_higher)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 55:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get the percentage of types of education attained by population aged 25 and above for each year.

Schema: 
	social_education_attainment (year, id, zipcode, population_25_years_and_over, less_than_9th_grade, 9th_to_12th_grade_no_diploma, high_school_graduate, some_college_no_degree, associate_degree, bachelors_degree, graduate_or_professional_degree, high_school graduate_or_higher, bachelors_degree_or_higher)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

```sql
SELECT year,
	SUM(CASE WHEN population_25_years_and_over = 'less_than_9th_grade' THEN 1 ELSE 0 END) AS less_than_9th_grade,
	SUM(CASE WHEN population_25_years_and_over = '9th_to_12th_grade_no_diploma' THEN 1 ELSE 0 END) AS 9th_to_12th_grade_no_diploma,
	SUM(CASE WHEN population_25_years_and_over = 'high_school_graduate' THEN 1 ELSE 0 END) AS high_school_graduate,
	SUM(CASE WHEN population_25_years_and_over = 'some_college_no_degree' THEN 1 ELSE 0 END) AS some_college_no_degree,
	SUM(CASE WHEN population_25_years_and_over = 'associate_degree' THEN 1 ELSE 0 END) AS associate_degree,
	SUM(CASE WHEN population_25_years_and_over = 'bachelors_degree' THEN 1 ELSE 0 END) AS bachelors_degree,
	SUM(CASE WHEN population_25_years_and_over = 'graduate_or_professional_degree' THEN 1 ELSE 0 END) AS graduate_or_professional_degree,
	SUM(CASE WHEN population_25_years_and_over = 'high_school_graduate_or_higher' THEN 1 ELSE 0 END) AS high_school_graduate_or_higher,
	SUM(CASE WHEN population_25_years_and_over = 'bachelors_degree_or_higher' THEN 1 ELSE 0 END) AS bachelors_degree_or_higher
FROM social_education_attainment
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(CASE WHEN population_25_years_and_over = 'less_than_9th_grade' THEN 1 ELSE 0 END) AS less_than_9th_grade,
	SUM(CASE WHEN population_25_years_and_over = '9th_to_12th_grade_no_diploma' THEN 1 ELSE 0 END) AS 9th_to_12th_grade_no_diploma,
	SUM(CASE WHEN population_25_years_and_over = 'high_school_graduate' THEN 1 ELSE 0 END) AS high_school_graduate,
	SUM(CASE WHEN population_25_years_and_over = 'some_college_no_degree' THEN 1 ELSE 0 END) AS some_college_no_degree,
	SUM(CASE WHEN population_25_years_and_over = 'associate_degree' THEN 1 ELSE 0 END) AS associate_degree,
	SUM(CASE WHEN population_25_years_and_over = 'bachelors_degree' THEN 1 ELSE 0 END) AS bachelors_degree,
	SUM(CASE WHEN population_25_years_and_over = 'graduate_or_professional_degree' THEN 1 ELSE 0 END) AS graduate_or_professional_degree,
	SUM(CASE WHEN population_25_years_and_over = 'high_school_graduate_or_higher' THEN 1 ELSE 0 END) AS high_school_graduate_or_higher,
	SUM(CASE WHEN population_25_years_and_over = 'bachelors_degree_or_higher' THEN 1 ELSE 0 END) AS bachelors_degree_or_higher
FROM social_education_attainment
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(CASE WHEN population_25_years_and_over = 'less_than_9th_grade' THEN 1 ELSE 0 END) AS less_than_9th_grade,
	SUM(CASE WHEN population_25_years_and_over = '9th_to_12th_grade_no_diploma' THEN 1 ELSE 0 END) AS 9th_to_12th_grade_no_diploma,
	SUM(CASE WHEN population_25_years_and_over = 'high_school_graduate' THEN 1 ELSE 0 END) AS high_school_graduate,
	SUM(CASE WHEN population_25_years_and_over = 'some_college_no_degree' THEN 1 ELSE 0 END) AS some_college_no_degree,
	SUM(CASE WHEN population_25_years_and_over = 'associate_degree' THEN 1 ELSE 0 END) AS associate_degree,
	SUM(CASE WHEN population_25_years_and_over = 'bachelors_degree' THEN 1 ELSE 0 END) AS bachelors_degree,
	SUM(CASE WHEN population_25_years_and_over = 'graduate_or_professional_degree' THEN 1 ELSE 0 END) AS graduate_or_professional_degree,
	SUM(CASE WHEN population_25_years_and_over = 'high_school_graduate_or_higher' THEN 1 ELSE 0 END) AS high_school_graduate_or_higher,
	SUM(CASE WHEN population_25_years_and_over = 'bachelors_degree_or_higher' THEN 1 ELSE 0 END) AS bachelors_degree_or_higher
FROM social_education_attainment
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(CASE WHEN population_25_years_and_over = 'less_than_9th_grade' THEN 1 ELSE 0 END) AS less_than_9th_grade,
	SUM(CASE WHEN population_25_years_and_over = '9th_to_12th_grade_no_diploma' THEN 1 ELSE 0 END) AS 9th_to_12th_grade_no_diploma,
	SUM(CASE WHEN population_25_years_and_over = 'high_school_graduate' THEN 1 ELSE 0 END) AS high_school_graduate,
	SUM(CASE WHEN population_25_years_and_over = 'some_college_no_degree' THEN 1 ELSE 0 END) AS some_college_no_degree,
	SUM(CASE WHEN population_25_years_and_over = 'associate_degree' THEN 1 ELSE 0 END) AS associate_degree,
	SUM(CASE WHEN population_25_years_and_over = 'bachelors_degree' THEN 1 ELSE 0 END) AS bachelors_degree,
	SUM(CASE WHEN population_25_years_and_over = 'graduate_or_professional_degree' THEN 1 ELSE 0 END) AS graduate_or_professional_degree,
	SUM(CASE WHEN population_25_years_and_over = 'high_school_graduate_or_higher' THEN 1 ELSE 0 END) AS high_school_graduate_or_higher,
	SUM(CASE WHEN population_25_years_and_over = 'bachelors_degree_or_higher' THEN 1 ELSE 0 END) AS bachelors_degree_or_higher
FROM social_education_attainment
GROUP BY year
ORDER BY year;
```

```sql
SELECT year,
	SUM(CASE WHEN population_25_years_and_over = 'less_than_9th_grade' THEN 1 ELSE 0 END) AS less_than_9th_grade,
	SUM(CASE WHEN population_25_years_and_over = '9th_to_12th_grade_no_diploma' THEN 1 ELSE 0 END) AS 9th_to_12th_grade_no_diploma,
	SUM(CASE WHEN population_25_years_and_over = 'high_school_graduate' THEN 1 ELSE 0 END) AS high_school_graduate,
	SUM(CASE WHEN population_25_years_and_over = 'some_college_no_degree' THEN 1 ELSE 0 END) AS some_college_no_degree,
	SUM(CASE WHEN population_25_years_and_over = 'associate_degree' THEN 1 ELSE 0 END) AS associate_degree,
	SUM(CASE WHEN population_25_years_and_over = 'bachelors_degree' THEN 1 ELSE 0 END) AS bachelors_degree,
	SUM(CASE WHEN population_25_

====================================================================================================

PROMPT 56:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	In year 2022, for each zipcode in Georgia, get the percentage of population with associate and bachelors degree or higher and average housing price.

Schema: 
	social_education_attainment (year, id, zipcode, population_25_years_and_over, less_than_9th_grade, 9th_to_12th_grade_no_diploma, high_school_graduate, some_college_no_degree, associate_degree, bachelors_degree, graduate_or_professional_degree, high_school graduate_or_higher, bachelors_degree_or_higher)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 56:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	In year 2022, for each zipcode in Georgia, get the percentage of population with associate and bachelors degree or higher and average housing price.

Schema: 
	social_education_attainment (year, id, zipcode, population_25_years_and_over, less_than_9th_grade, 9th_to_12th_grade_no_diploma, high_school_graduate, some_college_no_degree, associate_degree, bachelors_degree, graduate_or_professional_degree, high_school graduate_or_higher, bachelors_degree_or_higher)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Hint: 
	Use the following query to get the population_25_years_and_over, less_than_9th_grade, 9th_to_12th_grade_no_diploma, high_school_graduate, some_college_no_degree, associate_degree, bachelors_degree, graduate_or_professional_degree, high_school graduate_or_higher, bachelors_degree_or_higher.
	SELECT zipcode, population_25_years_and_over, less_than_9th_grade, 9th_to_12th_grade_no_diploma, high_school_graduate, some_college_no_degree, associate_degree, bachelors_degree, graduate_or_professional_degree, high_school graduate_or_higher, bachelors_degree_or_higher
	FROM social_education_attainment
	WHERE year = 2022
	GROUP BY zipcode
	HAVING population_25_years_and_over > 0
	ORDER BY population_25_years_and_over DESC
	LIMIT 100

Hint: 
	Use the following query to get the number_of_units, house_value_min, house_value_max.
	SELECT zipcode, number_of_units, house_value_min, house_value_max
	FROM housing_value
	WHERE year = 2022
	GROUP BY zipcode
	HAVING house_value_min > 0
	ORDER BY house_value_min DESC
	LIMIT 100

Hint: 
	Use the following query to get the number_of_units, house_value_min, house_value_max.
	SELECT zipcode, number_of_units, house_value_min, house_value_max
	FROM housing_value
	WHERE year = 2022
	GROUP BY zipcode
	HAVING house_value_min > 0
	ORDER BY house_value_min DESC
	LIMIT 100

Hint: 
	Use the following query to get the number_of_units, house_value_min, house_value_max.
	SELECT zipcode, number_of_units, house_value_min, house_value_max
	FROM housing_value
	WHERE year = 2022
	GROUP BY zipcode
	HAVING house_value_min > 0
	ORDER BY house_value_min DESC
	LIMIT 100

Hint: 
	Use the following query to get the number_of_units, house_value_min, house_value_max.
	SELECT zipcode, number_of_units, house_value_min, house_value_max
	FROM housing_value
	WHERE year = 2022
	GROUP BY zipcode
	HAVING house_value_min > 0
	ORDER BY house_value_min DESC
	LIMIT 100

Hint: 
	Use the following query to get the number_of_units, house_value_min, house_value_max.
	SELECT zipcode, number_of_units, house_value_min, house_value_max
	FROM housing_value
	WHERE year = 2022
	GROUP BY zipcode
	HAVING house_value_min > 0
	ORDER BY house_value_min DESC
	LIMIT 100

Hint: 
	Use the following query to get the number_of_units, house_value_min, house_value_max.
	SELECT zipcode, number_of_units, house_value_min, house_value_max
	FROM housing_value
	WHERE year = 2022
	GROUP BY zipcode
	HAVING house_value_min > 0
	ORDER BY house_value_min DESC
	LIMIT 100

Hint: 
	Use the following query to get the number_of_units, house_value_min, house_value_max.
	SELECT zipcode, number_of_units, house_value_min, house_value_max
	FROM housing_value
	WHERE year = 2022
	GROUP BY zipcode
	HAVING house_value_min > 0
	ORDER BY house_value_min DESC
	LIMIT 100

Hint: 
	Use the following query to get the number_of_units, house_value_min, house_value_max.
	SELECT zipcode, number_of_units, house_value_min, house_value_max
	FROM housing_value
	WHERE year = 2022
	GROUP BY zipcode
	HAVING house_value_min > 0
	ORDER BY house_value_min DESC
	LIMIT 100

Hint: 
	Use the following query to get the number_of_units, house_value_min, house_value_max.
	SELECT zipcode, number_of_units, house_value_min, house_value_max
	FROM housing_value
	WHERE year = 2022
	GROUP BY zipcode
	HAVING house_value_min > 0
	ORDER BY house_value_min DESC
	LIMIT 100

Hint: 
	Use the following query to get the number_of_units, house_value_min, house_value_max.
	SELECT zipcode, number_of_units, house_value_min, house_value_max
	FROM housing_value
	WHERE year = 2022
	GROUP BY zipcode
	HAVING house_value_min > 0
	ORDER BY house_value_min DESC
	LIMIT 100

Hint: 
	Use the following query to get the number_of_units, house_value_min, house_value_max.
	SELECT zipcode, number_of_units, house_value_min, house_value_max
	FROM housing_value
	WHERE year = 2022
	GROUP BY zipcode
	HAVING house_value_min > 0
	ORDER BY house_value_min DESC
	LIMIT 100

Hint: 
	Use the following query to get the number_of_units, house_value_min, house_value_max.
	SELECT zipcode, number_of_units, house_value_min, house_value_max
	FROM housing_value
	WHERE year = 2022
	GROUP BY zipcode
	HAVING house_value_min > 0
	ORDER BY house_value_min DESC
	LIMIT 100

Hint: 
	Use the following query to get the number_of_units, house_value_min, house_value_max.
	SELECT zipcode, number_of_units, house_value_min, house_value_max
	FROM housing_value
	WHERE year = 2022
	GROUP BY zipcode
	HAVING house_value_min > 0
	ORDER BY house_value_min DESC
	LIMIT 100

Hint: 
	Use the following query to get the number_of_units, house_value_min, house_value_max.
	SELECT zipcode, number_of_units, house_value_min, house_value_max
	FROM housing_value
	WHERE year = 2022
	GROUP BY zipcode
	HAVING house_value_min > 0
	ORDER BY house_value_min DESC
	LIMIT 100

Hint: 
	Use the following query to get the number_of_units, house_value_min, house_value_max.
	SELECT zipcode, number_of_units, house_value_min, house_value_max
	FROM housing_value
	WHERE year = 2022
	GROUP BY zipcode
	HAVING house_value_min > 0
	ORDER BY house_value_min DESC
	LIMIT 100

Hint: 
	Use the following query to get the number_of_units, house_value_min, house_value_max.
	SELECT zipcode, number_of_units, house_value_min, house_value_

====================================================================================================

PROMPT 57:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  price and percentage of houses having broadband subscription.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 57:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  price and percentage of houses having broadband subscription.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:

Input:

2016, 1, 1, 1, 1, 1
2016, 2, 1, 1, 1, 1
2016, 3, 1, 1, 1, 1
2016, 4, 1, 1, 1, 1
2016, 5, 1, 1, 1, 1
2016, 6, 1, 1, 1, 1
2016, 7, 1, 1, 1, 1
2016, 8, 1, 1, 1, 1
2016, 9, 1, 1, 1, 1
2016, 10, 1, 1, 1, 1
2016, 11, 1, 1, 1, 1
2016, 12, 1, 1, 1, 1
2017, 1, 1, 1, 1, 1
2017, 2, 1, 1, 1, 1
2017, 3, 1, 1, 1, 1
2017, 4, 1, 1, 1, 1
2017, 5, 1, 1, 1, 1
2017, 6, 1, 1, 1, 1
2017, 7, 1, 1, 1, 1
2017, 8, 1, 1, 1, 1
2017, 9, 1, 1, 1, 1
2017, 10, 1, 1, 1, 1
2017, 11, 1, 1, 1, 1
2017, 12, 1, 1, 1, 1
2018, 1, 1, 1, 1, 1
2018, 2, 1, 1, 1, 1
2018, 3, 1, 1, 1, 1
2018, 4, 1, 1, 1, 1
2018, 5, 1, 1, 1, 1
2018, 6, 1, 1, 1, 1
2018, 7, 1, 1, 1, 1
2018, 8, 1, 1, 1, 1
2018, 9, 1, 1, 1, 1
2018, 10, 1, 1, 1, 1
2018, 11, 1, 1, 1, 1
2018, 12, 1, 1, 1, 1
2019, 1, 1, 1, 1, 1
2019, 2, 1, 1, 1, 1
2019, 3, 1, 1, 1, 1
2019, 4, 1, 1, 1, 1
2019, 5, 1, 1, 1, 1
2019, 6, 1, 1, 1, 1
2019, 7, 1, 1, 1, 1
2019, 8, 1, 1, 1, 1
2019, 9, 1, 1, 1, 1
2019, 10, 1, 1, 1, 1
2019, 11, 1, 1, 1, 1
2019, 12, 1, 1, 1, 1
2020, 1, 1, 1, 1, 1
2020, 2, 1, 1, 1, 1
2020, 3, 1, 1, 1, 1
2020, 4, 1, 1, 1, 1
2020, 5, 1, 1, 1, 1
2020, 6, 1, 1, 1, 1
2020, 7, 1, 1, 1, 1
2020, 8, 1, 1, 1, 1
2020, 9, 1, 1, 1, 1
2020, 10, 1, 1, 1, 1
2020, 11, 1, 1, 1, 1
2020, 12, 1, 1, 1, 1
2021, 1, 1, 1, 1, 1
2021, 2, 1, 1, 1, 1
2021, 3, 1, 1, 1, 1
2021, 4, 1, 1, 1, 1
2021, 5, 1, 1, 1, 1
2021, 6, 1, 1, 1, 1
2021, 7, 1, 1, 1, 1
2021, 8, 1, 1, 1, 1
2021, 9, 1, 1, 1, 1
2021, 10, 1, 1, 1, 1
2021, 11, 1, 1, 1, 1
2021, 12, 1, 1, 1, 1
2022, 1, 1, 1, 1, 1
2022, 2, 1, 1, 1, 1
2022, 3, 1, 1, 1, 1
2022, 4, 1, 1, 1, 1
2022, 5, 1, 1, 1, 1
2022, 6, 1, 1, 1, 1
2022, 7, 1, 1, 1, 1
2022, 8, 1, 1, 1, 1
2022, 9, 1, 1, 1, 1
2022, 10, 1, 1, 1, 1
2022, 11, 1, 1, 1, 1
2022, 12, 1, 1, 1, 1
2023, 1, 1, 1, 1, 1
2023, 2, 1, 1, 1, 1
2023, 3, 1, 1, 1, 1
2023, 4, 1, 1, 1, 1
2023, 5, 1, 1, 1, 1
2023, 6, 1, 1, 1, 1
2023, 7, 1, 1, 1, 1
2023, 8, 1, 1, 1, 1
2023, 9, 1, 1, 1, 1
2023, 10, 1, 1, 1, 1
2023, 11, 1, 1, 1, 1
2023, 12, 1, 1, 1, 1
2024, 1, 1, 1, 1, 1
2024, 2, 1, 1, 1, 1
2024, 3, 1, 1, 1, 1
2024, 4, 1, 1, 1, 1
2024, 5, 1, 1, 1, 1
2024, 6, 1, 1, 1, 1
2024, 7, 1, 1, 1, 1
2024, 8, 1, 1, 1, 1
2024, 9, 1, 1, 1, 1
2024, 10, 1, 1, 1, 1
2024, 11, 1, 1, 1, 1
2024, 12, 1, 1, 1, 1
2025, 1, 1, 1, 1, 1
2025, 2, 1, 1, 1, 1
2025, 3, 1, 1, 1, 1
2025, 4, 1, 1, 1, 1
2025, 5, 1, 1, 1, 1
2025, 6, 1, 1, 1, 1
2025, 7, 1, 1, 1, 1
2025, 8, 1, 1, 1, 1
2025, 9, 1, 1, 1, 1
2025, 10, 1, 1, 1, 1
2025, 11, 1, 1, 1, 1
2025, 12, 1, 1, 1, 1
2026, 1, 1, 1, 1, 1
2026, 2, 1, 1, 1, 1
2026, 3, 1, 1, 1, 1
2026, 4, 1, 1, 1, 1
2026, 5, 1, 1, 1, 1
2026, 6, 1, 1, 1, 1
2026, 7, 1, 1, 1, 1
2026, 8, 1, 1, 1, 1
2026, 9, 1, 1, 1, 1
2026, 10, 1, 1, 1, 1
2026, 11, 1, 1, 1, 1
2026, 12, 1, 1, 1, 1
2027, 1, 1, 1, 1, 1
2027, 2, 1, 1, 1, 1
2027, 3, 1, 1, 1, 1
2027, 4, 1, 1, 1, 1
2027, 5, 1, 1, 1, 1
2027, 6, 1, 1, 1, 1
2027, 7, 1, 1, 1, 1
2027, 8, 1, 1, 1, 1
2027, 9, 1, 1, 1, 1
2027, 10, 1, 1, 1, 1
2027, 11, 1, 1, 1, 1
2027, 12, 1, 1, 1, 1
2028, 1, 1, 1, 1, 1
2028, 2, 1, 1, 1, 1
2028, 3, 1, 1, 1, 1
2028, 4, 1, 1, 1, 1
2028, 5, 1, 1, 1, 1
2028, 6

====================================================================================================

PROMPT 58:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)
social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 58:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)
social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	(year, id, zipcode, number_of_units, rent_value_min, rent_value_max)
	(year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Output:
	(year, id, zipcode, number_of_units, rent_value_min, rent_value_max, average_rent, percentage_of_houses_with_broadband_subscription)

Sample Input:
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1, 1000, 2000, 1, 0.1)
	(2016, 1, 12345, 1,

====================================================================================================

PROMPT 59:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode, get percentage of households with a computer and percentage of housholds with broadband subscription.

Schema: 
	social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 59:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode, get percentage of households with a computer and percentage of housholds with broadband subscription.

Schema: 
	social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	2016, 1, 12345, 10, 5, 0
	2016, 2, 12345, 10, 5, 0
	2016, 3, 12345, 10, 5, 0
	2016, 4, 12345, 10, 5, 0
	2016, 5, 12345, 10, 5, 0
	2016, 6, 12345, 10, 5, 0
	2016, 7, 12345, 10, 5, 0
	2016, 8, 12345, 10, 5, 0
	2016, 9, 12345, 10, 5, 0
	2016, 10, 12345, 10, 5, 0
	2016, 11, 12345, 10, 5, 0
	2016, 12, 12345, 10, 5, 0
	2017, 1, 12345, 10, 5, 0
	2017, 2, 12345, 10, 5, 0
	2017, 3, 12345, 10, 5, 0
	2017, 4, 12345, 10, 5, 0
	2017, 5, 12345, 10, 5, 0
	2017, 6, 12345, 10, 5, 0
	2017, 7, 12345, 10, 5, 0
	2017, 8, 12345, 10, 5, 0
	2017, 9, 12345, 10, 5, 0
	2017, 10, 12345, 10, 5, 0
	2017, 11, 12345, 10, 5, 0
	2017, 12, 12345, 10, 5, 0
	2018, 1, 12345, 10, 5, 0
	2018, 2, 12345, 10, 5, 0
	2018, 3, 12345, 10, 5, 0
	2018, 4, 12345, 10, 5, 0
	2018, 5, 12345, 10, 5, 0
	2018, 6, 12345, 10, 5, 0
	2018, 7, 12345, 10, 5, 0
	2018, 8, 12345, 10, 5, 0
	2018, 9, 12345, 10, 5, 0
	2018, 10, 12345, 10, 5, 0
	2018, 11, 12345, 10, 5, 0
	2018, 12, 12345, 10, 5, 0
	2019, 1, 12345, 10, 5, 0
	2019, 2, 12345, 10, 5, 0
	2019, 3, 12345, 10, 5, 0
	2019, 4, 12345, 10, 5, 0
	2019, 5, 12345, 10, 5, 0
	2019, 6, 12345, 10, 5, 0
	2019, 7, 12345, 10, 5, 0
	2019, 8, 12345, 10, 5, 0
	2019, 9, 12345, 10, 5, 0
	2019, 10, 12345, 10, 5, 0
	2019, 11, 12345, 10, 5, 0
	2019, 12, 12345, 10, 5, 0
	2020, 1, 12345, 10, 5, 0
	2020, 2, 12345, 10, 5, 0
	2020, 3, 12345, 10, 5, 0
	2020, 4, 12345, 10, 5, 0
	2020, 5, 12345, 10, 5, 0
	2020, 6, 12345, 10, 5, 0
	2020, 7, 12345, 10, 5, 0
	2020, 8, 12345, 10, 5, 0
	2020, 9, 12345, 10, 5, 0
	2020, 10, 12345, 10, 5, 0
	2020, 11, 12345, 10, 5, 0
	2020, 12, 12345, 10, 5, 0
	2021, 1, 12345, 10, 5, 0
	2021, 2, 12345, 10, 5, 0
	2021, 3, 12345, 10, 5, 0
	2021, 4, 12345, 10, 5, 0
	2021, 5, 12345, 10, 5, 0
	2021, 6, 12345, 10, 5, 0
	2021, 7, 12345, 10, 5, 0
	2021, 8, 12345, 10, 5, 0
	2021, 9, 12345, 10, 5, 0
	2021, 10, 12345, 10, 5, 0
	2021, 11, 12345, 10, 5, 0
	2021, 12, 12345, 10, 5, 0
	2022, 1, 12345, 10, 5, 0
	2022, 2, 12345, 10, 5, 0
	2022, 3, 12345, 10, 5, 0
	2022, 4, 12345, 10, 5, 0
	2022, 5, 12345, 10, 5, 0
	2022, 6, 12345, 10, 5, 0
	2022, 7, 12345, 10, 5, 0
	2022, 8, 12345, 10, 5, 0
	2022, 9, 12345, 10, 5, 0
	2022, 10, 12345, 10, 5, 0
	2022, 11, 12345, 10, 5, 0
	2022, 12, 12345, 10, 5, 0
	2023, 1, 12345, 10, 5, 0
	2023, 2, 12345, 10, 5, 0
	2023, 3, 12345, 10, 5, 0
	2023, 4, 12345, 10, 5, 0
	2023, 5, 12345, 10, 5, 0
	2023, 6, 12345, 10, 5, 0
	2023, 7, 12345, 10, 5, 0
	2023, 8, 12345, 10, 5, 0
	2023, 9, 12345, 10, 5, 0
	2023, 10, 12345, 10, 5, 0
	2023, 11, 12345, 10, 5, 0
	2023, 12, 12345, 10, 5, 0
	2024, 1, 12345, 10, 5, 0
	2024, 2, 12345, 10, 5, 0
	2024, 3, 12345, 10, 5, 0
	2024, 4, 12345, 10, 5, 0
	2024, 5, 12345, 10, 5, 0
	2024, 6, 12345, 10, 5, 0
	2024, 7, 12345, 10, 5, 0
	2024, 8, 12345, 10, 5, 0
	2024, 9, 12345, 10, 5, 0
	2024, 10, 12345, 10, 5, 0
	2024, 11, 12345, 10, 5, 0
	2024, 12, 12345, 10, 5, 0
	2025, 1, 12345, 10, 5, 0
	2025, 2, 12345, 10, 5, 0
	2025, 3, 12345, 10, 5, 0
	2025, 4, 12345, 10, 5, 0
	2025, 5, 12345, 10, 5, 0
	2025, 6, 12345, 10, 5, 0
	2025, 7, 12345, 10, 5, 0
	2025, 8, 12345, 10, 5, 0
	2025, 9, 12345, 10, 5, 0
	2025, 10, 12345, 10, 5, 0
	2025, 11, 12345, 10, 5, 0
	2025, 12, 12345, 10, 5, 0
	2026, 1, 12345, 10, 5, 0
	2026, 2, 12345, 10, 5, 0
	2026, 3, 12345, 10, 5, 0
	2026, 4, 12345, 10, 5, 0
	2026, 5, 12345, 10, 5, 0
	2026, 6, 12345, 10, 5, 0
	2026, 7, 12345, 10, 5, 0
	2026, 8, 12345, 10, 5, 0
	2026, 9, 12345, 10, 5, 0
	2026, 10, 12345, 10, 5, 0
	2026, 11, 12345, 10, 5, 0
	2026, 12, 12345

====================================================================================================

