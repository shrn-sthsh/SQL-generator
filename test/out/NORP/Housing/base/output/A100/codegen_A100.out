PROMPT 1:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, give the change in average house rent from 2019 to 2022, i.e., from pre-COVID to post-COVID period.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 1:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, give the change in average house rent from 2019 to 2022, i.e., from pre-COVID to post-COVID period.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import sys
import datetime

# Import data
df = pd.read_csv('../data/rental_data.csv')

# Get rid of rows with missing values
df = df.dropna()

# Get rid of rows with negative values
df = df[df['rental_amount'] > 0]

# Get rid of rows with negative values
df = df[df['price'] > 0]

# Get rid of rows with negative values
df = df[df['bedrooms'] > 0]

# Get rid of rows with negative values
df = df[df['bathrooms'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_living'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_lot'] > 0]

# Get rid of rows with negative values
df = df[df['floors'] > 0]

# Get rid of rows with negative values
df = df[df['waterfront'] > 0]

# Get rid of rows with negative values
df = df[df['view'] > 0]

# Get rid of rows with negative values
df = df[df['condition'] > 0]

# Get rid of rows with negative values
df = df[df['grade'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_above'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_basement'] > 0]

# Get rid of rows with negative values
df = df[df['yr_built'] > 0]

# Get rid of rows with negative values
df = df[df['yr_renovated'] > 0]

# Get rid of rows with negative values
df = df[df['zipcode'] > 0]

# Get rid of rows with negative values
df = df[df['lat'] > 0]

# Get rid of rows with negative values
df = df[df['long'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_living15'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_lot15'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_above15'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_basement15'] > 0]

# Get rid of rows with negative values
df = df[df['yr_built15'] > 0]

# Get rid of rows with negative values
df = df[df['yr_renovated15'] > 0]

# Get rid of rows with negative values
df = df[df['zipcode15'] > 0]

# Get rid of rows with negative values
df = df[df['lat15'] > 0]

# Get rid of rows with negative values
df = df[df['long15'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_living16'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_lot16'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_above16'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_basement16'] > 0]

# Get rid of rows with negative values
df = df[df['yr_built16'] > 0]

# Get rid of rows with negative values
df = df[df['yr_renovated16'] > 0]

# Get rid of rows with negative values
df = df[df['zipcode16'] > 0]

# Get rid of rows with negative values
df = df[df['lat16'] > 0]

# Get rid of rows with negative values
df = df[df['long16'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_living17'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_lot17'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_above17'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_basement17'] > 0]

# Get rid of rows with negative values
df = df[df['yr_built17'] > 0]

# Get rid of rows with negative values
df = df[df['yr_renovated17'] > 0]

# Get rid of rows with negative values
df = df[df['zipcode17'] > 0]

# Get rid of rows with negative values
df = df[df['lat17'] > 0]

# Get rid of rows with negative values
df = df[df['long17'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_living18'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_lot18'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_above18'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_basement18'] > 0]

# Get rid of rows with negative values
df = df[df['yr_built18'] > 0]

# Get rid of rows with negative values
df = df[df['yr_renovated18'] > 0]

# Get rid of rows with negative values
df = df[df['zipcode18'] > 0]

# Get rid of rows with negative values
df = df[df['lat18'] > 0]

# Get rid of rows with negative values
df = df[df['long18'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_living19'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_lot19'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_above19'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_basement19'] > 0]

# Get rid of rows with negative values
df = df[df['yr_built19'] > 0]

# Get rid of rows with negative values
df = df[df['yr_renovated19'] > 0]

# Get rid of rows with negative values
df = df[df['zipcode19'] > 0]

# Get rid of rows with negative values
df = df[df['lat19'] > 0]

# Get rid of rows with negative values
df = df[df['long19'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_living20'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_lot20'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_above20'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_basement20'] > 0]

# Get rid of rows with negative values
df = df[df['yr_built20'] > 0]

# Get rid of rows with negative values
df = df[df['yr_renovated20'] > 0]

# Get rid of rows with negative values
df = df[df['zipcode20'] > 0]

# Get rid of rows with negative values
df = df[df['lat20'] > 0]

# Get rid of rows with negative values
df = df[df['long20'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_living21'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_lot21'] > 0]

# Get rid of rows with negative values
df = df[df['sqft_above21'] > 0]

# Get rid of rows with negative values
df

====================================================================================================

PROMPT 2:

Generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 2:

Generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- The year
	- The gross rent as percentage of household income
	- The household income

Output:
	- The year-on-year change in GRAPI

Example:
	Input:
		- 2015
		- 0.1
		- 100000
	Output:
		- 0.1

"""

# Get the year
year = input("What year? ")

# Get the gross rent as percentage of household income
gross_rent_pct = input("What is the gross rent as percentage of household income? ")

# Get the household income
household_income = input("What is the household income? ")

# Calculate the year-on-year change in GRAPI
year_on_year_change_in_grapi = (float(gross_rent_pct) / float(household_income)) * 100

# Print the year-on-year change in GRAPI
print(year_on_year_change_in_grapi)

# If the year-on-year change in GRAPI is less than 0.1, print "INSUFFICENT"
if year_on_year_change_in_grapi < 0.1:
	print("INSUFFICENT")

# If the year-on-year change in GRAPI is greater than 0.1, print "SUFFICIENT"
if year_on_year_change_in_grapi > 0.1:
	print("SUFFICIENT")


====================================================================================================

PROMPT 3:

Generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in SMOCAPI, where SMOCAPI is selected monthly home-ownership costs as a percent of household income

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 3:

Generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in SMOCAPI, where SMOCAPI is selected monthly home-ownership costs as a percent of household income

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd
import numpy as np

# Get the data
df = pd.read_csv("data/home_ownership_costs.csv")

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_percent"] - df["smoc_percent"].shift(1)

# Get the year-on-year change in home-ownership costs
df["change"] = df["smoc_

====================================================================================================

PROMPT 4:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in average house rent from 2017 to 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 4:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in average house rent from 2017 to 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd
import numpy as np

# Read in the data
df = pd.read_csv('data/rent_data.csv')

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day

====================================================================================================

PROMPT 5:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 5:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd

# Create a function to generate SQL statement
def sql_generator(year, question):
	# Create a variable to hold the SQL statement
	sql_statement = ''
	# Create a variable to hold the column name
	column_name = ''
	# Create a variable to hold the column name
	column_name2 = ''
	# Create a variable to hold the column name
	column_name3 = ''
	# Create a variable to hold the column name
	column_name4 = ''
	# Create a variable to hold the column name
	column_name5 = ''
	# Create a variable to hold the column name
	column_name6 = ''
	# Create a variable to hold the column name
	column_name7 = ''
	# Create a variable to hold the column name
	column_name8 = ''
	# Create a variable to hold the column name
	column_name9 = ''
	# Create a variable to hold the column name
	column_name10 = ''
	# Create a variable to hold the column name
	column_name11 = ''
	# Create a variable to hold the column name
	column_name12 = ''
	# Create a variable to hold the column name
	column_name13 = ''
	# Create a variable to hold the column name
	column_name14 = ''
	# Create a variable to hold the column name
	column_name15 = ''
	# Create a variable to hold the column name
	column_name16 = ''
	# Create a variable to hold the column name
	column_name17 = ''
	# Create a variable to hold the column name
	column_name18 = ''
	# Create a variable to hold the column name
	column_name19 = ''
	# Create a variable to hold the column name
	column_name20 = ''
	# Create a variable to hold the column name
	column_name21 = ''
	# Create a variable to hold the column name
	column_name22 = ''
	# Create a variable to hold the column name
	column_name23 = ''
	# Create a variable to hold the column name
	column_name24 = ''
	# Create a variable to hold the column name
	column_name25 = ''
	# Create a variable to hold the column name
	column_name26 = ''
	# Create a variable to hold the column name
	column_name27 = ''
	# Create a variable to hold the column name
	column_name28 = ''
	# Create a variable to hold the column name
	column_name29 = ''
	# Create a variable to hold the column name
	column_name30 = ''
	# Create a variable to hold the column name
	column_name31 = ''
	# Create a variable to hold the column name
	column_name32 = ''
	# Create a variable to hold the column name
	column_name33 = ''
	# Create a variable to hold the column name
	column_name34 = ''
	# Create a variable to hold the column name
	column_name35 = ''
	# Create a variable to hold the column name
	column_name36 = ''
	# Create a variable to hold the column name
	column_name37 = ''
	# Create a variable to hold the column name
	column_name38 = ''
	# Create a variable to hold the column name
	column_name39 = ''
	# Create a variable to hold the column name
	column_name40 = ''
	# Create a variable to hold the column name
	column_name41 = ''
	# Create a variable to hold the column name
	column_name42 = ''
	# Create a variable to hold the column name
	column_name43 = ''
	# Create a variable to hold the column name
	column_name44 = ''
	# Create a variable to hold the column name
	column_name45 = ''
	# Create a variable to hold the column name
	column_name46 = ''
	# Create a variable to hold the column name
	column_name47 = ''
	# Create a variable to hold the column name
	column_name48 = ''
	# Create a variable to hold the column name
	column_name49 = ''
	# Create a variable to hold the column name
	column_name50 = ''
	# Create a variable to hold the column name
	column_name51 = ''
	# Create a variable to hold the column name
	column_name52 = ''
	# Create a variable to hold the column name
	column_name53 = ''
	# Create a variable to hold the column name
	column_name54 = ''
	# Create a variable to hold the column name
	column_name55 = ''
	# Create a variable to hold the column name
	column_name56 = ''
	# Create a variable to hold the column name
	column_name57 = ''
	# Create a variable to hold the column name
	column_name58 = ''
	# Create a variable to hold the column name
	column_name59 = ''
	# Create a variable to hold the column name
	column_name60 = ''
	# Create a variable to hold the column name
	column_name61 = ''
	# Create a variable to hold the column name
	column_name62 = ''
	# Create a variable to hold the column name
	column_name63 = ''
	# Create a variable to hold the column name
	column_name64 = ''
	# Create a variable to hold the column name
	column_name65 = ''
	# Create a variable to hold the column name
	column_name66 = ''
	# Create a variable to hold the column name
	column_name67 = ''
	# Create a variable to hold the column name
	column_name68 = ''
	# Create a variable to hold the column name
	column_name69 = ''
	# Create a variable to hold the column name
	column_name70 = ''
	# Create a variable to hold the column name
	column_name71 = ''
	# Create a variable to hold the column name
	column_name72 = ''
	# Create a variable to hold the column name
	column_name73 = ''
	# Create a variable to hold the column name
	column_name74 = ''
	# Create a variable to hold the column name
	column_name75 = ''
	# Create a variable to hold the column name
	column_name76 = ''
	# Create a variable to hold the column name
	column_name77 = ''
	# Create a variable to hold the column name
	column_name78 = ''
	# Create a variable to hold the column name
	column_name79 = ''
	# Create a variable to hold the column name
	column_name80 = ''
	# Create a variable to hold the column name
	column_name81 = ''
	# Create a variable to hold the column name
	column_name82 = ''
	# Create a variable to hold the column name
	column_name83 = ''
	# Create a variable to hold the column name
	column_name84 = ''
	# Create a variable to hold the column name
	column_name85 = ''
	# Create a variable to hold the column name
	column_name86 = ''
	# Create a variable to hold the column name
	column_name87 = ''
	# Create a variable to hold the column name
	column_name88 = ''
	# Create a variable to hold the column name
	column_name89 = ''
	# Create a variable to hold the column name
	column_name90 = ''
	# Create a variable to hold the column name
	column_name91 = ''
	# Create a variable to hold the column name
	column_name92 = ''
	# Create a variable to hold the column name
	column_name93 = ''
	# Create a variable to hold the column name
	column_name94 = ''
	# Create a variable to hold the column name
	column_name95 = ''
	# Create a variable to hold the column name
	column_name96 = ''
	# Create a variable to hold the column name
	column_name97 = ''
	# Create a variable to hold the column name
	column_name98 = ''
	# Create a variable to hold the column name
	column_name99 = ''
	# Create a variable to hold the column name
	column_name100 = ''
	# Create a variable to hold the column name
	column_name101 = ''
	# Create a variable to hold the

====================================================================================================

PROMPT 6:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 6:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your SQL query statement below

SELECT *
FROM zipcodes
WHERE year = 2017
AND state = 'Georgia'
AND GRAPI >= 30

# OPTIONAL: You can also add a LIMIT clause to the end of your query to limit the number of rows returned.
# LIMIT 5

# OPTIONAL: If you want to test your code, you can use the provided sample_data.sql.
# You can download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left side of the screen.
# You can also download the sample_data.sql file from the resources tab on the course web site.
# The file is located in the Code tab on the left

====================================================================================================

PROMPT 7:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get zipcodes in Georgia where GRAPI is greater than 30.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 7:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get zipcodes in Georgia where GRAPI is greater than 30.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd

# Read the data
df = pd.read_csv('https://raw.githubusercontent.com/datasets/geo/master/data/us-zcta510-tabblock2010.csv')

# Generate the SQL statement
sql = "SELECT * FROM df WHERE year = 2022 AND state = 'Georgia' AND grapi > 30"

# Print the SQL statement
print(sql)


====================================================================================================

PROMPT 8:

Generate an SQL statement to answer a question.

Prompt: 
	Select share of each fuel source for heating in year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 8:

Generate an SQL statement to answer a question.

Prompt: 
	Select share of each fuel source for heating in year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- Fuel source
	- Year
	- Share of fuel

Output:
	- SQL statement
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT

====================================================================================================

PROMPT 9:

Generate an SQL statement to answer a question.

Prompt: 
	For the year 2022, select zipcodes in Georgia where Home-ownership costs as a %age of household income is more than 28%

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 9:

Generate an SQL statement to answer a question.

Prompt: 
	For the year 2022, select zipcodes in Georgia where Home-ownership costs as a %age of household income is more than 28%

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here


====================================================================================================

PROMPT 10:

Generate an SQL statement to answer a question.

Prompt: 
	For each year, get rent and value of house averaged over all zip codes.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 10:

Generate an SQL statement to answer a question.

Prompt: 
	For each year, get rent and value of house averaged over all zip codes.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- year: int
	- zip: int
	- rent: int
	- value: int
	- sqft: int
	- sqft_per_bed: int
	- sqft_per_bath: int
	- sqft_per_living: int
	- sqft_per_lot: int
	- sqft_per_garage: int
	- sqft_per_fireplace: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_garage: int
	- sqft_per_

====================================================================================================

PROMPT 11:

Generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get rent and value of house averaged over all years.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 11:

Generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get rent and value of house averaged over all years.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	zip_code: a string, the zip code to query
	
	rent: a list of floats, the average rent of the house in the zip code
	
	value: a list of floats, the average value of the house in the zip code
	
	year: a list of ints, the year of the house
	
	
Output:
	A string, the SQL statement to answer the question.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

====================================================================================================

PROMPT 12:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get count of units with and without mortgage in year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 12:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get count of units with and without mortgage in year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	zipcode: a string, the zipcode to query
	year: a string, the year to query
	mortgage: a string, the mortgage type to query

Output:
	A string, the SQL statement to answer the question.

'''

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year = '2022' AND mortgage = 'mortgage'

# Your code here

# For example, if the input is:
# zipcode: '98101'
# year: '2022'
# mortgage: 'mortgage'

# The output is:
# SELECT COUNT(*)
# FROM Units
# WHERE zipcode = '98101' AND year

====================================================================================================

PROMPT 13:

Generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage averaged over years.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 13:

Generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage averaged over years.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get the count of units with and without mortgage
# over the years.

# Get

====================================================================================================

PROMPT 14:

Generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage for year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 14:

Generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage for year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Get year
year = 2022

# Get count of units with and without mortgage
with_mortgage = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchall()[0][0]
without_mortgage = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchall()[0][0]

# Get count of units with and without mortgage for year 2022
with_mortgage_2022 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchall()[0][0]
without_mortgage_2022 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchall()[0][0]

# Get count of units with and without mortgage for year 2023
with_mortgage_2023 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchall()[0][0]
without_mortgage_2023 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchall()[0][0]

# Get count of units with and without mortgage for year 2024
with_mortgage_2024 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchall()[0][0]
without_mortgage_2024 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchall()[0][0]

# Get count of units with and without mortgage for year 2025
with_mortgage_2025 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchall()[0][0]
without_mortgage_2025 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchall()[0][0]

# Get count of units with and without mortgage for year 2026
with_mortgage_2026 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchall()[0][0]
without_mortgage_2026 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchall()[0][0]

# Get count of units with and without mortgage for year 2027
with_mortgage_2027 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchall()[0][0]
without_mortgage_2027 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchall()[0][0]

# Get count of units with and without mortgage for year 2028
with_mortgage_2028 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchall()[0][0]
without_mortgage_2028 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchall()[0][0]

# Get count of units with and without mortgage for year 2029
with_mortgage_2029 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchall()[0][0]
without_mortgage_2029 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchall()[0][0]

# Get count of units with and without mortgage for year 2030
with_mortgage_2030 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchall()[0][0]
without_mortgage_2030 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchall()[0][0]

# Get count of units with and without mortgage for year 2031
with_mortgage_2031 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchall()[0][0]
without_mortgage_2031 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchall()[0][0]

# Get count of units with and without mortgage for year 2032
with_mortgage_2032 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchall()[0][0]
without_mortgage_2032 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchall()[0][0]

# Get count of units with and without mortgage for year 2033
with_mortgage_2033 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchall()[0][0]
without_mortgage_2033 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchall()[0][0]

# Get count of units with and without mortgage for year 2034
with_mortgage_2034 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchall()[0][0]
without_mortgage_2034 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchall()[0][0]

# Get count of units with and without mortgage for year 2035
with_mortgage_2035 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchall()[0][0]
without_mortgage_2035 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchall()[0][0]

# Get count of units with and without mortgage for year 2036
with_mortgage_2036 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchall()[0][0]
without_mortgage_2036 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchall()[0][0]

# Get count of units with and without mortgage for year 2037
with_mortgage_2037 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchall()[0][0]
without_mortgage_2037 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchall()[0][0]

# Get count of units with and without mortgage for year 2038
with_mortgage_2038 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchall()[0][0]
without_mortgage_2038 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchall()[0][0]

# Get count of units with and without mortgage for year 2039
with_mortgage_2039 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchall()[0][0]
without_mortgage_2039 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchall()[0][0]

# Get count of units with and without mortgage for year 2040
with_mortgage_2040 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchall()[0][0]
without_mortgage_2040 = db.execute

====================================================================================================

PROMPT 15:

Generate an SQL statement to answer a question.

Prompt: 
	Get average house price for each zip code in a given year.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 15:

Generate an SQL statement to answer a question.

Prompt: 
	Get average house price for each zip code in a given year.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A year and a zip code.

Output Format:
	A single SQL statement.

Sample Input:
	2016, 90210

Sample Output:
	SELECT AVG(price)
	FROM houses
	WHERE zip_code = 90210 AND year = 2016

Explanation:
	The average house price in the zip code 90210 in the year 2016 is $9,823.

"""

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the whatFlavors function below.
def whatFlavors(cost, money):
    # cost is a list of integers
    # money is an integer
    # return a list of two integers
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible, return the two numbers in the list
    # if the cost is not possible, return None
    # if the cost is possible

====================================================================================================

PROMPT 16:

Generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get the average rent and maintenance cost for households without mortgage.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 16:

Generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get the average rent and maintenance cost for households without mortgage.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- zip_code: a string of a zip code
	- rent: a float of the average rent
	- maintenance: a float of the average maintenance cost
	- mortgage: a float of the average mortgage cost
	- house_size: a float of the average house size
	- house_age: a float of the average house age
	- population: a float of the average population
	- income: a float of the average income
	- income_type: a string of the average income type
	- zip_type: a string of the zip type
	- zip_class: a string of the zip class
	- zip_neighborhood: a string of the zip neighborhood
	- zip_city: a string of the zip city
	- zip_state: a string of the zip state
	- zip_county: a string of the zip county
	- zip_lat: a float of the zip latitude
	- zip_long: a float of the zip longitude
	- zip_count: an int of the number of zip codes
	- zip_count_type: a string of the number of zip codes type
	- zip_count_class: a string of the number of zip codes class
	- zip_count_neighborhood: a string of the number of zip codes neighborhood
	- zip_count_city: a string of the number of zip codes city
	- zip_count_state: a string of the number of zip codes state
	- zip_count_county: a string of the number of zip codes county
	- zip_count_lat: a float of the number of zip codes latitude
	- zip_count_long: a float of the number of zip codes longitude
	- zip_count_population: a float of the number of zip codes population
	- zip_count_income: a float of the number of zip codes income
	- zip_count_income_type: a string of the number of zip codes income type
	- zip_count_house_size: a float of the number of zip codes house size
	- zip_count_house_age: a float of the number of zip codes house age
	- zip_count_house_count: a float of the number of zip codes house count
	- zip_count_house_count_type: a string of the number of zip codes house count type
	- zip_count_house_count_class: a string of the number of zip codes house count class
	- zip_count_house_count_neighborhood: a string of the number of zip codes house count neighborhood
	- zip_count_house_count_city: a string of the number of zip codes house count city
	- zip_count_house_count_state: a string of the number of zip codes house count state
	- zip_count_house_count_county: a string of the number of zip codes house count county
	- zip_count_house_count_lat: a float of the number of zip codes house count latitude
	- zip_count_house_count_long: a float of the number of zip codes house count longitude
	- zip_count_house_count_population: a float of the number of zip codes house count population
	- zip_count_house_count_income: a float of the number of zip codes house count income
	- zip_count_house_count_income_type: a string of the number of zip codes house count income type
	- zip_count_house_count_house_size: a float of the number of zip codes house count house size
	- zip_count_house_count_house_age: a float of the number of zip codes house count house age
	- zip_count_house_count_house_count: a float of the number of zip codes house count house count
	- zip_count_house_count_house_count_type: a string of the number of zip codes house count house count type
	- zip_count_house_count_house_count_class: a string of the number of zip codes house count house count class
	- zip_count_house_count_house_count_neighborhood: a string of the number of zip codes house count house count neighborhood
	- zip_count_house_count_house_count_city: a string of the number of zip codes house count house count city
	- zip_count_house_count_house_count_state: a string of the number of zip codes house count house count state
	- zip_count_house_count_house_count_county: a string of the number of zip codes house count house count county
	- zip_count_house_count_house_count_lat: a float of the number of zip codes house count house count latitude
	- zip_count_house_count_house_count_long: a float of the number of zip codes house count house count longitude
	- zip_count_house_count_house_count_population: a float of the number of zip codes house count house count population
	- zip_count_house_count_house_count_income: a float of the number of zip codes house count house count income
	- zip_count_house_count_house_count_income_type: a string of the number of zip codes house count house count income type
	- zip_count_house_count_house_count_house_size: a float of the number of zip codes house count house count house size
	- zip_count_house_count_house_count_house_age: a float of the number of zip codes house count house count house age
	- zip_count_house_count_house_count_house_count: a float of the number of zip codes house count house count house count
	- zip_count_house_count_house_count_house_count_type: a string of the number of zip codes house count house count house count type
	- zip_count_house_count_house_count_house_count_class: a string of the number of zip codes house count house count house count class
	- zip_count_house_count_house_count_house_count_neighborhood: a string of the number of zip codes house count house count house count neighborhood
	- zip_count_house_count_house_count_house_count_city: a string of the number of zip codes house count house count house count city
	- zip_count_house_count_house_count_house_count_state: a string of the number of zip codes house count house count house count state
	- zip_count_house_count_house_count_house_count_county: a string of the number of zip codes house count house count house count county
	- zip_count_house_count_house_count_house_count_lat: a float of the number of zip codes house count house count house count latitude
	- zip_count_house_count_house_count_house_count_long: a float of the number of zip codes house count house count house count longitude
	- zip_count_house_count_house_count_house_count_population: a float of the number of zip codes house count house count house count population
	- zip_count_house_count_house_count_house_count_income: a float of the number of zip codes house count house count house count income
	- zip_count_house_count_house_count_house_count_income_type: a string of the number of zip codes house count house count house count income type
	- zip_count_house_count_house_count_house_count_house_size: a float of the number of zip codes house count house count house count house size
	- zip_count_house_count_house_count_house_count_house_age: a float of the number of zip codes house count house count house count house age
	- zip_count_house_count_house_count_house_count_house_count: a float of the number of zip codes house count house count house count house count
	- zip_count_house_count_house_count_house_count_house_count_type: a string of the number of zip codes house count house count house count house count type
	- zip_count_house_count_house_count_house_count_house_count_class: a string of the number of zip codes house count house count house count house count class
	- zip_count_house_count_house_count_house_count_house_count_neighborhood: a string of the number of zip codes house count house count house count house count neighborhood
	- zip_count_house_count_house_count_house_count_house_count_city: a string of the number of zip codes

====================================================================================================

PROMPT 17:

Generate an SQL statement to answer a question.

Prompt: 
	Get median housing value by zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 17:

Generate an SQL statement to answer a question.

Prompt: 
	Get median housing value by zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Get the input
question = input("What is the question? ")

# Get the zipcode
zipcode = input("What is the zipcode? ")

# Get the median housing value
median_housing_value = input("What is the median housing value? ")

# Generate the SQL statement
sql_statement = "SELECT zipcode, housing_median_value FROM zipcode_housing_median WHERE zipcode = '{}' AND housing_median_value = '{}'".format(zipcode, median_housing_value)

# Print the SQL statement
print(sql_statement)


====================================================================================================

PROMPT 18:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022 and for each zipcode, get average rent value and house price.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 18:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022 and for each zipcode, get average rent value and house price.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- zipcode: a string of 5 digits
	- year: a string of 4 digits
	- house_price: a string of 4 digits
	- rent: a string of 4 digits

Output:
	- SQL statement: a string of SQL statement
	- INSUFFICENT: if the information is not enough
	- None: if the information is not enough

Example:
	Input:
		zipcode: "90210"
		year: "2022"
		house_price: "12000"
		rent: "5000"
	Output:
		"SELECT AVG(rent) FROM zipcode WHERE zipcode = '90210' AND year = '2022'"

'''

def generate_sql(zipcode, year, house_price, rent):
	# Your code here
	return None


====================================================================================================

PROMPT 19:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get average rent value and house price.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 19:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get average rent value and house price.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	zipcode: a string of a zipcode
	
	rent: a string of a rent value
	
	house: a string of a house value

Output:
	A SQL statement to answer a question.
"""

def generate_sql(zipcode, rent, house):
	# Your code here
	return "INSUFFICENT"


====================================================================================================

PROMPT 20:

Generate an SQL statement to answer a question.

Prompt: 
	Get total housing units in 2022 grouped by zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 20:

Generate an SQL statement to answer a question.

Prompt: 
	Get total housing units in 2022 grouped by zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Get the total housing units in 2022
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022

# Get the total housing units in 2022 grouped by zipcode
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode

# Get the total housing units in 2022 grouped by zipcode
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode
# HAVING SUM(housing_units) > 0

# Get the total housing units in 2022 grouped by zipcode
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC

# Get the total housing units in 2022 grouped by zipcode
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1
# LIMIT 1
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIMIT 1
# LIM

====================================================================================================

PROMPT 21:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, count houses built in or after 2020.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 21:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, count houses built in or after 2020.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A list of zipcodes, one per line.

Output Format:
	A single SQL statement that answers the question.

Sample Input:
	94110
	94110
	94110
	94110
	94110
	94110
	94110
	94110
	94110
	94110

Sample Output:
	SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
	SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
	SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
	SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
	SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
	SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
	SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
	SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
	SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
	
'''

import sys

# INPUT:
# zipcodes: a list of zipcodes
#
# OUTPUT:
# a single SQL statement
#
# EXAMPLE:
# zipcodes = [94110, 94110, 94110, 94110, 94110, 94110, 94110, 94110, 94110, 94110]
#
# SQL:
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;

# INPUT:
# zipcodes: a list of zipcodes
#
# OUTPUT:
# a single SQL statement
#
# EXAMPLE:
# zipcodes = [94110, 94110, 94110, 94110, 94110, 94110, 94110, 94110, 94110, 94110]
#
# SQL:
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;

# INPUT:
# zipcodes: a list of zipcodes
#
# OUTPUT:
# a single SQL statement
#
# EXAMPLE:
# zipcodes = [94110, 94110, 94110, 94110, 94110, 94110, 94110, 94110, 94110, 94110]
#
# SQL:
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;

# INPUT:
# zipcodes: a list of zipcodes
#
# OUTPUT:
# a single SQL statement
#
# EXAMPLE:
# zipcodes = [94110, 94110, 94110, 94110, 94110, 94110, 94110, 94110, 94110, 94110]
#
# SQL:
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;

# INPUT:
# zipcodes: a list of zipcodes
#
# OUTPUT:
# a single SQL statement
#
# EXAMPLE:
# zipcodes = [94110, 94110, 94110, 94110, 94110, 94110, 94110, 94110, 94110, 94110]
#
# SQL:
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;
# SELECT COUNT(*) FROM houses WHERE zipcode = 94110 AND year_built >= 2020;

# INPUT:
# zipcodes: a list of zipcodes
#
# OUTPUT:
# a single SQL statement
#
# EXAMPLE:
# zipcodes = [94110, 94110, 94110, 94110, 94110, 94110, 94110, 94110, 94110, 94110

====================================================================================================

PROMPT 22:

Generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having GRAPI greater than 28% in year 2022

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 22:

Generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having GRAPI greater than 28% in year 2022

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd

# Get the data
df = pd.read_csv('data/zipcodes.csv')

# Get the year
year = 2022

# Get the column
col = 'GRAPI'

# Get the threshold
threshold = 0.28

# Get the number of rows
num_rows = len(df)

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_greater_than_threshold = len(df[df[col] > threshold])

# Get the number of rows with GRAPI greater than the threshold
num_rows_great

====================================================================================================

PROMPT 23:

Generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having SMOCAPI greater than 30% in year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 23:

Generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having SMOCAPI greater than 30% in year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd
import numpy as np

# Get the data
df = pd.read_csv('data/smoc_api_data.csv')

# Get the year
year = 2022

# Get the number of zipcodes
n_zipcodes = len(df['zipcode'].unique())

# Get the number of zipcodes with SMOCAPI greater than 30%
n_greater_30 = len(df[(df['year'] == year) & (df['smoc_api'] > 0.3)]['zipcode'].unique())

# Get the percentage
p_greater_30 = n_greater_30 / n_zipcodes

# Generate the SQL statement
sql_statement = f"SELECT COUNT(*) FROM zipcodes WHERE year = {year} AND smoc_api > 0.3"

# Print the SQL statement
print(sql_statement)

# Print the percentage
print(f"{p_greater_30:.2%} of zipcodes have a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}")

# Print the number of zipcodes
print(f"There are {n_greater_30} zipcodes with a SMOCAPI greater than 30% in year {year}

====================================================================================================

PROMPT 24:

Generate an SQL statement to answer a question.

Prompt: 
	Get average population of males and females by year in Georgia

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 24:

Generate an SQL statement to answer a question.

Prompt: 
	Get average population of males and females by year in Georgia

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Get the year
year = input("What year do you want to know the average population of males and females? ")

# Get the average population of males and females
query = """
SELECT AVG(population_m)
FROM population_by_year
WHERE year = %s
AND sex = 'M'
"""

# Execute the query
cursor.execute(query, (year,))

# Get the result
result = cursor.fetchone()

# Print the result
print(f"The average population of males in {year} is {result[0]}")

# Get the year
year = input("What year do you want to know the average population of males and females? ")

# Get the average population of males and females
query = """
SELECT AVG(population_f)
FROM population_by_year
WHERE year = %s
AND sex = 'F'
"""

# Execute the query
cursor.execute(query, (year,))

# Get the result
result = cursor.fetchone()

# Print the result
print(f"The average population of females in {year} is {result[0]}")

# Get the year
year = input("What year do you want to know the average population of males and females? ")

# Get the average population of males and females
query = """
SELECT AVG(population_m)
FROM population_by_year
WHERE year = %s
AND sex = 'F'
"""

# Execute the query
cursor.execute(query, (year,))

# Get the result
result = cursor.fetchone()

# Print the result
print(f"The average population of females in {year} is {result[0]}")

# Get the year
year = input("What year do you want to know the average population of males and females? ")

# Get the average population of males and females
query = """
SELECT AVG(population_m)
FROM population_by_year
WHERE year = %s
AND sex = 'M'
"""

# Execute the query
cursor.execute(query, (year,))

# Get the result
result = cursor.fetchone()

# Print the result
print(f"The average population of males in {year} is {result[0]}")

# Get the year
year = input("What year do you want to know the average population of males and females? ")

# Get the average population of males and females
query = """
SELECT AVG(population_f)
FROM population_by_year
WHERE year = %s
AND sex = 'M'
"""

# Execute the query
cursor.execute(query, (year,))

# Get the result
result = cursor.fetchone()

# Print the result
print(f"The average population of males in {year} is {result[0]}")

# Get the year
year = input("What year do you want to know the average population of males and females? ")

# Get the average population of males and females
query = """
SELECT AVG(population_f)
FROM population_by_year
WHERE year = %s
AND sex = 'F'
"""

# Execute the query
cursor.execute(query, (year,))

# Get the result
result = cursor.fetchone()

# Print the result
print(f"The average population of females in {year} is {result[0]}")

# Get the year
year = input("What year do you want to know the average population of males and females? ")

# Get the average population of males and females
query = """
SELECT AVG(population_m)
FROM population_by_year
WHERE year = %s
AND sex = 'F'
"""

# Execute the query
cursor.execute(query, (year,))

# Get the result
result = cursor.fetchone()

# Print the result
print(f"The average population of females in {year} is {result[0]}")

# Get the year
year = input("What year do you want to know the average population of males and females? ")

# Get the average population of males and females
query = """
SELECT AVG(population_m)
FROM population_by_year
WHERE year = %s
AND sex = 'M'
"""

# Execute the query
cursor.execute(query, (year,))

# Get the result
result = cursor.fetchone()

# Print the result
print(f"The average population of males in {year} is {result[0]}")

# Get the year
year = input("What year do you want to know the average population of males and females? ")

# Get the average population of males and females
query = """
SELECT AVG(population_f)
FROM population_by_year
WHERE year = %s
AND sex = 'M'
"""

# Execute the query
cursor.execute(query, (year,))

# Get the result
result = cursor.fetchone()

# Print the result
print(f"The average population of males in {year} is {result[0]}")

# Get the year
year = input("What year do you want to know the average population of males and females? ")

# Get the average population of males and females
query = """
SELECT AVG(population_f)
FROM population_by_year
WHERE year = %s
AND sex = 'F'
"""

# Execute the query
cursor.execute(query, (year,))

# Get the result
result = cursor.fetchone()

# Print the result
print(f"The average population of females in {year} is {result[0]}")

# Get the year
year = input("What year do you want to know the average population of males and females? ")

# Get the average population of males and females
query = """
SELECT AVG(population_m)
FROM population_by_year
WHERE year = %s
AND sex = 'F'
"""

# Execute the query
cursor.execute(query, (year,))

# Get the result
result = cursor.fetchone()

# Print the result
print(f"The average population of females in {year} is {result[0]}")

# Get the year
year = input("What year do you want to know the average population of males and females? ")

# Get the average population of males and females
query = """
SELECT AVG(population_m)
FROM population_by_year
WHERE year = %s
AND sex = 'M'
"""

# Execute the query
cursor.execute(query, (year,))

# Get the result
result = cursor.fetchone()

# Print the result
print(f"The average population of males in {year} is {result[0]}")

# Get the year
year = input("What year do you want to know the average population of males and females? ")

# Get the average population of males and females
query = """
SELECT AVG(population_f)
FROM population_by_year
WHERE year = %s
AND sex = 'M'
"""

# Execute the query
cursor.execute(query, (year,))

# Get the result
result = cursor.fetchone()

# Print the result
print(f"The average population of males in {year} is {result[0]}")

# Get the year
year = input("What year do you want to know the average population of males and females? ")

# Get the average population of males and females
query = """
SELECT AVG(population_f)
FROM population_by_year
WHERE year = %s
AND sex = 'F'
"""

# Execute the query
cursor.execute(query, (year,))

# Get the result
result = cursor.fetchone()

# Print the result
print(f"The average population of females in {year} is {result[0]}")

# Get the year
year = input("What year do you want to know the average population of males and females? ")

# Get the average population of males and females
query = """
SELECT AVG(population_m)
FROM population_by_year
WHERE year = %s
AND sex = 'F'
"""

# Execute the query
cursor.execute(query, (year,))



====================================================================================================

PROMPT 25:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get gender ratio between males and females for each zipcode in Georgia.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 25:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get gender ratio between males and females for each zipcode in Georgia.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your SQL query statement below

SELECT
	zipcode,
	CASE
		WHEN gender = 'M' THEN 1
		ELSE 0
	END AS Male,
	CASE
		WHEN gender = 'F' THEN 1
		ELSE 0
	END AS Female
FROM
	zipcode_gender
WHERE
	year = 2022

# OPTIONAL:
# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

# If you want to see the result of your query, uncomment the line below:
# print(mycursor.fetchall())

====================================================================================================

PROMPT 26:

Generate an SQL statement to answer a question.

Prompt: 
	For each year after 2016, get average count of each ethnicity in Georgia.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 26:

Generate an SQL statement to answer a question.

Prompt: 
	For each year after 2016, get average count of each ethnicity in Georgia.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your SQL query statement below

# SELECT
# 	Ethnicity,
# 	AVG(Count)
# FROM
# 	(
# 		SELECT
# 			Ethnicity,
# 			Count
# 		FROM
# 			(
# 				SELECT
# 					Ethnicity,
# 					COUNT(*)
# 				FROM
# 					(
# 						SELECT
# 							Ethnicity,
# 							CASE
# 								WHEN Gender = 'Male' THEN 'M'
# 								ELSE 'F'
# 							END AS Gender,
# 							CASE
# 								WHEN Race = 'White' THEN 'W'
# 								ELSE 'B'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Black' THEN 'B'
# 								ELSE 'A'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Asian' THEN 'A'
# 								ELSE 'O'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Hispanic' THEN 'H'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Other' THEN 'O'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'American Indian' THEN 'A'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Native Hawaiian' THEN 'A'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Pacific Islander' THEN 'A'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Two or More' THEN 'O'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Unknown' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Decline to Answer' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'No Answer' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Collected' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Stated' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Applicable' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Available' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Collected' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Stated' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Applicable' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Available' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Collected' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Stated' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Applicable' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Available' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Collected' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Stated' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Applicable' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Available' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Collected' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Stated' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Applicable' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Available' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Collected' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Stated' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Applicable' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Available' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Collected' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Stated' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Applicable' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Available' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Collected' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Stated' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Applicable' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Available' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Collected' THEN 'U'
# 								ELSE 'U'
# 							END AS Race,
# 							CASE
# 								WHEN Race = 'Data Not Stated'

====================================================================================================

PROMPT 27:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get average count of each ethnicity grouped by zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 27:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get average count of each ethnicity grouped by zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here!

# Your code here

====================================================================================================

PROMPT 28:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of American Indian and Alaskan Natives with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 28:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of American Indian and Alaskan Natives with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd
import numpy as np

# Read the data
df = pd.read_csv("data/zip_data.csv")

# Get the total population of each zipcode
df_tot_pop = df.groupby(["zipcode"])["population"].sum()

# Get the total population of each race
df_tot_pop_race = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n_n_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n_n_n_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n_n_n_n_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n_n_n_n_n_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n_n_n_n_n_n_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n_n_n_n_n_n_n_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n_n_n_n_n_n_n_n_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n_n_n_n_n_n_n_n_n_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n_n_n_n_n_n_n_n_n_n_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n_n_n_n_n_n_n_n_n_n_n_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_race_aian_n_al_n_as_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = df.groupby(["zipcode", "race"])["population"].sum()

# Get the total population of each race
df_tot_pop_

====================================================================================================

PROMPT 29:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Asians with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 29:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Asians with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your SQL query statement below

SELECT
	zipcode,
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) AS Asian_Percentage
FROM
	zipcodes
GROUP BY
	zipcode

# End of query

# Write your SQL query statement below

SELECT
	zipcode,
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) AS Asian_Percentage
FROM
	zipcodes
GROUP BY
	zipcode
HAVING
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) > 0.5

# End of query

# Write your SQL query statement below

SELECT
	zipcode,
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) AS Asian_Percentage
FROM
	zipcodes
GROUP BY
	zipcode
HAVING
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) > 0.5
ORDER BY
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) DESC
LIMIT
	1

# End of query

# Write your SQL query statement below

SELECT
	zipcode,
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) AS Asian_Percentage
FROM
	zipcodes
GROUP BY
	zipcode
HAVING
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) > 0.5
ORDER BY
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) DESC
LIMIT
	1

# End of query

# Write your SQL query statement below

SELECT
	zipcode,
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) AS Asian_Percentage
FROM
	zipcodes
GROUP BY
	zipcode
HAVING
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) > 0.5
ORDER BY
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) DESC
LIMIT
	1

# End of query

# Write your SQL query statement below

SELECT
	zipcode,
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) AS Asian_Percentage
FROM
	zipcodes
GROUP BY
	zipcode
HAVING
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) > 0.5
ORDER BY
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) DESC
LIMIT
	1

# End of query

# Write your SQL query statement below

SELECT
	zipcode,
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) AS Asian_Percentage
FROM
	zipcodes
GROUP BY
	zipcode
HAVING
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) > 0.5
ORDER BY
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) DESC
LIMIT
	1

# End of query

# Write your SQL query statement below

SELECT
	zipcode,
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) AS Asian_Percentage
FROM
	zipcodes
GROUP BY
	zipcode
HAVING
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) > 0.5
ORDER BY
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) DESC
LIMIT
	1

# End of query

# Write your SQL query statement below

SELECT
	zipcode,
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) AS Asian_Percentage
FROM
	zipcodes
GROUP BY
	zipcode
HAVING
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) > 0.5
ORDER BY
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) DESC
LIMIT
	1

# End of query

# Write your SQL query statement below

SELECT
	zipcode,
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) AS Asian_Percentage
FROM
	zipcodes
GROUP BY
	zipcode
HAVING
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) > 0.5
ORDER BY
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) DESC
LIMIT
	1

# End of query

# Write your SQL query statement below

SELECT
	zipcode,
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) AS Asian_Percentage
FROM
	zipcodes
GROUP BY
	zipcode
HAVING
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) > 0.5
ORDER BY
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) DESC
LIMIT
	1

# End of query

# Write your SQL query statement below

SELECT
	zipcode,
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) AS Asian_Percentage
FROM
	zipcodes
GROUP BY
	zipcode
HAVING
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) > 0.5
ORDER BY
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) DESC
LIMIT
	1

# End of query

# Write your SQL query statement below

SELECT
	zipcode,
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) AS Asian_Percentage
FROM
	zipcodes
GROUP BY
	zipcode
HAVING
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) > 0.5
ORDER BY
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) DESC
LIMIT
	1

# End of query

# Write your SQL query statement below

SELECT
	zipcode,
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) AS Asian_Percentage
FROM
	zipcodes
GROUP BY
	zipcode
HAVING
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) > 0.5
ORDER BY
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) DESC
LIMIT
	1

# End of query

# Write your SQL query statement below

SELECT
	zipcode,
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) AS Asian_Percentage
FROM
	zipcodes
GROUP BY
	zipcode
HAVING
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) > 0.5
ORDER BY
	SUM(CASE WHEN race = 'Asian' THEN 1 ELSE 0 END) / COUNT(*) DESC
LIMIT
	1

# End of query

# Write your SQL query statement below

SELECT
	zipcode

====================================================================================================

PROMPT 30:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 30:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd
import numpy as np

# Get the data
df = pd.read_csv("data/zip_data.csv")

# Get the year
year = 2022

# Get the total population
total_population = df['population'].sum()

# Get the total number of black people
black_population = df[df['race'] == 'Black']['population'].sum()

# Get the total number of people in each zipcode
zip_population = df.groupby('zipcode')['population'].sum()

# Get the percentage of black people in each zipcode
zip_black_percentage = (df[df['race'] == 'Black'].groupby('zipcode')['population'].sum() / zip_population) * 100

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.max()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.idxmax()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.item()

# Get the zipcode with the highest percentage of black people
zip_black_percentage

====================================================================================================

PROMPT 31:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Hispanics/Latinos with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 31:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Hispanics/Latinos with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd
import numpy as np

# Read in the data
df = pd.read_csv('data/zip_data.csv')

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(['zipcode'])['population'].sum().reset_index()

# Get the total population in each zipcode
df_pop = df.groupby(

====================================================================================================

PROMPT 32:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Native Hawaiian and other Pacific Inlander with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 32:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Native Hawaiian and other Pacific Inlander with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A list of zipcodes, separated by commas.
	A list of questions, separated by commas.

Output Format:
	A list of SQL statements, one for each question.

Sample Input:
	94110,94112,94114,94116,94118,94119,94121,94122,94123,94124,94125,94127,94128,94129,94130,94131,94132,94133,94134,94135,94136,94137,94138,94139,94140,94141,94142,94143,94144,94145,94146,94147,94148,94149,94150,94151,94152,94153,94154,94155,94156,94157,94158,94159,94160,94161,94162,94163,94164,94165,94166,94167,94168,94169,94170,94171,94172,94173,94174,94175,94176,94177,94178,94179,94180,94181,94182,94183,94184,94185,94186,94187,94188,94189,94190,94191,94192,94193,94194,94195,94196,94197,94198,94199,94200,94201,94202,94203,94204,94205,94206,94207,94208,94209,94210,94211,94212,94213,94214,94215,94216,94217,94218,94219,94220,94221,94222,94223,94224,94225,94226,94227,94228,94229,94230,94231,94232,94233,94234,94235,94236,94237,94238,94239,94240,94241,94242,94243,94244,94245,94246,94247,94248,94249,94250,94251,94252,94253,94254,94255,94256,94257,94258,94259,94260,94261,94262,94263,94264,94265,94266,94267,94268,94269,94270,94271,94272,94273,94274,94275,94276,94277,94278,94279,94280,94281,94282,94283,94284,94285,94286,94287,94288,94289,94290,94291,94292,94293,94294,94295,94296,94297,94298,94299,94300,94301,94302,94303,94304,94305,94306,94307,94308,94309,94310,94311,94312,94313,94314,94315,94316,94317,94318,94319,94320,94321,94322,94323,94324,94325,94326,94327,94328,94329,94330,94331,94332,94333,94334,94335,94336,94337,94338,94339,94340,94341,94342,94343,94344,94345,94346,94347,94348,94349,94350,94351,94352,94353,94354,94355,94356,94357,94358,94359,94360,94361,94362,94363,94364,94365,94366,94367,94368,94369,94370,94371,94372,94373,94374,94375,94376,94377,94378,94379,94380,94381,94382,94383,94384,94385,94386,94387,94388,94389,94390,94391,94392,94393,94394,94395,94396,94397,94398,94399,94400,94401,94402,94403,94404,94405,94406,94407,94408,94409,94410,94411,94412,94413,94414,94415,94416,94417,94418,94419,94420,94421,94422,94423,94424,94425,94426,94427,94428,94429,94430,94431,94432,94433,94434,94435,94436,94437,94438,94439,94440,94441,94442,94443,94444,94445,94446,94447,94448,94449,94450,94451,94452,94453,94454,94455,94456,94457,94458,94459,94460,94461,94462,94463,94464,94465,94466,94467,94468,94469,94470,94471,94472,94473,94474,94475,94476,94477,94478,94479,94480,94481,94482,94483,94484,94485,94486,94487,94488,94489,94490,94491,94492,94493,94494,94495,94496,94497,94498,94499,94500,94501,94502,94503,94504,94505,94506,94507,94508,94509,94510,94511,94512,94513,94514,94515,94516,94517,94518,94519,94520,94521,94522,94523,94524,94525,94526,94527,94528,94529,94530,94531,94532,94533,94534,94535,94536,94537,94538,94539,94540,94541,94542,94543,94544,94545,94546,94547,94548,94549,94550,94551,94552,94553,94554,94555,94556,94557,94558,94559,94560,94561,94562,94563,94564,94565,94566,94567,94568,94569,94570,94571,94572,94573,94574,94575,94576,94577,94578,94579,94580,94581,94582,94583,94584,94585,94586,94587,94588,94589,94590,94591,94592,94593,94594,94595,94596,94597,94598,94599,94600,94601,94602,94603,94604,94605,94606,94607,94608,94609,94610,94611,94612,94613,94614,94615,94616,94617,94618,94619,94620,94621,94622,94623,94624,94625,94626,94627,94628,94629,94630,94631,94632,94633,94634,94635,94636,94637,94638,94639,94640,94641,94642,94643,94644,94645,94646,94647,94648,94649,94650,94651,94652,94653,94654,94655,94656,94657,94658,94659,94660,94661,94662,94663,94664,94665,94

====================================================================================================

PROMPT 33:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Whites with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 33:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Whites with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A single line of input containing the question.

Output Format:
	A single line of output containing the answer.

Sample Input:
	What is the percentage of Whites in each zipcode in 2022?

Sample Output:
	SELECT zipcode, (COUNT(WHITES) / COUNT(POPULATION)) * 100 AS PERCENT
	FROM zipcodes
	GROUP BY zipcode
	HAVING COUNT(WHITES) / COUNT(POPULATION) > 0.5;

'''

import sqlite3

conn = sqlite3.connect('zipcodes.db')
c = conn.cursor()

# c.execute("DROP TABLE IF EXISTS zipcodes")
# c.execute("CREATE TABLE zipcodes (zipcode INTEGER, state TEXT, population INTEGER, whites INTEGER)")
# c.execute("INSERT INTO zipcodes VALUES (11111, 'New York', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (22222, 'New Jersey', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (33333, 'California', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (44444, 'Texas', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (55555, 'Florida', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (66666, 'Pennsylvania', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (77777, 'Illinois', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (88888, 'Ohio', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (999999, 'Georgia', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (101010, 'Michigan', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (111111, 'New York', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (222222, 'New Jersey', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (333333, 'California', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (444444, 'Texas', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (555555, 'Florida', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (66666, 'Pennsylvania', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (777777, 'Illinois', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (888888, 'Ohio', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (999999, 'Georgia', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (101010, 'Michigan', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (111111, 'New York', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (222222, 'New Jersey', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (333333, 'California', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (444444, 'Texas', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (555555, 'Florida', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (66666, 'Pennsylvania', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (777777, 'Illinois', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (888888, 'Ohio', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (999999, 'Georgia', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (101010, 'Michigan', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (111111, 'New York', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (222222, 'New Jersey', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (333333, 'California', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (444444, 'Texas', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (555555, 'Florida', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (66666, 'Pennsylvania', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (777777, 'Illinois', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (888888, 'Ohio', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (999999, 'Georgia', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (101010, 'Michigan', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (111111, 'New York', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (222222, 'New Jersey', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (333333, 'California', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (444444, 'Texas', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (555555, 'Florida', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (66666, 'Pennsylvania', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (777777, 'Illinois', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (888888, 'Ohio', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (999999, 'Georgia', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (101010, 'Michigan', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (111111, 'New York', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (222222, 'New Jersey', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (333333, 'California', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (444444, 'Texas', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (555555, 'Florida', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (66666, 'Pennsylvania', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (777777, 'Illinois', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (888888, 'Ohio', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (999999, 'Georgia', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (101010, 'Michigan', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (111111, 'New York', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (222222, 'New Jersey', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (333333, 'California', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (444444, 'Texas', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (555555, 'Florida', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (66666, 'Pennsylvania', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (777777, 'Illinois', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (888888, 'Ohio', 100, 10)")
# c.execute("INSERT INTO zipcodes VALUES (999999,

====================================================================================================

PROMPT 34:

Generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 34:

Generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	zipcode: a string, the zipcode of the community
	year: a string, the year of the community
	smocapi: a string, the average SMOCAPI of the community
	black: a string, the percentage of black people in the community
	asian: a string, the percentage of asian people in the community
	american_indian: a string, the percentage of american indian people in the community
	alaskan_native: a string, the percentage of alaskan native people in the community
	hawaiian_pacific_islander: a string, the percentage of native hawaiian and pacific inlander people in the community
	
Output:
	A string, the SQL statement to answer the question.

"""

# Your code here

# For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Input:
#	zipcode: a string, the zipcode of the community
#	year: a string, the year of the community
#	smocapi: a string, the average SMOCAPI of the community
#	black: a string, the percentage of black people in the community
#	asian: a string, the percentage of asian people in the community
#	american_indian: a string, the percentage of american indian people in the community
#	alaskan_native: a string, the percentage of alaskan native people in the community
#	hawaiian_pacific_islander: a string, the percentage of native hawaiian and pacific inlander people in the community

# Output:
#	A string, the SQL statement to answer the question.

# For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Input:
#	zipcode: a string, the zipcode of the community
#	year: a string, the year of the community
#	smocapi: a string, the average SMOCAPI of the community
#	black: a string, the percentage of black people in the community
#	asian: a string, the percentage of asian people in the community
#	american_indian: a string, the percentage of american indian people in the community
#	alaskan_native: a string, the percentage of alaskan native people in the community
#	hawaiian_pacific_islander: a string, the percentage of native hawaiian and pacific inlander people in the community

# Output:
#	A string, the SQL statement to answer the question.

# For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Input:
#	zipcode: a string, the zipcode of the community
#	year: a string, the year of the community
#	smocapi: a string, the average SMOCAPI of the community
#	black: a string, the percentage of black people in the community
#	asian: a string, the percentage of asian people in the community
#	american_indian: a string, the percentage of american indian people in the community
#	alaskan_native: a string, the percentage of alaskan native people in the community
#	hawaiian_pacific_islander: a string, the percentage of native hawaiian and pacific inlander people in the community

# Output:
#	A string, the SQL statement to answer the question.

# For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Input:
#	zipcode: a string, the zipcode of the community
#	year: a string, the year of the community
#	smocapi: a string, the average SMOCAPI of the community
#	black: a string, the percentage of black people in the community
#	asian: a string, the percentage of asian people in the community
#	american_indian: a string, the percentage of american indian people in the community
#	alaskan_native: a string, the percentage of alaskan native people in the community
#	hawaiian_pacific_islander: a string, the percentage of native hawaiian and pacific inlander people in the community

# Output:
#	A string, the SQL statement to answer the question.

# For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Input:
#	zipcode: a string, the zipcode of the community
#	year: a string, the year of the community
#	smocapi: a string, the average SMOCAPI of the community
#	black: a string, the percentage of black people in the community
#	asian: a string, the percentage of asian people in the community
#	american_indian: a string, the percentage of american indian people in the community
#	alaskan_native: a string, the percentage of alaskan native people in the community
#	hawaiian_pacific_islander: a string, the percentage of native hawaiian and pacific inlander people in the community

# Output:
#	A string, the SQL statement to answer the question.

# For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Input:
#	zipcode: a string, the zipcode of the community
#	year: a string, the year of the community
#	smocapi: a string, the average SMOCAPI of the community
#	black: a string, the percentage of black people in the community
#	asian: a string, the percentage of asian people in the community
#	american_indian: a string, the percentage of american indian people in the community
#	alaskan_native: a string, the percentage of alaskan native people in the community
#	hawaiian_pacific_islander: a string, the percentage of native hawaiian and pacific inlander people in the community

# Output:
#	A string, the SQL statement to answer the question.

# For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Input:
#	zipcode: a string, the zipcode of the community
#	year: a string, the year of the community
#	smocapi: a string, the average SMOCAPI of the community
#	black: a string, the percentage of black people in the community
#	asian: a string, the percentage of asian people in the community
#	american_indian: a string, the

====================================================================================================

PROMPT 35:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those travelling in car alone between year 2019 and 2022

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 35:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those travelling in car alone between year 2019 and 2022

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import datetime

# Import the data
df = pd.read_csv('../data/raw/us-car-data.csv')

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year = int(df['year'].max())

# Get the year of the data
year =

====================================================================================================

PROMPT 36:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in mean commute time between 2017 and 2022

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 36:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in mean commute time between 2017 and 2022

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd
import numpy as np

# Read in the data
data = pd.read_csv("data/commute_data.csv")

# Create a list of the zipcodes
zipcodes = data["zipcode"].unique()

# Create a list of the years
years = data["year"].unique()

# Create a list of the months
months = data["month"].unique()

# Create a list of the days
days = data["day"].unique()

# Create a list of the days of the week
weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

# Create a list of the months
months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]

# Create a list of the days
days = ["1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th", "11th", "12th", "13th", "14th", "15th", "16th", "17th", "18th", "19th", "20th", "21st", "22nd", "23rd", "24th", "25th", "26th", "27th", "28th", "29th", "30th", "31st"]

# Create a list of the days of the week
weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

# Create a list of the months
months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]

# Create a list of the days
days = ["1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th", "11th", "12th", "13th", "14th", "15th", "16th", "17th", "18th", "19th", "20th", "21st", "22nd", "23rd", "24th", "25th", "26th", "27th", "28th", "29th", "30th", "31st"]

# Create a list of the days of the week
weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

# Create a list of the months
months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]

# Create a list of the days
days = ["1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th", "11th", "12th", "13th", "14th", "15th", "16th", "17th", "18th", "19th", "20th", "21st", "22nd", "23rd", "24th", "25th", "26th", "27th", "28th", "29th", "30th", "31st"]

# Create a list of the days of the week
weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

# Create a list of the months
months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]

# Create a list of the days
days = ["1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th", "11th", "12th", "13th", "14th", "15th", "16th", "17th", "18th", "19th", "20th", "21st", "22nd", "23rd", "24th", "25th", "26th", "27th", "28th", "29th", "30th", "31st"]

# Create a list of the days of the week
weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

# Create a list of the months
months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]

# Create a list of the days
days = ["1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th", "11th", "12th", "13th", "14th", "15th", "16th", "17th", "18th", "19th", "20th", "21st", "22nd", "23rd", "24th", "25th", "26th", "27th", "28th", "29th", "30th", "31st"]

# Create a list of the days of the week
weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

# Create a list of the months
months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]

# Create a list of the days
days = ["1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th", "11th", "12th", "13th", "14th", "15th", "16th", "17th", "18th", "19th", "20th", "21st", "22nd", "23rd", "24th", "25th", "26th", "27th", "28th", "29th", "30th", "31st"]

# Create a list of the days of the week
weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

# Create a list of the months
months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]

# Create a list of the days
days = ["1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th", "11th", "12th", "13th", "14th", "15th", "16th", "17th", "18th", "19th", "20th", "21st", "22nd", "23rd", "24th", "25th", "26th", "27th", "28th", "29th", "30th", "31st"]

# Create a list of the days of the week
weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

# Create a list of the months
months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]

# Create a list of the days
days = ["1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th", "11th", "12th", "13th", "14th", "15th", "16th", "17th", "18th", "19th", "20th", "21st", "22nd", "23rd", "24th", "25th", "26th", "27th", "28th", "29th", "30th", "31st"]

# Create a list of the days of the week
weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

# Create a list of the months
months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]

====================================================================================================

PROMPT 37:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those working from home between year 2019 and 2022

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 37:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those working from home between year 2019 and 2022

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    port = "5432",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT
		CASE
			WHEN home_work_ratio_2019 < 0.5 THEN 'INSUFFICENT'
			ELSE 'SUFFICIENT'
		END,
		zipcode,
		home_work_ratio_2019,
		home_work_ratio_2021
	FROM
		(
			SELECT
				zipcode,
				CASE
					WHEN home_work_ratio_2019 < 0.5 THEN 'INSUFFICENT'
					ELSE 'SUFFICIENT'
				END AS home_work_ratio_2019,
				CASE
					WHEN home_work_ratio_2021 < 0.5 THEN 'INSUFFICENT'
					ELSE 'SUFFICIENT'
				END AS home_work_ratio_2021
			FROM
				(
					SELECT
						zipcode,
						CASE
							WHEN home_work_ratio_2019 < 0.5 THEN 'INSUFFICENT'
							ELSE 'SUFFICIENT'
						END AS home_work_ratio_2019,
						CASE
							WHEN home_work_ratio_2021 < 0.5 THEN 'INSUFFICENT'
							ELSE 'SUFFICIENT'
						END AS home_work_ratio_2021
					FROM
						(
							SELECT
								zipcode,
								CASE
									WHEN home_work_ratio_2019 < 0.5 THEN 'INSUFFICENT'
									ELSE 'SUFFICIENT'
								END AS home_work_ratio_2019,
								CASE
									WHEN home_work_ratio_2021 < 0.5 THEN 'INSUFFICENT'
									ELSE 'SUFFICIENT'
								END AS home_work_ratio_2021
							FROM
								(
									SELECT
										zipcode,
										CASE
											WHEN home_work_ratio_2019 < 0.5 THEN 'INSUFFICENT'
											ELSE 'SUFFICIENT'
										END AS home_work_ratio_2019,
										CASE
											WHEN home_work_ratio_2021 < 0.5 THEN 'INSUFFICENT'
											ELSE 'SUFFICIENT'
										END AS home_work_ratio_2021
									FROM
										(
											SELECT
												zipcode,
												CASE
													WHEN home_work_ratio_2019 < 0.5 THEN 'INSUFFICENT'
													ELSE 'SUFFICIENT'
												END AS home_work_ratio_2019,
												CASE
													WHEN home_work_ratio_2021 < 0.5 THEN 'INSUFFICENT'
													ELSE 'SUFFICIENT'
												END AS home_work_ratio_2021
											FROM
												(
													SELECT
														zipcode,
														CASE
															WHEN home_work_ratio_2019 < 0.5 THEN 'INSUFFICENT'
															ELSE 'SUFFICIENT'
														END AS home_work_ratio_2019,
														CASE
															WHEN home_work_ratio_2021 < 0.5 THEN 'INSUFFICENT'
															ELSE 'SUFFICIENT'
														END AS home_work_ratio_2021
													FROM
														(
															SELECT
																zipcode,
																CASE
																	WHEN home_work_ratio_2019 < 0.5 THEN 'INSUFFICENT'
																	ELSE 'SUFFICIENT'
																END AS home_work_ratio_2019,
																CASE
																	WHEN home_work_ratio_2021 < 0.5 THEN 'INSUFFICENT'
																	ELSE 'SUFFICIENT'
																END AS home_work_ratio_2021
															FROM
																(
																	SELECT
																		zipcode,
																		CASE
																			WHEN home_work_ratio_2019 < 0.5 THEN 'INSUFFICENT'
																			ELSE 'SUFFICIENT'
																		END AS home_work_ratio_2019,
																		CASE
																			WHEN home_work_ratio_2021 < 0.5 THEN 'INSUFFICENT'
																			ELSE 'SUFFICIENT'
																		END AS home_work_ratio_2021
																	FROM
																		(
																			SELECT
																				zipcode,
																				CASE
																					WHEN home_work_ratio_2019 < 0.5 THEN 'INSUFFICENT'
																					ELSE 'SUFFICIENT'
																				END AS home_work_ratio_2019,
																				CASE
																					WHEN home_work_ratio_2021 < 0.5 THEN 'INSUFFICENT'
																					ELSE 'SUFFICIENT'
																				END AS home_work_ratio_2021
																			FROM
																				(
																					SELECT
																						zipcode,
																						CASE
																							WHEN home_work_ratio_2019 < 0.5 THEN 'INSUFFICENT'
																							ELSE 'SUFFICIENT'
																						END AS home_work_ratio_2019,
																						CASE
																							WHEN home_work_ratio_2021 < 0.5 THEN 'INSUFFICENT'
																							ELSE 'SUFFICIENT'
																						END AS home_work_ratio_2021
																				FROM
																					(
																						SELECT
																							zipcode,
																							CASE
																								WHEN home_work_ratio_2019 < 0.5 THEN 'INSUFFICENT'
																								ELSE 'SUFFICIENT'
																							END AS home_work_ratio_2019,
																							CASE
																								WHEN home_work_ratio_2021 < 0.5 THEN 'INSUFFICENT'
																								ELSE 'SUFFICIENT'
																							END AS home_work_ratio_2021
																						FROM
																							(
																								SELECT
																								zipcode,
																								CASE
																									WHEN home_work_ratio_2019 < 0.5 THEN 'INSUFFICENT'
																									ELSE 'SUFFICIENT'
																								END AS home_work_ratio_2019,
																								CASE
																									WHEN home_work_ratio_2021 < 0.5 THEN 'INSUFFICENT'
																									ELSE 'SUFFICIENT'
																								END AS home_work_ratio_2021
																							FROM
																								(
																									SELECT
																										zipcode,
																										CASE
																											WHEN home_work_ratio_2019 < 0.5 THEN 'INSUFFICENT'
																											ELSE 'SUFFICIENT'
																										END AS home_work_ratio_2019,
																										CASE
																											WHEN home_work_ratio_2021 < 0.5

====================================================================================================

PROMPT 38:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of each commute type when commuting to work.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 38:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of each commute type when commuting to work.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For year 2022, get percentage of each commute type when commuting to work.
	
	SELECT
		CASE
			WHEN (commute_type = 'car' AND commute_to_work = 'yes') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'car' AND commute_to_work = 'no') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'public' AND commute_to_work = 'yes') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'public' AND commute_to_work = 'no') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'walk' AND commute_to_work = 'yes') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'walk' AND commute_to_work = 'no') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'bike' AND commute_to_work = 'yes') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'bike' AND commute_to_work = 'no') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'other' AND commute_to_work = 'yes') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'other' AND commute_to_work = 'no') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'yes') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'no') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'other' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'other') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'other') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'other' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'other') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'other' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'other') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'other' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'other') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'other' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'other') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'other' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'other') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'other' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'other') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'other' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'other') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'other' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'other') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'other' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'other') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'other' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'other') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'other' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'other') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'other' AND commute_to_work = 'unknown') THEN (100 / (SELECT COUNT(*) FROM commute_type))
			WHEN (commute_type = 'unknown' AND commute_

====================================================================================================

PROMPT 39:

Generate an SQL statement to answer a question.

Prompt: 
	Get median and mean household income for each year.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 39:

Generate an SQL statement to answer a question.

Prompt: 
	Get median and mean household income for each year.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- year: integer, the year to get the data for.
	- median_income: float, the median income for the year.
	- mean_income: float, the mean income for the year.

Output:
	- SQL statement: string, the SQL statement to answer the question.
"""

def get_income_statements(year, median_income, mean_income):
	# Your code here
	if year == 2016:
		if median_income < 50000:
			if mean_income < 50000:
				return "SELECT 'INSUFFICENT'"
			else:
				return "SELECT 'INSUFFICENT'"
		else:
			if mean_income < 50000:
				return "SELECT 'INSUFFICENT'"
			else:
				return "SELECT 'INSUFFICENT'"
	elif year == 2017:
		if median_income < 50000:
			if mean_income < 50000:
				return "SELECT 'INSUFFICENT'"
			else:
				return "SELECT 'INSUFFICENT'"
		else:
			if mean_income < 50000:
				return "SELECT 'INSUFFICENT'"
			else:
				return "SELECT 'INSUFFICENT'"
	elif year == 2018:
		if median_income < 50000:
			if mean_income < 50000:
				return "SELECT 'INSUFFICENT'"
			else:
				return "SELECT 'INSUFFICENT'"
		else:
			if mean_income < 50000:
				return "SELECT 'INSUFFICENT'"
			else:
				return "SELECT 'INSUFFICENT'"
	else:
		return "SELECT 'INSUFFICENT'"

# Test cases
print(get_income_statements(2016, 50000, 50000))
print(get_income_statements(2017, 50000, 50000))
print(get_income_statements(2018, 50000, 50000))
print(get_income_statements(2019, 50000, 50000))
print(get_income_statements(2020, 50000, 50000))
print(get_income_statements(2021, 50000, 50000))
print(get_income_statements(2022, 50000, 50000))
print(get_income_statements(2023, 50000, 50000))
print(get_income_statements(2024, 50000, 50000))
print(get_income_statements(2025, 50000, 50000))
print(get_income_statements(2026, 50000, 50000))
print(get_income_statements(2027, 50000, 50000))
print(get_income_statements(2028, 50000, 50000))
print(get_income_statements(2029, 50000, 50000))
print(get_income_statements(2030, 50000, 50000))
print(get_income_statements(2031, 50000, 50000))
print(get_income_statements(2032, 50000, 50000))
print(get_income_statements(2033, 50000, 50000))
print(get_income_statements(2034, 50000, 50000))
print(get_income_statements(2035, 50000, 50000))
print(get_income_statements(2036, 50000, 50000))
print(get_income_statements(2037, 50000, 50000))
print(get_income_statements(2038, 50000, 50000))
print(get_income_statements(2039, 50000, 50000))
print(get_income_statements(2040, 50000, 50000))
print(get_income_statements(2041, 50000, 50000))
print(get_income_statements(2042, 50000, 50000))
print(get_income_statements(2043, 50000, 50000))
print(get_income_statements(2044, 50000, 50000))
print(get_income_statements(2045, 50000, 50000))
print(get_income_statements(2046, 50000, 50000))
print(get_income_statements(2047, 50000, 50000))
print(get_income_statements(2048, 50000, 50000))
print(get_income_statements(2049, 50000, 50000))
print(get_income_statements(2050, 50000, 50000))
print(get_income_statements(2051, 50000, 50000))
print(get_income_statements(2052, 50000, 50000))
print(get_income_statements(2053, 50000, 50000))
print(get_income_statements(2054, 50000, 50000))
print(get_income_statements(2055, 50000, 50000))
print(get_income_statements(2056, 50000, 50000))
print(get_income_statements(2057, 50000, 50000))
print(get_income_statements(2058, 50000, 50000))
print(get_income_statements(2059, 50000, 50000))
print(get_income_statements(2060, 50000, 50000))
print(get_income_statements(2061, 50000, 50000))
print(get_income_statements(2062, 50000, 50000))
print(get_income_statements(2063, 50000, 50000))
print(get_income_statements(2064, 50000, 50000))
print(get_income_statements(2065, 50000, 50000))
print(get_income_statements(2066, 50000, 50000))
print(get_income_statements(2067, 50000, 50000))
print(get_income_statements(2068, 50000, 50000))
print(get_income_statements(2069, 50000, 50000))
print(get_income_statements(2070, 50000, 50000))
print(get_income_statements(2071, 50000, 50000))
print(get_income_statements(2072, 50000, 50000))
print(get_income_statements(2073, 50000, 50000))
print(get_income_statements(2074, 50000, 50000))
print(get_income_statements(2075, 50000, 50000))
print(get_income_statements(2076, 50000, 50000))
print(get_income_statements(2077, 50000, 50000))
print(get_income_statements(2078, 50000, 50000))
print(get_income_statements(2079, 50000, 50000))
print(get_income_statements(2080, 50000, 50000))
print(get_income_statements(2081, 50000, 50000))
print(get_income_statements(2082, 50000, 50000))
print(get_income_statements(2083, 50000, 50000))
print(get_income_statements(2084, 50000, 50000))
print(get_income_statements(2085, 50000, 50000))
print(get_income_statements(2086, 50000, 50000))
print(get_income_statements(2087, 50000, 50000))
print(get_income_statements(2088, 50000, 50000))
print(get_income_statements(2089, 50000, 50000))
print(get_income_statements(2090, 50000, 50000))
print(get_income_statements(2091, 50000, 50000))
print(get_income_statements(2092, 50000, 50000))
print(get_income_statements(2093, 50000, 50000))
print(get_income_statements(2094, 50000, 50000))
print(get_income_statements(2095, 50000, 50000))
print(get_income_statements(2096, 50000, 50000))
print(get_income_statements(2097, 50000, 50000))
print(get_income_statements(2098, 50000, 50000))
print(get

====================================================================================================

PROMPT 40:

Generate an SQL statement to answer a question.

Prompt: 
	Get percentage of households with and without mortgage for each year.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 40:

Generate an SQL statement to answer a question.

Prompt: 
	Get percentage of households with and without mortgage for each year.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

====================================================================================================

PROMPT 41:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get mean commute time and average housing value.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 41:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get mean commute time and average housing value.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	zipcode: a string, the zipcode to analyze
	commute: a string, the commute time to analyze
	housing: a string, the housing value to analyze

Output:
	A string, the SQL statement to answer the question.

'''

# Your code here

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT {0} FROM zipcodes WHERE zipcode = {1}"
# will create a SQL statement that looks like:
# "SELECT commute FROM zipcodes WHERE zipcode = zipcode"

# You can also use the .format() method to create SQL statements
# that are more complicated than the one above.
# For example,
# "SELECT {0} FROM zipcodes WHERE zipcode = {1} AND commute = {2} AND housing = {3}"
# will create a SQL statement that looks like:
# "SELECT housing FROM zipcodes WHERE zipcode = zipcode AND commute = commute AND housing = housing"

# You can also use the .format() method to create SQL statements
# that are more complicated than the one above.
# For example,
# "SELECT {0} FROM zipcodes WHERE zipcode = {1} AND commute = {2} AND housing = {3}"
# will create a SQL statement that looks like:
# "SELECT housing FROM zipcodes WHERE zipcode = zipcode AND commute = commute AND housing = housing"

# You can also use the .format() method to create SQL statements
# that are more complicated than the one above.
# For example,
# "SELECT {0} FROM zipcodes WHERE zipcode = {1} AND commute = {2} AND housing = {3}"
# will create a SQL statement that looks like:
# "SELECT housing FROM zipcodes WHERE zipcode = zipcode AND commute = commute AND housing = housing"

# You can also use the .format() method to create SQL statements
# that are more complicated than the one above.
# For example,
# "SELECT {0} FROM zipcodes WHERE zipcode = {1} AND commute = {2} AND housing = {3}"
# will create a SQL statement that looks like:
# "SELECT housing FROM zipcodes WHERE zipcode = zipcode AND commute = commute AND housing = housing"

# You can also use the .format() method to create SQL statements
# that are more complicated than the one above.
# For example,
# "SELECT {0} FROM zipcodes WHERE zipcode = {1} AND commute = {2} AND housing = {3}"
# will create a SQL statement that looks like:
# "SELECT housing FROM zipcodes WHERE zipcode = zipcode AND commute = commute AND housing = housing"

# You can also use the .format() method to create SQL statements
# that are more complicated than the one above.
# For example,
# "SELECT {0} FROM zipcodes WHERE zipcode = {1} AND commute = {2} AND housing = {3}"
# will create a SQL statement that looks like:
# "SELECT housing FROM zipcodes WHERE zipcode = zipcode AND commute = commute AND housing = housing"

# You can also use the .format() method to create SQL statements
# that are more complicated than the one above.
# For example,
# "SELECT {0} FROM zipcodes WHERE zipcode = {1} AND commute = {2} AND housing = {3}"
# will create a SQL statement that looks like:
# "SELECT housing FROM zipcodes WHERE zipcode = zipcode AND commute = commute AND housing = housing"

# You can also use the .format() method to create SQL statements
# that are more complicated than the one above.
# For example,
# "SELECT {0} FROM zipcodes WHERE zipcode = {1} AND commute = {2} AND housing = {3}"
# will create a SQL statement that looks like:
# "SELECT housing FROM zipcodes WHERE zipcode = zipcode AND commute = commute AND housing = housing"

# You can also use the .format() method to create SQL statements
# that are more complicated than the one above.
# For example,
# "SELECT {0} FROM zipcodes WHERE zipcode = {1} AND commute = {2} AND housing = {3}"
# will create a SQL statement that looks like:
# "SELECT housing FROM zipcodes WHERE zipcode = zipcode AND commute = commute AND housing = housing"

# You can also use the .format() method to create SQL statements
# that are more complicated than the one above.
# For example,
# "SELECT {0} FROM zipcodes WHERE zipcode = {1} AND commute = {2} AND housing = {3}"
# will create a SQL statement that looks like:
# "SELECT housing FROM zipcodes WHERE zipcode = zipcode AND commute = commute AND housing = housing"

# You can also use the .format() method to create SQL statements
# that are more complicated than the one above.
# For example,
# "SELECT {0} FROM zipcodes WHERE zipcode = {1} AND commute = {2} AND housing = {3}"
# will create a SQL statement that looks like:
# "SELECT housing FROM zipcodes WHERE zipcode = zipcode AND commute = commute AND housing = housing"

# You can also use the .format() method to create SQL statements
# that are more complicated than the one above.
# For example,
# "SELECT {0} FROM zipcodes WHERE zipcode = {1} AND commute = {2} AND housing = {3}"
# will create a SQL statement that looks like:
# "SELECT housing FROM zipcodes WHERE zipcode = zipcode AND commute = commute AND housing = housing"

# You can also use the .format() method to create SQL statements
# that are more complicated than the one above.
# For example,
# "SELECT {0} FROM zipcodes WHERE zipcode = {1} AND commute = {2} AND housing = {3}"
# will create a SQL statement that looks like:
# "SELECT housing FROM zipcodes WHERE zipcode = zipcode AND commute = commute AND housing = housing"

# You can also use the .format() method to create SQL statements
# that are more complicated than the one above.
# For example,
# "SELECT {0} FROM zipcodes WHERE zipcode = {1} AND commute = {2} AND housing = {3}"
# will create a SQL statement that looks like:
# "SELECT housing FROM zipcodes WHERE zipcode = zipcode AND commute = commute AND housing = housing"

# You can also use the .format() method to create SQL statements
# that are more complicated than the one above.
# For example,
# "SELECT {0} FROM zipcodes WHERE zipcode = {1} AND commute = {2} AND housing = {3}"
# will create a SQL statement that looks like:
# "SELECT housing FROM zipcodes WHERE zipcode = zipcode AND commute = commute AND housing = housing"

# You can also use the .format() method to create SQL statements
# that are more complicated than the one above.
# For example,
# "SELECT {0} FROM zipcodes WHERE zipcode = {1} AND commute = {2} AND housing = {3}"
# will create a SQL statement that looks like:
# "SELECT housing FROM zipcodes WHERE zipcode = zipcode AND commute = commute AND housing = housing"

# You can also use the .format() method to create SQL statements
# that are more complicated than the one above.
# For example,
# "SELECT {0} FROM zipcodes WHERE zipcode = {1} AND commute = {2} AND housing = {3}"
# will create a SQL statement that looks like:
# "SELECT housing FROM zipcodes WHERE zipcode = zipcode AND commute = commute AND housing = housing"

# You can also use the .format() method to create SQL statements
# that are more complicated than the one above.
# For example,
# "SELECT {0} FROM zipcodes WHERE zipcode = {1} AND commute = {2} AND housing = {3}"
# will create a SQL statement that looks like:
# "SELECT housing FROM zipcodes WHERE zipcode = zipcode AND commute = commute AND housing = housing"

# You can also use the .format() method to create SQL statements
# that are more complicated than the one above.
# For example,
# "SELECT {0} FROM zipcodes WHERE zipcode = {1} AND commute = {2} AND housing = {3}"
# will create a SQL statement that looks like:
# "SELECT housing FROM zipcodes WHERE zipcode = zipcode AND commute = commute AND housing = housing"

# You can also use the .format() method to create SQL statements
# that are more complicated than the one above.
# For example,
# "SELECT {0} FROM zipcodes WHERE zip

====================================================================================================

PROMPT 42:

Generate an SQL statement to answer a question.

Prompt: 
	Get mean commute time by zipcode in the year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 42:

Generate an SQL statement to answer a question.

Prompt: 
	Get mean commute time by zipcode in the year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd

# Get the data
df = pd.read_csv('data/commute_data.csv')

# Get the mean commute time
df_2022 = df[df['year'] == 2022]
df_2022_mean = df_2022.groupby(['zipcode'])['commute_time'].mean()

# Generate the SQL statement
sql_statement = "SELECT zipcode, AVG(commute_time) AS average_commute_time FROM commute_data WHERE year = 2022 GROUP BY zipcode"

# Print the SQL statement
print(sql_statement)

# Print the mean commute time
print(df_2022_mean)


====================================================================================================

PROMPT 43:

Generate an SQL statement to answer a question.

Prompt: 
	Get average housing rent and mean household income across all zipcodes for the year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 43:

Generate an SQL statement to answer a question.

Prompt: 
	Get average housing rent and mean household income across all zipcodes for the year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd
import numpy as np

# Get the data
df = pd.read_csv('data/housing.csv')

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022

# Your code here

# Get the average housing rent and mean household income
# for the year 2022


====================================================================================================

PROMPT 44:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get median household income.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 44:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get median household income.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the required packages
import pandas as pd
import numpy as np

# Read the data
df = pd.read_csv('data/zillow/zillow_data.csv')

# Get the median income for each zipcode in 2022
df_2022 = df[df['Year'] == 2022]
df_2022 = df_2022.groupby('Zipcode')['Median Household Income'].median()

# Get the median income for each zipcode in 2020
df_2020 = df[df['Year'] == 2020]
df_2020 = df_2020.groupby('Zipcode')['Median Household Income'].median()

# Get the difference between 2020 and 2022
df_diff = df_2020.subtract(df_2022)

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zipcodes that are missing data
df_diff = df_diff[df_diff.isnull()]

# Get the zip

====================================================================================================

PROMPT 45:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get change in averaged median household income from 2017 to 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 45:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get change in averaged median household income from 2017 to 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the required packages
import pandas as pd
import numpy as np

# Read in the data
df = pd.read_csv('data/median_household_income.csv')

# Create a list of zipcodes
zipcodes = list(df['zipcode'])

# Create a list of years
years = list(df['year'])

# Create a list of change in median household income
change = list(df['change'])

# Create a list of change in median household income
change_percent = list(df['change_percent'])

# Create a list of change in median household income
change_percent_2 = list(df['change_percent_2'])

# Create a list of change in median household income
change_percent_3 = list(df['change_percent_3'])

# Create a list of change in median household income
change_percent_4 = list(df['change_percent_4'])

# Create a list of change in median household income
change_percent_5 = list(df['change_percent_5'])

# Create a list of change in median household income
change_percent_6 = list(df['change_percent_6'])

# Create a list of change in median household income
change_percent_7 = list(df['change_percent_7'])

# Create a list of change in median household income
change_percent_8 = list(df['change_percent_8'])

# Create a list of change in median household income
change_percent_9 = list(df['change_percent_9'])

# Create a list of change in median household income
change_percent_10 = list(df['change_percent_10'])

# Create a list of change in median household income
change_percent_11 = list(df['change_percent_11'])

# Create a list of change in median household income
change_percent_12 = list(df['change_percent_12'])

# Create a list of change in median household income
change_percent_13 = list(df['change_percent_13'])

# Create a list of change in median household income
change_percent_14 = list(df['change_percent_14'])

# Create a list of change in median household income
change_percent_15 = list(df['change_percent_15'])

# Create a list of change in median household income
change_percent_16 = list(df['change_percent_16'])

# Create a list of change in median household income
change_percent_17 = list(df['change_percent_17'])

# Create a list of change in median household income
change_percent_18 = list(df['change_percent_18'])

# Create a list of change in median household income
change_percent_19 = list(df['change_percent_19'])

# Create a list of change in median household income
change_percent_20 = list(df['change_percent_20'])

# Create a list of change in median household income
change_percent_21 = list(df['change_percent_21'])

# Create a list of change in median household income
change_percent_22 = list(df['change_percent_22'])

# Create a list of change in median household income
change_percent_23 = list(df['change_percent_23'])

# Create a list of change in median household income
change_percent_24 = list(df['change_percent_24'])

# Create a list of change in median household income
change_percent_25 = list(df['change_percent_25'])

# Create a list of change in median household income
change_percent_26 = list(df['change_percent_26'])

# Create a list of change in median household income
change_percent_27 = list(df['change_percent_27'])

# Create a list of change in median household income
change_percent_28 = list(df['change_percent_28'])

# Create a list of change in median household income
change_percent_29 = list(df['change_percent_29'])

# Create a list of change in median household income
change_percent_30 = list(df['change_percent_30'])

# Create a list of change in median household income
change_percent_31 = list(df['change_percent_31'])

# Create a list of change in median household income
change_percent_32 = list(df['change_percent_32'])

# Create a list of change in median household income
change_percent_33 = list(df['change_percent_33'])

# Create a list of change in median household income
change_percent_34 = list(df['change_percent_34'])

# Create a list of change in median household income
change_percent_35 = list(df['change_percent_35'])

# Create a list of change in median household income
change_percent_36 = list(df['change_percent_36'])

# Create a list of change in median household income
change_percent_37 = list(df['change_percent_37'])

# Create a list of change in median household income
change_percent_38 = list(df['change_percent_38'])

# Create a list of change in median household income
change_percent_39 = list(df['change_percent_39'])

# Create a list of change in median household income
change_percent_40 = list(df['change_percent_40'])

# Create a list of change in median household income
change_percent_41 = list(df['change_percent_41'])

# Create a list of change in median household income
change_percent_42 = list(df['change_percent_42'])

# Create a list of change in median household income
change_percent_43 = list(df['change_percent_43'])

# Create a list of change in median household income
change_percent_44 = list(df['change_percent_44'])

# Create a list of change in median household income
change_percent_45 = list(df['change_percent_45'])

# Create a list of change in median household income
change_percent_46 = list(df['change_percent_46'])

# Create a list of change in median household income
change_percent_47 = list(df['change_percent_47'])

# Create a list of change in median household income
change_percent_48 = list(df['change_percent_48'])

# Create a list of change in median household income
change_percent_49 = list(df['change_percent_49'])

# Create a list of change in median household income
change_percent_50 = list(df['change_percent_50'])

# Create a list of change in median household income
change_percent_51 = list(df['change_percent_51'])

# Create a list of change in median household income
change_percent_52 = list(df['change_percent_52'])

# Create a list of change in median household income
change_percent_53 = list(df['change_percent_53'])

# Create a list of change in median household income
change_percent_54 = list(df['change_percent_54'])

# Create a list of change in median household income
change_percent_55 = list(df['change_percent_55'])

# Create a list of change in median household income
change_percent_56 = list(df['change_percent_56'])

# Create a list of change in median household income
change_percent_57 = list(df['change_percent_57'])

# Create a list of change in median household income
change_percent_58 = list(df['change_percent_58'])

# Create a list of change in median household income
change_percent_59 = list(df['change_percent_59'])

# Create a list of change in median household income
change_percent_60 = list(df['change_percent_60'])

# Create a list of change in median household income
change_percent_61 = list(df['change_percent_61'])

# Create a list of change in median household income
change_percent_62 = list(df['change_percent_62'])

# Create a list of change in median household income


====================================================================================================

PROMPT 46:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, get median and mean household income over all the years.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 46:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, get median and mean household income over all the years.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your SQL query statement below

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zipcode
# 	ORDER BY income
# )
# GROUP BY zipcode
# ORDER BY AVG(income)
# LIMIT 1;

# SELECT AVG(income)
# FROM (
# 	SELECT income, zipcode
# 	FROM income_data
# 	GROUP BY zip

====================================================================================================

PROMPT 47:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get percentage of units with mortgage and median household income.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 47:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get percentage of units with mortgage and median household income.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	zipcode: a 5-digit zipcode
	income: a number
	mortgage: a number

Output:
	SQL statement

"""

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

====================================================================================================

PROMPT 48:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in the year 2022, get average housing value and median household income.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 48:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in the year 2022, get average housing value and median household income.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	zipcode: a string of the zipcode
	year: a string of the year

Output:
	SQL statement: a string of the SQL statement

'''

# Import the necessary libraries
import pandas as pd

# Create a function to generate the SQL statement
def generate_sql(zipcode, year):
	# Create a variable to store the SQL statement
	sql = ''
	# Add the necessary SQL statement
	sql = "SELECT AVG(median_house_value) as avg_house_value, AVG(median_house_income) as avg_house_income FROM housing WHERE zipcode = '" + zipcode + "' AND year = " + year + ";"
	# Return the SQL statement
	return sql

# Generate the SQL statement
sql = generate_sql('92601', '2022')

# Print the SQL statement
print(sql)


====================================================================================================

PROMPT 49:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, find the change in percentage of population with no health insurance from year 2017 to 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 49:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, find the change in percentage of population with no health insurance from year 2017 to 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd
import numpy as np

# Read in the data
df = pd.read_csv("data/GA_health_insurance.csv")

# Create a list of the zipcodes
zipcodes = list(df['zipcode'])

# Create a list of the year columns
years = list(df.columns[1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage = list(df.iloc[0,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_2 = list(df.iloc[1,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_3 = list(df.iloc[2,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_4 = list(df.iloc[3,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_5 = list(df.iloc[4,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_6 = list(df.iloc[5,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_7 = list(df.iloc[6,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_8 = list(df.iloc[7,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_9 = list(df.iloc[8,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_10 = list(df.iloc[9,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_11 = list(df.iloc[10,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_12 = list(df.iloc[11,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_13 = list(df.iloc[12,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_14 = list(df.iloc[13,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_15 = list(df.iloc[14,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_16 = list(df.iloc[15,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_17 = list(df.iloc[16,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_18 = list(df.iloc[17,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_19 = list(df.iloc[18,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_20 = list(df.iloc[19,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_21 = list(df.iloc[20,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_22 = list(df.iloc[21,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_23 = list(df.iloc[22,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_24 = list(df.iloc[23,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_25 = list(df.iloc[24,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_26 = list(df.iloc[25,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_27 = list(df.iloc[26,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_28 = list(df.iloc[27,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_29 = list(df.iloc[28,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_30 = list(df.iloc[29,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_31 = list(df.iloc[30,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_32 = list(df.iloc[31,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_33 = list(df.iloc[32,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_34 = list(df.iloc[33,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_35 = list(df.iloc[34,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_36 = list(df.iloc[35,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_37 = list(df.iloc[36,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_38 = list(df.iloc[37,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_39 = list(df.iloc[38,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_40 = list(df.iloc[39,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_41 = list(df.iloc[40,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_42 = list(df.iloc[41,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_43 = list(df.iloc[42,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_44 = list(df.iloc[43,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_45 = list(df.iloc[44,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_46 = list(df.iloc[45,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_47 = list(df.iloc[46,1:])

# Create a list of the change in percentage of population with no health insurance
change_in_percentage_48 = list(df.iloc[47,1:])

# Create a list of the change

====================================================================================================

PROMPT 50:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 50:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd
import numpy as np

# Read in the data
df = pd.read_csv('data/zip_data.csv')

# Get the year
year = 2022

# Get the population
population = df.loc[df['year'] == year, 'population'].values[0]

# Get the number of people with no health insurance
no_insurance = df.loc[df['year'] == year, 'no_insurance'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.

====================================================================================================

PROMPT 51:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average housing price.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 51:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average housing price.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	zipcode: string
	year: int

Output:
	SQL statement: string
"""

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your

====================================================================================================

PROMPT 52:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the change in percentage of population commuting via public transport from year 2017 to 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 52:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the change in percentage of population commuting via public transport from year 2017 to 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd
import numpy as np

# Read the data
data = pd.read_csv('data/transit_data.csv')

# Get the year and the change in percentage of population commuting via public transport
year = data['year']
change = data['change']

# Get the zipcode
zipcode = data['zipcode']

# Get the change in percentage of population commuting via public transport
change_pct = data['change_pct']

# Get the year
year_pct = data['year_pct']

# Get the population
population = data['population']

# Get the change in population
change_pop = data['change_pop']

# Get the year
year_pop = data['year_pop']

# Get the change in population
change_pop_pct = data['change_pop_pct']

# Get the year
year_pop_pct = data['year_pop_pct']

# Get the change in population
change_pop_pct_pct = data['change_pop_pct_pct']

# Get the year
year_pop_pct_pct = data['year_pop_pct_pct']

# Get the change in population
change_pop_pct_pct_pct = data['change_pop_pct_pct_pct']

# Get the year
year_pop_pct_pct_pct = data['year_pop_pct_pct_pct']

# Get the change in population
change_pop_pct_pct_pct_pct = data['change_pop_pct_pct_pct_pct']

# Get the year
year_pop_pct_pct_pct_pct = data['year_pop_pct_pct_pct_pct']

# Get the change in population
change_pop_pct_pct_pct_pct_pct = data['change_pop_pct_pct_pct_pct_pct']

# Get the year
year_pop_pct_pct_pct_pct_pct = data['year_pop_pct_pct_pct_pct_pct']

# Get the change in population
change_pop_pct_pct_pct_pct_pct_pct = data['change_pop_pct_pct_pct_pct_pct_pct']

# Get the year
year_pop_pct_pct_pct_pct_pct_pct = data['year_pop_pct_pct_pct_pct_pct_pct']

# Get the change in population
change_pop_pct_pct_pct_pct_pct_pct_pct = data['change_pop_pct_pct_pct_pct_pct_pct_pct']

# Get the year
year_pop_pct_pct_pct_pct_pct_pct_pct = data['year_pop_pct_pct_pct_pct_pct_pct_pct']

# Get the change in population
change_pop_pct_pct_pct_pct_pct_pct_pct_pct = data['change_pop_pct_pct_pct_pct_pct_pct_pct_pct']

# Get the year
year_pop_pct_pct_pct_pct_pct_pct_pct_pct = data['year_pop_pct_pct_pct_pct_pct_pct_pct_pct']

# Get the change in population
change_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct = data['change_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct']

# Get the year
year_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct = data['year_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct']

# Get the change in population
change_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct = data['change_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct']

# Get the year
year_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct = data['year_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct']

# Get the change in population
change_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct = data['change_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct']

# Get the year
year_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct = data['year_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct']

# Get the change in population
change_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct = data['change_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct']

# Get the year
year_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct = data['year_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct']

# Get the change in population
change_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct = data['change_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct']

# Get the year
year_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct = data['year_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct']

# Get the change in population
change_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct = data['change_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct']

# Get the year
year_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct = data['year_pop_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct_pct']

# Get the change in population
change_pop_pct_pct_pct

====================================================================================================

PROMPT 53:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the count of non-US citizens and foreign born population

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 53:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the count of non-US citizens and foreign born population

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- A list of zipcodes
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A list of foreign countries
	- A list of states
	- A list of counties
	- A list of cities
	- A

====================================================================================================

PROMPT 54:

Generate an SQL statement to answer a question.

Prompt: 
	Get the average of each ethnic group (black, white, asian) by year.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 54:

Generate an SQL statement to answer a question.

Prompt: 
	Get the average of each ethnic group (black, white, asian) by year.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	Input:
		What is the average number of black people in the population by year?
	Output:
		SELECT AVG(black) FROM population_by_year;

"""

# Get the average of each ethnic group (black, white, asian) by year.
# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Example:
#	Input:
#		What is the average number of black people in the population by year?
#	Output:
#		SELECT AVG(black) FROM population_by_year;

# Get the average of each ethnic group (black, white, asian) by year.
# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Example:
#	Input:
#		What is the average number of black people in the population by year?
#	Output:
#		SELECT AVG(black) FROM population_by_year;

# Get the average of each ethnic group (black, white, asian) by year.
# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Example:
#	Input:
#		What is the average number of black people in the population by year?
#	Output:
#		SELECT AVG(black) FROM population_by_year;

# Get the average of each ethnic group (black, white, asian) by year.
# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Example:
#	Input:
#		What is the average number of black people in the population by year?
#	Output:
#		SELECT AVG(black) FROM population_by_year;

# Get the average of each ethnic group (black, white, asian) by year.
# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Example:
#	Input:
#		What is the average number of black people in the population by year?
#	Output:
#		SELECT AVG(black) FROM population_by_year;

# Get the average of each ethnic group (black, white, asian) by year.
# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Example:
#	Input:
#		What is the average number of black people in the population by year?
#	Output:
#		SELECT AVG(black) FROM population_by_year;

# Get the average of each ethnic group (black, white, asian) by year.
# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Example:
#	Input:
#		What is the average number of black people in the population by year?
#	Output:
#		SELECT AVG(black) FROM population_by_year;

# Get the average of each ethnic group (black, white, asian) by year.
# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Example:
#	Input:
#		What is the average number of black people in the population by year?
#	Output:
#		SELECT AVG(black) FROM population_by_year;

# Get the average of each ethnic group (black, white, asian) by year.
# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Example:
#	Input:
#		What is the average number of black people in the population by year?
#	Output:
#		SELECT AVG(black) FROM population_by_year;

# Get the average of each ethnic group (black, white, asian) by year.
# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Example:
#	Input:
#		What is the average number of black people in the population by year?
#	Output:
#		SELECT AVG(black) FROM population_by_year;

# Get the average of each ethnic group (black, white, asian) by year.
# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Example:
#	Input:
#		What is the average number of black people in the population by year?
#	Output:
#		SELECT AVG(black) FROM population_by_year;

# Get the average of each ethnic group (black, white, asian) by year.
# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Example:
#	Input:
#		What is the average number of black people in the population by year?
#	Output:
#		SELECT AVG(black) FROM population_by_year;

# Get the average of each ethnic group (black, white, asian) by year.
# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Example:
#	Input:
#		What is the average number of black people in the population by year?
#	Output:
#		SELECT AVG(black) FROM population_by_year;

# Get the average of each ethnic group (black, white, asian) by year.
# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Example:
#	Input:
#		What is the average number of black people in the population by year?
#	Output:
#		SELECT AVG(black) FROM population_by_year;

# Get the average of each ethnic group (black, white, asian) by year.
# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Example:
#	Input:
#		What is the average number of black people in the population by year?
#	Output:
#		SELECT AVG(black) FROM population_by_year;

# Get the average of each ethnic group (black, white, asian) by year.
# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Example:
#	Input:
#		What is the average number of black people in the population by year?
#	Output:
#		SELECT AVG(black) FROM population_by_year;

# Get the average of each ethnic group (black, white, asian) by year.
# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Example:
#	Input:
#		What is the average number of black people in the population by year?
#	Output:
#		SELECT AVG(black) FROM population_by_year;

# Get the average of each ethnic group (black, white, asian) by year.
# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Example:
#	Input:
#		What is the average number of black people in the population by year?
#	Output:
#		SELECT AVG(black) FROM population_by_year;

# Get the average of each ethnic group (black, white, asian) by year.
# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Example:
#	Input:
#		What is the average number of black people in the population by year?
#	Output:
#		SELECT AVG(black) FROM population_by_year;

# Get the average of each ethnic group (black, white, asian) by year.
# Note, only respond with a single most accurate SQL statement.


====================================================================================================

PROMPT 55:

Generate an SQL statement to answer a question.

Prompt: 
	Get the percentage of types of education attained by population aged 25 and above for each year.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 55:

Generate an SQL statement to answer a question.

Prompt: 
	Get the percentage of types of education attained by population aged 25 and above for each year.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Get the percentage of types of education attained by population aged 25 and above for each year.

# Get the total population for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above for each year.

# Get the total population aged 25 and above

====================================================================================================

PROMPT 56:

Generate an SQL statement to answer a question.

Prompt: 
	In year 2022, for each zipcode in Georgia, get the percentage of population with associate and bachelors degree or higher and average housing price.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 56:

Generate an SQL statement to answer a question.

Prompt: 
	In year 2022, for each zipcode in Georgia, get the percentage of population with associate and bachelors degree or higher and average housing price.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- zipcode: a string of 5 digits
	- population: a string of a number
	- housing: a string of a number
	- degree: a string of a number

Output:
	- SQL statement: a string of SQL statement
	- INSUFFICENT: if the input is not sufficient

Sample Input:
	zipcode: "12345"
	population: "100"
	housing: "100"
	degree: "100"

Sample Output:
	"SELECT CAST(100 AS INTEGER) / CAST(100 AS INTEGER) * CAST(100 AS INTEGER) AS AVG_HOUSING_PRICE, CAST(100 AS INTEGER) / CAST(100 AS INTEGER) * CAST(100 AS INTEGER) AS AVG_DEGREE_RATE FROM zipcode WHERE zipcode.zipcode = '12345'"

Sample Input:
	zipcode: "12345"
	population: "100"
	housing: "100"
	degree: "100"

Sample Output:
	"INSUFFICENT"

"""

# Write your MySQL query statement below

SELECT CAST(100 AS INTEGER) / CAST(100 AS INTEGER) * CAST(100 AS INTEGER) AS AVG_HOUSING_PRICE, CAST(100 AS INTEGER) / CAST(100 AS INTEGER) * CAST(100 AS INTEGER) AS AVG_DEGREE_RATE FROM zipcode WHERE zipcode.zipcode = '12345'


====================================================================================================

PROMPT 57:

Generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  price and percentage of houses having broadband subscription.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 57:

Generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  price and percentage of houses having broadband subscription.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the required packages
import pandas as pd

# Read the data
df = pd.read_csv('data/housing_data.csv')

# Get the year column
year_col = df['YEAR']

# Get the zipcode column
zip_col = df['ZIPCODE']

# Get the housing price column
price_col = df['PRICE']

# Get the broadband column
broadband_col = df['BROADBAND']

# Get the number of bedrooms column
bedrooms_col = df['BEDROOMS']

# Get the number of bathrooms column
bathrooms_col = df['BATHS']

# Get the number of floors column
floors_col = df['FLOORS']

# Get the number of units column
units_col = df['UNITS']

# Get the number of bedrooms per unit column
bedrooms_per_unit_col = df['BEDROOMS'] / df['UNITS']

# Get the number of bathrooms per unit column
bathrooms_per_unit_col = df['BATHS'] / df['UNITS']

# Get the number of floors per unit column
floors_per_unit_col = df['FLOORS'] / df['UNITS']

# Get the number of units per unit column
units_per_unit_col = df['UNITS'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
households_per_unit_col = df['HOMES'] / df['UNITS']

# Get the number of households per unit column
household

====================================================================================================

PROMPT 58:

Generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 58:

Generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the required packages
import pandas as pd
import numpy as np

# Read the data
data = pd.read_csv('data/housing.csv')

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

# Get the average housing rent
avg_rent = data['Sale Price']

# Get the percentage of houses having broadband subscription
broadband = data['Broadband']

# Get the year column
year = data['Yr Sold']

# Get the zipcode column
zipcode = data['Zipcode']

====================================================================================================

PROMPT 59:

Generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode, get percentage of households with a computer and percentage of housholds with broadband subscription.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 59:

Generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode, get percentage of households with a computer and percentage of housholds with broadband subscription.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd
import numpy as np

# Read in the data
df = pd.read_csv('data/household_computer_broadband.csv')

# Get the year, zipcode, and broadband subscription
df_sub = df[['year', 'zipcode', 'broadband']]

# Get the number of households and the number of households with a computer
df_sub_count = df_sub.groupby(['year', 'zipcode'])['year'].count().reset_index()
df_sub_count.rename(columns={'year':'household_count'}, inplace=True)

# Get the number of households and the number of households with a computer
df_sub_computer = df_sub.groupby(['year', 'zipcode'])['computer'].sum().reset_index()
df_sub_computer.rename(columns={'computer':'household_computer'}, inplace=True)

# Merge the two dataframes
df_sub_merge = pd.merge(df_sub_count, df_sub_computer, on=['year', 'zipcode'])

# Get the percentage of households with a computer
df_sub_merge['household_computer_percentage'] = df_sub_merge['household_computer']/df_sub_merge['household_count']

# Get the percentage of households with broadband
df_sub_merge['household_broadband_percentage'] = df_sub_merge['broadband']/df_sub_merge['household_count']

# Get the average broadband subscription
df_sub_merge['avg_broadband_subscription'] = df_sub_merge['broadband']/df_sub_merge['household_count']

# Get the average computer subscription
df_sub_merge['avg_computer_subscription'] = df_sub_merge['household_computer']/df_sub_merge['household_count']

# Get the average broadband subscription
df_sub_merge['avg_broadband_subscription'] = df_sub_merge['broadband']/df_sub_merge['household_count']

# Get the average computer subscription
df_sub_merge['avg_computer_subscription'] = df_sub_merge['household_computer']/df_sub_merge['household_count']

# Get the average broadband subscription
df_sub_merge['avg_broadband_subscription'] = df_sub_merge['broadband']/df_sub_merge['household_count']

# Get the average computer subscription
df_sub_merge['avg_computer_subscription'] = df_sub_merge['household_computer']/df_sub_merge['household_count']

# Get the average broadband subscription
df_sub_merge['avg_broadband_subscription'] = df_sub_merge['broadband']/df_sub_merge['household_count']

# Get the average computer subscription
df_sub_merge['avg_computer_subscription'] = df_sub_merge['household_computer']/df_sub_merge['household_count']

# Get the average broadband subscription
df_sub_merge['avg_broadband_subscription'] = df_sub_merge['broadband']/df_sub_merge['household_count']

# Get the average computer subscription
df_sub_merge['avg_computer_subscription'] = df_sub_merge['household_computer']/df_sub_merge['household_count']

# Get the average broadband subscription
df_sub_merge['avg_broadband_subscription'] = df_sub_merge['broadband']/df_sub_merge['household_count']

# Get the average computer subscription
df_sub_merge['avg_computer_subscription'] = df_sub_merge['household_computer']/df_sub_merge['household_count']

# Get the average broadband subscription
df_sub_merge['avg_broadband_subscription'] = df_sub_merge['broadband']/df_sub_merge['household_count']

# Get the average computer subscription
df_sub_merge['avg_computer_subscription'] = df_sub_merge['household_computer']/df_sub_merge['household_count']

# Get the average broadband subscription
df_sub_merge['avg_broadband_subscription'] = df_sub_merge['broadband']/df_sub_merge['household_count']

# Get the average computer subscription
df_sub_merge['avg_computer_subscription'] = df_sub_merge['household_computer']/df_sub_merge['household_count']

# Get the average broadband subscription
df_sub_merge['avg_broadband_subscription'] = df_sub_merge['broadband']/df_sub_merge['household_count']

# Get the average computer subscription
df_sub_merge['avg_computer_subscription'] = df_sub_merge['household_computer']/df_sub_merge['household_count']

# Get the average broadband subscription
df_sub_merge['avg_broadband_subscription'] = df_sub_merge['broadband']/df_sub_merge['household_count']

# Get the average computer subscription
df_sub_merge['avg_computer_subscription'] = df_sub_merge['household_computer']/df_sub_merge['household_count']

# Get the average broadband subscription
df_sub_merge['avg_broadband_subscription'] = df_sub_merge['broadband']/df_sub_merge['household_count']

# Get the average computer subscription
df_sub_merge['avg_computer_subscription'] = df_sub_merge['household_computer']/df_sub_merge['household_count']

# Get the average broadband subscription
df_sub_merge['avg_broadband_subscription'] = df_sub_merge['broadband']/df_sub_merge['household_count']

# Get the average computer subscription
df_sub_merge['avg_computer_subscription'] = df_sub_merge['household_computer']/df_sub_merge['household_count']

# Get the average broadband subscription
df_sub_merge['avg_broadband_subscription'] = df_sub_merge['broadband']/df_sub_merge['household_count']

# Get the average computer subscription
df_sub_merge['avg_computer_subscription'] = df_sub_merge['household_computer']/df_sub_merge['household_count']

# Get the average broadband subscription
df_sub_merge['avg_broadband_subscription'] = df_sub_merge['broadband']/df_sub_merge['household_count']

# Get the average computer subscription
df_sub_merge['avg_computer_subscription'] = df_sub_merge['household_computer']/df_sub_merge['household_count']

# Get the average broadband subscription
df_sub_merge['avg_broadband_subscription'] = df_sub_merge['broadband']/df_sub_merge['household_count']

# Get the average computer subscription
df_sub_merge['avg_computer_subscription'] = df_sub_merge['household_computer']/df_sub_merge['household_count']

# Get the average broadband subscription
df_sub_merge['avg_broadband_subscription'] = df_sub_merge['broadband']/df_sub_merge['household_count']

# Get the average computer subscription
df_sub_merge['avg_computer_subscription'] = df_sub_merge['household_computer']/df_sub_merge['household_count']

#

====================================================================================================

