PROMPT 1:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, give the change in average house rent from 2019 to 2022, i.e., from pre-COVID to post-COVID period.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 1:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, give the change in average house rent from 2019 to 2022, i.e., from pre-COVID to post-COVID period.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "housing_rent",
    user = "postgres",
    password = "postgres"
)

# create a cursor
cur = conn.cursor()

# create a dataframe
df = pd.read_sql_query("SELECT * FROM housing_rent", conn)

# create a list of zipcodes
zipcodes = df['zipcode'].unique()

# create a list of years
years = df['year'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique()

# create a list of months
months = df['month'].unique()

# create a list of days
days = df['day'].unique

====================================================================================================

PROMPT 2:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 2:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to database
conn = psycopg2.connect(host="localhost", port=5432, database="postgres", user="postgres", password="postgres")

# create a cursor
cur = conn.cursor()

# create a function to get the year-on-year change in GRAPI
def get_year_on_year_change(zipcode, income_percent_min, income_percent_max):
	# get the current year
	current_year = 2020
	# get the year before the current year
	year_before_current_year = current_year - 1
	# get the current year's gross rent as a percentage of household income
	current_year_gross_rent_percent = cur.execute("SELECT gross_rent_percent FROM housing_gross_rent_percent WHERE year = %s AND zipcode = %s AND income_percent_min = %s AND income_percent_max = %s", (current_year, zipcode, income_percent_min, income_percent_max))
	# get the year before the current year's gross rent as a percentage of household income
	year_before_current_year_gross_rent_percent = cur.execute("SELECT gross_rent_percent FROM housing_gross_rent_percent WHERE year = %s AND zipcode = %s AND income_percent_min = %s AND income_percent_max = %s", (year_before_current_year, zipcode, income_percent_min, income_percent_max))
	# get the year-on-year change in GRAPI
	year_on_year_change = current_year_gross_rent_percent - year_before_current_year_gross_rent_percent
	# return the year-on-year change in GRAPI
	return year_on_year_change

# get the year-on-year change in GRAPI
year_on_year_change = get_year_on_year_change(zipcode=92601, income_percent_min=0, income_percent_max=0)

# print the year-on-year change in GRAPI
print(year_on_year_change)

# close the cursor
cur.close()

# close the connection
conn.close()

====================================================================================================

PROMPT 3:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in SMOCAPI, where SMOCAPI is selected monthly home-ownership costs as a percent of household income

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 3:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in SMOCAPI, where SMOCAPI is selected monthly home-ownership costs as a percent of household income

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd
import numpy as np
import re

# connect to database
conn = psycopg2.connect(
	host = "localhost",
	port = "5432",
	database = "postgres",
	user = "postgres",
	password = "postgres"
)

# create cursor
cur = conn.cursor()

# create query
cur.execute("""
	SELECT 
		year,
		id,
		zipcode,
		number_of_units,
		income_percent_min,
		income_percent_max
	FROM
		household_income_percent_with_mortgage
	ORDER BY
		year,
		id,
		zipcode,
		number_of_units,
		income_percent_min,
		income_percent_max;
""")

# get results
rows = cur.fetchall()

# close connection
cur.close()
conn.close()

# create dataframe
df = pd.DataFrame(rows, columns = ["year", "id", "zipcode", "number_of_units", "income_percent_min", "income_percent_max"])

# create dataframe
df_year_on_year_change = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_min"].diff()

# create dataframe
df_year_on_year_change_max = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_max"].diff()

# create dataframe
df_year_on_year_change_min = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_min"].diff()

# create dataframe
df_year_on_year_change_max_min = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_max"].diff()

# create dataframe
df_year_on_year_change_min_max = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_min"].diff()

# create dataframe
df_year_on_year_change_max_min_max = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_max"].diff()

# create dataframe
df_year_on_year_change_min_max_min = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_min"].diff()

# create dataframe
df_year_on_year_change_max_min_min = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_max"].diff()

# create dataframe
df_year_on_year_change_min_max_min_max = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_min"].diff()

# create dataframe
df_year_on_year_change_max_min_min_min = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_max"].diff()

# create dataframe
df_year_on_year_change_min_max_min_min_max = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_min"].diff()

# create dataframe
df_year_on_year_change_max_min_min_min_min = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_max"].diff()

# create dataframe
df_year_on_year_change_min_max_min_min_min_max = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_min"].diff()

# create dataframe
df_year_on_year_change_max_min_min_min_min_min = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_max"].diff()

# create dataframe
df_year_on_year_change_min_max_min_min_min_min_max = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_min"].diff()

# create dataframe
df_year_on_year_change_max_min_min_min_min_min_min = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_max"].diff()

# create dataframe
df_year_on_year_change_min_max_min_min_min_min_min_max = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_min"].diff()

# create dataframe
df_year_on_year_change_max_min_min_min_min_min_min_min = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_max"].diff()

# create dataframe
df_year_on_year_change_min_max_min_min_min_min_min_min_max = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_min"].diff()

# create dataframe
df_year_on_year_change_max_min_min_min_min_min_min_min_min = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_max"].diff()

# create dataframe
df_year_on_year_change_min_max_min_min_min_min_min_min_min_max = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_min"].diff()

# create dataframe
df_year_on_year_change_max_min_min_min_min_min_min_min_min_min = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_max"].diff()

# create dataframe
df_year_on_year_change_min_max_min_min_min_min_min_min_min_min_max = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_min"].diff()

# create dataframe
df_year_on_year_change_max_min_min_min_min_min_min_min_min_min_min = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_max"].diff()

# create dataframe
df_year_on_year_change_min_max_min_min_min_min_min_min_min_min_min_max = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_min"].diff()

# create dataframe
df_year_on_year_change_max_min_min_min_min_min_min_min_min_min_min_min = df.groupby(["year", "id", "zipcode", "number_of_units"])["income_percent_max"].diff()



====================================================================================================

PROMPT 4:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in average house rent from 2017 to 2022.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 4:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in average house rent from 2017 to 2022.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "housing_value",
    user = "postgres",
    password = "postgres"
)

# create a cursor
cur = conn.cursor()

# create a function to get the average house value for a zipcode
def get_avg_house_value(zipcode):
    # get the average house value for a zipcode
    cur.execute(f"SELECT AVG(house_value_min) FROM housing_value WHERE zipcode = '{zipcode}'")
    avg_house_value = cur.fetchone()[0]
    return avg_house_value

# create a function to get the change in house value
def get_change_in_house_value(zipcode):
    # get the change in house value
    cur.execute(f"SELECT house_value_max - house_value_min FROM housing_value WHERE zipcode = '{zipcode}'")
    change_in_house_value = cur.fetchone()[0]
    return change_in_house_value

# create a function to get the average house value for a zipcode
def get_avg_rent(zipcode):
    # get the average house value for a zipcode
    cur.execute(f"SELECT AVG(number_of_units) FROM housing_value WHERE zipcode = '{zipcode}'")
    avg_rent = cur.fetchone()[0]
    return avg_rent

# create a function to get the change in house value
def get_change_in_rent(zipcode):
    # get the change in house value
    cur.execute(f"SELECT number_of_units - number_of_units FROM housing_value WHERE zipcode = '{zipcode}'")
    change_in_rent = cur.fetchone()[0]
    return change_in_rent

# create a function to get the average house value for a zipcode
def get_avg_rent_change(zipcode):
    # get the change in house value
    cur.execute(f"SELECT AVG(house_value_min) FROM housing_value WHERE zipcode = '{zipcode}'")
    avg_rent_change = cur.fetchone()[0]
    return avg_rent_change

# create a function to get the change in house value
def get_avg_rent_change(zipcode):
    # get the change in house value
    cur.execute(f"SELECT house_value_max - house_value_min FROM housing_value WHERE zipcode = '{zipcode}'")
    avg_rent_change = cur.fetchone()[0]
    return avg_rent_change

# create a function to get the change in house value
def get_avg_rent_change(zipcode):
    # get the change in house value
    cur.execute(f"SELECT number_of_units - number_of_units FROM housing_value WHERE zipcode = '{zipcode}'")
    avg_rent_change = cur.fetchone()[0]
    return avg_rent_change

# create a function to get the change in house value
def get_avg_rent_change(zipcode):
    # get the change in house value
    cur.execute(f"SELECT house_value_max - house_value_min FROM housing_value WHERE zipcode = '{zipcode}'")
    avg_rent_change = cur.fetchone()[0]
    return avg_rent_change

# create a function to get the change in house value
def get_avg_rent_change(zipcode):
    # get the change in house value
    cur.execute(f"SELECT number_of_units - number_of_units FROM housing_value WHERE zipcode = '{zipcode}'")
    avg_rent_change = cur.fetchone()[0]
    return avg_rent_change

# create a function to get the change in house value
def get_avg_rent_change(zipcode):
    # get the change in house value
    cur.execute(f"SELECT house_value_max - house_value_min FROM housing_value WHERE zipcode = '{zipcode}'")
    avg_rent_change = cur.fetchone()[0]
    return avg_rent_change

# create a function to get the change in house value
def get_avg_rent_change(zipcode):
    # get the change in house value
    cur.execute(f"SELECT number_of_units - number_of_units FROM housing_value WHERE zipcode = '{zipcode}'")
    avg_rent_change = cur.fetchone()[0]
    return avg_rent_change

# create a function to get the change in house value
def get_avg_rent_change(zipcode):
    # get the change in house value
    cur.execute(f"SELECT house_value_max - house_value_min FROM housing_value WHERE zipcode = '{zipcode}'")
    avg_rent_change = cur.fetchone()[0]
    return avg_rent_change

# create a function to get the change in house value
def get_avg_rent_change(zipcode):
    # get the change in house value
    cur.execute(f"SELECT number_of_units - number_of_units FROM housing_value WHERE zipcode = '{zipcode}'")
    avg_rent_change = cur.fetchone()[0]
    return avg_rent_change

# create a function to get the change in house value
def get_avg_rent_change(zipcode):
    # get the change in house value
    cur.execute(f"SELECT house_value_max - house_value_min FROM housing_value WHERE zipcode = '{zipcode}'")
    avg_rent_change = cur.fetchone()[0]
    return avg_rent_change

# create a function to get the change in house value
def get_avg_rent_change(zipcode):
    # get the change in house value
    cur.execute(f"SELECT number_of_units - number_of_units FROM housing_value WHERE zipcode = '{zipcode}'")
    avg_rent_change = cur.fetchone()[0]
    return avg_rent_change

# create a function to get the change in house value
def get_avg_rent_change(zipcode):
    # get the change in house value
    cur.execute(f"SELECT house_value_max - house_value_min FROM housing_value WHERE zipcode = '{zipcode}'")
    avg_rent_change = cur.fetchone()[0]
    return avg_rent_change

# create a function to get the change in house value
def get_avg_rent_change(zipcode):
    # get the change in house value
    cur.execute(f"SELECT number_of_units - number_of_units FROM housing_value WHERE zipcode = '{zipcode}'")
    avg_rent_change = cur.fetchone()[0]
    return avg_rent_change

# create a function to get the change in house value
def get_avg_rent_change(zipcode):
    # get the change in house value
    cur.execute(f"SELECT house_value_max - house_value_min FROM housing_value WHERE zipcode = '{zipcode}'")
    avg_rent_change = cur.fetchone()[0]
    return avg_rent_change

# create a function to get the change in house value
def get_avg_rent_change(zipcode):
    # get the change in house value
    cur.execute(f"SELECT number_of_units - number_of_units FROM housing_value WHERE zipcode = '{zipcode}'")
    avg_rent_change = cur.fetchone()[0]
    return avg_rent_change


====================================================================================================

PROMPT 5:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

Schema: 
	household_income_percent_without_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 5:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

Schema: 
	household_income_percent_without_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code here

# For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

# Your code

====================================================================================================

PROMPT 6:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 6:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

# Your code here

# For

====================================================================================================

PROMPT 7:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get zipcodes in Georgia where GRAPI is greater than 30.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 7:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get zipcodes in Georgia where GRAPI is greater than 30.

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Your code here!

====================================================================================================

PROMPT 8:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Select share of each fuel source for heating in year 2022.

Schema: 
	housing_heating_fuel (year, id, zipcode, total_heating_units, utility_gas, bottled_tank_or_LP_gas, electricity, fuel_oil_kerosene, coal_or_coke, wood, solar_energy, other_fuel, no_fuel_used)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 8:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Select share of each fuel source for heating in year 2022.

Schema: 
	housing_heating_fuel (year, id, zipcode, total_heating_units, utility_gas, bottled_tank_or_LP_gas, electricity, fuel_oil_kerosene, coal_or_coke, wood, solar_energy, other_fuel, no_fuel_used)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")

# create a cursor
cur = conn.cursor()

# create a query
query = "SELECT share_of_heating_fuel_2022 FROM housing_heating_fuel WHERE year = 2022"

# execute the query
cur.execute(query)

# get the results
results = cur.fetchall()

# close the cursor
cur.close()

# close the connection
conn.close()

# print the results
print(results)

# convert the results to a dataframe
df = pd.DataFrame(results)

# print the dataframe
print(df)

# get the mean
print(df.mean())

# get the median
print(df.median())

# get the standard deviation
print(df.std())

# get the minimum
print(df.min())

# get the maximum
print(df.max())

# get the sum
print(df.sum())

# get the first and last rows
print(df.head(1))
print(df.tail(1))

# get the first and last columns
print(df.iloc[:,0])
print(df.iloc[:,-1])

# get the first and last rows and columns
print(df.iloc[0,0])
print(df.iloc[0,-1])

# get the first and last rows and columns
print(df.iloc[-1,0])
print(df.iloc[-1,-1])

# get the first and last rows and columns
print(df.iloc[:,0].head(1))
print(df.iloc[:,-1].head(1))

# get the first and last rows and columns
print(df.iloc[0,0].head(1))
print(df.iloc[0,-1].head(1))

# get the first and last rows and columns
print(df.iloc[-1,0].head(1))
print(df.iloc[-1,-1].head(1))

# get the first and last rows and columns
print(df.iloc[:,0].tail(1))
print(df.iloc[:,-1].tail(1))

# get the first and last rows and columns
print(df.iloc[0,0].tail(1))
print(df.iloc[0,-1].tail(1))

# get the first and last rows and columns
print(df.iloc[-1,0].tail(1))
print(df.iloc[-1,-1].tail(1))

# get the first and last rows and columns
print(df.iloc[:,0].head(1).iloc[0,0])
print(df.iloc[:,-1].head(1).iloc[0,0])

# get the first and last rows and columns
print(df.iloc[0,0].head(1).iloc[0,0])
print(df.iloc[0,-1].head(1).iloc[0,0])

# get the first and last rows and columns
print(df.iloc[-1,0].head(1).iloc[0,0])
print(df.iloc[-1,-1].head(1).iloc[0,0])

# get the first and last rows and columns
print(df.iloc[:,0].tail(1).iloc[0,0])
print(df.iloc[:,-1].tail(1).iloc[0,0])

# get the first and last rows and columns
print(df.iloc[0,0].tail(1).iloc[0,0])
print(df.iloc[0,-1].tail(1).iloc[0,0])

# get the first and last rows and columns
print(df.iloc[-1,0].tail(1).iloc[0,0])
print(df.iloc[-1,-1].tail(1).iloc[0,0])

# get the first and last rows and columns
print(df.iloc[:,0].head(1).iloc[0,0].head(1))
print(df.iloc[:,-1].head(1).iloc[0,0].head(1))

# get the first and last rows and columns
print(df.iloc[0,0].head(1).iloc[0,0].head(1))
print(df.iloc[0,-1].head(1).iloc[0,0].head(1))

# get the first and last rows and columns
print(df.iloc[-1,0].head(1).iloc[0,0].head(1))
print(df.iloc[-1,-1].head(1).iloc[0,0].head(1))

# get the first and last rows and columns
print(df.iloc[:,0].tail(1).iloc[0,0].head(1))
print(df.iloc[:,-1].tail(1).iloc[0,0].head(1))

# get the first and last rows and columns
print(df.iloc[0,0].tail(1).iloc[0,0].head(1))
print(df.iloc[0,-1].tail(1).iloc[0,0].head(1))

# get the first and last rows and columns
print(df.iloc[-1,0].tail(1).iloc[0,0].head(1))
print(df.iloc[-1,-1].tail(1).iloc[0,0].head(1))

# get the first and last rows and columns
print(df.iloc[:,0].head(1).iloc[0,0].head(1).head(1))
print(df.iloc[:,-1].head(1).iloc[0,0].head(1).head(1))

# get the first and last rows and columns
print(df.iloc[0,0].head(1).iloc[0,0].head(1).head(1))
print(df.iloc[0,-1].head(1).iloc[0,0].head(1).head(1))

# get the first and last rows and columns
print(df.iloc[-1,0].head(1).iloc[0,0].head(1).head(1))
print(df.iloc[-1,-1].head(1).iloc[0,0].head(1).head(1))

# get the first and last rows and columns
print(df.iloc[:,0].tail(1).iloc[0,0].head(1).head(1).head(1))
print(df.iloc[:,-1].tail(1).iloc[0,0].head(1).head(1).head(1))

# get the first and last rows and columns
print(df.iloc[0,0].tail(1).iloc[0,0].head(1).head(1).head(1))
print(df.iloc[0,-1].tail(1).iloc[0,0].head(1).head(1).head(1))

# get the first and last rows and columns
print(df.iloc[-1,0].tail(1).iloc[0,0].head(1).head(1).head(1))
print(df.iloc[-1,-1].tail(1).iloc[0,0].head(1).head(1).head(1))

# get the first and last rows and columns
print(df.iloc[:,0].head(1).iloc[0

====================================================================================================

PROMPT 9:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For the year 2022, select zipcodes in Georgia where Home-ownership costs as a %age of household income is more than 28%

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 9:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For the year 2022, select zipcodes in Georgia where Home-ownership costs as a %age of household income is more than 28%

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your

====================================================================================================

PROMPT 10:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each year, get rent and value of house averaged over all zip codes.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 10:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each year, get rent and value of house averaged over all zip codes.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to database
conn = psycopg2.connect(
    host = "localhost",
    database = "housing_db",
    user = "postgres",
    password = "postgres"
)

# create cursor
cur = conn.cursor()

# create query
query = "SELECT housing_rent.year, housing_rent.id, housing_rent.zipcode, housing_rent.number_of_units, housing_rent.rent_value_min, housing_rent.rent_value_max, housing_value.house_value_min, housing_value.house_value_max FROM housing_rent INNER JOIN housing_value ON housing_rent.id = housing_value.id"

# execute query
cur.execute(query)

# get results
results = cur.fetchall()

# close connection
cur.close()
conn.close()

# create dataframe
df = pd.DataFrame(results)

# print dataframe
print(df)

# get average rent and value
avg_rent = df.groupby(['year', 'id', 'zipcode'])[['rent_value_min', 'rent_value_max']].mean()
avg_value = df.groupby(['year', 'id', 'zipcode'])[['house_value_min', 'house_value_max']].mean()

# print average rent and value
print(avg_rent)
print(avg_value)

# get average rent and value
avg_rent = df.groupby(['year', 'id', 'zipcode'])[['rent_value_min', 'rent_value_max']].mean()
avg_value = df.groupby(['year', 'id', 'zipcode'])[['house_value_min', 'house_value_max']].mean()

# print average rent and value
print(avg_rent)
print(avg_value)

# get average rent and value
avg_rent = df.groupby(['year', 'id', 'zipcode'])[['rent_value_min', 'rent_value_max']].mean()
avg_value = df.groupby(['year', 'id', 'zipcode'])[['house_value_min', 'house_value_max']].mean()

# print average rent and value
print(avg_rent)
print(avg_value)

# get average rent and value
avg_rent = df.groupby(['year', 'id', 'zipcode'])[['rent_value_min', 'rent_value_max']].mean()
avg_value = df.groupby(['year', 'id', 'zipcode'])[['house_value_min', 'house_value_max']].mean()

# print average rent and value
print(avg_rent)
print(avg_value)

# get average rent and value
avg_rent = df.groupby(['year', 'id', 'zipcode'])[['rent_value_min', 'rent_value_max']].mean()
avg_value = df.groupby(['year', 'id', 'zipcode'])[['house_value_min', 'house_value_max']].mean()

# print average rent and value
print(avg_rent)
print(avg_value)

# get average rent and value
avg_rent = df.groupby(['year', 'id', 'zipcode'])[['rent_value_min', 'rent_value_max']].mean()
avg_value = df.groupby(['year', 'id', 'zipcode'])[['house_value_min', 'house_value_max']].mean()

# print average rent and value
print(avg_rent)
print(avg_value)

# get average rent and value
avg_rent = df.groupby(['year', 'id', 'zipcode'])[['rent_value_min', 'rent_value_max']].mean()
avg_value = df.groupby(['year', 'id', 'zipcode'])[['house_value_min', 'house_value_max']].mean()

# print average rent and value
print(avg_rent)
print(avg_value)

# get average rent and value
avg_rent = df.groupby(['year', 'id', 'zipcode'])[['rent_value_min', 'rent_value_max']].mean()
avg_value = df.groupby(['year', 'id', 'zipcode'])[['house_value_min', 'house_value_max']].mean()

# print average rent and value
print(avg_rent)
print(avg_value)

# get average rent and value
avg_rent = df.groupby(['year', 'id', 'zipcode'])[['rent_value_min', 'rent_value_max']].mean()
avg_value = df.groupby(['year', 'id', 'zipcode'])[['house_value_min', 'house_value_max']].mean()

# print average rent and value
print(avg_rent)
print(avg_value)

# get average rent and value
avg_rent = df.groupby(['year', 'id', 'zipcode'])[['rent_value_min', 'rent_value_max']].mean()
avg_value = df.groupby(['year', 'id', 'zipcode'])[['house_value_min', 'house_value_max']].mean()

# print average rent and value
print(avg_rent)
print(avg_value)

# get average rent and value
avg_rent = df.groupby(['year', 'id', 'zipcode'])[['rent_value_min', 'rent_value_max']].mean()
avg_value = df.groupby(['year', 'id', 'zipcode'])[['house_value_min', 'house_value_max']].mean()

# print average rent and value
print(avg_rent)
print(avg_value)

# get average rent and value
avg_rent = df.groupby(['year', 'id', 'zipcode'])[['rent_value_min', 'rent_value_max']].mean()
avg_value = df.groupby(['year', 'id', 'zipcode'])[['house_value_min', 'house_value_max']].mean()

# print average rent and value
print(avg_rent)
print(avg_value)

# get average rent and value
avg_rent = df.groupby(['year', 'id', 'zipcode'])[['rent_value_min', 'rent_value_max']].mean()
avg_value = df.groupby(['year', 'id', 'zipcode'])[['house_value_min', 'house_value_max']].mean()

# print average rent and value
print(avg_rent)
print(avg_value)

# get average rent and value
avg_rent = df.groupby(['year', 'id', 'zipcode'])[['rent_value_min', 'rent_value_max']].mean()
avg_value = df.groupby(['year', 'id', 'zipcode'])[['house_value_min', 'house_value_max']].mean()

# print average rent and value
print(avg_rent)
print(avg_value)

# get average rent and value
avg_rent = df.groupby(['year', 'id', 'zipcode'])[['rent_value_min', 'rent_value_max']].mean()
avg_value = df.groupby(['year', 'id', 'zipcode'])[['house_value_min', 'house_value

====================================================================================================

PROMPT 11:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get rent and value of house averaged over all years.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 11:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get rent and value of house averaged over all years.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	For each zip code, get rent and value of house averaged over all years.
	
Sample Output:
	SELECT house_value_avg, house_value_min, house_value_max, rent_value_avg, rent_value_min, rent_value_max
	FROM housing_value, housing_rent
	WHERE housing_value.zipcode = housing_rent.zipcode
	AND housing_value.year = housing_rent.year
	AND housing_value.id = housing_rent.id
	AND housing_value.zipcode = '94110'
	AND housing_rent.zipcode = '94110'
	AND housing_value.year = '2010'
	AND housing_rent.year = '2010'
	AND housing_value.id = '1'
	AND housing_rent.id = '1'
	AND housing_value.number_of_units = housing_rent.number_of_units
	AND housing_value.house_value_min = housing_rent.rent_value_min
	AND housing_value.house_value_max = housing_rent.rent_value_max
	AND housing_value.rent_value_avg = housing_rent.rent_value_avg
	AND housing_value.rent_value_min = housing_rent.rent_value_min
	AND housing_value.rent_value_max = housing_rent.rent_value_max
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


====================================================================================================

PROMPT 12:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get count of units with and without mortgage in year 2022.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 12:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get count of units with and without mortgage in year 2022.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2

# connect to database
conn = psycopg2.connect(
	host = "localhost",
	database = "housing_db",
	user = "postgres",
	password = "postgres"
)

# create a cursor
cur = conn.cursor()

# create a query
query = "SELECT COUNT(*) FROM housing_mortgage WHERE year = 2022 AND units_with_mortgage > 0 AND units_without_mortgage > 0"

# execute the query
cur.execute(query)

# fetch the results
results = cur.fetchall()

# print the results
print(results)

# close the cursor
cur.close()

# close the connection
conn.close()

====================================================================================================

PROMPT 13:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage averaged over years.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 13:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage averaged over years.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(units_without_mortgage)
# FROM housing_mortgage
# GROUP BY year;

# Get the average number of units with and without mortgage
# over the years.
#
# SELECT
#     AVG(units_with_mortgage)
#     , AVG(

====================================================================================================

PROMPT 14:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage for year 2022.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 14:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage for year 2022.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# Get count of units with and without mortgage for year 2022.

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage > 0 AND units_without_mortgage > 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage > 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage > 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(*)
# FROM housing_mortgage
# WHERE year = 2022 AND units_with_mortgage = 0 AND units_without_mortgage = 0

# SELECT COUNT(

====================================================================================================

PROMPT 15:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average house price for each zip code in a given year.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 15:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average house price for each zip code in a given year.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# Get the year
year = input("What year? ")

# Get the zip code
zip_code = input("What zip code? ")

# Get the number of units
number_of_units = input("How many units? ")

# Get the house value min
house_value_min = input("What is the min house value? ")

# Get the house value max
house_value_max = input("What is the max house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value
avg_house_value = input("What is the average house value? ")

# Get the average house value


====================================================================================================

PROMPT 16:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get the average rent and maintenance cost for households without mortgage.

Schema: 
	household_income_percent_without_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 16:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get the average rent and maintenance cost for households without mortgage.

Schema: 
	household_income_percent_without_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(host="localhost", port=5432, database="postgres", user="postgres", password="postgres")

# create a cursor
cur = conn.cursor()

# create a function to get the average rent and maintenance cost for households without mortgage
def get_avg_rent_and_maintenance_cost(zipcode):
	# get the average rent and maintenance cost for households without mortgage
	cur.execute("""
		SELECT 
			avg(rent_value) as avg_rent,
			avg(maintenance_cost) as avg_maintenance_cost
		FROM housing_rent
		WHERE
			zipcode = %s
			AND number_of_units > 0
			AND rent_value > 0
			AND maintenance_cost > 0
			AND income_percent_min < 0.5
			AND income_percent_max < 0.5
	""", (zipcode,))
	# get the results
	results = cur.fetchall()
	# return the results
	return results

# create a function to get the average rent and maintenance cost for households with mortgage
def get_avg_rent_and_maintenance_cost_with_mortgage(zipcode):
	# get the average rent and maintenance cost for households with mortgage
	cur.execute("""
		SELECT 
			avg(rent_value) as avg_rent,
			avg(maintenance_cost) as avg_maintenance_cost
		FROM housing_rent
		WHERE
			zipcode = %s
			AND number_of_units > 0
			AND rent_value > 0
			AND maintenance_cost > 0
			AND income_percent_min < 0.5
			AND income_percent_max < 0.5
			AND mortgage_value > 0
	""", (zipcode,))
	# get the results
	results = cur.fetchall()
	# return the results
	return results

# create a function to get the average rent and maintenance cost for households with mortgage
def get_avg_rent_and_maintenance_cost_with_mortgage_and_income(zipcode):
	# get the average rent and maintenance cost for households with mortgage
	cur.execute("""
		SELECT 
			avg(rent_value) as avg_rent,
			avg(maintenance_cost) as avg_maintenance_cost
		FROM housing_rent
		WHERE
			zipcode = %s
			AND number_of_units > 0
			AND rent_value > 0
			AND maintenance_cost > 0
			AND income_percent_min < 0.5
			AND income_percent_max < 0.5
			AND mortgage_value > 0
	""", (zipcode,))
	# get the results
	results = cur.fetchall()
	# return the results
	return results

# create a function to get the average rent and maintenance cost for households with mortgage
def get_avg_rent_and_maintenance_cost_with_mortgage_and_income_and_units(zipcode):
	# get the average rent and maintenance cost for households with mortgage
	cur.execute("""
		SELECT 
			avg(rent_value) as avg_rent,
			avg(maintenance_cost) as avg_maintenance_cost
		FROM housing_rent
		WHERE
			zipcode = %s
			AND number_of_units > 0
			AND rent_value > 0
			AND maintenance_cost > 0
			AND income_percent_min < 0.5
			AND income_percent_max < 0.5
			AND mortgage_value > 0
	""", (zipcode,))
	# get the results
	results = cur.fetchall()
	# return the results
	return results

# create a function to get the average rent and maintenance cost for households with mortgage
def get_avg_rent_and_maintenance_cost_with_mortgage_and_income_and_units_and_income(zipcode):
	# get the average rent and maintenance cost for households with mortgage
	cur.execute("""
		SELECT 
			avg(rent_value) as avg_rent,
			avg(maintenance_cost) as avg_maintenance_cost
		FROM housing_rent
		WHERE
			zipcode = %s
			AND number_of_units > 0
			AND rent_value > 0
			AND maintenance_cost > 0
			AND income_percent_min < 0.5
			AND income_percent_max < 0.5
			AND mortgage_value > 0
	""", (zipcode,))
	# get the results
	results = cur.fetchall()
	# return the results
	return results

# create a function to get the average rent and maintenance cost for households with mortgage
def get_avg_rent_and_maintenance_cost_with_mortgage_and_income_and_units_and_income_and_units(zipcode):
	# get the average rent and maintenance cost for households with mortgage
	cur.execute("""
		SELECT 
			avg(rent_value) as avg_rent,
			avg(maintenance_cost) as avg_maintenance_cost
		FROM housing_rent
		WHERE
			zipcode = %s
			AND number_of_units > 0
			AND rent_value > 0
			AND maintenance_cost > 0
			AND income_percent_min < 0.5
			AND income_percent_max < 0.5
			AND mortgage_value > 0
	""", (zipcode,))
	# get the results
	results = cur.fetchall()
	# return the results
	return results

# create a function to get the average rent and maintenance cost for households with mortgage
def get_avg_rent_and_maintenance_cost_with_mortgage_and_income_and_units_and_income_and_units_and_income(zipcode):
	# get the average rent and maintenance cost for households with mortgage
	cur.execute("""
		SELECT 
			avg(rent_value) as avg_rent,
			avg(maintenance_cost) as avg_maintenance_cost
		FROM housing_rent
		WHERE
			zipcode = %s
			AND number_of_units > 0
			AND rent_value > 0
			AND maintenance_cost > 0
			AND income_percent_min < 0.5
			AND income_percent_max < 0.5
			AND mortgage_value > 0
	""", (zipcode,))
	# get the results
	results = cur.fetchall()
	# return the results
	return results

# create a function to get the average rent and maintenance cost for households with mortgage
def get_avg_rent_and_maintenance_cost_with_mortgage_and_income_and_units_and_income_and_units_and_income_and_units(zipcode):
	# get the average rent and maintenance cost for households with mortgage
	cur.execute("""
		SELECT 
			avg(rent_value) as avg_rent,
			avg(maintenance_cost) as avg_maintenance_cost
		FROM housing_rent
		WHERE
			zipcode = %s
			AND number_of_units > 0
			AND rent_value > 0
			AND maintenance_cost > 0
			AND income_percent_min < 0.5
			AND income_percent_max < 0.5
			AND mortgage_value > 0
	""", (zipcode,))
	# get the results
	results = cur.fetchall()
	# return the results
	return results

# create a function to get the average rent and maintenance cost for households with mortgage
def get_avg_rent_and_maintenance_cost_with_mortgage_and_income_and_units_and_income_and_units_and_income_and_units_and_income(zipcode):
	# get the average rent and maintenance cost for households with mortgage


====================================================================================================

PROMPT 17:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get median housing value by zipcode.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 17:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get median housing value by zipcode.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	year: 2015
	id: 1
	zipcode: 94025
	number_of_units: 1
	house_value_min: 100
	house_value_max: 200

Sample Output:
	SELECT house_value_min, house_value_max, number_of_units, house_value_min + (house_value_max - house_value_min)/2 AS median_housing_value FROM housing_value WHERE year = 2015 AND id = 1 AND zipcode = 94025

"""

import argparse

def main():
	parser = argparse.ArgumentParser(description='Get median housing value by zipcode.')
	parser.add_argument('--year', type=int, help='Year of housing data')
	parser.add_argument('--id', type=int, help='Housing data id')
	parser.add_argument('--zipcode', type=int, help='Zipcode of housing data')
	parser.add_argument('--number_of_units', type=int, help='Number of units in housing data')
	parser.add_argument('--house_value_min', type=int, help='Minimum house value in housing data')
	parser.add_argument('--house_value_max', type=int, help='Maximum house value in housing data')
	args = parser.parse_args()

	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here
	# Your code goes here


====================================================================================================

PROMPT 18:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022 and for each zipcode, get average rent value and house price.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 18:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022 and for each zipcode, get average rent value and house price.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	year: 2022
	zipcode: 94025

Sample Output:
	SELECT house_value_avg, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house_value_stddev, house_value_count, house_value_sum, house_value_min, house_value_max, house_value_median, house_value_mode, house

====================================================================================================

PROMPT 19:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get average rent value and house price.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 19:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get average rent value and house price.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import psycopg2.extras

# connect to database
conn = psycopg2.connect(
	host = "localhost",
	database = "housing_db",
	user = "postgres",
	password = "postgres"
)

# create cursor
cur = conn.cursor(cursor_factory = psycopg2.extras.DictCursor)

# create query
query = """
	SELECT
		housing_rent.zipcode,
		housing_rent.rent_value_min,
		housing_rent.rent_value_max,
		housing_rent.rent_value_avg,
		housing_rent.rent_value_median,
		housing_rent.rent_value_stdev,
		housing_rent.rent_value_stderr,
		housing_rent.rent_value_count,
		housing_rent.rent_value_min_id,
		housing_rent.rent_value_max_id,
		housing_rent.rent_value_avg_id,
		housing_rent.rent_value_median_id,
		housing_rent.rent_value_stdev_id,
		housing_rent.rent_value_stderr_id,
		housing_rent.rent_value_count_id,
		housing_rent.rent_value_min_id,
		housing_rent.rent_value_max_id,
		housing_rent.rent_value_avg_id,
		housing_rent.rent_value_median_id,
		housing_rent.rent_value_stdev_id,
		housing_rent.rent_value_stderr_id,
		housing_rent.rent_value_count_id,
		housing_rent.rent_value_min_id,
		housing_rent.rent_value_max_id,
		housing_rent.rent_value_avg_id,
		housing_rent.rent_value_median_id,
		housing_rent.rent_value_stdev_id,
		housing_rent.rent_value_stderr_id,
		housing_rent.rent_value_count_id,
		housing_rent.rent_value_min_id,
		housing_rent.rent_value_max_id,
		housing_rent.rent_value_avg_id,
		housing_rent.rent_value_median_id,
		housing_rent.rent_value_stdev_id,
		housing_rent.rent_value_stderr_id,
		housing_rent.rent_value_count_id,
		housing_rent.rent_value_min_id,
		housing_rent.rent_value_max_id,
		housing_rent.rent_value_avg_id,
		housing_rent.rent_value_median_id,
		housing_rent.rent_value_stdev_id,
		housing_rent.rent_value_stderr_id,
		housing_rent.rent_value_count_id,
		housing_rent.rent_value_min_id,
		housing_rent.rent_value_max_id,
		housing_rent.rent_value_avg_id,
		housing_rent.rent_value_median_id,
		housing_rent.rent_value_stdev_id,
		housing_rent.rent_value_stderr_id,
		housing_rent.rent_value_count_id,
		housing_rent.rent_value_min_id,
		housing_rent.rent_value_max_id,
		housing_rent.rent_value_avg_id,
		housing_rent.rent_value_median_id,
		housing_rent.rent_value_stdev_id,
		housing_rent.rent_value_stderr_id,
		housing_rent.rent_value_count_id,
		housing_rent.rent_value_min_id,
		housing_rent.rent_value_max_id,
		housing_rent.rent_value_avg_id,
		housing_rent.rent_value_median_id,
		housing_rent.rent_value_stdev_id,
		housing_rent.rent_value_stderr_id,
		housing_rent.rent_value_count_id,
		housing_rent.rent_value_min_id,
		housing_rent.rent_value_max_id,
		housing_rent.rent_value_avg_id,
		housing_rent.rent_value_median_id,
		housing_rent.rent_value_stdev_id,
		housing_rent.rent_value_stderr_id,
		housing_rent.rent_value_count_id,
		housing_rent.rent_value_min_id,
		housing_rent.rent_value_max_id,
		housing_rent.rent_value_avg_id,
		housing_rent.rent_value_median_id,
		housing_rent.rent_value_stdev_id,
		housing_rent.rent_value_stderr_id,
		housing_rent.rent_value_count_id,
		housing_rent.rent_value_min_id,
		housing_rent.rent_value_max_id,
		housing_rent.rent_value_avg_id,
		housing_rent.rent_value_median_id,
		housing_rent.rent_value_stdev_id,
		housing_rent.rent_value_stderr_id,
		housing_rent.rent_value_count_id,
		housing_rent.rent_value_min_id,
		housing_rent.rent_value_max_id,
		housing_rent.rent_value_avg_id,
		housing_rent.rent_value_median_id,
		housing_rent.rent_value_stdev_id,
		housing_rent.rent_value_stderr_id,
		housing_rent.rent_value_count_id,
		housing_rent.rent_value_min_id,
		housing_rent.rent_value_max_id,
		housing_rent.rent_value_avg_id,
		housing_rent.rent_value_median_id,
		housing_rent.rent_value_stdev_id,
		housing_rent.rent_value_stderr_id,
		housing_rent.rent_value_count_id,
		housing_rent.rent_value_min_id,
		housing_rent.rent_value_max_id,
		housing_rent.rent_value_avg_id,
		housing_rent.rent_value_median_id,
		housing_rent.rent_value_stdev_id,
		housing_rent.rent_value_stderr_id,
		housing_rent.rent_value_count_id,
		housing_rent.rent_value_min_id,
		housing_rent.rent_value_max_id,
		housing_rent.rent_value_avg_id,
		housing_rent.rent_value_median_id,
		housing_rent.rent_value_stdev_id,
		housing_rent.rent_value_stderr_id,
		housing_rent.rent_value_count_id,
		housing_rent.rent_value_min_id,
		housing_rent.rent_value_max_id,
		housing_rent.rent_value_avg_id,
		housing_rent.rent_value_median_id,
		housing_rent.rent_value_stdev_id,
		housing_rent.rent_value_stderr_id,
		housing_rent.rent_value_count_id,
		housing_rent.rent_value_min_id,
		housing_rent.rent_value_max_id,
		housing_rent.rent_value_avg_id,
		

====================================================================================================

PROMPT 20:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get total housing units in 2022 grouped by zipcode.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 20:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get total housing units in 2022 grouped by zipcode.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode
# ORDER BY SUM(number_of_units) DESC
# LIMIT 1;

# Get total housing units in 2022 grouped by zipcode.

# SELECT SUM(number_of_units)
# FROM housing_value
# WHERE year = 2022
# GROUP BY zipcode


====================================================================================================

PROMPT 21:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, count houses built in or after 2020.

Schema: 
	housing_year_built (year, id, zipcode, number_of_units, year_built_min, year_built_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 21:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, count houses built in or after 2020.

Schema: 
	housing_year_built (year, id, zipcode, number_of_units, year_built_min, year_built_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here


====================================================================================================

PROMPT 22:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having GRAPI greater than 28% in year 2022

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 22:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having GRAPI greater than 28% in year 2022

Schema: 
	housing_gross_rent_percent (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(
	host = "localhost",
	database = "housing_gross_rent_percent",
	user = "postgres",
	password = "postgres"
)

# create a cursor
cur = conn.cursor()

# create a dataframe
df = pd.read_sql_query("SELECT * FROM housing_gross_rent_percent", conn)

# get the year
year = 2022

# get the number of units
number_of_units = df['number_of_units'].sum()

# get the income percent
income_percent_min = 28

# get the income percent
income_percent_max = 100

# get the zipcodes
zipcodes = df['zipcode'].unique()

# get the number of zipcodes
number_of_zipcodes = len(zipcodes)

# get the number of rows
number_of_rows = len(df)

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28 = 0

# get the number of rows with income greater than 28%
for i in range(number_of_rows):
	if df.iloc[i]['income_percent_min'] > 28:
		number_of_rows_greater_than_28 += 1

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28 / number_of_rows * 100

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = round(number_of_rows_greater_than_28_percent, 2)

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = str(number_of_rows_greater_than_28_percent) + '%'

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('.', '%')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('%', '% ')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('% ', '%')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('%', '% ')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('% ', '%')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('%', '% ')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('% ', '%')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('%', '% ')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('% ', '%')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('%', '% ')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('% ', '%')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('%', '% ')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('% ', '%')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('%', '% ')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('% ', '%')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('%', '% ')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('% ', '%')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('%', '% ')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('% ', '%')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('%', '% ')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('% ', '%')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('%', '% ')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('% ', '%')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('%', '% ')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('% ', '%')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('%', '% ')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_28_percent = number_of_rows_greater_than_28_percent.replace('% ', '%')

# get the number of rows with income greater than 28%
number_of_rows_greater_than_

====================================================================================================

PROMPT 23:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having SMOCAPI greater than 30% in year 2022.

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 23:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having SMOCAPI greater than 30% in year 2022.

Schema: 
	household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")

# create a cursor
cur = conn.cursor()

# create a dataframe
df = pd.read_csv("/Users/joshuacampden-santos/Desktop/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_Projects/SQL_

====================================================================================================

PROMPT 24:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average population of males and females by year in Georgia

Schema: 
	demographic_basics (year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 24:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average population of males and females by year in Georgia

Schema: 
	demographic_basics (year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import sqlite3
# import pandas as pd
# import numpy as np
# import matplotlib.pyplot as plt
# import seaborn as sns
# from sqlalchemy import create_engine
# from sqlalchemy.orm import sessionmaker
# from sqlalchemy.ext.declarative import declarative_base
# from sqlalchemy import Column, Integer, String, Float, Date, ForeignKey, DateTime, Boolean, Text, Time
# from sqlalchemy.orm import relationship, backref, session
# from sqlalchemy.sql.expression import func
# from sqlalchemy.sql.schema import UniqueConstraint
# from sqlalchemy.sql.sqltypes import TIMESTAMP
# from sqlalchemy.sql.expression import text
# from sqlalchemy.sql.sqltypes import Date, Time, DateTime
# from sqlalchemy.sql.expression import cast
# from sqlalchemy.sql.expression import extract
# from sqlalchemy.sql.expression import literal_column
# from sqlalchemy.sql.expression import true
# from sqlalchemy.sql.expression import false
# from sqlalchemy.sql.expression import and_, or_, not_
# from sqlalchemy.sql.expression import select, update, insert, delete, join, distinct, case, cast, text, exists, all_, any_, between, in_, self_group, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_, distinct, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in, extract, over, label, func, literal, null, collate, between, not_between, not_in

====================================================================================================

PROMPT 25:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get gender ratio between males and females for each zipcode in Georgia.

Schema: 
	demographic_basics (year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 25:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get gender ratio between males and females for each zipcode in Georgia.

Schema: 
	demographic_basics (year, id, zipcode, total_population, total_population_male, total_population_female, total_population_sex_ratio, total_population_median_age, total_housing_units, voting_age_population, voting_age_popul, voting_age_population_female)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# For year 2022, get gender ratio between males and females for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each zipcode in Georgia.

# Your code here

# For year 2022, get the median age of the population for each

====================================================================================================

PROMPT 26:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each year after 2016, get average count of each ethnicity in Georgia.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 26:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each year after 2016, get average count of each ethnicity in Georgia.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each year after 2016, get average count of each ethnicity in Georgia.

# Your code here

# For each

====================================================================================================

PROMPT 27:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get average count of each ethnicity grouped by zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 27:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get average count of each ethnicity grouped by zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# For year 2022, get average count of each ethnicity grouped by zipcode.
# SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
# FROM demographic_race
# GROUP BY zipcode
# ORDER BY zipcode

# For year 2022, get average count of each ethnicity grouped by zipcode.
# SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
# FROM demographic_race
# GROUP BY zipcode
# ORDER BY zipcode

# For year 2022, get average count of each ethnicity grouped by zipcode.
# SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
# FROM demographic_race
# GROUP BY zipcode
# ORDER BY zipcode

# For year 2022, get average count of each ethnicity grouped by zipcode.
# SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
# FROM demographic_race
# GROUP BY zipcode
# ORDER BY zipcode

# For year 2022, get average count of each ethnicity grouped by zipcode.
# SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
# FROM demographic_race
# GROUP BY zipcode
# ORDER BY zipcode

# For year 2022, get average count of each ethnicity grouped by zipcode.
# SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
# FROM demographic_race
# GROUP BY zipcode
# ORDER BY zipcode

# For year 2022, get average count of each ethnicity grouped by zipcode.
# SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
# FROM demographic_race
# GROUP BY zipcode
# ORDER BY zipcode

# For year 2022, get average count of each ethnicity grouped by zipcode.
# SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
# FROM demographic_race
# GROUP BY zipcode
# ORDER BY zipcode

# For year 2022, get average count of each ethnicity grouped by zipcode.
# SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
# FROM demographic_race
# GROUP BY zipcode
# ORDER BY zipcode

# For year 2022, get average count of each ethnicity grouped by zipcode.
# SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
# FROM demographic_race
# GROUP BY zipcode
# ORDER BY zipcode

# For year 2022, get average count of each ethnicity grouped by zipcode.
# SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
# FROM demographic_race
# GROUP BY zipcode
# ORDER BY zipcode

# For year 2022, get average count of each ethnicity grouped by zipcode.
# SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
# FROM demographic_race
# GROUP BY zipcode
# ORDER BY zipcode

# For year 2022, get average count of each ethnicity grouped by zipcode.
# SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
# FROM demographic_race
# GROUP BY zipcode
# ORDER BY zipcode

# For year 2022, get average count of each ethnicity grouped by zipcode.
# SELECT zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino
# FROM demographic_race
# GROUP BY zipcode
# ORDER BY zipcode

# For year

====================================================================================================

PROMPT 28:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of American Indian and Alaskan Natives with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 28:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of American Indian and Alaskan Natives with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")

# create a cursor
cur = conn.cursor()

# create a list of the zipcodes
zipcodes = [90210, 90211, 90212, 90213, 90214, 90215, 90216, 90217, 90218, 90219, 90220, 90221, 90222, 90223, 90224, 90225, 90226, 90227, 90228, 90229, 90230, 90231, 90232, 90233, 90234, 90235, 90236, 90237, 90238, 90239, 90240, 90241, 90242, 90243, 90244, 90245, 90246, 90247, 90248, 90249, 90250, 90251, 90252, 90253, 90254, 90255, 90256, 90257, 90258, 90259, 90260, 90261, 90262, 90263, 90264, 90265, 90266, 90267, 90268, 90269, 90270, 90271, 90272, 90273, 90274, 90275, 90276, 90277, 90278, 90279, 90280, 90281, 90282, 90283, 90284, 90285, 90286, 90287, 90288, 90289, 90290, 90291, 90292, 90293, 90294, 90295, 90296, 90297, 90298, 90299, 90300, 90301, 90302, 90303, 90304, 90305, 90306, 90307, 90308, 90309, 90310, 90311, 90312, 90313, 90314, 90315, 90316, 90317, 90318, 90319, 90320, 90321, 90322, 90323, 90324, 90325, 90326, 90327, 90328, 90329, 90330, 90331, 90332, 90333, 90334, 90335, 90336, 90337, 90338, 90339, 90340, 90341, 90342, 90343, 90344, 90345, 90346, 90347, 90348, 90349, 90350, 90351, 90352, 90353, 90354, 90355, 90356, 90357, 90358, 90359, 90360, 90361, 90362, 90363, 90364, 90365, 90366, 90367, 90368, 90369, 90370, 90371, 90372, 90373, 90374, 90375, 90376, 90377, 90378, 90379, 90380, 90381, 90382, 90383, 90384, 90385, 90386, 90387, 90388, 90389, 90390, 90391, 90392, 90393, 90394, 90395, 90396, 90397, 90398, 90399, 90400, 90401, 90402, 90403, 90404, 90405, 90406, 90407, 90408, 90409, 90410, 90411, 90412, 90413, 90414, 90415, 90416, 90417, 90418, 90419, 90420, 90421, 90422, 90423, 90424, 90425, 90426, 90427, 90428, 90429, 90430, 90431, 90432, 90433, 90434, 90435, 90436, 90437, 90438, 90439, 90440, 90441, 90442, 90443, 90444, 90445, 90446, 90447, 90448, 90449, 90450, 90451, 90452, 90453, 90454, 90455, 90456, 90457, 90458, 90459, 90460, 90461, 90462, 90463, 90464, 90465, 90466, 90467, 90468, 90469, 90470, 90471, 90472, 90473, 90474, 90475, 90476, 90477, 90478, 90479, 90480, 90481, 90482, 90483, 90484, 90485, 90486, 90487, 90488, 90489, 90490, 90491, 90492, 90493, 90494, 90495, 90496, 90497, 90498, 90499, 90500, 90501, 90502, 90503, 90504, 90505, 90506, 90507, 90508, 90509, 90510, 90511, 90512, 90513, 90514, 90515, 90516, 90517, 90518, 90519, 90520, 90521, 90522, 90523, 90524, 90525, 90526, 90527, 90528, 90529, 90530, 90531, 90532, 90533, 90534, 90535, 90536, 90537, 90538, 90539, 90540, 90541, 90542, 90543, 90544, 90545, 90546, 90547, 90548, 90549, 90550, 90551, 90552, 90553, 90554, 90555, 90556, 90557, 90558, 90559, 90560, 90561, 90562, 90563, 90564, 90565, 90566, 90567, 90568, 90569, 90570, 90571, 90572, 90573, 90574, 90575, 90576, 90577, 90578, 90579, 90580, 90581, 90582, 90583, 90584, 90585, 90586, 90587, 90588, 90589, 90590, 90591, 90592, 90593, 90594, 90595, 90596, 90597, 90598, 90599, 90600, 90601, 90602, 90603, 90604, 90605, 90606, 90607, 90608, 90609, 90610, 90611, 90612, 90613, 90614, 90615, 90616, 90617, 90618, 90619, 90620, 90621, 90622, 90623, 90624, 90625, 90626, 90627, 90628, 90629, 90630, 90631, 90632, 90633, 90634, 90635, 90636, 90637, 90638, 90639, 90640, 90641, 90642, 90643, 90644, 90645, 90646, 90647, 90648, 90649, 90650, 90651, 90652, 90653, 90654, 90655, 90656, 90657, 90658, 90659, 90660, 90661, 90662, 90663, 90664, 90665, 90666, 90667, 90668, 90669, 90670, 90671, 90672, 90673, 90674, 90675, 90676, 90677, 90678, 90679, 90680, 90681, 90682, 90683, 90684, 90685, 90686, 90687, 90688, 90689, 90690, 90691, 90692, 90693, 90694, 90695, 90696, 90697, 90698, 90699, 90700, 90701, 90702, 90703, 90704, 90705, 90706, 90707, 90708, 90709, 90710, 90711, 90712, 90713, 90714, 9

====================================================================================================

PROMPT 29:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Asians with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 29:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Asians with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")

# create a cursor
cur = conn.cursor()

# create a query
query = """
SELECT
	demographic_race.zipcode,
	demographic_race.one_race,
	demographic_race.white,
	demographic_race.black,
	demographic_race.american_indian_and_alaska_native,
	demographic_race.asian,
	demographic_race.native_hawaiian_and_other_pacific_islander,
	demographic_race.some_other_race,
	demographic_race.hispanic_or_latino,
	demographic_race.not_hispanic_or_latino,
	demographic_race.race_total_populatio,
	(demographic_race.one_race + demographic_race.white + demographic_race.black + demographic_race.american_indian_and_alaska_native + demographic_race.asian + demographic_race.native_hawaiian_and_other_pacific_islander + demographic_race.some_other_race + demographic_race.hispanic_or_latino + demographic_race.not_hispanic_or_latino) as total_population
FROM
	demographic_race
WHERE
	demographic_race.year = 2022
	AND demographic_race.race_total_populatio > 0
	AND demographic_race.zipcode <> '0'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode <> '99999'
	AND demographic_race.zipcode

====================================================================================================

PROMPT 30:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 30:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")

# create a cursor
cur = conn.cursor()

# create a function to get the percentage of black population in each zipcode
def get_black_population(year):
	# get the total population of the year
	cur.execute("""
		SELECT SUM(demographic_race.black)
		FROM demographic_race
		WHERE demographic_race.year = %s;
	""", (year,))
	total_population = cur.fetchone()[0]

	# get the number of black people in each zipcode
	cur.execute("""
		SELECT COUNT(demographic_race.black)
		FROM demographic_race
		WHERE demographic_race.year = %s
		AND demographic_race.black = 1;
	""", (year,))
	black_population = cur.fetchone()[0]

	# get the percentage of black population in each zipcode
	return black_population / total_population

# get the percentage of black population in each zipcode
black_population_in_each_zipcode = get_black_population(2022)

# print the percentage of black population in each zipcode
print(black_population_in_each_zipcode)

# close the connection
conn.close()

====================================================================================================

PROMPT 31:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Hispanics/Latinos with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 31:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Hispanics/Latinos with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import psycopg2.extras

# connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# create a cursor
cur = conn.cursor(cursor_factory = psycopg2.extras.DictCursor)

# create a function to get the percentage of Hispanics/Latinos with respect to the total population in each zipcode
def get_percent_hispanic_latinos(year):
	# get the total population of the year
	cur.execute("SELECT COUNT(*) FROM demographic_race WHERE year = %s", (year,))
	total_population = cur.fetchone()[0]
	# get the total number of Hispanics/Latinos
	cur.execute("SELECT COUNT(*) FROM demographic_race WHERE year = %s AND hispanic_or_latino = '1'", (year,))
	total_hispanic_latinos = cur.fetchone()[0]
	# get the total number of non-Hispanic/Latinos
	cur.execute("SELECT COUNT(*) FROM demographic_race WHERE year = %s AND hispanic_or_latino = '0'", (year,))
	total_non_hispanic_latinos = cur.fetchone()[0]
	# get the percentage of Hispanics/Latinos
	percent_hispanic_latinos = (total_hispanic_latinos / total_population) * 100
	# get the percentage of non-Hispanic/Latinos
	percent_non_hispanic_latinos = (total_non_hispanic_latinos / total_population) * 100
	# return the percentages
	return percent_hispanic_latinos, percent_non_hispanic_latinos

# get the percentages
percent_hispanic_latinos, percent_non_hispanic_latinos = get_percent_hispanic_latinos(2022)

# print the percentages
print("The percentage of Hispanics/Latinos in 2022 is: " + str(percent_hispanic_latinos) + "%")
print("The percentage of non-Hispanic/Latinos in 2022 is: " + str(percent_non_hispanic_latinos) + "%")

# close the cursor
cur.close()

# close the connection
conn.close()

====================================================================================================

PROMPT 32:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Native Hawaiian and other Pacific Inlander with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 32:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Native Hawaiian and other Pacific Inlander with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import psycopg2.extras

# connect to the database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")

# create a cursor
cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

# create a function to get the percentage of a certain race
def get_percentage(race, total_population):
	return (race/total_population) * 100

# create a function to get the zipcode
def get_zipcode(id):
	return id[0:5]

# create a function to get the year
def get_year(id):
	return id[5:9]

# create a function to get the race
def get_race(id):
	return id[9:12]

# create a function to get the total population
def get_total_population(id):
	return id[12:15]

# create a function to get the race
def get_race(id):
	return id[9:12]

# create a function to get the total population
def get_total_population(id):
	return id[12:15]

# create a function to get the year
def get_year(id):
	return id[5:9]

# create a function to get the zipcode
def get_zipcode(id):
	return id[0:5]

# create a function to get the race
def get_race(id):
	return id[9:12]

# create a function to get the total population
def get_total_population(id):
	return id[12:15]

# create a function to get the year
def get_year(id):
	return id[5:9]

# create a function to get the zipcode
def get_zipcode(id):
	return id[0:5]

# create a function to get the race
def get_race(id):
	return id[9:12]

# create a function to get the total population
def get_total_population(id):
	return id[12:15]

# create a function to get the year
def get_year(id):
	return id[5:9]

# create a function to get the zipcode
def get_zipcode(id):
	return id[0:5]

# create a function to get the race
def get_race(id):
	return id[9:12]

# create a function to get the total population
def get_total_population(id):
	return id[12:15]

# create a function to get the year
def get_year(id):
	return id[5:9]

# create a function to get the zipcode
def get_zipcode(id):
	return id[0:5]

# create a function to get the race
def get_race(id):
	return id[9:12]

# create a function to get the total population
def get_total_population(id):
	return id[12:15]

# create a function to get the year
def get_year(id):
	return id[5:9]

# create a function to get the zipcode
def get_zipcode(id):
	return id[0:5]

# create a function to get the race
def get_race(id):
	return id[9:12]

# create a function to get the total population
def get_total_population(id):
	return id[12:15]

# create a function to get the year
def get_year(id):
	return id[5:9]

# create a function to get the zipcode
def get_zipcode(id):
	return id[0:5]

# create a function to get the race
def get_race(id):
	return id[9:12]

# create a function to get the total population
def get_total_population(id):
	return id[12:15]

# create a function to get the year
def get_year(id):
	return id[5:9]

# create a function to get the zipcode
def get_zipcode(id):
	return id[0:5]

# create a function to get the race
def get_race(id):
	return id[9:12]

# create a function to get the total population
def get_total_population(id):
	return id[12:15]

# create a function to get the year
def get_year(id):
	return id[5:9]

# create a function to get the zipcode
def get_zipcode(id):
	return id[0:5]

# create a function to get the race
def get_race(id):
	return id[9:12]

# create a function to get the total population
def get_total_population(id):
	return id[12:15]

# create a function to get the year
def get_year(id):
	return id[5:9]

# create a function to get the zipcode
def get_zipcode(id):
	return id[0:5]

# create a function to get the race
def get_race(id):
	return id[9:12]

# create a function to get the total population
def get_total_population(id):
	return id[12:15]

# create a function to get the year
def get_year(id):
	return id[5:9]

# create a function to get the zipcode
def get_zipcode(id):
	return id[0:5]

# create a function to get the race
def get_race(id):
	return id[9:12]

# create a function to get the total population
def get_total_population(id):
	return id[12:15]

# create a function to get the year
def get_year(id):
	return id[5:9]

# create a function to get the zipcode
def get_zipcode(id):
	return id[0:5]

# create a function to get the race
def get_race(id):
	return id[9:12]

# create a function to get the total population
def get_total_population(id):
	return id[12:15]

# create a function to get the year
def get_year(id):
	return id[5:9]

# create a function to get the zipcode
def get_zipcode(id):
	return id[0:5]

# create a function to get the race
def get_race(id):
	return id[9:12]

# create a function to get the total population
def get_total_population(id):
	return id[12:15]

# create a function to get the year
def get_year(id):
	return id[5:9]

# create a function to get the zipcode
def get_zipcode(id):
	return id[0:5]

# create a function to get the race
def get_race(id):
	return id[9:12]

# create a function to get the total population
def get_total_population(id):
	return id[12:15]

# create a function to get the year
def get_year(id):
	return id[5:9]

# create a function to get the zipcode
def get_zipcode(id):
	return id[0:5]

# create a function to get the race
def get_race(id):
	return id[9:12

====================================================================================================

PROMPT 33:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Whites with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 33:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Whites with respect to the total population in each zipcode.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")

# create a cursor
cur = conn.cursor()

# create a query
query = """
SELECT demographic_race.zipcode, demographic_race.one_race, demographic_race.white, demographic_race.black, demographic_race.american_indian_and_alaska_native, demographic_race.asian, demographic_race.native_hawaiian_and_other_pacific_islander, demographic_race.some_other_race, demographic_race.hispanic_or_latino, demographic_race.not_hispanic_or_latino, demographic_race.race_total_populatio, demographic_race.white/demographic_race.race_total_populatio as white_perc
FROM demographic_race
WHERE demographic_race.year = 2022
ORDER BY white_perc DESC
LIMIT 1;
"""

# execute the query
cur.execute(query)

# get the results
rows = cur.fetchall()

# print the results
for row in rows:
	print(row)

# close the cursor
cur.close()

# close the connection
conn.close()


====================================================================================================

PROMPT 34:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)
household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 34:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)
household_income_percent_with_mortgage (year, id, zipcode, number_of_units, income_percent_min, income_percent_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import pandas as pd
import numpy as np

# import data
df_demo_races = pd.read_csv('../data/demographic_race.csv')
df_income_mortgage = pd.read_csv('../data/household_income_percent_with_mortgage.csv')

# create a list of years
years = list(df_demo_races['year'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_income_mortgage['zipcode'].unique())

# create a list of zipcodes
zipcodes = list(df_demo_races['zipcode'].unique())

====================================================================================================

PROMPT 35:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those travelling in car alone between year 2019 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 35:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those travelling in car alone between year 2019 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT 
		zipcode,
		(CAST(car_alone AS float) - CAST(car_pool AS float) - CAST(public_transport AS float) - CAST(walk AS float) - CAST(other AS float)) / CAST(total_workers AS float)
	FROM economic_commute_to_work
	WHERE year = 2019
	AND id = 'ATL'
	AND zipcode IN (
		'01001',
		'01003',
		'01005',
		'01007',
		'01009',
		'01011',
		'01013',
		'01015',
		'01017',
		'01019',
		'01021',
		'01023',
		'01025',
		'01027',
		'01029',
		'01031',
		'01033',
		'01035',
		'01037',
		'01039',
		'01041',
		'01043',
		'01045',
		'01047',
		'01049',
		'01051',
		'01053',
		'01055',
		'01057',
		'01059',
		'01060',
		'01061',
		'01063',
		'01065',
		'01067',
		'01069',
		'01071',
		'01073',
		'01074',
		'01075',
		'01077',
		'01079',
		'01081',
		'01083',
		'01085',
		'01087',
		'01089',
		'01091',
		'01093',
		'01095',
		'01097',
		'01099',
		'01101',
		'01103',
		'01105',
		'01107',
		'01109',
		'01111',
		'01113',
		'01115',
		'01117',
		'01119',
		'01121',
		'01123',
		'01125',
		'01127',
		'01129',
		'01131',
		'01133',
		'01135',
		'01137',
		'01139',
		'01141',
		'01143',
		'01145',
		'01147',
		'01149',
		'01151',
		'01153',
		'01155',
		'01157',
		'01159',
		'01161',
		'01163',
		'01165',
		'01167',
		'01169',
		'01171',
		'01173',
		'01175',
		'01177',
		'01179',
		'01181',
		'01183',
		'01185',
		'01187',
		'01189',
		'01191',
		'01193',
		'01195',
		'01197',
		'01199',
		'01201',
		'01203',
		'01205',
		'01207',
		'01209',
		'01211',
		'01213',
		'01215',
		'01217',
		'01219',
		'01221',
		'01223',
		'01225',
		'01227',
		'01229',
		'01231',
		'01233',
		'01235',
		'01237',
		'01239',
		'01241',
		'01243',
		'01245',
		'01247',
		'01249',
		'01251',
		'01253',
		'01255',
		'01257',
		'01259',
		'01261',
		'01263',
		'01265',
		'01267',
		'01269',
		'01271',
		'01273',
		'01275',
		'01277',
		'01279',
		'01281',
		'01283',
		'01285',
		'01287',
		'01289',
		'01291',
		'01293',
		'01295',
		'01297',
		'01299',
		'01301',
		'01303',
		'01305',
		'01307',
		'01309',
		'01311',
		'01313',
		'01315',
		'01317',
		'01319',
		'01320',
		'01323',
		'01325',
		'01327',
		'01329',
		'01331',
		'01333',
		'01335',
		'01337',
		'01339',
		'01341',
		'01343',
		'01345',
		'01347',
		'01349',
		'01351',
		'01353',
		'01355',
		'01357',
		'01359',
		'01361',
		'01363',
		'01365',
		'01367',
		'01369',
		'01371',
		'01373',
		'01375',
		'01377',
		'01379',
		'01381',
		'01383',
		'01385',
		'01387',
		'01389',
		'01391',
		'01393',
		'01395',
		'01397',
		'01399',
		'01401',
		'01403',
		'01405',
		'01407',
		'01409',
		'01411',
		'01413',
		'01415',
		'01417',
		'01419',
		'01421',
		'01423',
		'01425',
		'01427',
		'01429',
		'01431',
		'01433',
		'01435',
		'01437',
		'01439',
		'01441',
		'01443',
		'01445',
		'01447',
		'01449',
		'01451',
		'01453',
		'01455',
		'01457',
		'01459',
		'01461',
		'01463',
		'01465',
		'01467',
		'01469',
		'01471',
		'01473',
		'01475',
		'01477',
		'01479',
		'01481',
		'01483',
		'01485',
		'01487',
		'01489',
		'01491',
		'01493',
		'01495',
		'01497',
		'01499',
		'01501',
		'01503',
		'01505',
		'01507',
		'01509',
		'01511',
		'01513',
		'01515',
		'01517',
		'01519',
		'01521',
		'01523',
		'01525',
		'01527',
		'01529',
		'01531',
		'01533',
		'01535',
		'01537',
		'01539',
		'01541',
		'01543',
		'01545',
		'01547',
		'01549',
		'01551',
		'01553',
		'01555',
		'01557',
		'01559

====================================================================================================

PROMPT 36:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in mean commute time between 2017 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 36:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in mean commute time between 2017 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd
import numpy as np

# Create a dictionary of zipcodes and their respective mean commute times
# Note, this is a very small sample of zipcodes, and the mean commute time is not very accurate
# This is just to show that the data is available
zip_dict = {
	'10001': {'mean_travel_time': 5.0},
	'10002': {'mean_travel_time': 5.0},
	'10003': {'mean_travel_time': 5.0},
	'10004': {'mean_travel_time': 5.0},
	'10005': {'mean_travel_time': 5.0},
	'10006': {'mean_travel_time': 5.0},
	'10007': {'mean_travel_time': 5.0},
	'10008': {'mean_travel_time': 5.0},
	'10009': {'mean_travel_time': 5.0},
	'10010': {'mean_travel_time': 5.0},
	'10011': {'mean_travel_time': 5.0},
	'10012': {'mean_travel_time': 5.0},
	'10013': {'mean_travel_time': 5.0},
	'10014': {'mean_travel_time': 5.0},
	'10015': {'mean_travel_time': 5.0},
	'10016': {'mean_travel_time': 5.0},
	'10017': {'mean_travel_time': 5.0},
	'10018': {'mean_travel_time': 5.0},
	'10019': {'mean_travel_time': 5.0},
	'10020': {'mean_travel_time': 5.0},
	'10021': {'mean_travel_time': 5.0},
	'10022': {'mean_travel_time': 5.0},
	'10023': {'mean_travel_time': 5.0},
	'10024': {'mean_travel_time': 5.0},
	'10025': {'mean_travel_time': 5.0},
	'10026': {'mean_travel_time': 5.0},
	'10027': {'mean_travel_time': 5.0},
	'10028': {'mean_travel_time': 5.0},
	'10029': {'mean_travel_time': 5.0},
	'10030': {'mean_travel_time': 5.0},
	'10031': {'mean_travel_time': 5.0},
	'10032': {'mean_travel_time': 5.0},
	'10033': {'mean_travel_time': 5.0},
	'10034': {'mean_travel_time': 5.0},
	'10035': {'mean_travel_time': 5.0},
	'10036': {'mean_travel_time': 5.0},
	'10037': {'mean_travel_time': 5.0},
	'10038': {'mean_travel_time': 5.0},
	'10039': {'mean_travel_time': 5.0},
	'10040': {'mean_travel_time': 5.0},
	'10041': {'mean_travel_time': 5.0},
	'10042': {'mean_travel_time': 5.0},
	'10043': {'mean_travel_time': 5.0},
	'10044': {'mean_travel_time': 5.0},
	'10045': {'mean_travel_time': 5.0},
	'10046': {'mean_travel_time': 5.0},
	'10047': {'mean_travel_time': 5.0},
	'10048': {'mean_travel_time': 5.0},
	'10049': {'mean_travel_time': 5.0},
	'10050': {'mean_travel_time': 5.0},
	'10051': {'mean_travel_time': 5.0},
	'10052': {'mean_travel_time': 5.0},
	'10053': {'mean_travel_time': 5.0},
	'10054': {'mean_travel_time': 5.0},
	'10055': {'mean_travel_time': 5.0},
	'10056': {'mean_travel_time': 5.0},
	'10057': {'mean_travel_time': 5.0},
	'10058': {'mean_travel_time': 5.0},
	'10059': {'mean_travel_time': 5.0},
	'10060': {'mean_travel_time': 5.0},
	'10061': {'mean_travel_time': 5.0},
	'10062': {'mean_travel_time': 5.0},
	'10063': {'mean_travel_time': 5.0},
	'10064': {'mean_travel_time': 5.0},
	'10065': {'mean_travel_time': 5.0},
	'10066': {'mean_travel_time': 5.0},
	'10067': {'mean_travel_time': 5.0},
	'10068': {'mean_travel_time': 5.0},
	'10069': {'mean_travel_time': 5.0},
	'10070': {'mean_travel_time': 5.0},
	'10071': {'mean_travel_time': 5.0},
	'10072': {'mean_travel_time': 5.0},
	'10073': {'mean_travel_time': 5.0},
	'10074': {'mean_travel_time': 5.0},
	'10075': {'mean_travel_time': 5.0},
	'10076': {'mean_travel_time': 5.0},
	'10077': {'mean_travel_time': 5.0},
	'10078': {'mean_travel_time': 5.0},
	'10079': {'mean_travel_time': 5.0},
	'10080': {'mean_travel_time': 5.0},
	'10081': {'mean_travel_time': 5.0},
	'10082': {'mean_travel_time': 5.0},
	'10083': {'mean_travel_time': 5.0},
	'10084': {'mean_travel_time': 5.0},
	'10085': {'mean_travel_time': 5.0},
	'10086': {'mean_travel_time': 5.0},
	'10087': {'mean_travel_time': 5.0},
	'10088': {'mean_travel_time': 5.0},
	'10089': {'mean_travel_time': 5.0},
	'10090': {'mean_travel_time': 5.0},
	'10091': {'mean_travel_time': 5.0},
	'10092': {'mean_travel_time': 5.0},
	'10093': {'mean_travel_time': 5.0},
	'10094': {'mean_travel_time': 5.0},
	'10095': {'mean_travel_time': 5.0},
	'10096': {'mean_travel_time': 5.0},
	'10097': {'mean_travel_time': 5.0},
	'10098': {'mean_travel_time': 5.0},
	'10099': {'mean_travel_time': 5.0},
	'10100': {'mean_travel_time': 5.0},
	'10101': {'mean_travel_time': 5.0},
	'10102': {'mean_travel_time': 5.0},

====================================================================================================

PROMPT 37:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those working from home between year 2019 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 37:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those working from home between year 2019 and 2022

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# create a cursor
cur = conn.cursor()

# create a query
query = """
SELECT 
	zipcode,
	(CAST(2019 AS INT) - CAST(2020 AS INT)) / CAST(2019 AS INT) * 100 AS percent_change
FROM economic_commute_to_work
WHERE year = 2020
"""

# execute the query
cur.execute(query)

# get the results
results = cur.fetchall()

# print the results
for result in results:
	print(result)

# close the cursor
cur.close()

# close the connection
conn.close()

====================================================================================================

PROMPT 38:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of each commute type when commuting to work.

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 38:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of each commute type when commuting to work.

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd
import numpy as np

# Create a function to get the percentage of each commute type
def get_percentage(df, year, id, zipcode):
	# Get the total number of workers in the zipcode
	total_workers = df.loc[(df['year'] == year) & (df['id'] == id) & (df['zipcode'] == zipcode)]['total_workers'].values[0]
	# Get the number of workers who commute by car alone
	car_alone = df.loc[(df['year'] == year) & (df['id'] == id) & (df['zipcode'] == zipcode)]['car_alone'].values[0]
	# Get the number of workers who commute by car and pool
	car_pool = df.loc[(df['year'] == year) & (df['id'] == id) & (df['zipcode'] == zipcode)]['car_pool'].values[0]
	# Get the number of workers who commute by public transport
	public_transport = df.loc[(df['year'] == year) & (df['id'] == id) & (df['zipcode'] == zipcode)]['public_transport'].values[0]
	# Get the number of workers who commute by walk
	walk = df.loc[(df['year'] == year) & (df['id'] == id) & (df['zipcode'] == zipcode)]['walk'].values[0]
	# Get the number of workers who commute by other means
	other = df.loc[(df['year'] == year) & (df['id'] == id) & (df['zipcode'] == zipcode)]['other'].values[0]
	# Get the number of workers who commute from home
	work_from_home = df.loc[(df['year'] == year) & (df['id'] == id) & (df['zipcode'] == zipcode)]['work_from_home'].values[0]
	# Get the mean travel time
	mean_travel_time = df.loc[(df['year'] == year) & (df['id'] == id) & (df['zipcode'] == zipcode)]['mean_travel_time'].values[0]
	# Create a list of the number of workers who commute by each type
	commute_types = [car_alone, car_pool, public_transport, walk, other, work_from_home]
	# Create a list of the percentage of each type
	percentage_types = []
	for i in range(len(commute_types)):
		percentage_types.append(round(commute_types[i]/total_workers, 2))
	# Create a list of the types of travel
	commute_types_list = ['car_alone', 'car_pool', 'public_transport', 'walk', 'other', 'work_from_home']
	# Create a list of the percentage of each type of travel
	percentage_types_list = []
	for i in range(len(commute_types_list)):
		percentage_types_list.append(round(commute_types[i]/total_workers, 2))
	# Create a list of the types of travel
	commute_types_list = ['car_alone', 'car_pool', 'public_transport', 'walk', 'other', 'work_from_home']
	# Create a list of the percentage of each type of travel
	percentage_types_list = []
	for i in range(len(commute_types_list)):
		percentage_types_list.append(round(commute_types[i]/total_workers, 2))
	# Create a list of the types of travel
	commute_types_list = ['car_alone', 'car_pool', 'public_transport', 'walk', 'other', 'work_from_home']
	# Create a list of the percentage of each type of travel
	percentage_types_list = []
	for i in range(len(commute_types_list)):
		percentage_types_list.append(round(commute_types[i]/total_workers, 2))
	# Create a list of the types of travel
	commute_types_list = ['car_alone', 'car_pool', 'public_transport', 'walk', 'other', 'work_from_home']
	# Create a list of the percentage of each type of travel
	percentage_types_list = []
	for i in range(len(commute_types_list)):
		percentage_types_list.append(round(commute_types[i]/total_workers, 2))
	# Create a list of the types of travel
	commute_types_list = ['car_alone', 'car_pool', 'public_transport', 'walk', 'other', 'work_from_home']
	# Create a list of the percentage of each type of travel
	percentage_types_list = []
	for i in range(len(commute_types_list)):
		percentage_types_list.append(round(commute_types[i]/total_workers, 2))
	# Create a list of the types of travel
	commute_types_list = ['car_alone', 'car_pool', 'public_transport', 'walk', 'other', 'work_from_home']
	# Create a list of the percentage of each type of travel
	percentage_types_list = []
	for i in range(len(commute_types_list)):
		percentage_types_list.append(round(commute_types[i]/total_workers, 2))
	# Create a list of the types of travel
	commute_types_list = ['car_alone', 'car_pool', 'public_transport', 'walk', 'other', 'work_from_home']
	# Create a list of the percentage of each type of travel
	percentage_types_list = []
	for i in range(len(commute_types_list)):
		percentage_types_list.append(round(commute_types[i]/total_workers, 2))
	# Create a list of the types of travel
	commute_types_list = ['car_alone', 'car_pool', 'public_transport', 'walk', 'other', 'work_from_home']
	# Create a list of the percentage of each type of travel
	percentage_types_list = []
	for i in range(len(commute_types_list)):
		percentage_types_list.append(round(commute_types[i]/total_workers, 2))
	# Create a list of the types of travel
	commute_types_list = ['car_alone', 'car_pool', 'public_transport', 'walk', 'other', 'work_from_home']
	# Create a list of the percentage of each type of travel
	percentage_types_list = []
	for i in range(len(commute_types_list)):
		percentage_types_list.append(round(commute_types[i]/total_workers, 2))
	# Create a list of the types of travel
	commute_types_list = ['car_alone', 'car_pool', 'public_transport', 'walk', 'other', 'work_from_home']
	# Create a list of the percentage of each type of travel
	percentage_types_list = []
	for i in range(len(commute_types_list)):
		percentage_types_list.append(round(commute_types[i]/total_workers, 2))
	# Create a list of the types of travel
	commute_types_list = ['car_alone', 'car_pool', 'public_transport', 'walk', 'other', 'work_from_home']
	# Create a list of the percentage of each type of travel
	percentage_types_list = []
	for i in range(len(commute_types_list)):
		percentage_types

====================================================================================================

PROMPT 39:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get median and mean household income for each year.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 39:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get median and mean household income for each year.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the

====================================================================================================

PROMPT 40:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of households with and without mortgage for each year.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 40:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get percentage of households with and without mortgage for each year.

Schema: 
	housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# Get the number of households with and without mortgage for each year
# SELECT year, COUNT(*)
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the percentage of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year

# Get the number of households with and without mortgage for each year
# SELECT year,
# 	(COUNT(*) / (SELECT COUNT(*) FROM housing_mortgage)) * 100
# FROM housing_mortgage
# GROUP BY year
# ORDER BY year


====================================================================================================

PROMPT 41:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get mean commute time and average housing value.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 41:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get mean commute time and average housing value.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to database
conn = psycopg2.connect(
    host = "localhost",
    database = "housing_prices",
    user = "postgres",
    password = "postgres"
)

# create cursor
cur = conn.cursor()

# create query
query = """
SELECT 
	economic_income_and_benefits.year,
	economic_income_and_benefits.id,
	economic_income_and_benefits.zipcode,
	economic_income_and_benefits.total_households,
	economic_income_and_benefits.median_household_income,
	economic_income_and_benefits.mean_household_income,
	housing_value.house_value_min,
	housing_value.house_value_max
FROM economic_income_and_benefits
INNER JOIN housing_value
ON economic_income_and_benefits.id = housing_value.id
WHERE economic_income_and_benefits.year = '2010'
AND economic_income_and_benefits.id = '1'
AND housing_value.zipcode = '94601'
ORDER BY economic_income_and_benefits.zipcode, economic_income_and_benefits.id;
"""

# execute query
cur.execute(query)

# fetch data
data = cur.fetchall()

# close cursor
cur.close()

# close connection
conn.close()

# create dataframe
df = pd.DataFrame(data)

# print dataframe
print(df)

# create query
query = """
SELECT 
	economic_income_and_benefits.year,
	economic_income_and_benefits.id,
	economic_income_and_benefits.zipcode,
	economic_income_and_benefits.total_households,
	economic_income_and_benefits.median_household_income,
	economic_income_and_benefits.mean_household_income,
	housing_value.house_value_min,
	housing_value.house_value_max
FROM economic_income_and_benefits
INNER JOIN housing_value
ON economic_income_and_benefits.id = housing_value.id
WHERE economic_income_and_benefits.year = '2010'
AND economic_income_and_benefits.id = '1'
AND housing_value.zipcode = '94601'
ORDER BY economic_income_and_benefits.zipcode, economic_income_and_benefits.id;
"""

# execute query
cur.execute(query)

# fetch data
data = cur.fetchall()

# close cursor
cur.close()

# close connection
conn.close()

# create dataframe
df = pd.DataFrame(data)

# print dataframe
print(df)

# create query
query = """
SELECT 
	economic_income_and_benefits.year,
	economic_income_and_benefits.id,
	economic_income_and_benefits.zipcode,
	economic_income_and_benefits.total_households,
	economic_income_and_benefits.median_household_income,
	economic_income_and_benefits.mean_household_income,
	housing_value.house_value_min,
	housing_value.house_value_max
FROM economic_income_and_benefits
INNER JOIN housing_value
ON economic_income_and_benefits.id = housing_value.id
WHERE economic_income_and_benefits.year = '2010'
AND economic_income_and_benefits.id = '1'
AND housing_value.zipcode = '94601'
ORDER BY economic_income_and_benefits.zipcode, economic_income_and_benefits.id;
"""

# execute query
cur.execute(query)

# fetch data
data = cur.fetchall()

# close cursor
cur.close()

# close connection
conn.close()

# create dataframe
df = pd.DataFrame(data)

# print dataframe
print(df)

# create query
query = """
SELECT 
	economic_income_and_benefits.year,
	economic_income_and_benefits.id,
	economic_income_and_benefits.zipcode,
	economic_income_and_benefits.total_households,
	economic_income_and_benefits.median_household_income,
	economic_income_and_benefits.mean_household_income,
	housing_value.house_value_min,
	housing_value.house_value_max
FROM economic_income_and_benefits
INNER JOIN housing_value
ON economic_income_and_benefits.id = housing_value.id
WHERE economic_income_and_benefits.year = '2010'
AND economic_income_and_benefits.id = '1'
AND housing_value.zipcode = '94601'
ORDER BY economic_income_and_benefits.zipcode, economic_income_and_benefits.id;
"""

# execute query
cur.execute(query)

# fetch data
data = cur.fetchall()

# close cursor
cur.close()

# close connection
conn.close()

# create dataframe
df = pd.DataFrame(data)

# print dataframe
print(df)

# create query
query = """
SELECT 
	economic_income_and_benefits.year,
	economic_income_and_benefits.id,
	economic_income_and_benefits.zipcode,
	economic_income_and_benefits.total_households,
	economic_income_and_benefits.median_household_income,
	economic_income_and_benefits.mean_household_income,
	housing_value.house_value_min,
	housing_value.house_value_max
FROM economic_income_and_benefits
INNER JOIN housing_value
ON economic_income_and_benefits.id = housing_value.id
WHERE economic_income_and_benefits.year = '2010'
AND economic_income_and_benefits.id = '1'
AND housing_value.zipcode = '94601'
ORDER BY economic_income_and_benefits.zipcode, economic_income_and_benefits.id;
"""

# execute query
cur.execute(query)

# fetch data
data = cur.fetchall()

# close cursor
cur.close()

# close connection
conn.close()

# create dataframe
df = pd.DataFrame(data)

# print dataframe
print(df)

# create query
query = """
SELECT 
	economic_income_and_benefits.year,
	economic_income_and_benefits.id,
	economic_income_and_benefits.zipcode,
	economic_income_and_benefits.total_households,
	economic_income_and_benefits.median_household_income,
	economic_income_and_benefits.mean_household_income,
	housing_value.house_value_min,
	housing_value.house_value_max
FROM economic_income_and_benefits
INNER JOIN housing_value
ON economic_income_and_benefits.id = housing_value.id
WHERE economic_income_and_benefits.year = '2010'
AND economic_income_and_benefits.id = '1'
AND housing_value.zipcode = '94601'
ORDER BY economic_income_and_benefits.zipcode, economic_income_and_benefits.id;


====================================================================================================

PROMPT 42:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get mean commute time by zipcode in the year 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 42:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get mean commute time by zipcode in the year 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2

# connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# create a cursor
cur = conn.cursor()

# create a query
query = "SELECT mean_household_income, total_households, median_household_income, zipcode FROM economic_income_and_benefits WHERE year = 2022"

# execute the query
cur.execute(query)

# get the results
results = cur.fetchall()

# print the results
for result in results:
	print(result)

# close the cursor
cur.close()

# close the connection
conn.close()


====================================================================================================

PROMPT 43:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average housing rent and mean household income across all zipcodes for the year 2022.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)
economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 43:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get average housing rent and mean household income across all zipcodes for the year 2022.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)
economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	What is the average housing rent and mean household income for the year 2022?

Sample Output:
	SELECT housing_rent.rent_value_min, economic_income_and_benefits.mean_household_income
	FROM housing_rent, economic_income_and_benefits
	WHERE housing_rent.id = economic_income_and_benefits.id
	AND housing_rent.year = 2022
	AND housing_rent.zipcode = economic_income_and_benefits.zipcode
	AND housing_rent.rent_value_min < economic_income_and_benefits.mean_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.mean_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.total_households
	AND housing_rent.rent_value_max > economic_income_and_benefits.total_households
	AND housing_rent.rent_value_min < economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.mean_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.mean_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.total_households
	AND housing_rent.rent_value_max > economic_income_and_benefits.total_households
	AND housing_rent.rent_value_min < economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.mean_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.mean_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.total_households
	AND housing_rent.rent_value_max > economic_income_and_benefits.total_households
	AND housing_rent.rent_value_min < economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.mean_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.mean_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.total_households
	AND housing_rent.rent_value_max > economic_income_and_benefits.total_households
	AND housing_rent.rent_value_min < economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.mean_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.mean_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.total_households
	AND housing_rent.rent_value_max > economic_income_and_benefits.total_households
	AND housing_rent.rent_value_min < economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.mean_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.mean_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.total_households
	AND housing_rent.rent_value_max > economic_income_and_benefits.total_households
	AND housing_rent.rent_value_min < economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.mean_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.mean_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.total_households
	AND housing_rent.rent_value_max > economic_income_and_benefits.total_households
	AND housing_rent.rent_value_min < economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.mean_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.mean_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_max > economic_income_and_benefits.median_household_income
	AND housing_rent.rent_value_min < economic_income_and_benefits.total_households
	AND housing_rent.rent_value_max > economic_income_and_benefits.total_households
	AND housing_rent.rent_value_min < economic_income_and_benefits.median_house

====================================================================================================

PROMPT 44:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 44:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to the database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")

# create a cursor
cur = conn.cursor()

# create a query
query = """
SELECT 
	zipcode, 
	total_households, 
	median_household_income, 
	mean_household_income
FROM economic_income_and_benefits
WHERE year = 2022;
"""

# execute the query
cur.execute(query)

# get the results
rows = cur.fetchall()

# close the cursor
cur.close()

# close the connection
conn.close()

# create a dataframe
df = pd.DataFrame(rows, columns=["zipcode", "total_households", "median_household_income", "mean_household_income"])

# print the dataframe
print(df)

# get the median income
median_income = df["median_household_income"].median()

# print the median income
print(median_income)

# get the mean income
mean_income = df["mean_household_income"].mean()

# print the mean income
print(mean_income)

# get the median total households
median_total_households = df["total_households"].median()

# print the median total households
print(median_total_households)

# get the mean total households
mean_total_households = df["total_households"].mean()

# print the mean total households
print(mean_total_households)

# get the median total households
median_total_households = df["total_households"].median()

# print the median total households
print(median_total_households)

# get the mean total households
mean_total_households = df["total_households"].mean()

# print the mean total households
print(mean_total_households)

# get the median total households
median_total_households = df["total_households"].median()

# print the median total households
print(median_total_households)

# get the mean total households
mean_total_households = df["total_households"].mean()

# print the mean total households
print(mean_total_households)

# get the median total households
median_total_households = df["total_households"].median()

# print the median total households
print(median_total_households)

# get the mean total households
mean_total_households = df["total_households"].mean()

# print the mean total households
print(mean_total_households)

# get the median total households
median_total_households = df["total_households"].median()

# print the median total households
print(median_total_households)

# get the mean total households
mean_total_households = df["total_households"].mean()

# print the mean total households
print(mean_total_households)

# get the median total households
median_total_households = df["total_households"].median()

# print the median total households
print(median_total_households)

# get the mean total households
mean_total_households = df["total_households"].mean()

# print the mean total households
print(mean_total_households)

# get the median total households
median_total_households = df["total_households"].median()

# print the median total households
print(median_total_households)

# get the mean total households
mean_total_households = df["total_households"].mean()

# print the mean total households
print(mean_total_households)

# get the median total households
median_total_households = df["total_households"].median()

# print the median total households
print(median_total_households)

# get the mean total households
mean_total_households = df["total_households"].mean()

# print the mean total households
print(mean_total_households)

# get the median total households
median_total_households = df["total_households"].median()

# print the median total households
print(median_total_households)

# get the mean total households
mean_total_households = df["total_households"].mean()

# print the mean total households
print(mean_total_households)

# get the median total households
median_total_households = df["total_households"].median()

# print the median total households
print(median_total_households)

# get the mean total households
mean_total_households = df["total_households"].mean()

# print the mean total households
print(mean_total_households)

# get the median total households
median_total_households = df["total_households"].median()

# print the median total households
print(median_total_households)

# get the mean total households
mean_total_households = df["total_households"].mean()

# print the mean total households
print(mean_total_households)

# get the median total households
median_total_households = df["total_households"].median()

# print the median total households
print(median_total_households)

# get the mean total households
mean_total_households = df["total_households"].mean()

# print the mean total households
print(mean_total_households)

# get the median total households
median_total_households = df["total_households"].median()

# print the median total households
print(median_total_households)

# get the mean total households
mean_total_households = df["total_households"].mean()

# print the mean total households
print(mean_total_households)

# get the median total households
median_total_households = df["total_households"].median()

# print the median total households
print(median_total_households)

# get the mean total households
mean_total_households = df["total_households"].mean()

# print the mean total households
print(mean_total_households)

# get the median total households
median_total_households = df["total_households"].median()

# print the median total households
print(median_total_households)

# get the mean total households
mean_total_households = df["total_households"].mean()

# print the mean total households
print(mean_total_households)

# get the median total households
median_total_households = df["total_households"].median()

# print the median total households
print(median_total_households)

# get the mean total households
mean_total_households = df["total_households"].mean()

# print the mean total households
print(mean_total_households)

# get the median total households
median_total_households = df["total_households"].median()

# print the median total households
print(median_total_households)


====================================================================================================

PROMPT 45:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get change in averaged median household income from 2017 to 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 45:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get change in averaged median household income from 2017 to 2022.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2

# connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# create a cursor
cur = conn.cursor()

# create a query
cur.execute(
    """
    SELECT 
        (median_household_income_2022 - median_household_income_2017) / median_household_income_2017
    FROM economic_income_and_benefits
    WHERE year = 2022
    AND id = 1
    AND zipcode = '92601'
    """
)

# get the results
results = cur.fetchall()

# print the results
print(results)

# close the cursor
cur.close()

# close the connection
conn.close()

====================================================================================================

PROMPT 46:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, get median and mean household income over all the years.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 46:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, get median and mean household income over all the years.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

#

====================================================================================================

PROMPT 47:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get percentage of units with mortgage and median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 47:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get percentage of units with mortgage and median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_mortgage (year, id, zipcode, units_with_mortgage, units_without_mortgage)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "housing_db",
    user = "postgres",
    password = "postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT economic_income_and_benefits.median_household_income, housing_mortgage.units_with_mortgage, housing_mortgage.units_without_mortgage
	FROM economic_income_and_benefits
	INNER JOIN housing_mortgage
	ON economic_income_and_benefits.id = housing_mortgage.id
	WHERE economic_income_and_benefits.year = 2018
	AND economic_income_and_benefits.zipcode = '94501'
	AND housing_mortgage.units_with_mortgage > 0
	AND housing_mortgage.units_without_mortgage > 0
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage < 0.5
	AND housing_mortgage.units_with_mortgage / housing_mortgage.units_without_mortgage <

====================================================================================================

PROMPT 48:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in the year 2022, get average housing value and median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 48:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in the year 2022, get average housing value and median household income.

Schema: 
	economic_income_and_benefits (year, id, zipcode, total_households, median_household_income, mean_household_income)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2

# connect to the database
conn = psycopg2.connect(
	host = "localhost",
	database = "housing_data",
	user = "postgres",
	password = "postgres"
)

# create a cursor
cur = conn.cursor()

# create a query
query = "SELECT housing_value.house_value_min, housing_value.house_value_max, economic_income_and_benefits.median_household_income, economic_income_and_benefits.total_households FROM housing_value, economic_income_and_benefits WHERE housing_value.year = 2022 AND housing_value.zipcode = economic_income_and_benefits.zipcode"

# execute the query
cur.execute(query)

# get the results
rows = cur.fetchall()

# print the results
for row in rows:
	print(row)

# close the cursor
cur.close()

# close the connection
conn.close()


====================================================================================================

PROMPT 49:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, find the change in percentage of population with no health insurance from year 2017 to 2022.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 49:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, find the change in percentage of population with no health insurance from year 2017 to 2022.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here


====================================================================================================

PROMPT 50:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 50:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2

# connect to database
conn = psycopg2.connect(
	host = "localhost",
	database = "postgres",
	user = "postgres",
	password = "postgres"
)

# create cursor
cur = conn.cursor()

# create query
cur.execute("""
	SELECT 
		economic_health_insurance.zipcode,
		economic_health_insurance.no_health_insurance,
		economic_health_insurance.with_health_insurance,
		housing_rent.rent_value_min,
		housing_rent.rent_value_max,
		economic_health_insurance.total_population,
		housing_rent.number_of_units
	FROM 
		economic_health_insurance,
		housing_rent
	WHERE 
		economic_health_insurance.year = 2022
		AND economic_health_insurance.id = housing_rent.id
		AND economic_health_insurance.zipcode = housing_rent.zipcode
""")

# get results
results = cur.fetchall()

# close cursor
cur.close()

# close connection
conn.close()

# print results
for result in results:
	print(result)

# print statement
print("""
	SELECT 
		economic_health_insurance.zipcode,
		economic_health_insurance.no_health_insurance,
		economic_health_insurance.with_health_insurance,
		housing_rent.rent_value_min,
		housing_rent.rent_value_max,
		economic_health_insurance.total_population,
		housing_rent.number_of_units
	FROM 
		economic_health_insurance,
		housing_rent
	WHERE 
		economic_health_insurance.year = 2022
		AND economic_health_insurance.id = housing_rent.id
		AND economic_health_insurance.zipcode = housing_rent.zipcode
		AND economic_health_insurance.no_health_insurance > economic_health_insurance.with_health_insurance
""")


====================================================================================================

PROMPT 51:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average housing price.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 51:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average housing price.

Schema: 
	economic_health_insurance (year, id, zipcode, total_population, with_health_insurance, no_health_insurance)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2

# connect to database
conn = psycopg2.connect(
	host = "localhost",
	database = "postgres",
	user = "postgres",
	password = "postgres"
)

# create a cursor
cur = conn.cursor()

# create a query
cur.execute("""
	SELECT 
		economic_health_insurance.zipcode,
		economic_health_insurance.no_health_insurance,
		economic_health_insurance.with_health_insurance,
		housing_value.house_value_min,
		housing_value.house_value_max,
		economic_health_insurance.total_population,
		economic_health_insurance.year
	FROM housing_value
	INNER JOIN economic_health_insurance
	ON housing_value.id = economic_health_insurance.id
	WHERE economic_health_insurance.year = 2022
	ORDER BY economic_health_insurance.zipcode, economic_health_insurance.year;
""")

# fetch all the results
rows = cur.fetchall()

# print the results
for row in rows:
	print(row)

# close the cursor
cur.close()

# close the connection
conn.close()


====================================================================================================

PROMPT 52:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the change in percentage of population commuting via public transport from year 2017 to 2022.

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 52:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the change in percentage of population commuting via public transport from year 2017 to 2022.

Schema: 
	economic_commute_to_work (year, id, zipcode, total_workers, car_alone, car_pool, public_transport, walk, other, work_from_home, mean_travel_time)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd

# Create a function to get the SQL statement
def get_sql_statement(df, question):
	# Create a list of the column names
	column_names = list(df.columns)
	# Create a list of the column values
	column_values = list(df.values)
	# Create a list of the column values
	column_values_str = [str(i) for i in column_values]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("[", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("]", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace(",", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("nan", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("None", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in column_values_str]
	# Create a list of the column values
	column_values_str = [i.replace("'", "") for i in

====================================================================================================

PROMPT 53:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the count of non-US citizens and foreign born population

Schema: 
	social_citizenship_status (year, id, zipcode, foreign_born_population, naturalized_us_citizen, not_a_us_citizen)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 53:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the count of non-US citizens and foreign born population

Schema: 
	social_citizenship_status (year, id, zipcode, foreign_born_population, naturalized_us_citizen, not_a_us_citizen)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here


====================================================================================================

PROMPT 54:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get the average of each ethnic group (black, white, asian) by year.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 54:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get the average of each ethnic group (black, white, asian) by year.

Schema: 
	demographic_race (year, id, zipcode, race_total_populatio, one_race, two_or_more_races, white, black, american_indian_and_alaska_native, asian, native_hawaiian_and_other_pacific_islander, some_other_race, hispanic_or_latino_total, hispanic_or_latino, not_hispanic_or_latino)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of the columns to be used
columns = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
columns = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
columns = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
columns = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
columns = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
columns = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
columns = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
columns = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
columns = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
columns = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
columns = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
columns = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
columns = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
columns = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races', 'white', 'black', 'american_indian_and_alaska_native', 'asian', 'native_hawaiian_and_other_pacific_islander', 'some_other_race', 'hispanic_or_latino_total', 'hispanic_or_latino', 'not_hispanic_or_latino']

# Create a list of the columns to be used
columns = ['year', 'id', 'zipcode', 'race_total_populatio', 'one_race', 'two_or_more_races',

====================================================================================================

PROMPT 55:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get the percentage of types of education attained by population aged 25 and above for each year.

Schema: 
	social_education_attainment (year, id, zipcode, population_25_years_and_over, less_than_9th_grade, 9th_to_12th_grade_no_diploma, high_school_graduate, some_college_no_degree, associate_degree, bachelors_degree, graduate_or_professional_degree, high_school graduate_or_higher, bachelors_degree_or_higher)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 55:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Get the percentage of types of education attained by population aged 25 and above for each year.

Schema: 
	social_education_attainment (year, id, zipcode, population_25_years_and_over, less_than_9th_grade, 9th_to_12th_grade_no_diploma, high_school_graduate, some_college_no_degree, associate_degree, bachelors_degree, graduate_or_professional_degree, high_school graduate_or_higher, bachelors_degree_or_higher)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	year, id, zipcode, population_25_years_and_over, less_than_9th_grade, 9th_to_12th_grade_no_diploma, high_school_graduate, some_college_no_degree, associate_degree, bachelors_degree, graduate_or_professional_degree, high_school_graduate_or_higher, bachelors_degree_or_higher
	2010, 1, 95001, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0
	2010, 1, 95001, 5, 56, 0, 0, 0, 0, 0, 0, 0,

====================================================================================================

PROMPT 56:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	In year 2022, for each zipcode in Georgia, get the percentage of population with associate and bachelors degree or higher and average housing price.

Schema: 
	social_education_attainment (year, id, zipcode, population_25_years_and_over, less_than_9th_grade, 9th_to_12th_grade_no_diploma, high_school_graduate, some_college_no_degree, associate_degree, bachelors_degree, graduate_or_professional_degree, high_school graduate_or_higher, bachelors_degree_or_higher)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 56:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	In year 2022, for each zipcode in Georgia, get the percentage of population with associate and bachelors degree or higher and average housing price.

Schema: 
	social_education_attainment (year, id, zipcode, population_25_years_and_over, less_than_9th_grade, 9th_to_12th_grade_no_diploma, high_school_graduate, some_college_no_degree, associate_degree, bachelors_degree, graduate_or_professional_degree, high_school graduate_or_higher, bachelors_degree_or_higher)
housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	year: 2022
	id: 1
	zipcode: 30301
	
Sample Output:
	SELECT COUNT(*)
	FROM social_education_attainment
	WHERE year = 2022 AND id = 1 AND zipcode = 30301
	GROUP BY year, id, zipcode
	HAVING COUNT(*) > 0
	ORDER BY COUNT(*) DESC
	LIMIT 1;
	
	SELECT AVG(house_value_max)
	FROM housing_value
	WHERE year = 2022 AND id = 1 AND zipcode = 30301
	GROUP BY year, id, zipcode
	HAVING COUNT(*) > 0
	ORDER BY COUNT(*) DESC
	LIMIT 1;
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

====================================================================================================

PROMPT 57:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  price and percentage of houses having broadband subscription.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 57:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  price and percentage of houses having broadband subscription.

Schema: 
	housing_value (year, id, zipcode, number_of_units, house_value_min, house_value_max)
social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	For all years after 2016, for each zipcode get average housing  price and percentage of houses having broadband subscription.

Sample Output:
	SELECT housing_value.zipcode, AVG(housing_value.house_value_min) AS avg_housing_value, AVG(housing_value.house_value_max) AS avg_housing_value, AVG(housing_value.house_value_min) / AVG(housing_value.house_value_max) AS avg_housing_value_percentage, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription
	FROM housing_value, social_computer_internet_usage
	WHERE housing_value.year > 2016 AND housing_value.id = social_computer_internet_usage.id
	GROUP BY housing_value.zipcode
	ORDER BY avg_housing_value_percentage DESC
	LIMIT 1;

"""

# Write your MySQL query statement below

SELECT housing_value.zipcode, AVG(housing_value.house_value_min) AS avg_housing_value, AVG(housing_value.house_value_max) AS avg_housing_value, AVG(housing_value.house_value_min) / AVG(housing_value.house_value_max) AS avg_housing_value_percentage, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription
FROM housing_value, social_computer_internet_usage
WHERE housing_value.year > 2016 AND housing_value.id = social_computer_internet_usage.id
GROUP BY housing_value.zipcode
ORDER BY avg_housing_value_percentage DESC
LIMIT 1;

# Write your MySQL query statement below

SELECT housing_value.zipcode, AVG(housing_value.house_value_min) AS avg_housing_value, AVG(housing_value.house_value_max) AS avg_housing_value, AVG(housing_value.house_value_min) / AVG(housing_value.house_value_max) AS avg_housing_value_percentage, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription
FROM housing_value, social_computer_internet_usage
WHERE housing_value.year > 2016 AND housing_value.id = social_computer_internet_usage.id
GROUP BY housing_value.zipcode
ORDER BY avg_housing_value_percentage DESC
LIMIT 1;

# Write your MySQL query statement below

SELECT housing_value.zipcode, AVG(housing_value.house_value_min) AS avg_housing_value, AVG(housing_value.house_value_max) AS avg_housing_value, AVG(housing_value.house_value_min) / AVG(housing_value.house_value_max) AS avg_housing_value_percentage, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription
FROM housing_value, social_computer_internet_usage
WHERE housing_value.year > 2016 AND housing_value.id = social_computer_internet_usage.id
GROUP BY housing_value.zipcode
ORDER BY avg_housing_value_percentage DESC
LIMIT 1;

# Write your MySQL query statement below

SELECT housing_value.zipcode, AVG(housing_value.house_value_min) AS avg_housing_value, AVG(housing_value.house_value_max) AS avg_housing_value, AVG(housing_value.house_value_min) / AVG(housing_value.house_value_max) AS avg_housing_value_percentage, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription
FROM housing_value, social_computer_internet_usage
WHERE housing_value.year > 2016 AND housing_value.id = social_computer_internet_usage.id
GROUP BY housing_value.zipcode
ORDER BY avg_housing_value_percentage DESC
LIMIT 1;

# Write your MySQL query statement below

SELECT housing_value.zipcode, AVG(housing_value.house_value_min) AS avg_housing_value, AVG(housing_value.house_value_max) AS avg_housing_value, AVG(housing_value.house_value_min) / AVG(housing_value.house_value_max) AS avg_housing_value_percentage, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription
FROM housing_value, social_computer_internet_usage
WHERE housing_value.year > 2016 AND housing_value.id = social_computer_internet_usage.id
GROUP BY housing_value.zipcode
ORDER BY avg_housing_value_percentage DESC
LIMIT 1;

# Write your MySQL query statement below

SELECT housing_value.zipcode, AVG(housing_value.house_value_min) AS avg_housing_value, AVG(housing_value.house_value_max) AS avg_housing_value, AVG(housing_value.house_value_min) / AVG(housing_value.house_value_max) AS avg_housing_value_percentage, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription
FROM housing_value, social_computer_internet_usage
WHERE housing_value.year > 2016 AND housing_value.id = social_computer_internet_usage.id
GROUP BY housing_value.zipcode
ORDER BY avg_housing_value_percentage DESC
LIMIT 1;

# Write your MySQL query statement below

SELECT housing_value.zipcode, AVG(housing_value.house_value_min) AS avg_housing_value, AVG(housing_value.house_value_max) AS avg_housing_value, AVG(housing_value.house_value_min) / AVG(housing_value.house_value_max) AS avg_housing_value_percentage, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription
FROM housing_value, social_computer_internet_usage
WHERE housing_value.year > 2016 AND housing_value.id = social_computer_internet_usage.id
GROUP BY housing_value.zipcode
ORDER BY avg_housing_value_percentage DESC
LIMIT 1;

# Write your MySQL query statement below

SELECT housing_value.zipcode, AVG(housing_value.house_value_min) AS avg_housing_value, AVG(housing_value.house_value_max) AS avg_housing_value, AVG(housing_value.house_value_min) / AVG(housing_value.house_value_max) AS avg_housing_value_percentage, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription
FROM housing_value, social_computer_internet_usage
WHERE housing_value.year > 2016 AND housing_value.id = social_computer_internet_usage.id
GROUP BY housing_value.zipcode
ORDER BY avg_housing_value_percentage DESC
LIMIT 1;

# Write your MySQL query statement below

SELECT housing_value.zipcode, AVG(housing_value.house_value_min) AS avg_housing_value, AVG(housing_value.house_value_max) AS avg_housing_value, AVG(housing_value.house_value_min) / AVG(housing_value.house_value_max) AS avg_housing_value_percentage, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription
FROM housing_value, social_computer_internet_usage

====================================================================================================

PROMPT 58:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)
social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 58:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.

Schema: 
	housing_rent (year, id, zipcode, number_of_units, rent_value_min, rent_value_max)
social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.

Sample Output:
	SELECT housing_rent.id, housing_rent.year, housing_rent.zipcode, housing_rent.rent_value_min, housing_rent.rent_value_max, housing_rent.number_of_units, housing_rent.rent_value_avg, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_households, social_computer_internet_usage.with_a_computer, social_computer_internet_usage.with_broadband_internet_subscription, social_computer_internet_usage.total_household

====================================================================================================

PROMPT 59:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode, get percentage of households with a computer and percentage of housholds with broadband subscription.

Schema: 
	social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 59:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode, get percentage of households with a computer and percentage of housholds with broadband subscription.

Schema: 
	social_computer_internet_usage (year, id, zipcode, total_households, with_a_computer, with_broadband_internet_subscription)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here


====================================================================================================

