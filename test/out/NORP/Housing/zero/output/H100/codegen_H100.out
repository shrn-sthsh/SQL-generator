PROMPT 1:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, give the change in average house rent from 2019 to 2022, i.e., from pre-COVID to post-COVID period.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 1:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, give the change in average house rent from 2019 to 2022, i.e., from pre-COVID to post-COVID period.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- zipcode: a 5-digit zipcode
	- year: a 4-digit year
	- month: a 2-digit month
	- day: a 2-digit day
	- year2: a 4-digit year
	- month2: a 2-digit month
	- day2: a 2-digit day

Output:
	- SQL statement
	- 'INSUFFICENT'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	- 'INVALID'
	

====================================================================================================

PROMPT 2:

Generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 2:

Generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- GRAPI
	- Household income
	- Year

Output:
	- SQL statement
"""

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of household income.

# Get year-on-year change in GRAPI, where GRAPI is gross rent as percentage of

====================================================================================================

PROMPT 3:

Generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in SMOCAPI, where SMOCAPI is selected monthly home-ownership costs as a percent of household income

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 3:

Generate an SQL statement to answer a question.

Prompt: 
	Get year-on-year change in SMOCAPI, where SMOCAPI is selected monthly home-ownership costs as a percent of household income

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- income: household income
	- smoc: percent of household income that is spent on SMOC
	- year: year
	- month: month
	- year_on_year: year-on-year change in SMOCAPI

Output:
	- SQL statement

'''

# Get input
income = input("What is the household income? ")
smoc = input("What is the percent of household income that is spent on SMOC? ")
year = input("What is the year? ")
month = input("What is the month? ")
year_on_year = input("What is the year-on-year change in SMOCAPI? ")

# Calculate
income_as_float = float(income)
smoc_as_float = float(smoc)
year_on_year_as_float = float(year_on_year)

# Calculate percent of income that is spent on SMOC
smoc_as_percent_of_income = (smoc_as_float / income_as_float) * 100

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year_on_year_change_in_smocapi = year_on_year_as_float - smoc_as_float

# Calculate year-on-year change in SMOCAPI
year

====================================================================================================

PROMPT 4:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in average house rent from 2017 to 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 4:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in average house rent from 2017 to 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd
import numpy as np

# Read in the data
df = pd.read_csv('data/rent_data.csv')

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day
df['day'] = df['date'].str.split('/').str[1]

# Create a new column for the year
df['year'] = df['date'].str.split('/').str[2]

# Create a new column for the month
df['month'] = df['date'].str.split('/').str[0]

# Create a new column for the day

====================================================================================================

PROMPT 5:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 5:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where SMOCAPI is greater than 28.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd
import numpy as np

# Read in the data
df = pd.read_csv('smocapi_2017.csv')

# Generate the SQL statement
# Note, the SQL statement should be a single string.
# If multiple lines are required, simply add a ';' to the end of the last line.
# The statement should be in the following format:
# 'SELECT <columns> FROM <table> WHERE <conditions>;'
# Note, the columns and table names should be exact.
# The conditions should be the same as the question.
# If the question is not answered, simply use 'INSUFFICENT'

# Your code here

# The statement should be in the following format:
# 'SELECT <columns> FROM <table> WHERE <conditions>;'
# Note, the columns and table names should be exact.
# The conditions should be the same as the question.
# If the question is not answered, simply use 'INSUFFICENT'

# Your code here

# If the statement is not in the correct format,
# the program will not run.
# If the statement is not answered,
# simply use 'INSUFFICENT'

# If the statement is correct,
# the program will run.
# The program will print the statement.
# The program will also print the number of rows in the table.
# The program will also print the number of columns in the table.
# The program will also print the first 5 rows of the table.
# The program will also print the first 5 columns of the table.
# The program will also print the last 5 rows of the table.
# The program will also print the last 5 columns of the table.
# The program will also print the mean of the column.
# The program will also print the median of the column.
# The program will also print the standard deviation of the column.
# The program will also print the minimum of the column.
# The program will also print the maximum of the column.
# The program will also print the sum of the column.
# The program will also print the number of rows in the table.
# The program will also print the number of columns in the table.
# The program will also print the first 5 rows of the table.
# The program will also print the first 5 columns of the table.
# The program will also print the last 5 rows of the table.
# The program will also print the last 5 columns of the table.
# The program will also print the mean of the column.
# The program will also print the median of the column.
# The program will also print the standard deviation of the column.
# The program will also print the minimum of the column.
# The program will also print the maximum of the column.
# The program will also print the sum of the column.
# The program will also print the number of rows in the table.
# The program will also print the number of columns in the table.
# The program will also print the first 5 rows of the table.
# The program will also print the first 5 columns of the table.
# The program will also print the last 5 rows of the table.
# The program will also print the last 5 columns of the table.
# The program will also print the mean of the column.
# The program will also print the median of the column.
# The program will also print the standard deviation of the column.
# The program will also print the minimum of the column.
# The program will also print the maximum of the column.
# The program will also print the sum of the column.
# The program will also print the number of rows in the table.
# The program will also print the number of columns in the table.
# The program will also print the first 5 rows of the table.
# The program will also print the first 5 columns of the table.
# The program will also print the last 5 rows of the table.
# The program will also print the last 5 columns of the table.
# The program will also print the mean of the column.
# The program will also print the median of the column.
# The program will also print the standard deviation of the column.
# The program will also print the minimum of the column.
# The program will also print the maximum of the column.
# The program will also print the sum of the column.
# The program will also print the number of rows in the table.
# The program will also print the number of columns in the table.
# The program will also print the first 5 rows of the table.
# The program will also print the first 5 columns of the table.
# The program will also print the last 5 rows of the table.
# The program will also print the last 5 columns of the table.
# The program will also print the mean of the column.
# The program will also print the median of the column.
# The program will also print the standard deviation of the column.
# The program will also print the minimum of the column.
# The program will also print the maximum of the column.
# The program will also print the sum of the column.
# The program will also print the number of rows in the table.
# The program will also print the number of columns in the table.
# The program will also print the first 5 rows of the table.
# The program will also print the first 5 columns of the table.
# The program will also print the last 5 rows of the table.
# The program will also print the last 5 columns of the table.
# The program will also print the mean of the column.
# The program will also print the median of the column.
# The program will also print the standard deviation of the column.
# The program will also print the minimum of the column.
# The program will also print the maximum of the column.
# The program will also print the sum of the column.
# The program will also print the number of rows in the table.
# The program will also print the number of columns in the table.
# The program will also print the first 5 rows of the table.
# The program will also print the first 5 columns of the table.
# The program will also print the last 5 rows of the table.
# The program will also print the last 5 columns of the table.
# The program will also print the mean of the column.
# The program will also print the median of the column.
# The program will also print the standard deviation of the column.
# The program will also print the minimum of the column.
# The program will also print the maximum of the column.
# The program will also print the sum of the column.
# The program will also print the number of rows in the table.
# The program will also print the number of columns in the table.
# The program will also print the first 5 rows of the table.
# The program will also print the first 5 columns of the table.
# The program will also print the last 5 rows of the table.
# The program will also print the last 5 columns of the table.
# The program will also print the mean of the column.
# The program will also print the median of the column.
# The program will also print the standard deviation of the column.
# The program will also print the minimum of the column.
# The program will also print the maximum of the column.
# The program will also print the sum of the column.
# The program will also print the number of rows in the table.
# The program will also print the number of columns in the table.
# The program will also print the first 5 rows of the table.
# The program will also print the first 5 columns of the table.
# The program will also print the last 5 rows of the table.
# The program will also print the last 5 columns of the table.
# The program will also print the mean of the column.
# The program will also print the median of the column.
# The program will also print the standard deviation of the column.
# The program will also print the minimum of the column.
# The program will also print the maximum of the column.
# The program will also print the sum of the column.
# The program will also print the number of rows in the table.
# The program will also print the number of columns in the table.
# The program will also print the first 5 rows of the table.
# The program will also print the first 5 columns of the table.
# The program will also print the last 5 rows of the table.
# The program will also print the last 5 columns of the table.
# The program will also print the mean of the column.
# The program will also print the median of the column.
# The program will also print the standard deviation of the column.
# The program will also print the minimum of the column.


====================================================================================================

PROMPT 6:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 6:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2017, get zipcodes in Georgia where GRAPI is greater than or equal to 30.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your SQL query statement below

SELECT *
FROM zipcodes
WHERE year = 2017
AND state = 'Georgia'
AND GRAPI >= 30

# OPTIONAL: You can also ask for a specific zipcode.
# For example, you can ask for the zipcode of the following address:
# "123 Main Street, Anytown, GA 30301"
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
# You can then answer the question "What is the zipcode of 123 Main Street, Anytown, GA 30301?"
# You can then look up the zipcode in the zipcodes table.
#

====================================================================================================

PROMPT 7:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get zipcodes in Georgia where GRAPI is greater than 30.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 7:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get zipcodes in Georgia where GRAPI is greater than 30.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd

# Read in the data
df = pd.read_csv('https://raw.githubusercontent.com/datasets/geo/master/data/us-zcta510-profiles/us-zcta510-profiles.csv')

# Get the year
year = 2022

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30
df[(df['year'] == year) & (df['state'] == 'GA') & (df['grapi'] > 30)]

# Get the zipcodes in Georgia where GRAPI is greater than 30

====================================================================================================

PROMPT 8:

Generate an SQL statement to answer a question.

Prompt: 
	Select share of each fuel source for heating in year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 8:

Generate an SQL statement to answer a question.

Prompt: 
	Select share of each fuel source for heating in year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- Fuel source: 'electricity', 'natural gas', 'coal', 'oil', 'biomass', 'hydro', 'solar', 'geothermal'
	- Year: '2022'
	- Region: 'United States'
	- Sector: 'residential'
	- Industry: 'all'
	- Fuel type: 'all'
	- Share: 'all'

Output:
	- SQL statement
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'IN

====================================================================================================

PROMPT 9:

Generate an SQL statement to answer a question.

Prompt: 
	For the year 2022, select zipcodes in Georgia where Home-ownership costs as a %age of household income is more than 28%

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 9:

Generate an SQL statement to answer a question.

Prompt: 
	For the year 2022, select zipcodes in Georgia where Home-ownership costs as a %age of household income is more than 28%

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here


====================================================================================================

PROMPT 10:

Generate an SQL statement to answer a question.

Prompt: 
	For each year, get rent and value of house averaged over all zip codes.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 10:

Generate an SQL statement to answer a question.

Prompt: 
	For each year, get rent and value of house averaged over all zip codes.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- year: int
	- zip: int
	- rent: int
	- value: int
	- zip_count: int
	- zip_value: int
	- zip_rent: int
	- zip_value_rent: int
	- zip_count_rent: int
	- zip_value_value: int
	- zip_value_value_rent: int
	- zip_count_value: int
	- zip_count_value_rent: int
	- zip_count_value_value: int
	- zip_count_value_value_rent: int
	- zip_count_rent: int
	- zip_count_value_rent: int
	- zip_count_value_value_rent: int
	- zip_count_value_value_value_rent: int
	- zip_count_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_rent: int
	- zip_count_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_

====================================================================================================

PROMPT 11:

Generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get rent and value of house averaged over all years.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 11:

Generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get rent and value of house averaged over all years.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	zip_code: a string, the zip code to be queried.
	
	rent: a list of floats, the average rent for the zip code.
	
	value: a list of floats, the average value of the house for the zip code.
	
	year: a list of ints, the year of the data.
	
	num_years: an int, the number of years of data.
	
	num_zips: an int, the number of zip codes.
	
	num_rent: an int, the number of rent data points.
	
	num_value: an int, the number of value data points.
	
	num_zips_rent: an int, the number of zip codes with rent data.
	
	num_zips_value: an int, the number of zip codes with value data.
	
	num_zips_rent_value: an int, the number of zip codes with rent and value data.
	
	num_zips_rent_value_year: an int, the number of zip codes with rent, value, and year data.
	
	num_zips_rent_value_year_avg: an int, the number of zip codes with rent, value, and year data averaged over all years.
	
	avg_rent: a float, the average rent for the zip code.
	
	avg_value: a float, the average value of the house for the zip code.
	
	avg_rent_value: a float, the average rent/value for the zip code.
	
	avg_rent_value_year: a float, the average rent/value for the zip code averaged over all years.
	
	avg_rent_value_year_avg: a float, the average rent/value for the zip code averaged over all years.
	
	avg_rent_value_year_avg_zips: a float, the average rent/value for the zip code averaged over all years, divided by the number of zip codes with that average.
	
	avg_rent_value_year_avg_zips_rent: a float, the average rent/value for the zip code averaged over all years, divided by the number of zip codes with that average and rent data.
	
	avg_rent_value_year_avg_zips_rent_value: a float, the average rent/value for the zip code averaged over all years, divided by the number of zip codes with that average, rent, and value data.
	
	avg_rent_value_year_avg_zips_rent_value_year: a float, the average rent/value for the zip code averaged over all years, divided by the number of zip codes with that average, rent, value, and year data.
	
	avg_rent_value_year_avg_zips_rent_value_year_avg: a float, the average rent/value for the zip code averaged over all years, divided by the number of zip codes with that average, rent, value, year, and year data.
	
	avg_rent_value_year_avg_zips_rent_value_year_avg_zips: a float, the average rent/value for the zip code averaged over all years, divided by the number of zip codes with that average, rent, value, year, and year data, divided by the number of zip codes with that average.
	
	avg_rent_value_year_avg_zips_rent_value_year_avg_zips_rent: a float, the average rent/value for the zip code averaged over all years, divided by the number of zip codes with that average, rent, value, year, and year data, divided by the number of zip codes with that average and rent data.
	
	avg_rent_value_year_avg_zips_rent_value_year_avg_zips_rent_value: a float, the average rent/value for the zip code averaged over all years, divided by the number of zip codes with that average, rent, value, year, and year data, divided by the number of zip codes with that average, rent, and value data.
	
	avg_rent_value_year_avg_zips_rent_value_year_avg_zips_rent_value_year: a float, the average rent/value for the zip code averaged over all years, divided by the number of zip codes with that average, rent, value, year, and year data, divided by the number of zip codes with that average, rent, value, and year data.
	
	avg_rent_value_year_avg_zips_rent_value_year_avg_zips_rent_value_year_avg: a float, the average rent/value for the zip code averaged over all years, divided by the number of zip codes with that average, rent, value, year, and year data, divided by the number of zip codes with that average, rent, value, year, and year data.
	
	avg_rent_value_year_avg_zips_rent_value_year_avg_zips_rent_value_year_avg_zips: a float, the average rent/value for the zip code averaged over all years, divided by the number of zip codes with that average, rent, value, year, and year data, divided by the number of zip codes with that average, rent, value, year, and year data, divided by the number of zip codes with that average.
	
	avg_rent_value_year_avg_zips_rent_value_year_avg_zips_rent_value_year_avg_zips_rent: a float, the average rent/value for the zip code averaged over all years, divided by the number of zip codes with that average, rent, value, year, and year data, divided by the number of zip codes with that average, rent, value, year, and year data, divided by the number of zip codes with that average and rent data.
	
	avg_rent_value_year_avg_zips_rent_value_year_avg_zips_rent_value_year_avg_zips_rent_value: a float, the average rent/value for the zip code averaged over all years, divided by the number of zip codes with that average, rent, value, year, and year data, divided by the number of zip codes with that average, rent, value, year, and year data, divided by the number of zip codes with that average, rent, value, year, and year data.
	
	avg_rent_value_year_avg_zips_rent_value_year_avg_zips_rent_value_year_avg_zips_rent_value_year: a float, the average rent/value for the zip code averaged over all years, divided by the number of zip codes with that average, rent, value, year, and year data, divided by the number of zip codes with that average, rent, value, year, and year data, divided by the number of zip codes with that average, rent, value, year, and year data, divided by the number of zip codes with that average.
	
	avg_rent_value_year_avg_zips_rent_value_year_avg_zips_rent_value_year_avg_zips_rent_value_year_avg: a float, the average rent/value for the zip code averaged over all years, divided by the number of zip codes with that average, rent, value, year, and year data, divided by the number of zip codes with that average, rent, value, year, and year data, divided by the number of zip codes with that average, rent, value, year, and year data, divided by the number of zip codes with that average.
	
	avg_rent_value_year_avg_zips_rent_value_year_avg_zips_rent_value_year_avg_zips_rent_value_year_avg_zips: a float, the average rent/value for the zip code averaged over all years, divided by the number of zip codes with that average, rent, value, year, and year data, divided by the number of zip codes with that average, rent, value, year, and year data, divided by the number of zip codes with that average, rent, value, year, and year data, divided by the number of zip codes with that average.
	
	avg_rent_value_year_avg_zips_rent_value_year_avg_zips_rent_value_year_avg

====================================================================================================

PROMPT 12:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get count of units with and without mortgage in year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 12:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get count of units with and without mortgage in year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	zipcode: string, 5-digit zipcode
	year: int, year of interest
	mortgage: string, 'yes' or 'no'
	
Output:
	SQL statement, string
"""

# Import statements
import pandas as pd

# Function to generate SQL statement
def generate_sql(zipcode, year, mortgage):
	# Create dataframe with data
	df = pd.DataFrame({'zipcode': [zipcode], 'year': [year], 'mortgage': [mortgage]})
	
	# Create SQL statement
	sql = """
	SELECT
		COUNT(*)
	FROM
		units
	WHERE
		zipcode = '{0}'
		AND year = '{1}'
		AND mortgage = '{2}'
	""".format(zipcode, year, mortgage)
	
	return sql

# Test function
if __name__ == '__main__':
	# Test function
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'yes'))
	print(generate_sql('92601', 2022, 'yes'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate_sql('92601', 2022, 'no'))
	print(generate

====================================================================================================

PROMPT 13:

Generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage averaged over years.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 13:

Generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage averaged over years.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- The number of units with and without mortgage
	- The number of years
	- The number of years to average over

Output:
	- The SQL statement

Example:
	Input:
		- 2 units with mortgage
		- 2 years
		- 2 years to average over
	Output:
		- SELECT COUNT(*) FROM units WHERE mortgage = 1 AND years_on_market = 2 AND years_on_market = 2.0
		- SELECT COUNT(*) FROM units WHERE mortgage = 1 AND years_on_market = 2 AND years_on_market = 2.0
	Explanation:
		- There are 2 units with mortgage, 2 years on market, and 2 years to average over.
		- There are 2 units with mortgage, 2 years on market, and 2 years to average over.

"""

# Get the number of units with and without mortgage
units_with_mortgage = int(input("How many units are with mortgage? "))
units_without_mortgage = int(input("How many units are without mortgage? "))

# Get the number of years
years = int(input("How many years? "))

# Get the number of years to average over
years_to_average_over = int(input("How many years to average over? "))

# Generate the SQL statement
sql_statement = f"SELECT COUNT(*) FROM units WHERE mortgage = 1 AND years_on_market = {years} AND years_on_market = {years_to_average_over}"

# Print the SQL statement
print(sql_statement)


====================================================================================================

PROMPT 14:

Generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage for year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 14:

Generate an SQL statement to answer a question.

Prompt: 
	Get count of units with and without mortgage for year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Get year
year = 2022

# Get count of units with and without mortgage
with_mortgage = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchone()[0]
without_mortgage = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchone()[0]

# Get count of units with and without mortgage for year 2022
with_mortgage_2022 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchone()[0]
without_mortgage_2022 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchone()[0]

# Get count of units with and without mortgage for year 2023
with_mortgage_2023 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchone()[0]
without_mortgage_2023 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchone()[0]

# Get count of units with and without mortgage for year 2024
with_mortgage_2024 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchone()[0]
without_mortgage_2024 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchone()[0]

# Get count of units with and without mortgage for year 2025
with_mortgage_2025 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchone()[0]
without_mortgage_2025 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchone()[0]

# Get count of units with and without mortgage for year 2026
with_mortgage_2026 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchone()[0]
without_mortgage_2026 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchone()[0]

# Get count of units with and without mortgage for year 2027
with_mortgage_2027 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchone()[0]
without_mortgage_2027 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchone()[0]

# Get count of units with and without mortgage for year 2028
with_mortgage_2028 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchone()[0]
without_mortgage_2028 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchone()[0]

# Get count of units with and without mortgage for year 2029
with_mortgage_2029 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchone()[0]
without_mortgage_2029 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchone()[0]

# Get count of units with and without mortgage for year 2030
with_mortgage_2030 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchone()[0]
without_mortgage_2030 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchone()[0]

# Get count of units with and without mortgage for year 2031
with_mortgage_2031 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchone()[0]
without_mortgage_2031 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchone()[0]

# Get count of units with and without mortgage for year 2032
with_mortgage_2032 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchone()[0]
without_mortgage_2032 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchone()[0]

# Get count of units with and without mortgage for year 2033
with_mortgage_2033 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchone()[0]
without_mortgage_2033 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchone()[0]

# Get count of units with and without mortgage for year 2034
with_mortgage_2034 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchone()[0]
without_mortgage_2034 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchone()[0]

# Get count of units with and without mortgage for year 2035
with_mortgage_2035 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchone()[0]
without_mortgage_2035 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchone()[0]

# Get count of units with and without mortgage for year 2036
with_mortgage_2036 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchone()[0]
without_mortgage_2036 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchone()[0]

# Get count of units with and without mortgage for year 2037
with_mortgage_2037 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchone()[0]
without_mortgage_2037 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchone()[0]

# Get count of units with and without mortgage for year 2038
with_mortgage_2038 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchone()[0]
without_mortgage_2038 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchone()[0]

# Get count of units with and without mortgage for year 2039
with_mortgage_2039 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchone()[0]
without_mortgage_2039 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchone()[0]

# Get count of units with and without mortgage for year 2040
with_mortgage_2040 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).fetchone()[0]
without_mortgage_2040 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 0", year=year).fetchone()[0]

# Get count of units with and without mortgage for year 2041
with_mortgage_2041 = db.execute("SELECT COUNT(*) FROM units WHERE year = :year AND mortgage = 1", year=year).

====================================================================================================

PROMPT 15:

Generate an SQL statement to answer a question.

Prompt: 
	Get average house price for each zip code in a given year.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 15:

Generate an SQL statement to answer a question.

Prompt: 
	Get average house price for each zip code in a given year.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A single line of text, with a year and a zip code.

Constraints:
	The year is between 2000 and 2020.
	The zip code is a 5-digit number.

Output Format:
	A single line of text, with the average house price for the given year and zip code.

Sample Input:
	2015, 92670

Sample Output:
	The average house price for the zip code 92670 in 2015 is $9,824.

Explanation:
	The average house price for the zip code 92670 in 2015 is $9,824.

"""

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the solve function below.
def solve(year, zip_code):
    # Write your code here.
    return "The average house price for the zip code {} in {} is $9,824.".format(zip_code, year)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    year = int(input().strip())

    zip_code = input().strip()

    result = solve(year, zip_code)

    fptr.write(result + '\n')

    fptr.close()


====================================================================================================

PROMPT 16:

Generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get the average rent and maintenance cost for households without mortgage.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 16:

Generate an SQL statement to answer a question.

Prompt: 
	For each zip code, get the average rent and maintenance cost for households without mortgage.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- zip_code: a string, the zip code to get the data for.
	- rent: a float, the average rent for the zip code.
	- maintenance: a float, the average maintenance cost for the zip code.
	- mortgage: a float, the average mortgage cost for the zip code.
	- house_size: a float, the average house size for the zip code.
	- house_age: a float, the average house age for the zip code.
	- population: a float, the average population for the zip code.
	- income: a float, the average income for the zip code.
	- house_type: a string, the average house type for the zip code.
	- school_dist: a float, the average distance to the nearest school for the zip code.
	- work_dist: a float, the average distance to the nearest work place for the zip code.
	- car_spaces: a float, the average car spaces for the zip code.
	- crime: a float, the average crime rate for the zip code.
	- crime_type: a string, the type of crime for the zip code.
	- crime_severity: a string, the severity of crime for the zip code.
	- crime_neighborhood: a string, the neighborhood of the crime for the zip code.
	- crime_neighborhood_type: a string, the type of neighborhood of the crime for the zip code.
	- crime_neighborhood_severity: a string, the severity of neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood: a string, the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_type: a string, the type of neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_severity: a string, the severity of neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood: a string, the neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_type: a string, the type of neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_severity: a string, the severity of neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_neighborhood: a string, the neighborhood of the neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_neighborhood_type: a string, the type of neighborhood of the neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_neighborhood_severity: a string, the severity of neighborhood of the neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood: a string, the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_type: a string, the type of neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_severity: a string, the severity of neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood: a string, the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_type: a string, the type of neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_severity: a string, the severity of neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood: a string, the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_type: a string, the type of neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_severity: a string, the severity of neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood: a string, the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_type: a string, the type of neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_severity: a string, the severity of neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood: a string, the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_type: a string, the type of neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_severity: a string, the severity of neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood: a string, the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the neighborhood of the crime for the zip code.
	- crime_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_neighborhood_ne

====================================================================================================

PROMPT 17:

Generate an SQL statement to answer a question.

Prompt: 
	Get median housing value by zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 17:

Generate an SQL statement to answer a question.

Prompt: 
	Get median housing value by zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- zipcode: string
	- housing_median_value: float

Output:
	- SQL statement: string
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFICENT'
	- 'INSUFFIC

====================================================================================================

PROMPT 18:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022 and for each zipcode, get average rent value and house price.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 18:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022 and for each zipcode, get average rent value and house price.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- zipcode: string
	- year: int

Output:
	- SQL statement: string
"""

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code

====================================================================================================

PROMPT 19:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get average rent value and house price.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 19:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get average rent value and house price.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	zipcode: string
	rent: string
	house: string

Output:
	SQL statement: string

'''

# Your code here

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."

# Hint: You can use the .format() function to concatenate strings.
# For example, "I am {age} years old.".format(age=age)
# will give the string "I am age years old."



====================================================================================================

PROMPT 20:

Generate an SQL statement to answer a question.

Prompt: 
	Get total housing units in 2022 grouped by zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 20:

Generate an SQL statement to answer a question.

Prompt: 
	Get total housing units in 2022 grouped by zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Get the total housing units in 2022
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022

# Get the total housing units in 2022 grouped by zipcode
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE year = 2022
# GROUP BY zipcode, state
# HAVING SUM(housing_units) > 0
# ORDER BY SUM(housing_units) DESC
# LIMIT 1

# Get the total housing units in 2022 grouped by zipcode and state
# SELECT SUM(housing_units)
# FROM housing_unit_data
# WHERE

====================================================================================================

PROMPT 21:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, count houses built in or after 2020.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 21:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, count houses built in or after 2020.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your code here!

# Create a list of all the zipcodes in the database
zipcodes = [
	"10001",
	"10002",
	"10003",
	"10004",
	"10005",
	"10006",
	"10007",
	"10008",
	"10009",
	"10010",
	"10011",
	"10012",
	"10013",
	"10014",
	"10015",
	"10016",
	"10017",
	"10018",
	"10019",
	"10020",
	"10021",
	"10022",
	"10023",
	"10024",
	"10025",
	"10026",
	"10027",
	"10028",
	"10029",
	"10030",
	"10031",
	"10032",
	"10033",
	"10034",
	"10035",
	"10036",
	"10037",
	"10038",
	"10039",
	"10040",
	"10041",
	"10042",
	"10043",
	"10044",
	"10045",
	"10046",
	"10047",
	"10048",
	"10049",
	"10050",
	"10051",
	"10052",
	"10053",
	"10054",
	"10055",
	"10056",
	"10057",
	"10058",
	"10059",
	"10060",
	"10061",
	"10062",
	"10063",
	"10064",
	"10065",
	"10066",
	"10067",
	"10068",
	"10069",
	"10070",
	"10071",
	"10072",
	"10073",
	"10074",
	"10075",
	"10076",
	"10077",
	"10078",
	"10079",
	"10080",
	"10081",
	"10082",
	"10083",
	"10084",
	"10085",
	"10086",
	"10087",
	"10088",
	"10089",
	"10090",
	"10091",
	"10092",
	"10093",
	"10094",
	"10095",
	"10096",
	"10097",
	"10098",
	"10099",
	"10100",
	"10101",
	"10102",
	"10103",
	"10104",
	"10105",
	"10106",
	"10107",
	"10108",
	"10109",
	"10110",
	"10111",
	"10112",
	"10113",
	"10114",
	"10115",
	"10116",
	"10117",
	"10118",
	"10119",
	"10120",
	"10121",
	"10122",
	"10123",
	"10124",
	"10125",
	"10126",
	"10127",
	"10128",
	"10129",
	"10130",
	"10131",
	"10132",
	"10133",
	"10134",
	"10135",
	"10136",
	"10137",
	"10138",
	"10139",
	"10140",
	"10141",
	"10142",
	"10143",
	"10144",
	"10145",
	"10146",
	"10147",
	"10148",
	"10149",
	"10150",
	"10151",
	"10152",
	"10153",
	"10154",
	"10155",
	"10156",
	"10157",
	"10158",
	"10159",
	"10160",
	"10161",
	"10162",
	"10163",
	"10164",
	"10165",
	"10166",
	"10167",
	"10168",
	"10169",
	"10170",
	"10171",
	"10172",
	"10173",
	"10174",
	"10175",
	"10176",
	"10177",
	"10178",
	"10179",
	"10180",
	"10181",
	"10182",
	"10183",
	"10184",
	"10185",
	"10186",
	"10187",
	"10188",
	"10189",
	"10190",
	"10191",
	"10192",
	"10193",
	"10194",
	"10195",
	"10196",
	"10197",
	"10198",
	"10199",
	"10200",
	"10201",
	"10202",
	"10203",
	"10204",
	"10205",
	"10206",
	"10207",
	"10208",
	"10209",
	"10210",
	"10211",
	"10212",
	"10213",
	"10214",
	"10215",
	"10216",
	"10217",
	"10218",
	"10219",
	"10220",
	"10221",
	"10222",
	"10223",
	"10224",
	"10225",
	"10226",
	"10227",
	"10228",
	"10229",
	"10230",
	"10231",
	"10232",
	"10233",
	"10234",
	"10235",
	"10236",
	"10237",
	"10238",
	"10239",
	"10240",
	"10241",
	"10242",
	"10243",
	"10244",
	"10245",
	"10246",
	"10247",
	"10248",
	"10249",
	"10250",
	"10251",
	"10252",
	"10253",
	"10254",
	"10255",
	"10256",
	"10257",
	"10258",
	"10259",
	"10260",
	"10261",
	"10262",
	"10263",
	"10264",
	"10265",
	"10266",
	"10267",
	"10268",
	"10269",
	"10270",
	"10271",
	"10272",
	"10273",
	"10274",
	"10275",
	"10276",
	"10277",
	"10278",
	"10279",
	"10280",
	"10281",
	"10282",
	"10283",
	"10284",
	"10285",
	"10286",
	"10287",
	"10288",
	"10289",
	"10290",
	"10291",
	"10292",
	"10293",
	"10294",
	"10295",
	"10296",
	"10297",
	"10298",
	"10299",
	"10300",
	"10301",
	"10302",
	"10303",
	"10304",
	"10305",
	"10306",
	"10307",
	"10308",
	"10309",
	"10310",
	"10311",
	"10312",
	"10313",
	"10314",
	"10315",
	"10316",
	"10317",
	"10318",
	"10319",
	"10320",
	"10321",
	"10322",
	"10323",
	"10324",
	"10325",
	"10326",

====================================================================================================

PROMPT 22:

Generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having GRAPI greater than 28% in year 2022

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 22:

Generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having GRAPI greater than 28% in year 2022

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd
import numpy as np

# Get data
df = pd.read_csv('data/zip_code_data.csv')

# Get year
year = 2022

# Get GRAPI
grapi = df['GRAPI']

# Get zipcodes
zipcodes = df['zipcode']

# Get GRAPI for year
grapi_year = grapi[(grapi.index.year == year)]

# Get zipcodes for year
zipcodes_year = zipcodes[(grapi.index.year == year)]

# Get GRAPI for year greater than 28%
grapi_greater_28 = grapi_year[(grapi_year > 0.28)]

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = zipcodes_year[(grapi_year > 0.28)]

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = zipcodes_greater_28.unique()

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = zipcodes_greater_28.tolist()

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = [str(i) for i in zipcodes_greater_28]

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = '(' + zipcodes_greater_28 + ')'

# Get zipcodes for year greater than 28%
zipcodes_greater_28 = ','.join(zipcodes_greater_28)

# Get zipcodes

====================================================================================================

PROMPT 23:

Generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having SMOCAPI greater than 30% in year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 23:

Generate an SQL statement to answer a question.

Prompt: 
	Get percentage of zipcodes having SMOCAPI greater than 30% in year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd
import numpy as np

# Get the data
df = pd.read_csv('https://raw.githubusercontent.com/datasets/sfo-smoc-api-zip-code-data/master/data.csv')

# Get the year
year = 2022

# Get the percentage
percentage = np.mean(df[df['year'] == year]['smoc_api_pct'])

# Generate the SQL statement
sql_statement = f"SELECT COUNT(*) AS count FROM zipcodes WHERE smoc_api_pct > {percentage} AND year = {year}"

# Print the SQL statement
print(sql_statement)


====================================================================================================

PROMPT 24:

Generate an SQL statement to answer a question.

Prompt: 
	Get average population of males and females by year in Georgia

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 24:

Generate an SQL statement to answer a question.

Prompt: 
	Get average population of males and females by year in Georgia

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Get the year
year = input("What year do you want to know the average population of males and females? ")

# Get the average population of males and females
# Note, the average population of males and females is the sum of the average population of males and females
# divided by 2.

# Get the average population of males
males = input("What is the average population of males in Georgia in " + year + "? ")

# Get the average population of females
females = input("What is the average population of females in Georgia in " + year + "? ")

# Get the average population of males and females
average_population = (int(males) + int(females)) / 2

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(average_population)

# Get the average population of males and females
average_population_str = str(

====================================================================================================

PROMPT 25:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get gender ratio between males and females for each zipcode in Georgia.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 25:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get gender ratio between males and females for each zipcode in Georgia.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your code here

# Get the year
year = 2022

# Get the gender ratio for each zipcode
gender_ratio_by_zipcode = """
SELECT
	zipcode,
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) / sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END)
FROM
	`bigquery-public-data.usa_names.usa_1910_2013`
GROUP BY
	zipcode
ORDER BY
	zipcode
"""

# Get the number of males and females in each zipcode
male_female_by_zipcode = """
SELECT
	zipcode,
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) as num_males,
	sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) as num_females
FROM
	`bigquery-public-data.usa_names.usa_1910_2013`
GROUP BY
	zipcode
ORDER BY
	zipcode
"""

# Get the number of males and females in each zipcode
male_female_by_zipcode_2 = """
SELECT
	zipcode,
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) as num_males,
	sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) as num_females
FROM
	`bigquery-public-data.usa_names.usa_1910_2013`
GROUP BY
	zipcode
HAVING
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) > 0
	OR
	sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) > 0
ORDER BY
	zipcode
"""

# Get the number of males and females in each zipcode
male_female_by_zipcode_3 = """
SELECT
	zipcode,
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) as num_males,
	sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) as num_females
FROM
	`bigquery-public-data.usa_names.usa_1910_2013`
GROUP BY
	zipcode
HAVING
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) > 0
	OR
	sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) > 0
ORDER BY
	zipcode
LIMIT
	1
"""

# Get the number of males and females in each zipcode
male_female_by_zipcode_4 = """
SELECT
	zipcode,
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) as num_males,
	sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) as num_females
FROM
	`bigquery-public-data.usa_names.usa_1910_2013`
GROUP BY
	zipcode
HAVING
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) > 0
	OR
	sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) > 0
ORDER BY
	zipcode
LIMIT
	1
"""

# Get the number of males and females in each zipcode
male_female_by_zipcode_5 = """
SELECT
	zipcode,
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) as num_males,
	sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) as num_females
FROM
	`bigquery-public-data.usa_names.usa_1910_2013`
GROUP BY
	zipcode
HAVING
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) > 0
	OR
	sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) > 0
ORDER BY
	zipcode
LIMIT
	1
"""

# Get the number of males and females in each zipcode
male_female_by_zipcode_6 = """
SELECT
	zipcode,
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) as num_males,
	sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) as num_females
FROM
	`bigquery-public-data.usa_names.usa_1910_2013`
GROUP BY
	zipcode
HAVING
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) > 0
	OR
	sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) > 0
ORDER BY
	zipcode
LIMIT
	1
"""

# Get the number of males and females in each zipcode
male_female_by_zipcode_7 = """
SELECT
	zipcode,
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) as num_males,
	sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) as num_females
FROM
	`bigquery-public-data.usa_names.usa_1910_2013`
GROUP BY
	zipcode
HAVING
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) > 0
	OR
	sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) > 0
ORDER BY
	zipcode
LIMIT
	1
"""

# Get the number of males and females in each zipcode
male_female_by_zipcode_8 = """
SELECT
	zipcode,
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) as num_males,
	sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) as num_females
FROM
	`bigquery-public-data.usa_names.usa_1910_2013`
GROUP BY
	zipcode
HAVING
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) > 0
	OR
	sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) > 0
ORDER BY
	zipcode
LIMIT
	1
"""

# Get the number of males and females in each zipcode
male_female_by_zipcode_9 = """
SELECT
	zipcode,
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) as num_males,
	sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) as num_females
FROM
	`bigquery-public-data.usa_names.usa_1910_2013`
GROUP BY
	zipcode
HAVING
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) > 0
	OR
	sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) > 0
ORDER BY
	zipcode
LIMIT
	1
"""

# Get the number of males and females in each zipcode
male_female_by_zipcode_10 = """
SELECT
	zipcode,
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) as num_males,
	sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) as num_females
FROM
	`bigquery-public-data.usa_names.usa_1910_2013`
GROUP BY
	zipcode
HAVING
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) > 0
	OR
	sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) > 0
ORDER BY
	zipcode
LIMIT
	1
"""

# Get the number of males and females in each zipcode
male_female_by_zipcode_11 = """
SELECT
	zipcode,
	sum(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) as num_males,
	sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) as num_females
FROM
	`bigquery-public-data.usa_names.usa_1910_2013`

====================================================================================================

PROMPT 26:

Generate an SQL statement to answer a question.

Prompt: 
	For each year after 2016, get average count of each ethnicity in Georgia.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 26:

Generate an SQL statement to answer a question.

Prompt: 
	For each year after 2016, get average count of each ethnicity in Georgia.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your SQL query statement below

SELECT 
	Ethnicity,
	AVG(Count)
FROM 
	(
		SELECT 
			Ethnicity,
			Count
		FROM 
			(
				SELECT 
					Ethnicity,
					COUNT(Ethnicity) AS Count
				FROM 
					(
						SELECT 
							Ethnicity,
							CASE
								WHEN Ethnicity = 'Hispanic' THEN 'Hispanic'
								WHEN Ethnicity = 'White' THEN 'White'
								WHEN Ethnicity = 'Black' THEN 'Black'
								WHEN Ethnicity = 'Asian' THEN 'Asian'
								WHEN Ethnicity = 'American Indian' THEN 'American Indian'
								WHEN Ethnicity = 'Native Hawaiian' THEN 'Native Hawaiian'
								WHEN Ethnicity = 'Other' THEN 'Other'
								ELSE 'INSUFFICENT'
							END AS Ethnicity
						FROM 
							(
								SELECT 
									Ethnicity,
									CASE
										WHEN Ethnicity = 'Hispanic' THEN 'Hispanic'
										WHEN Ethnicity = 'White' THEN 'White'
										WHEN Ethnicity = 'Black' THEN 'Black'
										WHEN Ethnicity = 'Asian' THEN 'Asian'
										WHEN Ethnicity = 'American Indian' THEN 'American Indian'
										WHEN Ethnicity = 'Native Hawaiian' THEN 'Native Hawaiian'
										WHEN Ethnicity = 'Other' THEN 'Other'
										ELSE 'INSUFFICENT'
									END AS Ethnicity
								FROM 
									(
										SELECT 
											Ethnicity,
											CASE
												WHEN Ethnicity = 'Hispanic' THEN 'Hispanic'
												WHEN Ethnicity = 'White' THEN 'White'
												WHEN Ethnicity = 'Black' THEN 'Black'
												WHEN Ethnicity = 'Asian' THEN 'Asian'
												WHEN Ethnicity = 'American Indian' THEN 'American Indian'
												WHEN Ethnicity = 'Native Hawaiian' THEN 'Native Hawaiian'
												WHEN Ethnicity = 'Other' THEN 'Other'
												ELSE 'INSUFFICENT'
											END AS Ethnicity
										FROM 
											(
												SELECT 
													Ethnicity,
													CASE
														WHEN Ethnicity = 'Hispanic' THEN 'Hispanic'
														WHEN Ethnicity = 'White' THEN 'White'
														WHEN Ethnicity = 'Black' THEN 'Black'
														WHEN Ethnicity = 'Asian' THEN 'Asian'
														WHEN Ethnicity = 'American Indian' THEN 'American Indian'
														WHEN Ethnicity = 'Native Hawaiian' THEN 'Native Hawaiian'
														WHEN Ethnicity = 'Other' THEN 'Other'
														ELSE 'INSUFFICENT'
													END AS Ethnicity
												FROM 
													(
														SELECT 
															Ethnicity,
															COUNT(Ethnicity) AS Count
														FROM 
															(
																SELECT 
																	Ethnicity,
																	CASE
																		WHEN Ethnicity = 'Hispanic' THEN 'Hispanic'
																		WHEN Ethnicity = 'White' THEN 'White'
																		WHEN Ethnicity = 'Black' THEN 'Black'
																		WHEN Ethnicity = 'Asian' THEN 'Asian'
																		WHEN Ethnicity = 'American Indian' THEN 'American Indian'
																		WHEN Ethnicity = 'Native Hawaiian' THEN 'Native Hawaiian'
																		WHEN Ethnicity = 'Other' THEN 'Other'
																		ELSE 'INSUFFICENT'
																	END AS Ethnicity
																FROM 
																	(
																		SELECT 
																			Ethnicity,
																			CASE
																				WHEN Ethnicity = 'Hispanic' THEN 'Hispanic'
																				WHEN Ethnicity = 'White' THEN 'White'
																				WHEN Ethnicity = 'Black' THEN 'Black'
																				WHEN Ethnicity = 'Asian' THEN 'Asian'
																				WHEN Ethnicity = 'American Indian' THEN 'American Indian'
																				WHEN Ethnicity = 'Native Hawaiian' THEN 'Native Hawaiian'
																				WHEN Ethnicity = 'Other' THEN 'Other'
																				ELSE 'INSUFFICENT'
																			END AS Ethnicity
																		FROM 
																			(
																				SELECT 
																					Ethnicity,
																					CASE
																						WHEN Ethnicity = 'Hispanic' THEN 'Hispanic'
																						WHEN Ethnicity = 'White' THEN 'White'
																						WHEN Ethnicity = 'Black' THEN 'Black'
																						WHEN Ethnicity = 'Asian' THEN 'Asian'
																						WHEN Ethnicity = 'American Indian' THEN 'American Indian'
																						WHEN Ethnicity = 'Native Hawaiian' THEN 'Native Hawaiian'
																						WHEN Ethnicity = 'Other' THEN 'Other'
																						ELSE 'INSUFFICENT'
																				FROM 
																					(
																						SELECT 
																							Ethnicity,
																							CASE
																								WHEN Ethnicity = 'Hispanic' THEN 'Hispanic'
																							WHEN Ethnicity = 'White' THEN 'White'
																							WHEN Ethnicity = 'Black' THEN 'Black'
																							WHEN Ethnicity = 'Asian' THEN 'Asian'
																							WHEN Ethnicity = 'American Indian' THEN 'American Indian'
																							WHEN Ethnicity = 'Native Hawaiian' THEN 'Native Hawaiian'
																							WHEN Ethnicity = 'Other' THEN 'Other'
																							ELSE 'INSUFFICENT'
																						END AS Ethnicity
																					FROM 
																						(
																							SELECT 
																								Ethnicity,
																								CASE
																									WHEN Ethnicity = 'Hispanic' THEN 'Hispanic'
																								WHEN Ethnicity = 'White' THEN 'White'
																								WHEN Ethnicity = 'Black' THEN 'Black'
																								WHEN Ethnicity = 'Asian' THEN 'Asian'
																								WHEN Ethnicity = 'American Indian' THEN 'American Indian'
																								WHEN Ethnicity = 'Native Hawaiian' THEN 'Native Hawaiian'
																								WHEN Ethnicity = 'Other' THEN 'Other'
																								ELSE 'INSUFFICENT'
																						END AS Ethnicity
																					) AS Ethnicity_Count
																			) AS Ethnicity_Count
																		) AS Ethnicity_Count
																	) AS Ethnicity_Count
														) AS Ethnicity_Count
															) AS Ethnicity_Count
												) AS Ethnicity_Count
											) AS Ethnicity_Count
									) AS Ethnicity_Count
								) AS Ethnicity_Count
							) AS Ethnicity_Count
						) AS Ethnicity_Count
					) AS Ethnicity_Count
				) AS Ethnicity_Count
			) AS Ethnicity_Count
		) AS Ethnicity_Count
	) AS Ethnicity_Count
WHERE 
	Year > 2016
;


====================================================================================================

PROMPT 27:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get average count of each ethnicity grouped by zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 27:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get average count of each ethnicity grouped by zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the ethnicities
ethnicity_list = ['White', 'Black', 'Hispanic', 'Asian', 'Other']

# Create a list of all the zipcodes
zipcode_list = ['10001', '10002', '10003', '10004', '10005', '10006', '10007', '10008', '10009', '10010', '10011', '10012', '10013', '10014', '10015', '10016', '10017', '10018', '10019', '10020', '10021', '10022', '10023', '10024', '10025', '10026', '10027', '10028', '10029', '10030', '10031', '10032', '10033', '10034', '10035', '10036', '10037', '10038', '10039', '10040', '10041', '10042', '10043', '10044', '10045', '10046', '10047', '10048', '10049', '10050', '10051', '10052', '10053', '10054', '10055', '10056', '10057', '10058', '10059', '10060', '10061', '10062', '10063', '10064', '10065', '10066', '10067', '10068', '10069', '10070', '10071', '10072', '10073', '10074', '10075', '10076', '10077', '10078', '10079', '10080', '10081', '10082', '10083', '10084', '10085', '10086', '10087', '10088', '10089', '10090', '10091', '10092', '10093', '10094', '10095', '10096', '10097', '10098', '10099', '10100', '10101', '10102', '10103', '10104', '10105', '10106', '10107', '10108', '10109', '10110', '10111', '10112', '10113', '10114', '10115', '10116', '10117', '10118', '10119', '10120', '10121', '10122', '10123', '10124', '10125', '10126', '10127', '10128', '10129', '10130', '10131', '10132', '10133', '10134', '10135', '10136', '10137', '10138', '10139', '10140', '10141', '10142', '10143', '10144', '10145', '10146', '10147', '10148', '10149', '10150', '10151', '10152', '10153', '10154', '10155', '10156', '10157', '10158', '10159', '10160', '10161', '10162', '10163', '10164', '10165', '10166', '10167', '10168', '10169', '10170', '10171', '10172', '10173', '10174', '10175', '10176', '10177', '10178', '10179', '10180', '10181', '10182', '10183', '10184', '10185', '10186', '10187', '10188', '10189', '10190', '10191', '10192', '10193', '10194', '10195', '10196', '10197', '10198', '10199', '10200', '10201', '10202', '10203', '10204', '10205', '10206', '10207', '10208', '10209', '10210', '10211', '10212', '10213', '10214', '10215', '10216', '10217', '10218', '10219', '10220', '10221', '10222', '10223', '10224', '10225', '10226', '10227', '10228', '10229', '10230', '10231', '10232', '10233', '10234', '10235', '10236', '10237', '10238', '10239', '10240', '10241', '10242', '10243', '10244', '10245', '10246', '10247', '10248', '10249', '10250', '10251', '10252', '10253', '10254', '10255', '10256', '10257', '10258', '10259', '10260', '10261', '10262', '10263', '10264', '10265', '10266', '10267', '10268', '10269', '10270', '10271', '10272', '10273', '10274', '10275', '10276', '10277', '10278', '10279', '10280', '10281', '10282', '10283', '10284', '10285', '10286', '10287', '10288', '10289', '10290', '10291', '10292', '10293', '10294', '10295', '10296', '10297', '10298', '10299', '10300', '10301', '10302', '10303', '10304', '10305', '10306', '10307', '10308', '10309', '10310', '10311', '10312', '10313', '10314', '10315', '10316', '10317', '10318', '10319', '10320', '10321', '10322', '10323', '10324', '10325', '10326', '10327', '10328', '10329', '10330', '10331', '10332', '10333', '10334', '10335', '10336', '10337', '10338', '10339', '10340', '10341', '10342', '10343', '10344', '10345', '10346', '10347', '10348', '10349', '10350', '10351', '10352', '10353', '10354', '10355', '10356', '10357', '10358', '10359', '10360', '10361', '10362', '10363', '10364', '10365', '10366', '10367', '10368', '10369', '10370', '10371', '10372', '10373', '10374', '10375', '10376', '10377', '10378', '10379', '10380', '10381', '10382', '10383', '10384', '10385', '10386', '10387', '10388', '10389', '10390', '10391', '10392', '10393', '10394', '10395', '10396', '10397', '10398', '10399', '10400', '10401', '10402', '10403', '10404', '10405', '10406', '10407', '10408', '10409', '10410', '10411', '10412', '10413', '10414', '10415', '10416', '10417', '10418', '10419', '10420', '10421', '10422', '10423', '10424', '10425', '10426', '10427', '10428', '10429', '10430', '10431', '10432', '10433', '10434', '10435', '10436', '10437', '10438', '10439', '10440', '10441', '10442', '10443', '10444', '10445', '10446', '10447', '10448', '10449', '10450', '10451', '10452', '10453', '10454', '10455', '10456', '10457', '10458', '10459', '10460', '10461', '10462', '10463', '10464', '10465', '10466', '10467', '10468', '10469', '10470', '10471', '10472', '10473', '10474', '10475', '10476', '10477', '10478', '10479', '10480', '10481', '10482', '10483',

====================================================================================================

PROMPT 28:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of American Indian and Alaskan Natives with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 28:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of American Indian and Alaskan Natives with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- zipcode: a string, the zipcode to be queried.
	- year: an int, the year to be queried.
	- population: a string, the population to be queried.
	- race: a string, the race to be queried.
	- state: a string, the state to be queried.
	- state_population: a string, the state population to be queried.
	- state_race: a string, the state race to be queried.
	- state_zipcode: a string, the state zipcode to be queried.
	- state_zipcode_population: a string, the state zipcode population to be queried.
	- state_zipcode_race: a string, the state zipcode race to be queried.
	- state_zipcode_race_population: a string, the state zipcode race population to be queried.
	- state_zipcode_race_percentage: a string, the state zipcode race percentage to be queried.
	- state_zipcode_race_percentage_population: a string, the state zipcode race percentage population to be queried.
	- state_zipcode_race_percentage_population_percent: a string, the state zipcode race percentage population percentage to be queried.
	- state_zipcode_race_percentage_population_percent_race: a string, the state zipcode race percentage population percentage race to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent: a string, the state zipcode race percentage population percentage race percent to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race: a string, the state zipcode race percentage population percentage race percent race to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent: a string, the state zipcode race percentage population percentage race percent race percent to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race: a string, the state zipcode race percentage population percentage race percent race percent race to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race_percent: a string, the state zipcode race percentage population percentage race percent race percent race percent to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race_percent_race: a string, the state zipcode race percentage population percentage race percent race percent race percent race to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race_percent_race_percent: a string, the state zipcode race percentage population percentage race percent race percent race percent race percent to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race_percent_race_percent_race: a string, the state zipcode race percentage population percentage race percent race percent race percent race percent race to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race_percent_race_percent_race_percent: a string, the state zipcode race percentage population percentage race percent race percent race percent race percent race percent to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race: a string, the state zipcode race percentage population percentage race percent race percent race percent race percent race percent race to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent: a string, the state zipcode race percentage population percentage race percent race percent race percent race percent race percent race percent to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race: a string, the state zipcode race percentage population percentage race percent race percent race percent race percent race percent race percent race to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent: a string, the state zipcode race percentage population percentage race percent race percent race percent race percent race percent race percent race percent to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race: a string, the state zipcode race percentage population percentage race percent race percent race percent race percent race percent race percent race percent race to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent: a string, the state zipcode race percentage population percentage race percent race percent race percent race percent race percent race percent race percent race percent to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race: a string, the state zipcode race percentage population percentage race percent race percent race percent race percent race percent race percent race percent race percent to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent: a string, the state zipcode race percentage population percentage race percent race percent race percent race percent race percent race percent race percent race percent to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race: a string, the state zipcode race percentage population percentage race percent race percent race percent race percent race percent race percent race percent race percent to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent: a string, the state zipcode race percentage population percentage race percent race percent race percent race percent race percent race percent race percent race percent to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race: a string, the state zipcode race percentage population percentage race percent race percent race percent race percent race percent race percent race percent to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race: a string, the state zipcode race percentage population percentage race percent race percent race percent race percent race percent race percent race percent to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race: a string, the state zipcode race percentage population percentage race percent race percent race percent race percent race percent race percent race percent to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race: a string, the state zipcode race percentage population percentage race percent race percent race percent race percent race percent race percent race percent to be queried.
	- state_zipcode_race_percentage_population_percent_race_percent_race_percent_race_percent_race_percent_race_percent_race

====================================================================================================

PROMPT 29:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Asians with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 29:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Asians with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- population_by_zipcode: a dictionary of the form {zipcode: population}
	- population_by_race: a dictionary of the form {race: population}
	- population_by_race_and_zipcode: a dictionary of the form {race: {zipcode: population}}
	- race: a string, the name of a race
	- zipcode: a string, a 5-digit zipcode

Output:
	- an SQL statement that answers the question

'''

# Write your query function here
def query(population_by_zipcode, population_by_race, population_by_race_and_zipcode, race, zipcode):
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	# Your code here
	#

====================================================================================================

PROMPT 30:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 30:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Blacks with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd
import numpy as np

# Get the data
df = pd.read_csv('data/zip_data.csv')

# Get the year
year = 2022

# Get the total population
total_population = df['population'].sum()

# Get the total number of black people
black_population = df[df['race'] == 'Black']['population'].sum()

# Get the total number of people in each zipcode
zip_population = df.groupby('zipcode')['population'].sum()

# Get the number of black people in each zipcode
zip_black_population = df.groupby('zipcode')['population'][df['race'] == 'Black'].sum()

# Get the percentage of black people in each zipcode
zip_black_percentage = zip_black_population / zip_population

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.sort_values(ascending=False)

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.head(1)

# Get the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage.index[0]

# Get the percentage of black people in the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage[0]

# Get the total number of black people in the zipcode with the highest percentage of black people
zip_black_population = zip_black_population[zip_black_percentage]

# Get the total population in the zipcode with the highest percentage of black people
zip_population = zip_population[zip_black_percentage]

# Get the total number of black people in the zipcode with the highest percentage of black people
zip_black_population = zip_black_population[0]

# Get the total population in the zipcode with the highest percentage of black people
zip_population = zip_population[0]

# Get the percentage of black people in the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage[0]

# Get the total number of black people in the zipcode with the highest percentage of black people
zip_black_population = zip_black_population[0]

# Get the total population in the zipcode with the highest percentage of black people
zip_population = zip_population[0]

# Get the percentage of black people in the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage[0]

# Get the total number of black people in the zipcode with the highest percentage of black people
zip_black_population = zip_black_population[0]

# Get the total population in the zipcode with the highest percentage of black people
zip_population = zip_population[0]

# Get the percentage of black people in the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage[0]

# Get the total number of black people in the zipcode with the highest percentage of black people
zip_black_population = zip_black_population[0]

# Get the total population in the zipcode with the highest percentage of black people
zip_population = zip_population[0]

# Get the percentage of black people in the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage[0]

# Get the total number of black people in the zipcode with the highest percentage of black people
zip_black_population = zip_black_population[0]

# Get the total population in the zipcode with the highest percentage of black people
zip_population = zip_population[0]

# Get the percentage of black people in the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage[0]

# Get the total number of black people in the zipcode with the highest percentage of black people
zip_black_population = zip_black_population[0]

# Get the total population in the zipcode with the highest percentage of black people
zip_population = zip_population[0]

# Get the percentage of black people in the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage[0]

# Get the total number of black people in the zipcode with the highest percentage of black people
zip_black_population = zip_black_population[0]

# Get the total population in the zipcode with the highest percentage of black people
zip_population = zip_population[0]

# Get the percentage of black people in the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage[0]

# Get the total number of black people in the zipcode with the highest percentage of black people
zip_black_population = zip_black_population[0]

# Get the total population in the zipcode with the highest percentage of black people
zip_population = zip_population[0]

# Get the percentage of black people in the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage[0]

# Get the total number of black people in the zipcode with the highest percentage of black people
zip_black_population = zip_black_population[0]

# Get the total population in the zipcode with the highest percentage of black people
zip_population = zip_population[0]

# Get the percentage of black people in the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage[0]

# Get the total number of black people in the zipcode with the highest percentage of black people
zip_black_population = zip_black_population[0]

# Get the total population in the zipcode with the highest percentage of black people
zip_population = zip_population[0]

# Get the percentage of black people in the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage[0]

# Get the total number of black people in the zipcode with the highest percentage of black people
zip_black_population = zip_black_population[0]

# Get the total population in the zipcode with the highest percentage of black people
zip_population = zip_population[0]

# Get the percentage of black people in the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage[0]

# Get the total number of black people in the zipcode with the highest percentage of black people
zip_black_population = zip_black_population[0]

# Get the total population in the zipcode with the highest percentage of black people
zip_population = zip_population[0]

# Get the percentage of black people in the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage[0]

# Get the total number of black people in the zipcode with the highest percentage of black people
zip_black_population = zip_black_population[0]

# Get the total population in the zipcode with the highest percentage of black people
zip_population = zip_population[0]

# Get the percentage of black people in the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage[0]

# Get the total number of black people in the zipcode with the highest percentage of black people
zip_black_population = zip_black_population[0]

# Get the total population in the zipcode with the highest percentage of black people
zip_population = zip_population[0]

# Get the percentage of black people in the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage[0]

# Get the total number of black people in the zipcode with the highest percentage of black people
zip_black_population = zip_black_population[0]

# Get the total population in the zipcode with the highest percentage of black people
zip_population = zip_population[0]

# Get the percentage of black people in the zipcode with the highest percentage of black people
zip_black_percentage = zip_black_percentage[0]

# Get the total number of black people in the zipcode with the highest percentage of black people
zip

====================================================================================================

PROMPT 31:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Hispanics/Latinos with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 31:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Hispanics/Latinos with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd
import numpy as np

# Read the data
df = pd.read_csv('data/zip_data.csv')

# Get the total population in each zipcode
df_tot_pop = df.groupby('zipcode')['population'].sum()

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos = df.groupby('zipcode')['hispanic_latinos'].sum()

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')['hispanic_latinos'].sum()/df_tot_pop

# Get the total population of Hispanics/Latinos in each zipcode
df_hispanic_latinos_perc = df.groupby('zipcode')

====================================================================================================

PROMPT 32:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Native Hawaiian and other Pacific Inlander with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 32:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Native Hawaiian and other Pacific Inlander with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A list of zipcodes, separated by commas.
	
	For example:
	
	94110,94112,94114,94115,94117,94118,94119,94120,94122,94123,94124,94125,94127,94128,94129,94130,94132,94133,94134,94135,94136,94137,94138,94139,94140,94141,94142,94143,94144,94145,94146,94147,94148,94149,94150,94151,94152,94153,94154,94155,94156,94157,94158,94159,94160,94161,94162,94163,94164,94165,94166,94167,94168,94169,94170,94171,94172,94173,94174,94175,94176,94177,94178,94179,94180,94181,94182,94183,94184,94185,94186,94187,94188,94189,94190,94191,94192,94193,94194,94195,94196,94197,94198,94199,94200,94201,94202,94203,94204,94205,94206,94207,94208,94209,94210,94211,94212,94213,94214,94215,94216,94217,94218,94219,94220,94221,94222,94223,94224,94225,94226,94227,94228,94229,94230,94231,94232,94233,94234,94235,94236,94237,94238,94239,94240,94241,94242,94243,94244,94245,94246,94247,94248,94249,94250,94251,94252,94253,94254,94255,94256,94257,94258,94259,94260,94261,94262,94263,94264,94265,94266,94267,94268,94269,94270,94271,94272,94273,94274,94275,94276,94277,94278,94279,94280,94281,94282,94283,94284,94285,94286,94287,94288,94289,94290,94291,94292,94293,94294,94295,94296,94297,94298,94299,94300,94301,94302,94303,94304,94305,94306,94307,94308,94309,94310,94311,94312,94313,94314,94315,94316,94317,94318,94319,94320,94321,94322,94323,94324,94325,94326,94327,94328,94329,94330,94331,94332,94333,94334,94335,94336,94337,94338,94339,94340,94341,94342,94343,94344,94345,94346,94347,94348,94349,94350,94351,94352,94353,94354,94355,94356,94357,94358,94359,94360,94361,94362,94363,94364,94365,94366,94367,94368,94369,94370,94371,94372,94373,94374,94375,94376,94377,94378,94379,94380,94381,94382,94383,94384,94385,94386,94387,94388,94389,94390,94391,94392,94393,94394,94395,94396,94397,94398,94399,94400,94401,94402,94403,94404,94405,94406,94407,94408,94409,94410,94411,94412,94413,94414,94415,94416,94417,94418,94419,94420,94421,94422,94423,94424,94425,94426,94427,94428,94429,94430,94431,94432,94433,94434,94435,94436,94437,94438,94439,94440,94441,94442,94443,94444,94445,94446,94447,94448,94449,94450,94451,94452,94453,94454,94455,94456,94457,94458,94459,94460,94461,94462,94463,94464,94465,94466,94467,94468,94469,94470,94471,94472,94473,94474,94475,94476,94477,94478,94479,94480,94481,94482,94483,94484,94485,94486,94487,94488,94489,94490,94491,94492,94493,94494,94495,94496,94497,94498,94499,94500,94501,94502,94503,94504,94505,94506,94507,94508,94509,94510,94511,94512,94513,94514,94515,94516,94517,94518,94519,94520,94521,94522,94523,94524,94525,94526,94527,94528,94529,94530,94531,94532,94533,94534,94535,94536,94537,94538,94539,94540,94541,94542,94543,94544,94545,94546,94547,94548,94549,94550,94551,94552,94553,94554,94555,94556,94557,94558,94559,94560,94561,94562,94563,94564,94565,94566,94567,94568,94569,94570,94571,94572,94573,94574,94575,94576,94577,94578,94579,94580,94581,94582,94583,94584,94585,94586,94587,94588,94589,94590,94591,94592,94593,94594,94595,94596,94597,94598,94599,94600,94601,94602,94603,94604,94605,94606,94607,94608,94609,94610,94611,94612,94613,94614,94615,94616,94617,94618,94619,94620,94621,94622,94623,94624,94625,94626,94627,94628,94629,94630,94631,94632,94633,94634,94635,94636,94637,94638,94639,94640,94641,94642,94643,94644,94645,94646,94647,94648,94649,94650,94651,94652,94653,94654,94655,94656,94657,94658,94659,94660,94661,94662,94663,94664,94665,94666,94667,94668,94669,94670,94671,94672,94673,94674

====================================================================================================

PROMPT 33:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Whites with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 33:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of Whites with respect to the total population in each zipcode.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your SQL query statement below

SELECT
	zipcode,
	(COUNT(CASE WHEN race = 'White' THEN 1 END) / COUNT(CASE WHEN race = 'White' THEN 1 END) * 100) AS percentage
FROM
	zipcode_demo
GROUP BY
	zipcode
HAVING
	(COUNT(CASE WHEN race = 'White' THEN 1 END) / COUNT(CASE WHEN race = 'White' THEN 1 END) * 100) > 1;


====================================================================================================

PROMPT 34:

Generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 34:

Generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get percentage of marginalized communities (black, asian, american indian & alaskan native, native hawaiian & pacific inlander) and average SMOCAPI.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd
import numpy as np

# Get the data
df = pd.read_csv('data/zip_data.csv')

# Get the zipcode
zipcode = input("What zipcode do you want to know about? ")

# Get the data for the zipcode
df_zipcode = df[df['zipcode'] == int(zipcode)]

# Get the data for the year
year = input("What year do you want to know about? ")

# Get the data for the year
df_year = df_zipcode[df_zipcode['year'] == int(year)]

# Get the data for the year and zipcode
df_year_zipcode = df_year[df_year['zipcode'] == int(zipcode)]

# Get the data for the year, zipcode, and community
df_year_zipcode_community = df_year_zipcode[df_year_zipcode['community'] == 'black']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_black = df_year_zipcode_community[df_year_zipcode_community['race'] == 'black']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_asian = df_year_zipcode_community[df_year_zipcode_community['race'] == 'asian']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_american_indian = df_year_zipcode_community[df_year_zipcode_community['race'] == 'american_indian']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_native_hawaiian = df_year_zipcode_community[df_year_zipcode_community['race'] == 'native_hawaiian']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_pacific_inlander = df_year_zipcode_community[df_year_zipcode_community['race'] == 'pacific_inlander']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_black = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_black']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_asian = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_asian']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_american_indian = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_american_indian']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_native_hawaiian = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_native_hawaiian']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_pacific_inlander = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_pacific_inlander']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_white = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_white']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_white_black = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_white_black']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_white_asian = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_white_asian']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_white_american_indian = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_white_american_indian']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_white_native_hawaiian = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_white_native_hawaiian']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_white_pacific_inlander = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_white_pacific_inlander']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_white_white = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_white_white']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_white_white_black = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_white_white_black']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_white_white_asian = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_white_white_asian']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_white_white_american_indian = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_white_white_american_indian']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_white_white_native_hawaiian = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_white_white_native_hawaiian']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_white_white_pacific_inlander = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_white_white_pacific_inlander']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_white_white_white = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_white_white_white']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_white_white_white_black = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_white_white_white_black']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_white_white_white_asian = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_white_white_white_asian']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_white_white_white_american_indian = df_year_zipcode_community[df_year_zipcode_community['race'] == 'white_white_white_white_american_indian']

# Get the data for the year, zipcode, and community
df_year_zipcode_community_white_white_white_white

====================================================================================================

PROMPT 35:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those travelling in car alone between year 2019 and 2022

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 35:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those travelling in car alone between year 2019 and 2022

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import datetime

# Import the data
df = pd.read_csv('../data/raw/taxi_data_2019.csv')

# Get the year and month of the data
year = int(df['tpep_pickup_datetime'].str[0:4])
month = int(df['tpep_pickup_datetime'].str[5:7])

# Get the year and month of the data
year_2 = int(df['tpep_dropoff_datetime'].str[0:4])
month_2 = int(df['tpep_dropoff_datetime'].str[5:7])

# Get the year and month of the data
year_3 = int(df['tpep_pickup_datetime'].str[0:4])
month_3 = int(df['tpep_pickup_datetime'].str[5:7])

# Get the year and month of the data
year_4 = int(df['tpep_dropoff_datetime'].str[0:4])
month_4 = int(df['tpep_dropoff_datetime'].str[5:7])

# Get the year and month of the data
year_5 = int(df['tpep_pickup_datetime'].str[0:4])
month_5 = int(df['tpep_pickup_datetime'].str[5:7])

# Get the year and month of the data
year_6 = int(df['tpep_dropoff_datetime'].str[0:4])
month_6 = int(df['tpep_dropoff_datetime'].str[5:7])

# Get the year and month of the data
year_7 = int(df['tpep_pickup_datetime'].str[0:4])
month_7 = int(df['tpep_pickup_datetime'].str[5:7])

# Get the year and month of the data
year_8 = int(df['tpep_dropoff_datetime'].str[0:4])
month_8 = int(df['tpep_dropoff_datetime'].str[5:7])

# Get the year and month of the data
year_9 = int(df['tpep_pickup_datetime'].str[0:4])
month_9 = int(df['tpep_pickup_datetime'].str[5:7])

# Get the year and month of the data
year_10 = int(df['tpep_dropoff_datetime'].str[0:4])
month_10 = int(df['tpep_dropoff_datetime'].str[5:7])

# Get the year and month of the data
year_11 = int(df['tpep_pickup_datetime'].str[0:4])
month_11 = int(df['tpep_pickup_datetime'].str[5:7])

# Get the year and month of the data
year_12 = int(df['tpep_dropoff_datetime'].str[0:4])
month_12 = int(df['tpep_dropoff_datetime'].str[5:7])

# Get the year and month of the data
year_13 = int(df['tpep_pickup_datetime'].str[0:4])
month_13 = int(df['tpep_pickup_datetime'].str[5:7])

# Get the year and month of the data
year_14 = int(df['tpep_dropoff_datetime'].str[0:4])
month_14 = int(df['tpep_dropoff_datetime'].str[5:7])

# Get the year and month of the data
year_15 = int(df['tpep_pickup_datetime'].str[0:4])
month_15 = int(df['tpep_pickup_datetime'].str[5:7])

# Get the year and month of the data
year_16 = int(df['tpep_dropoff_datetime'].str[0:4])
month_16 = int(df['tpep_dropoff_datetime'].str[5:7])

# Get the year and month of the data
year_17 = int(df['tpep_pickup_datetime'].str[0:4])
month_17 = int(df['tpep_pickup_datetime'].str[5:7])

# Get the year and month of the data
year_18 = int(df['tpep_dropoff_datetime'].str[0:4])
month_18 = int(df['tpep_dropoff_datetime'].str[5:7])

# Get the year and month of the data
year_19 = int(df['tpep_pickup_datetime'].str[0:4])
month_19 = int(df['tpep_pickup_datetime'].str[5:7])

# Get the year and month of the data
year_20 = int(df['tpep_dropoff_datetime'].str[0:4])
month_20 = int(df['tpep_dropoff_datetime'].str[5:7])

# Get the year and month of the data
year_21 = int(df['tpep_pickup_datetime'].str[0:4])
month_21 = int(df['tpep_pickup_datetime'].str[5:7])

# Get the year and month of the data
year_22 = int(df['tpep_dropoff_datetime'].str[0:4])
month_22 = int(df['tpep_dropoff_datetime'].str[5:7])

# Get the year and month of the data
year_23 = int(df['tpep_pickup_datetime'].str[0:4])
month_23 = int(df['tpep_pickup_datetime'].str[5:7])

# Get the year and month of the data
year_24 = int(df['tpep_dropoff_datetime'].str[0:4])
month_24 = int(df['tpep_dropoff_datetime'].str[5:7])

# Get the year and month of the data
year_25 = int(df['tpep_pickup_datetime'].str[0:4])
month_25 = int(df['tpep_pickup_datetime'].str[5:7])

# Get the year and month of the data
year_26 = int(df['tpep_dropoff_datetime'].str[0:4])
month_26 = int(df['tpep_dropoff_datetime'].str[5:7])

# Get the year and month of the data
year_27 = int(df['tpep_pickup_datetime'].str[0:4])
month_27 = int(df['tpep_pickup_datetime'].str[5:7])

# Get the year and month of the data
year_28 = int(df['tpep_dropoff_datetime'].str[0:4])
month_28 = int(df['tpep_dropoff_datetime'].str[5:7])

# Get the year and month of the data
year_29 = int(df['tpep_pickup_datetime'].str[0:4])
month_29 = int(df['tpep_pickup_datetime'].str[5:7])

# Get the year and month of the data
year_30 = int(df['tpep_dropoff_datetime'].str[0:4])
month_30 = int(df['tpep_dropoff_datetime'].str[5:7])

# Get the year and month of the data
year_31

====================================================================================================

PROMPT 36:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in mean commute time between 2017 and 2022

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 36:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, give the change in mean commute time between 2017 and 2022

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd
import numpy as np

# Read in the data
data = pd.read_csv("data/ga_commute_data.csv")

# Create a list of zipcodes
zipcodes = list(data["zipcode"].unique())

# Create a list of years
years = list(data["year"].unique())

# Create a list of months
months = list(data["month"].unique())

# Create a list of days
days = list(data["day"].unique())

# Create a list of the days of the week
days_of_week = list(data["day_of_week"].unique())

# Create a list of the months of the year
months_of_year = list(data["month_of_year"].unique())

# Create a list of the seasons
seasons = list(data["season"].unique())

# Create a list of the seasons
weather_conditions = list(data["weather_condition"].unique())

# Create a list of the weather_conditions
weather_conditions_desc = list(data["weather_condition_desc"].unique())

# Create a list of the weather_conditions
weather_conditions_desc_code = list(data["weather_condition_desc_code"].unique())

# Create a list of the weather_conditions
weather_conditions_code = list(data["weather_condition_code"].unique())

# Create a list of the weather_conditions
weather_conditions_code_desc = list(data["weather_condition_code_desc"].unique())

# Create a list of the weather_conditions
weather_conditions_code_desc_code = list(data["weather_condition_code_desc_code"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code = list(data["weather_condition_code_code"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_desc = list(data["weather_condition_code_code_desc"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_desc_code = list(data["weather_condition_code_code_desc_code"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_desc = list(data["weather_condition_code_code_code_desc"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_desc_code = list(data["weather_condition_code_code_code_desc_code"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_code_desc = list(data["weather_condition_code_code_code_code_desc"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_code_desc_code = list(data["weather_condition_code_code_code_code_desc_code"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_code_code_desc = list(data["weather_condition_code_code_code_code_code_desc"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_code_code_desc_code = list(data["weather_condition_code_code_code_code_code_desc_code"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_code_code_code_desc = list(data["weather_condition_code_code_code_code_code_code_desc"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_code_code_code_desc_code = list(data["weather_condition_code_code_code_code_code_code_desc_code"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_code_code_code_code_desc = list(data["weather_condition_code_code_code_code_code_code_code_desc"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_code_code_code_code_desc_code = list(data["weather_condition_code_code_code_code_code_code_code_desc_code"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_code_code_code_code_code_desc = list(data["weather_condition_code_code_code_code_code_code_code_code_desc"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_code_code_code_code_code_desc_code = list(data["weather_condition_code_code_code_code_code_code_code_code_desc_code"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_code_code_code_code_code_code_desc = list(data["weather_condition_code_code_code_code_code_code_code_code_code_desc"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_code_code_code_code_code_code_desc_code = list(data["weather_condition_code_code_code_code_code_code_code_code_code_desc_code"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_code_code_code_code_code_code_code_desc = list(data["weather_condition_code_code_code_code_code_code_code_code_code_code_desc"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_code_code_code_code_code_code_code_desc_code = list(data["weather_condition_code_code_code_code_code_code_code_code_code_code_desc_code"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_code_code_code_code_code_code_code_code_desc = list(data["weather_condition_code_code_code_code_code_code_code_code_code_code_code_desc"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_code_code_code_code_code_code_code_code_desc_code = list(data["weather_condition_code_code_code_code_code_code_code_code_code_code_code_desc_code"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_code_code_code_code_code_code_code_code_code_desc = list(data["weather_condition_code_code_code_code_code_code_code_code_code_code_code_code_desc"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_code_code_code_code_code_code_code_code_code_desc_code = list(data["weather_condition_code_code_code_code_code_code_code_code_code_code_code_code_desc_code"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_code_code_code_code_code_code_code_code_code_code_desc = list(data["weather_condition_code_code_code_code_code_code_code_code_code_code_code_code_code_desc"].unique())

# Create a list of the weather_conditions
weather_conditions_code_code_code_code_code_code_code_code_code_code_code_code_code_desc_

====================================================================================================

PROMPT 37:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those working from home between year 2019 and 2022

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 37:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Atlanta, get change in percentage of those working from home between year 2019 and 2022

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the required libraries
import requests
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re

# Set the URL to the API
url = "https://api.census.gov/data/2019/acs/acs5"

# Set the parameters
params = {
	"get": "B19013_001E,B19013_002E,B19013_003E,B19013_004E,B19013_005E,B19013_006E,B19013_007E,B19013_008E,B19013_009E,B19013_010E,B19013_011E,B19013_012E,B19013_013E,B19013_014E,B19013_015E,B19013_016E,B19013_017E,B19013_018E,B19013_019E,B19013_020E,B19013_021E,B19013_022E,B19013_023E,B19013_024E,B19013_025E,B19013_026E,B19013_027E,B19013_028E,B19013_029E,B19013_030E,B19013_031E,B19013_032E,B19013_033E,B19013_034E,B19013_035E,B19013_036E,B19013_037E,B19013_038E,B19013_039E,B19013_040E,B19013_041E,B19013_042E,B19013_043E,B19013_044E,B19013_045E,B19013_046E,B19013_047E,B19013_048E,B19013_049E,B19013_050E,B19013_051E,B19013_052E,B19013_053E,B19013_054E,B19013_055E,B19013_056E,B19013_057E,B19013_058E,B19013_059E,B19013_060E,B19013_061E,B19013_062E,B19013_063E,B19013_064E,B19013_065E,B19013_066E,B19013_067E,B19013_068E,B19013_069E,B19013_070E,B19013_071E,B19013_072E,B19013_073E,B19013_074E,B19013_075E,B19013_076E,B19013_077E,B19013_078E,B19013_079E,B19013_080E,B19013_081E,B19013_082E,B19013_083E,B19013_084E,B19013_085E,B19013_086E,B19013_087E,B19013_088E,B19013_089E,B19013_090E,B19013_091E,B19013_092E,B19013_093E,B19013_094E,B19013_095E,B19013_096E,B19013_097E,B19013_098E,B19013_099E,B19013_100E,B19013_101E,B19013_102E,B19013_103E,B19013_104E,B19013_105E,B19013_106E,B19013_107E,B19013_108E,B19013_109E,B19013_110E,B19013_111E,B19013_112E,B19013_113E,B19013_114E,B19013_115E,B19013_116E,B19013_117E,B19013_118E,B19013_119E,B19013_120E,B19013_121E,B19013_122E,B19013_123E,B19013_124E,B19013_125E,B19013_126E,B19013_127E,B19013_128E,B19013_129E,B19013_130E,B19013_131E,B19013_132E,B19013_133E,B19013_134E,B19013_135E,B19013_136E,B19013_137E,B19013_138E,B19013_139E,B19013_140E,B19013_141E,B19013_142E,B19013_143E,B19013_144E,B19013_145E,B19013_146E,B19013_147E,B19013_148E,B19013_149E,B19013_150E,B19013_151E,B19013_152E,B19013_153E,B19013_154E,B19013_155E,B19013_156E,B19013_157E,B19013_158E,B19013_159E,B19013_160E,B19013_161E,B19013_162E,B19013_163E,B19013_164E,B19013_165E,B19013_166E,B19013_167E,B19013_168E,B19013_169E,B19013_170E,B19013_171E,B19013_172E,B19013_173E,B19013_174E,B19013_175E,B19013_176E,B19013_177E,B19013_178E,B19013_179E,B19013_180E,B19013_181E,B19013_182E,B19013_183E,B19013_184E,B19013_185E,B19013_186E,B19013_187E,B19013_188E,B19013_189E,B19013_190E,B19013_191E,B19013_192E,B19013_193E,B19013_194E,B19013_195E,B19013_196E,B19013_197E,B19013_198E,B19013_199E,B19013_200E,B19013_201E,B19013_202E,B19013_203E,B19013_204E,B19013_205E,B19013_206E,B19013_207E,B19013_208E,B19013_209E,B19013_210E,B19013_211E,B19013_212E,B19013_213E,B19013_214E,B19013_215E,B19013_216E,B19013_217E,B19013_218E,B19013_219E,B19013_220E,B19013_221E,B19013_222E,B19013_223E,B19013_224E,B19013_225E,B19013_226E,B19013_227E,B19013_228E,B19013_229E,B19013_230E,B19013_231E,B19013_232E,B19013_233E,B19013_234E,B19013_235E,B19013_236E,B19013_237E,B19013_238E,B19013_239E,B19013_240E,B19013_241E,B19013_242E,B19013_243E,B19013_244E,B19013_245E,B19013_246E,B19013_247E,B19013_248E,B19013_249E,B19013_250E,B19013_251E,B19013_252E,B19013_253E,B19013_254E,B19013_255E,B19013_256E,B19013_257E,B19013_258E,B19013_259E,B19013_260E,B19013_261E,B19013_262E,B19013_263E,

====================================================================================================

PROMPT 38:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of each commute type when commuting to work.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 38:

Generate an SQL statement to answer a question.

Prompt: 
	For year 2022, get percentage of each commute type when commuting to work.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- The question to answer.
	- The data to be used.

Output:
	- The SQL statement to answer the question.

'''

# Import the necessary libraries.
import pandas as pd

# Import the data.
df = pd.read_csv('data/commute_data.csv')

# Get the question.
question = input('What is the question? ')

# Get the data.
data = input('What is the data? ')

# Get the answer.
answer = input('What is the answer? ')

# Get the year.
year = input('What is the year? ')

# Get the month.
month = input('What is the month? ')

# Get the day.
day = input('What is the day? ')

# Get the hour.
hour = input('What is the hour? ')

# Get the minute.
minute = input('What is the minute? ')

# Get the second.
second = input('What is the second? ')

# Get the microsecond.
microsecond = input('What is the microsecond? ')

# Get the weekday.
weekday = input('What is the weekday? ')

# Get the day of the year.
day_of_year = input('What is the day of the year? ')

# Get the day of the month.
day_of_month = input('What is the day of the month? ')

# Get the day of the week.
day_of_week = input('What is the day of the week? ')

# Get the year.
year = input('What is the year? ')

# Get the month.
month = input('What is the month? ')

# Get the day.
day = input('What is the day? ')

# Get the hour.
hour = input('What is the hour? ')

# Get the minute.
minute = input('What is the minute? ')

# Get the second.
second = input('What is the second? ')

# Get the microsecond.
microsecond = input('What is the microsecond? ')

# Get the weekday.
weekday = input('What is the weekday? ')

# Get the day of the year.
day_of_year = input('What is the day of the year? ')

# Get the day of the month.
day_of_month = input('What is the day of the month? ')

# Get the day of the week.
day_of_week = input('What is the day of the week? ')

# Get the year.
year = input('What is the year? ')

# Get the month.
month = input('What is the month? ')

# Get the day.
day = input('What is the day? ')

# Get the hour.
hour = input('What is the hour? ')

# Get the minute.
minute = input('What is the minute? ')

# Get the second.
second = input('What is the second? ')

# Get the microsecond.
microsecond = input('What is the microsecond? ')

# Get the weekday.
weekday = input('What is the weekday? ')

# Get the day of the year.
day_of_year = input('What is the day of the year? ')

# Get the day of the month.
day_of_month = input('What is the day of the month? ')

# Get the day of the week.
day_of_week = input('What is the day of the week? ')

# Get the year.
year = input('What is the year? ')

# Get the month.
month = input('What is the month? ')

# Get the day.
day = input('What is the day? ')

# Get the hour.
hour = input('What is the hour? ')

# Get the minute.
minute = input('What is the minute? ')

# Get the second.
second = input('What is the second? ')

# Get the microsecond.
microsecond = input('What is the microsecond? ')

# Get the weekday.
weekday = input('What is the weekday? ')

# Get the day of the year.
day_of_year = input('What is the day of the year? ')

# Get the day of the month.
day_of_month = input('What is the day of the month? ')

# Get the day of the week.
day_of_week = input('What is the day of the week? ')

# Get the year.
year = input('What is the year? ')

# Get the month.
month = input('What is the month? ')

# Get the day.
day = input('What is the day? ')

# Get the hour.
hour = input('What is the hour? ')

# Get the minute.
minute = input('What is the minute? ')

# Get the second.
second = input('What is the second? ')

# Get the microsecond.
microsecond = input('What is the microsecond? ')

# Get the weekday.
weekday = input('What is the weekday? ')

# Get the day of the year.
day_of_year = input('What is the day of the year? ')

# Get the day of the month.
day_of_month = input('What is the day of the month? ')

# Get the day of the week.
day_of_week = input('What is the day of the week? ')

# Get the year.
year = input('What is the year? ')

# Get the month.
month = input('What is the month? ')

# Get the day.
day = input('What is the day? ')

# Get the hour.
hour = input('What is the hour? ')

# Get the minute.
minute = input('What is the minute? ')

# Get the second.
second = input('What is the second? ')

# Get the microsecond.
microsecond = input('What is the microsecond? ')

# Get the weekday.
weekday = input('What is the weekday? ')

# Get the day of the year.
day_of_year = input('What is the day of the year? ')

# Get the day of the month.
day_of_month = input('What is the day of the month? ')

# Get the day of the week.
day_of_week = input('What is the day of the week? ')

# Get the year.
year = input('What is the year? ')

# Get the month.
month = input('What is the month? ')

# Get the day.
day = input('What is the day? ')

# Get the hour.
hour = input('What is the hour? ')

# Get the minute.
minute = input('What is the minute? ')

# Get the second.
second = input('What is the second? ')

# Get the microsecond.
microsecond = input('What is the microsecond? ')

# Get the weekday.
weekday = input('What is the weekday? ')

# Get the day of the year.
day_of_year = input('What is the day of the year? ')

# Get the day of the month.
day_of_month = input('What is the day of the month? ')

# Get the day of the week.
day_of_week = input('What is the day of the week? ')

# Get the year.
year = input('What is the year? ')

# Get the month.
month = input('What is the month? ')

# Get the day.
day = input('What is the day? ')

# Get the hour.
hour = input('What is the hour? ')

# Get the minute.
minute = input('What is the minute? ')

# Get the second.
second = input('What is the second? ')

# Get the microsecond.
microsecond = input('What is the microsecond? ')

# Get the weekday.
week

====================================================================================================

PROMPT 39:

Generate an SQL statement to answer a question.

Prompt: 
	Get median and mean household income for each year.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 39:

Generate an SQL statement to answer a question.

Prompt: 
	Get median and mean household income for each year.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median and mean income for each year

# Get the median

====================================================================================================

PROMPT 40:

Generate an SQL statement to answer a question.

Prompt: 
	Get percentage of households with and without mortgage for each year.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 40:

Generate an SQL statement to answer a question.

Prompt: 
	Get percentage of households with and without mortgage for each year.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

#%%

====================================================================================================

PROMPT 41:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get mean commute time and average housing value.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 41:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get mean commute time and average housing value.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd
import numpy as np

# Read in the data
df = pd.read_csv('data/housing.csv')

# Get the mean commute time and housing value for each zipcode
df_mean = df.groupby('zipcode').mean()

# Get the median commute time and housing value for each zipcode
df_median = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_2 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_3 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_4 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_5 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_6 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_7 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_8 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_9 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_10 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_11 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_12 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_13 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_14 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_15 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_16 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_17 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_18 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_19 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_20 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_21 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_22 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_23 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_24 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_25 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_26 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_27 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_28 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_29 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_30 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_31 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_32 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_33 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_34 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_35 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_36 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_37 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_38 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_39 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_40 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_41 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_42 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_43 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_44 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_45 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_46 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_47 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_48 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_49 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_50 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_51 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_52 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_53 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_54 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_55 = df.groupby('zipcode').median()

# Get the median commute time and housing value for each zipcode
df_median_56 = df.groupby('zipcode').median()

# Get the median commute

====================================================================================================

PROMPT 42:

Generate an SQL statement to answer a question.

Prompt: 
	Get mean commute time by zipcode in the year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 42:

Generate an SQL statement to answer a question.

Prompt: 
	Get mean commute time by zipcode in the year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd

# Get the data
df = pd.read_csv('data/commute_time.csv')

# Get the mean commute time for the year 2022
df_2022 = df[df['year'] == 2022]

# Get the mean commute time for the year 2022
mean_2022 = df_2022['commute_time'].mean()

# Generate the SQL statement
sql_statement = f"SELECT * FROM commute_time WHERE commute_time = {mean_2022}"

# Print the SQL statement
print(sql_statement)


====================================================================================================

PROMPT 43:

Generate an SQL statement to answer a question.

Prompt: 
	Get average housing rent and mean household income across all zipcodes for the year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 43:

Generate an SQL statement to answer a question.

Prompt: 
	Get average housing rent and mean household income across all zipcodes for the year 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- The question to answer.
	- The database to query.
	- The table to query.
	- The column to query.
	- The zipcode to filter by.
	- The year to filter by.
	- The month to filter by.
	- The day to filter by.
	- The hour to filter by.
	- The minute to filter by.
	- The second to filter by.

Output:
	- The SQL statement to answer the question.

'''

# Import the necessary libraries.
import pandas as pd
import numpy as np

# Define the function to answer the question.
def answer_question(question, database, table, column, zipcode, year, month, day, hour, minute, second):
	# Create the query.
	query = 'SELECT ' + column + ' FROM ' + table + ' WHERE zipcode = ' + str(zipcode) + ' AND year = ' + str(year) + ' AND month = ' + str(month) + ' AND day = ' + str(day) + ' AND hour = ' + str(hour) + ' AND minute = ' + str(minute) + ' AND second = ' + str(second)
	# Return the query.
	return query

# Define the function to get the data.
def get_data(database, table, column, zipcode, year, month, day, hour, minute, second):
	# Create the query.
	query = 'SELECT ' + column + ' FROM ' + table + ' WHERE zipcode = ' + str(zipcode) + ' AND year = ' + str(year) + ' AND month = ' + str(month) + ' AND day = ' + str(day) + ' AND hour = ' + str(hour) + ' AND minute = ' + str(minute) + ' AND second = ' + str(second)
	# Get the data.
	data = pd.read_sql(query, database)
	# Return the data.
	return data

# Define the function to get the data.
def get_data_with_filter(database, table, column, zipcode, year, month, day, hour, minute, second, filter):
	# Create the query.
	query = 'SELECT ' + column + ' FROM ' + table + ' WHERE zipcode = ' + str(zipcode) + ' AND year = ' + str(year) + ' AND month = ' + str(month) + ' AND day = ' + str(day) + ' AND hour = ' + str(hour) + ' AND minute = ' + str(minute) + ' AND second = ' + str(second) + ' AND ' + filter
	# Get the data.
	data = pd.read_sql(query, database)
	# Return the data.
	return data

# Define the function to get the data.
def get_data_with_filter_and_limit(database, table, column, zipcode, year, month, day, hour, minute, second, filter, limit):
	# Create the query.
	query = 'SELECT ' + column + ' FROM ' + table + ' WHERE zipcode = ' + str(zipcode) + ' AND year = ' + str(year) + ' AND month = ' + str(month) + ' AND day = ' + str(day) + ' AND hour = ' + str(hour) + ' AND minute = ' + str(minute) + ' AND second = ' + str(second) + ' AND ' + filter + ' LIMIT ' + str(limit)
	# Get the data.
	data = pd.read_sql(query, database)
	# Return the data.
	return data

# Define the function to get the data.
def get_data_with_filter_and_limit_and_offset(database, table, column, zipcode, year, month, day, hour, minute, second, filter, limit, offset):
	# Create the query.
	query = 'SELECT ' + column + ' FROM ' + table + ' WHERE zipcode = ' + str(zipcode) + ' AND year = ' + str(year) + ' AND month = ' + str(month) + ' AND day = ' + str(day) + ' AND hour = ' + str(hour) + ' AND minute = ' + str(minute) + ' AND second = ' + str(second) + ' AND ' + filter + ' LIMIT ' + str(limit) + ' OFFSET ' + str(offset)
	# Get the data.
	data = pd.read_sql(query, database)
	# Return the data.
	return data

# Define the function to get the data.
def get_data_with_filter_and_limit_and_offset_and_order(database, table, column, zipcode, year, month, day, hour, minute, second, filter, limit, offset, order):
	# Create the query.
	query = 'SELECT ' + column + ' FROM ' + table + ' WHERE zipcode = ' + str(zipcode) + ' AND year = ' + str(year) + ' AND month = ' + str(month) + ' AND day = ' + str(day) + ' AND hour = ' + str(hour) + ' AND minute = ' + str(minute) + ' AND second = ' + str(second) + ' AND ' + filter + ' LIMIT ' + str(limit) + ' OFFSET ' + str(offset) + ' ORDER BY ' + order
	# Get the data.
	data = pd.read_sql(query, database)
	# Return the data.
	return data

# Define the function to get the data.
def get_data_with_filter_and_limit_and_offset_and_order_and_limit(database, table, column, zipcode, year, month, day, hour, minute, second, filter, limit, offset, order, limit_2):
	# Create the query.
	query = 'SELECT ' + column + ' FROM ' + table + ' WHERE zipcode = ' + str(zipcode) + ' AND year = ' + str(year) + ' AND month = ' + str(month) + ' AND day = ' + str(day) + ' AND hour = ' + str(hour) + ' AND minute = ' + str(minute) + ' AND second = ' + str(second) + ' AND ' + filter + ' LIMIT ' + str(limit) + ' OFFSET ' + str(offset) + ' ORDER BY ' + order + ' LIMIT ' + str(limit_2)
	# Get the data.
	data = pd.read_sql(query, database)
	# Return the data.
	return data

# Define the function to get the data.
def get_data_with_filter_and_limit_and_offset_and_order_and_limit_and_offset(database, table, column, zipcode, year, month, day, hour, minute, second, filter, limit, offset, order, limit_2, offset_2):
	# Create the query.
	query = 'SELECT ' + column + ' FROM ' + table + ' WHERE zipcode = ' + str(zipcode) + ' AND year = ' + str(year) + ' AND month = ' + str(month) + ' AND day = ' + str(day) + ' AND hour = ' + str(hour) + ' AND minute = ' + str(minute) + ' AND second = ' + str(second) + ' AND ' + filter + ' LIMIT ' + str(limit) + ' OFFSET ' + str(offset) + ' ORDER BY ' + order + ' LIMIT ' + str(limit_2) + ' OFFSET ' + str(offset_2)
	# Get the data.
	data = pd.read_sql(query, database)
	# Return the data.
	return data

# Define the function to get the data.
def get_data_with_filter_and_limit_and_offset_and_order_and_limit_and_offset_and_limit(database, table, column, zipcode, year, month, day, hour, minute, second, filter, limit, offset, order, limit_2, offset_2, limit_3):
	# Create the query.
	query = 'SELECT ' + column + ' FROM ' + table + ' WHERE zipcode = ' + str(zipcode) + ' AND year = ' + str(year) + ' AND month = ' + str(month) + ' AND day = ' + str(day) + ' AND

====================================================================================================

PROMPT 44:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get median household income.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 44:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get median household income.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the required packages
import pandas as pd
import numpy as np

# Read the data
df = pd.read_csv('data/zillow_data.csv')

# Get the median income for each zipcode
df_median_income = df.groupby('zipcode')['median_house_value'].median()

# Generate the SQL statement
df_median_income.to_frame().reset_index().to_sql(
	name='zillow_median_income',
	con=conn,
	if_exists='replace',
	index=False
)

# Print the SQL statement
print(
	"""
	INSERT INTO zillow_median_income
	SELECT
		zipcode,
		median_house_value
	FROM
		zillow_data
	WHERE
		zipcode IN (
			SELECT
				zipcode
			FROM
				zillow_median_income
			GROUP BY
				zipcode
			HAVING
				COUNT(*) = 1
		)
	"""
)

# Print the SQL statement
print(
	"""
	INSERT INTO zillow_median_income
	SELECT
		zipcode,
		median_house_value
	FROM
		zillow_data
	WHERE
		zipcode IN (
			SELECT
				zipcode
			FROM
				zillow_median_income
			GROUP BY
				zipcode
			HAVING
				COUNT(*) > 1
		)
	"""
)

# Print the SQL statement
print(
	"""
	INSERT INTO zillow_median_income
	SELECT
		zipcode,
		median_house_value
	FROM
		zillow_data
	WHERE
		zipcode IN (
			SELECT
				zipcode
			FROM
				zillow_median_income
			GROUP BY
				zipcode
			HAVING
				COUNT(*) > 1
		)
	"""
)

# Print the SQL statement
print(
	"""
	INSERT INTO zillow_median_income
	SELECT
		zipcode,
		median_house_value
	FROM
		zillow_data
	WHERE
		zipcode IN (
			SELECT
				zipcode
			FROM
				zillow_median_income
			GROUP BY
				zipcode
			HAVING
				COUNT(*) > 1
		)
	"""
)

# Print the SQL statement
print(
	"""
	INSERT INTO zillow_median_income
	SELECT
		zipcode,
		median_house_value
	FROM
		zillow_data
	WHERE
		zipcode IN (
			SELECT
				zipcode
			FROM
				zillow_median_income
			GROUP BY
				zipcode
			HAVING
				COUNT(*) > 1
		)
	"""
)

# Print the SQL statement
print(
	"""
	INSERT INTO zillow_median_income
	SELECT
		zipcode,
		median_house_value
	FROM
		zillow_data
	WHERE
		zipcode IN (
			SELECT
				zipcode
			FROM
				zillow_median_income
			GROUP BY
				zipcode
			HAVING
				COUNT(*) > 1
		)
	"""
)

# Print the SQL statement
print(
	"""
	INSERT INTO zillow_median_income
	SELECT
		zipcode,
		median_house_value
	FROM
		zillow_data
	WHERE
		zipcode IN (
			SELECT
				zipcode
			FROM
				zillow_median_income
			GROUP BY
				zipcode
			HAVING
				COUNT(*) > 1
		)
	"""
)

# Print the SQL statement
print(
	"""
	INSERT INTO zillow_median_income
	SELECT
		zipcode,
		median_house_value
	FROM
		zillow_data
	WHERE
		zipcode IN (
			SELECT
				zipcode
			FROM
				zillow_median_income
			GROUP BY
				zipcode
			HAVING
				COUNT(*) > 1
		)
	"""
)

# Print the SQL statement
print(
	"""
	INSERT INTO zillow_median_income
	SELECT
		zipcode,
		median_house_value
	FROM
		zillow_data
	WHERE
		zipcode IN (
			SELECT
				zipcode
			FROM
				zillow_median_income
			GROUP BY
				zipcode
			HAVING
				COUNT(*) > 1
		)
	"""
)

# Print the SQL statement
print(
	"""
	INSERT INTO zillow_median_income
	SELECT
		zipcode,
		median_house_value
	FROM
		zillow_data
	WHERE
		zipcode IN (
			SELECT
				zipcode
			FROM
				zillow_median_income
			GROUP BY
				zipcode
			HAVING
				COUNT(*) > 1
		)
	"""
)

# Print the SQL statement
print(
	"""
	INSERT INTO zillow_median_income
	SELECT
		zipcode,
		median_house_value
	FROM
		zillow_data
	WHERE
		zipcode IN (
			SELECT
				zipcode
			FROM
				zillow_median_income
			GROUP BY
				zipcode
			HAVING
				COUNT(*) > 1
		)
	"""
)

# Print the SQL statement
print(
	"""
	INSERT INTO zillow_median_income
	SELECT
		zipcode,
		median_house_value
	FROM
		zillow_data
	WHERE
		zipcode IN (
			SELECT
				zipcode
			FROM
				zillow_median_income
			GROUP BY
				zipcode
			HAVING
				COUNT(*) > 1
		)
	"""
)

# Print the SQL statement
print(
	"""
	INSERT INTO zillow_median_income
	SELECT
		zipcode,
		median_house_value
	FROM
		zillow_data
	WHERE
		zipcode IN (
			SELECT
				zipcode
			FROM
				zillow_median_income
			GROUP BY
				zipcode
			HAVING
				COUNT(*) > 1
		)
	"""
)

# Print the SQL statement
print(
	"""
	INSERT INTO zillow_median_income
	SELECT
		zipcode,
		median_house_value
	FROM
		zillow_data
	WHERE
		zipcode IN (
			SELECT
				zipcode
			FROM
				zillow_median_income
			GROUP BY
				zipcode
			HAVING
				COUNT(*) > 1
		)
	"""
)

# Print the SQL statement
print(
	"""
	INSERT INTO zillow_median_income
	SELECT
		zipcode,
		median_house_value
	FROM
		zillow_data
	WHERE
		zipcode IN (
			SELECT
				zipcode
			FROM
				zillow_median_income
			GROUP BY
				zipcode
			HAVING
				COUNT(*) > 1
		)
	"""
)

# Print the SQL statement
print(
	"""
	INSERT INTO zillow_median_income
	SELECT
		zipcode,
		median_house_value
	FROM
		zillow_data
	WHERE
		zipcode IN (
			SELECT
				zipcode
			FROM
				zillow_median_income
			GROUP BY
				zipcode
			HAVING
				COUNT(*) > 1
		)
	"""
)

# Print the SQL statement
print(
	"""
	INSERT INTO zillow_median_income
	SELECT
		zipcode,
		median_house_value


====================================================================================================

PROMPT 45:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get change in averaged median household income from 2017 to 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 45:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get change in averaged median household income from 2017 to 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the required libraries.
import pandas as pd
import numpy as np

# Read the data.
df = pd.read_csv('data/median_household_income.csv')

# Create a list of zipcodes.
zipcodes = list(df['zipcode'].unique())

# Create a list of years.
years = list(df['year'].unique())

# Create a list of months.
months = list(df['month'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df['state'].unique())

# Create a list of states.
states = list(df

====================================================================================================

PROMPT 46:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, get median and mean household income over all the years.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 46:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, get median and mean household income over all the years.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import your libraries
import pandas as pd

# Start writing code
df = pd.read_csv('../input/household_income.csv')

# Your code goes here
df.groupby(['zipcode'])[['median_household_income', 'mean_household_income']].agg(['median', 'mean']).reset_index()

# End writing code


====================================================================================================

PROMPT 47:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get percentage of units with mortgage and median household income.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 47:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode, get percentage of units with mortgage and median household income.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	zipcode: a string, the zipcode to analyze
	
	median_household_income: a string, the median household income
	
	mortgage_percentage: a string, the percentage of units with mortgage
	
	
Output:
	A string, the SQL statement
	
	
'''

# Your code here

# For each zipcode, get percentage of units with mortgage and median household income.
# For each zipcode, get the median household income.
# For each zipcode, get the percentage of units with mortgage.
# For each zipcode, get the median house value.
# For each zipcode, get the number of units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode, get the number of vacant units.
# For each zipcode, get the number of occupied units.
# For each zipcode,

====================================================================================================

PROMPT 48:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in the year 2022, get average housing value and median household income.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 48:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in the year 2022, get average housing value and median household income.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	zipcode: a string of a 5-digit zipcode
	year: a string of a 4-digit year

Output:
	A string of SQL statement.
"""

# Your code here

# Hint:
# 1. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 2. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 3. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 4. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 5. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 6. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 7. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 8. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 9. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 10. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 11. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 12. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 13. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 14. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 15. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 16. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 17. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 18. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 19. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 20. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 21. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 22. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 23. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 24. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 25. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 26. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 27. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 28. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 29. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 30. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 31. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 32. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 33. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 34. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 35. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 36. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 37. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 38. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 39. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 40. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode, year)
# 41. You can use the following functions to get the data:
#	- get_zipcode_data(zipcode, year)
#	- get_zipcode_data(zipcode,

====================================================================================================

PROMPT 49:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, find the change in percentage of population with no health insurance from year 2017 to 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 49:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode of Georgia, find the change in percentage of population with no health insurance from year 2017 to 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd
import numpy as np

# Read in the data
df = pd.read_csv("../data/georgia_health_insurance.csv")

# Create a list of the zipcodes
zipcodes = list(df["zipcode"].unique())

# Create a list of the years
years = list(df["year"].unique())

# Create a list of the states
states = list(df["state"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique())

# Create a list of the health insurance types
insurance_types = list(df["insurance_type"].unique

====================================================================================================

PROMPT 50:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 50:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average house rent.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd
import numpy as np

# Read in the data
df = pd.read_csv('data/zip_data.csv')

# Get the year
year = 2022

# Get the population
population = df.loc[df['year'] == year, 'population'].values[0]

# Get the number of people with no health insurance
no_insurance = df.loc[df['year'] == year, 'no_insurance'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.loc[df['year'] == year, 'avg_rent'].values[0]

# Get the average house rent
avg_rent = df.

====================================================================================================

PROMPT 51:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average housing price.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 51:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in year 2022, get percentage of population with no health insurance and average housing price.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd
import numpy as np

# Read in the data
df = pd.read_csv('data/zip_data.csv')

# Create a list of the zipcodes
zipcodes = list(df['zip'].unique())

# Create a list of the years
years = list(df['year'].unique())

# Create a list of the columns
columns = list(df.columns)

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_use = ['zip', 'year', 'pop_no_health_insurance', 'avg_house_price']

# Create a list of the columns to be used
columns_to_

====================================================================================================

PROMPT 52:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the change in percentage of population commuting via public transport from year 2017 to 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 52:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the change in percentage of population commuting via public transport from year 2017 to 2022.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd
import numpy as np

# Read the data
data = pd.read_csv('data/transit_data.csv')

# Get the list of zipcodes
zipcodes = list(data['zipcode'].unique())

# Create a list to store the results
results = []

# For each zipcode, get the change in percentage of population commuting via public transport from year 2017 to 2022
for zipcode in zipcodes:
	# Get the data for the zipcode
	data_zipcode = data[data['zipcode'] == zipcode]
	# Get the year and the change in percentage of population commuting via public transport
	year = list(data_zipcode['year'])[0]
	change = list(data_zipcode['change'])[0]
	# If the year is 2017, then the change is the first year
	if year == 2017:
		change_2017 = change
	# If the year is 2022, then the change is the last year
	elif year == 2022:
		change_2022 = change
	# Otherwise, the change is the average of the year and the year before
	else:
		change_2017 = (change + change_2022) / 2
	# Append the result
	results.append(change_2017)

# Create a dataframe to store the results
results_df = pd.DataFrame({'zipcode': zipcodes, 'change': results})

# Get the number of rows
num_rows = results_df.shape[0]

# For each row, if the change is less than -1% or greater than 1%
for i in range(num_rows):
	# If the change is less than -1%
	if results_df['change'][i] < -0.01:
		# Set the change to -1%
		results_df['change'][i] = -0.01
	# If the change is greater than 1%
	elif results_df['change'][i] > 0.01:
		# Set the change to 1%
		results_df['change'][i] = 0.01

# Get the number of rows
num_rows = results_df.shape[0]

# For each row, if the change is less than -0.1% or greater than 0.1%
for i in range(num_rows):
	# If the change is less than -0.1%
	if results_df['change'][i] < -0.1:
		# Set the change to -0.1%
		results_df['change'][i] = -0.1
	# If the change is greater than 0.1%
	elif results_df['change'][i] > 0.1:
		# Set the change to 0.1%
		results_df['change'][i] = 0.1

# Get the number of rows
num_rows = results_df.shape[0]

# For each row, if the change is less than -0.2% or greater than 0.2%
for i in range(num_rows):
	# If the change is less than -0.2%
	if results_df['change'][i] < -0.2:
		# Set the change to -0.2%
		results_df['change'][i] = -0.2
	# If the change is greater than 0.2%
	elif results_df['change'][i] > 0.2:
		# Set the change to 0.2%
		results_df['change'][i] = 0.2

# Get the number of rows
num_rows = results_df.shape[0]

# For each row, if the change is less than -0.3% or greater than 0.3%
for i in range(num_rows):
	# If the change is less than -0.3%
	if results_df['change'][i] < -0.3:
		# Set the change to -0.3%
		results_df['change'][i] = -0.3
	# If the change is greater than 0.3%
	elif results_df['change'][i] > 0.3:
		# Set the change to 0.3%
		results_df['change'][i] = 0.3

# Get the number of rows
num_rows = results_df.shape[0]

# For each row, if the change is less than -0.4% or greater than 0.4%
for i in range(num_rows):
	# If the change is less than -0.4%
	if results_df['change'][i] < -0.4:
		# Set the change to -0.4%
		results_df['change'][i] = -0.4
	# If the change is greater than 0.4%
	elif results_df['change'][i] > 0.4:
		# Set the change to 0.4%
		results_df['change'][i] = 0.4

# Get the number of rows
num_rows = results_df.shape[0]

# For each row, if the change is less than -0.5% or greater than 0.5%
for i in range(num_rows):
	# If the change is less than -0.5%
	if results_df['change'][i] < -0.5:
		# Set the change to -0.5%
		results_df['change'][i] = -0.5
	# If the change is greater than 0.5%
	elif results_df['change'][i] > 0.5:
		# Set the change to 0.5%
		results_df['change'][i] = 0.5

# Get the number of rows
num_rows = results_df.shape[0]

# For each row, if the change is less than -0.6% or greater than 0.6%
for i in range(num_rows):
	# If the change is less than -0.6%
	if results_df['change'][i] < -0.6:
		# Set the change to -0.6%
		results_df['change'][i] = -0.6
	# If the change is greater than 0.6%
	elif results_df['change'][i] > 0.6:
		# Set the change to 0.6%
		results_df['change'][i] = 0.6

# Get the number of rows
num_rows = results_df.shape[0]

# For each row, if the change is less than -0.7% or greater than 0.7%
for i in range(num_rows):
	# If the change is less than -0.7%
	if results_df['change'][i] < -0.7:
		# Set the change to -0.7%
		results_df['change'][i] = -0.7
	# If the change is greater than 0.7%
	elif results_df['change'][i] > 0.7:
		# Set the change to 0.7%
		results_df['change'][i] = 0.7

# Get the number of rows
num_rows = results_df.shape[0]

# For each row, if the change is less than -0.8% or greater than 0.8%
for i in range(num_rows):
	# If the change is less than -0.8%
	if results_df['change'][i] < -0.8:
		# Set the change to -0.8%
		results_df['change'][i] = -0.8
	# If the change is greater than 0.8%
	elif results_df['change'][i] > 0.8:
		# Set the change to 0.8%
		results_df['change'][i] = 0.8

# Get the number of rows
num_rows = results_df.shape[0]

# For each row, if the change is less than -0.9% or greater than 0.9%
for i in range(num_rows):
	# If the change is less than -0.9%
	if results_df['change'][i] < -

====================================================================================================

PROMPT 53:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the count of non-US citizens and foreign born population

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 53:

Generate an SQL statement to answer a question.

Prompt: 
	For each zipcode in Georgia, get the count of non-US citizens and foreign born population

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your SQL query statement below

SELECT
	COUNT(CASE WHEN CITIZENSHIP = 'Non-US Citizen' THEN 1 ELSE NULL END) AS NON_US_CITIZEN,
	COUNT(CASE WHEN CITIZENSHIP = 'Foreign-born' THEN 1 ELSE NULL END) AS FOREIGN_BORN
FROM
	`bigquery-public-data.census_bureau_acs.acs_census_bureau_2015_5yr_us_county_tract_data`
WHERE
	STATE = 'GA'
	AND COUNTY = '001'
	AND TRACT = '01'
	AND YEAR = 2015
	AND CITIZENSHIP IS NOT NULL
	
# OPTIONAL: Uncomment below to get a sample of the first 5 rows of the table
# LIMIT 5


====================================================================================================

PROMPT 54:

Generate an SQL statement to answer a question.

Prompt: 
	Get the average of each ethnic group (black, white, asian) by year.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 54:

Generate an SQL statement to answer a question.

Prompt: 
	Get the average of each ethnic group (black, white, asian) by year.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A list of tuples, where each tuple is a year and the ethnic group.
	
	For example:
	[(2000, 'white'), (2001, 'white'), (2002, 'white'), (2003, 'white'), (2004, 'white'), (2005, 'white'), (2006, 'white'), (2007, 'white'), (2008, 'white'), (2009, 'white'), (2010, 'white'), (2011, 'white'), (2012, 'white'), (2013, 'white'), (2014, 'white'), (2015, 'white'), (2016, 'white'), (2017, 'white'), (2018, 'white'), (2019, 'white')]

Output Format:
	A single SQL statement that answers the question.
	
	For example:
	SELECT AVG(population) FROM population WHERE year = 2000 AND ethnic_group = 'white';
	
	The SQL statement should be a single, most accurate answer.
	
	If the SQL statement is not the most accurate answer,
	then the SQL statement should be INSUFFICIENT.
"""

# Write your code here

# Solution

# Solution 1

# Solution 2

# Solution 3

# Solution 4

# Solution 5

# Solution 6

# Solution 7

# Solution 8

# Solution 9

# Solution 10

# Solution 11

# Solution 12

# Solution 13

# Solution 14

# Solution 15

# Solution 16

# Solution 17

# Solution 18

# Solution 19

# Solution 20

# Solution 21

# Solution 22

# Solution 23

# Solution 24

# Solution 25

# Solution 26

# Solution 27

# Solution 28

# Solution 29

# Solution 30

# Solution 31

# Solution 32

# Solution 33

# Solution 34

# Solution 35

# Solution 36

# Solution 37

# Solution 38

# Solution 39

# Solution 40

# Solution 41

# Solution 42

# Solution 43

# Solution 44

# Solution 45

# Solution 46

# Solution 47

# Solution 48

# Solution 49

# Solution 50

# Solution 51

# Solution 52

# Solution 53

# Solution 54

# Solution 55

# Solution 56

# Solution 57

# Solution 58

# Solution 59

# Solution 60

# Solution 61

# Solution 62

# Solution 63

# Solution 64

# Solution 65

# Solution 66

# Solution 67

# Solution 68

# Solution 69

# Solution 70

# Solution 71

# Solution 72

# Solution 73

# Solution 74

# Solution 75

# Solution 76

# Solution 77

# Solution 78

# Solution 79

# Solution 80

# Solution 81

# Solution 82

# Solution 83

# Solution 84

# Solution 85

# Solution 86

# Solution 87

# Solution 88

# Solution 89

# Solution 90

# Solution 91

# Solution 92

# Solution 93

# Solution 94

# Solution 95

# Solution 96

# Solution 97

# Solution 98

# Solution 99

# Solution 100

# Solution 101

# Solution 102

# Solution 103

# Solution 104

# Solution 105

# Solution 106

# Solution 107

# Solution 108

# Solution 109

# Solution 110

# Solution 111

# Solution 112

# Solution 113

# Solution 114

# Solution 115

# Solution 116

# Solution 117

# Solution 118

# Solution 119

# Solution 120

# Solution 121

# Solution 122

# Solution 123

# Solution 124

# Solution 125

# Solution 126

# Solution 127

# Solution 128

# Solution 129

# Solution 130

# Solution 131

# Solution 132

# Solution 133

# Solution 134

# Solution 135

# Solution 136

# Solution 137

# Solution 138

# Solution 139

# Solution 140

# Solution 141

# Solution 142

# Solution 143

# Solution 144

# Solution 145

# Solution 146

# Solution 147

# Solution 148

# Solution 149

# Solution 150

# Solution 151

# Solution 152

# Solution 153

# Solution 154

# Solution 155

# Solution 156

# Solution 157

# Solution 158

# Solution 159

# Solution 160

# Solution 161

# Solution 162

# Solution 163

# Solution 164

# Solution 165

# Solution 166

# Solution 167

# Solution 168

# Solution 169

# Solution 170

# Solution 171

# Solution 172

# Solution 173

# Solution 174

# Solution 175

# Solution 176

# Solution 177

# Solution 178

# Solution 179

# Solution 180

# Solution 181

# Solution 182

# Solution 183

# Solution 184

# Solution 185

# Solution 186

# Solution 187

# Solution 188

# Solution 189

# Solution 190

# Solution 191

# Solution 192

# Solution 193

# Solution 194

# Solution 195

# Solution 196

# Solution 197

# Solution 198

# Solution 199

# Solution 200

# Solution 201

# Solution 202

# Solution 203

# Solution 204

# Solution 205

# Solution 206

# Solution 207

# Solution 208

# Solution 209

# Solution 210

# Solution 211

# Solution 212

# Solution 213

# Solution 214

# Solution 215

# Solution 216

# Solution 217

# Solution 218

# Solution 219

# Solution 220

# Solution 221

# Solution 222

# Solution 223

# Solution 224

# Solution 225

# Solution 226

# Solution 227

# Solution 228

# Solution 229

# Solution 230

# Solution 231

# Solution 232

# Solution 233

# Solution 234

# Solution 235

# Solution 236

# Solution 237

# Solution 238

# Solution 239

# Solution 240

# Solution 241

# Solution 242

# Solution 243

# Solution 244

# Solution 245

# Solution 246

# Solution 247

# Solution 248

# Solution 249

# Solution 250

# Solution 251

# Solution 252

# Solution 253

# Solution 254

# Solution 255

# Solution 256

# Solution 257

# Solution 258

# Solution 259

# Solution 260

# Solution 261

# Solution 262

# Solution 263

# Solution 264

# Solution 265

# Solution 266

# Solution 267

# Solution 268

# Solution 269

# Solution 270

# Solution 271

# Solution 272

# Solution 273

# Solution 274

# Solution 275

# Solution 276

# Solution 277

# Solution 278

# Solution 279

# Solution 280

# Solution 281

# Solution 282

# Solution 283

# Solution 284

# Solution 285

# Solution 286

# Solution 287

# Solution 288

# Solution 289

# Solution 290

# Solution 291

# Solution 292

# Solution 293

# Solution 294

# Solution 295

# Solution 296

# Solution 297

# Solution 298

# Solution 299

# Solution 300

# Solution 301

# Solution 302

# Solution 303

# Solution 304

# Solution 305

# Solution 306

# Solution 307

# Solution 308

# Solution 309

# Solution 310

# Solution 311

# Solution 312

# Solution 313

# Solution 314

# Solution 315

# Solution 316

# Solution 317

# Solution 318

# Solution 319

# Solution 320

# Solution 321

# Solution 322

# Solution 323

# Solution 324

# Solution 325

# Solution 326

# Solution 327

# Solution 328

# Solution 329

# Solution 330

# Solution 331

# Solution 332

# Solution 333

# Solution 334

# Solution 335

# Solution 336

# Solution 337

# Solution 338

# Solution 339

# Solution 340

# Solution 341

# Solution 342

# Solution 343

# Solution 344

# Solution

====================================================================================================

PROMPT 55:

Generate an SQL statement to answer a question.

Prompt: 
	Get the percentage of types of education attained by population aged 25 and above for each year.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 55:

Generate an SQL statement to answer a question.

Prompt: 
	Get the percentage of types of education attained by population aged 25 and above for each year.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Get the percentage of types of education attained by population aged 25 and above for each year.
# Note, only respond with a single most accurate SQL statement.
# If more information is required, simply respond with 'INSUFFICENT'.

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

# Write your code here

====================================================================================================

PROMPT 56:

Generate an SQL statement to answer a question.

Prompt: 
	In year 2022, for each zipcode in Georgia, get the percentage of population with associate and bachelors degree or higher and average housing price.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 56:

Generate an SQL statement to answer a question.

Prompt: 
	In year 2022, for each zipcode in Georgia, get the percentage of population with associate and bachelors degree or higher and average housing price.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	The input to the program is a text file with a list of zipcodes in Georgia.
	The first line of the file is a header, and the first column is the zipcode.
	The next line is a list of zipcodes in Georgia.
	The last line of the file is a header, and the first column is the zipcode.
	The next line is a list of zipcodes in Georgia.

Output:
	The output of the program is a text file with a list of zipcodes in Georgia.
	The first line of the file is a header, and the first column is the zipcode.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zipcodes in Georgia.
	The next line is a list of zip

====================================================================================================

PROMPT 57:

Generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  price and percentage of houses having broadband subscription.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 57:

Generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  price and percentage of houses having broadband subscription.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your SQL query statement below

SELECT 
	AVG(price) as avg_price,
	AVG(broadband) as avg_broadband,
	AVG(zipcode) as avg_zipcode,
	AVG(year) as avg_year,
	COUNT(zipcode) as count_zipcode
FROM 
	house_data
WHERE
	year > 2016
GROUP BY
	zipcode

# If you want to use the sample data, you can download it from:
# https://s3.amazonaws.com/content.udacity-data.com/courses/ud359/zip_codes.csv

# The following sample data has been provided for you.
# You can use it to test your code.

# Note, the data is not in a good format.
# You will not be able to run the code if you don't use the following commands to fix the data.

# Instructions:
# 1. Go to your database and create a new table called "zip_codes"
# 2. Copy and paste the sample data into the table
# 3. Run the sample code to test it out.
# 4. The sample data in the table should be called "zip_codes"
# 5. Fix the data so that it is in a good format.
# 6. Run the sample code again.
# 7. The sample data should be called "zip_codes"
# 8. Fix the data so that it is in a good format.
# 9. Run the sample code again.
# 10. The sample data should be called "zip_codes"
# 11. Fix the data so that it is in a good format.
# 12. Run the sample code again.
# 13. The sample data should be called "zip_codes"
# 14. Fix the data so that it is in a good format.
# 15. Run the sample code again.
# 16. The sample data should be called "zip_codes"
# 17. Fix the data so that it is in a good format.
# 18. Run the sample code again.
# 19. The sample data should be called "zip_codes"
# 20. Fix the data so that it is in a good format.
# 21. Run the sample code again.
# 22. The sample data should be called "zip_codes"
# 23. Fix the data so that it is in a good format.
# 24. Run the sample code again.
# 25. The sample data should be called "zip_codes"
# 26. Fix the data so that it is in a good format.
# 27. Run the sample code again.
# 28. The sample data should be called "zip_codes"
# 29. Fix the data so that it is in a good format.
# 30. Run the sample code again.
# 31. The sample data should be called "zip_codes"
# 32. Fix the data so that it is in a good format.
# 33. Run the sample code again.
# 34. The sample data should be called "zip_codes"
# 35. Fix the data so that it is in a good format.
# 36. Run the sample code again.
# 37. The sample data should be called "zip_codes"
# 38. Fix the data so that it is in a good format.
# 39. Run the sample code again.
# 40. The sample data should be called "zip_codes"
# 41. Fix the data so that it is in a good format.
# 42. Run the sample code again.
# 43. The sample data should be called "zip_codes"
# 44. Fix the data so that it is in a good format.
# 45. Run the sample code again.
# 46. The sample data should be called "zip_codes"
# 47. Fix the data so that it is in a good format.
# 48. Run the sample code again.
# 49. The sample data should be called "zip_codes"
# 50. Fix the data so that it is in a good format.
# 51. Run the sample code again.
# 52. The sample data should be called "zip_codes"
# 53. Fix the data so that it is in a good format.
# 54. Run the sample code again.
# 55. The sample data should be called "zip_codes"
# 56. Fix the data so that it is in a good format.
# 57. Run the sample code again.
# 58. The sample data should be called "zip_codes"
# 59. Fix the data so that it is in a good format.
# 60. Run the sample code again.
# 61. The sample data should be called "zip_codes"
# 62. Fix the data so that it is in a good format.
# 63. Run the sample code again.
# 64. The sample data should be called "zip_codes"
# 65. Fix the data so that it is in a good format.
# 66. Run the sample code again.
# 67. The sample data should be called "zip_codes"
# 68. Fix the data so that it is in a good format.
# 69. Run the sample code again.
# 70. The sample data should be called "zip_codes"
# 71. Fix the data so that it is in a good format.
# 72. Run the sample code again.
# 73. The sample data should be called "zip_codes"
# 74. Fix the data so that it is in a good format.
# 75. Run the sample code again.
# 76. The sample data should be called "zip_codes"
# 77. Fix the data so that it is in a good format.
# 78. Run the sample code again.
# 79. The sample data should be called "zip_codes"
# 80. Fix the data so that it is in a good format.
# 81. Run the sample code again.
# 82. The sample data should be called "zip_codes"
# 83. Fix the data so that it is in a good format.
# 84. Run the sample code again.
# 85. The sample data should be called "zip_codes"
# 86. Fix the data so that it is in a good format.
# 87. Run the sample code again.
# 88. The sample data should be called "zip_codes"
# 89. Fix the data so that it is in a good format.
# 90. Run the sample code again.
# 91. The sample data should be called "zip_codes"
# 92. Fix the data so that it is in a good format.
# 93. Run the sample code again.
# 94. The sample data should be called "zip_codes"
# 95. Fix the data so that it is in a good format.
# 96. Run the sample code again.
# 97. The sample data should be called "zip_codes"
# 98. Fix the data so that it is in a good format.
# 99. Run the sample code again.
# 100. The sample data should be called "zip_codes"
# 101. Fix the data so that it is in a good format.
# 102. Run the sample code again.
# 103. The sample data should be called "zip_codes"
# 104. Fix the data so that it is in a good format.
# 105. Run the sample code again.
# 106. The sample data should be called "zip_codes"
# 107. Fix the data so that it is in a good format.
# 108. Run the sample code again.
# 109. The sample data should be called "zip_codes"
# 110. Fix the data so that it is in a good format.
# 111. Run the sample code again.
# 112. The sample data should be called "zip_codes"
# 113. Fix the data so that it is in a good format.
# 114. Run the sample code again.
# 115. The sample data should be called "zip_codes"
# 116. Fix the data so that it is in a good format.
# 117. Run the sample code again.
# 118. The sample data should be called "zip_codes"
# 119. Fix the data so that it is in a good format.
# 120. Run the sample code again.
# 121. The sample data should be called "zip_codes"
# 122. Fix the data so that it is in a good format.
# 123. Run the sample code again.
# 124. The sample data should be called "zip_codes"
# 125. Fix the data so that it is in a good format.
# 126. Run the sample code again.
# 127. The sample data should be called "zip_codes"
# 128. Fix the data so that it is

====================================================================================================

PROMPT 58:

Generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 58:

Generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode get average housing  rent and percentage of houses having broadband subscription.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import your libraries
import pandas as pd

# Start writing code

# 1. Get the data
df = pd.read_csv('data/zillow_rent_data.csv')

# 2. Get the year, zipcode, and average housing rent
df_year_rent = df.groupby(['year', 'zipcode'])['rent'].mean().reset_index()

# 3. Get the year, zipcode, and percentage of houses having broadband subscription
df_year_sub = df.groupby(['year', 'zipcode'])['sub'].mean().reset_index()

# 4. Join the two dataframes
df_year_rent_sub = df_year_rent.merge(df_year_sub, on=['year', 'zipcode'])

# 5. Get the year, zipcode, and average housing rent and percentage of houses having broadband subscription
df_year_rent_sub_avg_rent = df_year_rent_sub.groupby(['year', 'zipcode'])['rent'].mean().reset_index()

# 6. Join the two dataframes
df_year_rent_sub_avg_rent_sub = df_year_rent_sub_avg_rent.merge(df_year_rent_sub, on=['year', 'zipcode'])

# 7. Get the year, zipcode, and average housing rent and percentage of houses having broadband subscription
df_year_rent_sub_avg_rent_sub_avg_rent = df_year_rent_sub_avg_rent_sub.groupby(['year', 'zipcode'])['rent'].mean().reset_index()

# 8. Join the two dataframes
df_year_rent_sub_avg_rent_sub_avg_rent_sub = df_year_rent_sub_avg_rent_sub_avg_rent.merge(df_year_rent_sub_avg_rent, on=['year', 'zipcode'])

# 9. Get the year, zipcode, and average housing rent and percentage of houses having broadband subscription
df_year_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent = df_year_rent_sub_avg_rent_sub_avg_rent_sub.groupby(['year', 'zipcode'])['rent'].mean().reset_index()

# 10. Join the two dataframes
df_year_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub = df_year_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub.merge(df_year_rent_sub_avg_rent_sub, on=['year', 'zipcode'])

# 11. Get the year, zipcode, and average housing rent and percentage of houses having broadband subscription
df_year_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent = df_year_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub.groupby(['year', 'zipcode'])['rent'].mean().reset_index()

# 12. Join the two dataframes
df_year_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent = df_year_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub.merge(df_year_rent_sub_avg_rent_sub, on=['year', 'zipcode'])

# 13. Get the year, zipcode, and average housing rent and percentage of houses having broadband subscription
df_year_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent = df_year_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub.groupby(['year', 'zipcode'])['rent'].mean().reset_index()

# 14. Join the two dataframes
df_year_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent = df_year_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub.merge(df_year_rent_sub_avg_rent_sub, on=['year', 'zipcode'])

# 15. Get the year, zipcode, and average housing rent and percentage of houses having broadband subscription
df_year_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_rent_sub_avg_

====================================================================================================

PROMPT 59:

Generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode, get percentage of households with a computer and percentage of housholds with broadband subscription.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 59:

Generate an SQL statement to answer a question.

Prompt: 
	For all years after 2016, for each zipcode, get percentage of households with a computer and percentage of housholds with broadband subscription.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import the necessary libraries
import pandas as pd

# Read the data
df = pd.read_csv("data/household_computer_broadband.csv")

# Get the year, zipcode, and broadband subscription
df = df[(df['year'] > 2016) & (df['year'] < 2020)]
df = df[['year', 'zipcode', 'broadband']]

# Group the data by year and zipcode
df = df.groupby(['year', 'zipcode'])['broadband'].agg(['sum', 'count'])

# Calculate the percentage of households with a computer
df['percent_with_computer'] = (df['sum'] / df['count']) * 100

# Calculate the percentage of households with broadband
df['percent_with_broadband'] = (df['sum'] / df['count']) * 100

# Get the most recent year
most_recent_year = df.index.get_level_values('year').max()

# Get the most recent zipcode
most_recent_zipcode = df.index.get_level_values('zipcode').max()

# Get the most recent broadband subscription
most_recent_broadband = df.loc[(most_recent_year, most_recent_zipcode), 'broadband']

# Get the most recent computer subscription
most_recent_computer = df.loc[(most_recent_year, most_recent_zipcode), 'sum']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent computer percentage
most_recent_computer_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_computer']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percentage = df.loc[(most_recent_year, most_recent_zipcode), 'percent_with_broadband']

# Get the most recent broadband percentage
most_recent_broadband_percent

====================================================================================================

