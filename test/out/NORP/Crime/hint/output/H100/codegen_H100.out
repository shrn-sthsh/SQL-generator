PROMPT 1:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta on each day of the week

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 1:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta on each day of the week

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	INSUFFICENT

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	INSUFFICENT

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day of the week?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Sample Input:
	How many crimes occurred on each day

====================================================================================================

PROMPT 2:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta during each month of the year

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 2:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta during each month of the year

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	How many crimes occurred in Atlanta in each month of the year?

Sample Output:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Crime_Date LIKE '%01%' OR Crime_Date LIKE '%02%' OR Crime_Date LIKE '%03%' OR Crime_Date LIKE '%04%' OR Crime_Date LIKE '%05%' OR Crime_Date LIKE '%06%' OR Crime_Date LIKE '%07%' OR Crime_Date LIKE '%08%' OR Crime_Date LIKE '%09%' OR Crime_Date LIKE '%10%' OR Crime_Date LIKE '%11%' OR Crime_Date LIKE '%12%';

'''

# Import your libraries
import pandas as pd

# Start writing code
df = pd.read_csv('crime_data.csv')

# Your code goes here
df.head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head()

# Your code goes here
df.groupby(['Crime_Date'])['Crime_ID'].count().head

====================================================================================================

PROMPT 3:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta at each hour of the day

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 3:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta at each hour of the day

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd
import numpy as np

# Connect to the database
conn = psycopg2.connect(database = "postgres", user = "postgres", password = "postgres", host = "localhost", port = "5432")

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database to get the most recent crime data
cur.execute("""
SELECT *
FROM atlanta_crime_data
ORDER BY Crime_Date DESC
LIMIT 1;
""")

# Fetch the data
data = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Convert the data to a dataframe
df = pd.DataFrame(data)

# Print the dataframe
print(df)

# Create a new dataframe to store the data
new_df = pd.DataFrame(columns=['Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Longitude', 'Latitude'])

# Iterate over the dataframe
for i in range(len(df)):
	# Get the date, time, type, and area
	date = df.iloc[i, 2]
	time = df.iloc[i, 3]
	type = df.iloc[i, 4]
	area = df.iloc[i, 5]

	# Get the address, longitude, and latitude
	address = df.iloc[i, 6]
	longitude = df.iloc[i, 7]
	latitude = df.iloc[i, 8]

	# Add the data to the new dataframe
	new_df = new_df.append({'Crime_Date': date, 'Crime_Time': time, 'Crime_Type': type, 'Area_Name': area, 'Address': address, 'Longitude': longitude, 'Latitude': latitude}, ignore_index=True)

# Print the new dataframe
print(new_df)

# Create a new dataframe to store the data
new_df2 = pd.DataFrame(columns=['Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Longitude', 'Latitude'])

# Iterate over the dataframe
for i in range(len(df)):
	# Get the date, time, type, and area
	date = df.iloc[i, 2]
	time = df.iloc[i, 3]
	type = df.iloc[i, 4]
	area = df.iloc[i, 5]

	# Get the address, longitude, and latitude
	address = df.iloc[i, 6]
	longitude = df.iloc[i, 7]
	latitude = df.iloc[i, 8]

	# Add the data to the new dataframe
	new_df2 = new_df2.append({'Crime_Date': date, 'Crime_Time': time, 'Crime_Type': type, 'Area_Name': area, 'Address': address, 'Longitude': longitude, 'Latitude': latitude}, ignore_index=True)

# Print the new dataframe
print(new_df2)

# Create a new dataframe to store the data
new_df3 = pd.DataFrame(columns=['Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Longitude', 'Latitude'])

# Iterate over the dataframe
for i in range(len(df)):
	# Get the date, time, type, and area
	date = df.iloc[i, 2]
	time = df.iloc[i, 3]
	type = df.iloc[i, 4]
	area = df.iloc[i, 5]

	# Get the address, longitude, and latitude
	address = df.iloc[i, 6]
	longitude = df.iloc[i, 7]
	latitude = df.iloc[i, 8]

	# Add the data to the new dataframe
	new_df3 = new_df3.append({'Crime_Date': date, 'Crime_Time': time, 'Crime_Type': type, 'Area_Name': area, 'Address': address, 'Longitude': longitude, 'Latitude': latitude}, ignore_index=True)

# Print the new dataframe
print(new_df3)

# Create a new dataframe to store the data
new_df4 = pd.DataFrame(columns=['Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Longitude', 'Latitude'])

# Iterate over the dataframe
for i in range(len(df)):
	# Get the date, time, type, and area
	date = df.iloc[i, 2]
	time = df.iloc[i, 3]
	type = df.iloc[i, 4]
	area = df.iloc[i, 5]

	# Get the address, longitude, and latitude
	address = df.iloc[i, 6]
	longitude = df.iloc[i, 7]
	latitude = df.iloc[i, 8]

	# Add the data to the new dataframe
	new_df4 = new_df4.append({'Crime_Date': date, 'Crime_Time': time, 'Crime_Type': type, 'Area_Name': area, 'Address': address, 'Longitude': longitude, 'Latitude': latitude}, ignore_index=True)

# Print the new dataframe
print(new_df4)

# Create a new dataframe to store the data
new_df5 = pd.DataFrame(columns=['Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Longitude', 'Latitude'])

# Iterate over the dataframe
for i in range(len(df)):
	# Get the date, time, type, and area
	date = df.iloc[i, 2]
	time = df.iloc[i, 3]
	type = df.iloc[i, 4]
	area = df.iloc[i, 5]

	# Get the address, longitude, and latitude
	address = df.iloc[i, 6]
	longitude = df.iloc[i, 7]
	latitude = df.iloc[i, 8]

	# Add the data to the new dataframe
	new_df5 = new_df5.append({'Crime_Date': date, 'Crime_Time': time, 'Crime_Type': type, 'Area_Name': area, 'Address': address, 'Longitude': longitude, 'Latitude': latitude}, ignore_index=True)

# Print the new dataframe
print(new_df5)

# Create a new dataframe to store the data
new_df6 = pd.DataFrame(columns=['Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Longitude', 'Latitude'])

# Iterate over the dataframe
for i in range(len(df)):
	# Get the date, time, type, and area
	date = df.iloc[i, 2]
	time = df.iloc[i, 3]
	type = df.iloc[i, 4]
	area = df.iloc[i, 5]

	# Get the address, longitude, and latitude
	address = df.iloc[i, 6]
	longitude = df.iloc[i, 7]
	latitude = df.iloc[i, 8]

	# Add the data to the new dataframe
	new_df6 = new_df6.append({'Crime_Date': date, 'Crime_Time': time, 'Crime_Type': type, 'Area_Name': area, 'Address': address, 'Longitude': longitude, 'Latitude':

====================================================================================================

PROMPT 4:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in Atlanta grouped by week since January 2009

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 4:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in Atlanta grouped by week since January 2009

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2

# Connect to database
conn = psycopg2.connect(
    host="localhost",
    database="postgres",
    user="postgres",
    password="postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT COUNT(Crime_ID)
	FROM atlanta_crime_data
	WHERE Crime_Date > '2009-01-01'
	GROUP BY Crime_Date
	ORDER BY Crime_Date
""")

# Fetch the results
results = cur.fetchall()

# Close the cursor and connection
cur.close()
conn.close()

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(

====================================================================================================

PROMPT 5:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA on each day of the week

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 5:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA on each day of the week

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	How many crimes occurred in LA on each day of the week?
	
Sample Output:
	SELECT COUNT(*) FROM la_crime_data WHERE Crime_Date = 'Monday'
	
	SELECT COUNT(*) FROM la_crime_data WHERE Crime_Date = 'Tuesday'
	
	SELECT COUNT(*) FROM la_crime_data WHERE Crime_Date = 'Wednesday'
	
	SELECT COUNT(*) FROM la_crime_data WHERE Crime_Date = 'Thursday'
	
	SELECT COUNT(*) FROM la_crime_data WHERE Crime_Date = 'Friday'
	
	SELECT COUNT(*) FROM la_crime_data WHERE Crime_Date = 'Saturday'
	
	SELECT COUNT(*) FROM la_crime_data WHERE Crime_Date = 'Sunday'
	
	INSUFFICENT
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


====================================================================================================

PROMPT 6:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA during each month of the year

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 6:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA during each month of the year

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	How many crimes occurred in LA in January?
	How many crimes occurred in LA in February?
	How many crimes occurred in LA in March?
	How many crimes occurred in LA in April?
	How many crimes occurred in LA in May?
	How many crimes occurred in LA in June?
	How many crimes occurred in LA in July?
	How many crimes occurred in LA in August?
	How many crimes occurred in LA in September?
	How many crimes occurred in LA in October?
	How many crimes occurred in LA in November?
	How many crimes occurred in LA in December?

Sample Output:
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Date = '01/01/2020'
	SELECT COUNT(Crime

====================================================================================================

PROMPT 7:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA at each hour of the day

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 7:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA at each hour of the day

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	How many crimes occurred in LA at each hour of the day?

Sample Output:
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '1'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '2'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '3'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '4'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '5'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '6'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '7'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '8'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '9'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '10'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '11'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '12'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '13'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '14'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '15'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '16'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '17'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '18'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '19'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '20'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '21'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '22'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '23'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '24'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '25'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '26'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '27'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '28'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '29'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '30'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '31'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '32'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '33'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '34'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '35'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '36'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '37'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '38'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '39'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '40'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '41'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '42'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '43'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '44'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '45'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '46'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '47'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '48'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '49'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '50'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '51'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '52'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '53'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '54'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '55'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '56'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '57'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '58'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '59'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '60'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '61'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '62'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '63'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '64'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '65'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '66'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '67'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '68'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '69'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '70'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '71'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '72'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '73'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '74'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '75'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '76'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '77'
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Crime_Time = '78'
	SELECT COUNT(Crime_ID) FROM la_crime_data

====================================================================================================

PROMPT 8:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in LA grouped by week

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 8:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in LA grouped by week

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd
import numpy as np

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la

====================================================================================================

PROMPT 9:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York on each day of the week

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 9:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York on each day of the week

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd

# Create a function to return a SQL statement
def generate_sql_statement(data_frame, question):
	# Create a list to store the SQL statement
	sql_statement = []
	# Create a list to store the column names
	column_names = []
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create a list to store the column names
	column_names = list(data_frame.columns)
	# Create

====================================================================================================

PROMPT 10:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York during each month of the year

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 10:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York during each month of the year

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd

# Create a dataframe from the csv file
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe with the columns of interest
nyc_crime_data_subset = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_2 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_3 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_4 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_5 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_6 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_7 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_8 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_9 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_10 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_11 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_12 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_13 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_14 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_15 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_16 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_17 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_18 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_19 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_20 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_21 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_22 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_23 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_24 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_25 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a dataframe with the columns of interest
nyc_crime_data_subset_26 = nyc_crime_data[['Crime_ID', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']]

# Create a

====================================================================================================

PROMPT 11:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York at each hour of the day

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 11:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York at each hour of the day

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	How many crimes occurred in New York at each hour of the day?

Sample Output:
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '1'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '2'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '3'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '4'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '5'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '6'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '7'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '8'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '9'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '10'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '11'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '12'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '13'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '14'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '15'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '16'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '17'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '18'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '19'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '20'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '21'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '22'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '23'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '24'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '25'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '26'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '27'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '28'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '29'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '30'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '31'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '32'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '33'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '34'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '35'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '36'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '37'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '38'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '39'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '40'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '41'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '42'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '43'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '44'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '45'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '46'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '47'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '48'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '49'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '50'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '51'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '52'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '53'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '54'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '55'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '56'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '57'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '58'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '59'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '60'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '61'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '62'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '63'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '64'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '65'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '66'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '67'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '68'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '69'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '70'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '71'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '72'
	SELECT COUNT(Crime_ID) FROM nyc_crime_data WHERE Crime_Time = '73'
	

====================================================================================================

PROMPT 12:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in New York grouped by week since January 2023

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 12:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in New York grouped by week since January 2023

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe to hold the data
df = pd.read_

====================================================================================================

PROMPT 13:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly on each day of the week

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 13:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly on each day of the week

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd

# Create a function to generate the SQL statement
def generate_sql(schema, question):
	# Create a list to store the SQL statement
	sql_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the table names
	table_list = []
	

====================================================================================================

PROMPT 14:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly during each month of the year

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 14:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly during each month of the year

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd

# Create a dictionary to hold the SQL statements
sql_dict = {}

# Create a function to generate the SQL statement
def sql_gen(table, column, value):
	# Create a string to hold the SQL statement
	sql_str = ''
	# If the value is a string, add a '%' to the end
	if isinstance(value, str):
		value = '%' + value + '%'
	# If the value is a number, add a '#' to the end
	elif isinstance(value, int):
		value = '#' + str(value)
	# If the value is a list, add a '#' to the end
	elif isinstance(value, list):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.DataFrame):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.Series):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.Index):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.MultiIndex):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.DataFrame):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.Series):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.Index):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.MultiIndex):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.DataFrame):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.Series):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.Index):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.MultiIndex):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.DataFrame):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.Series):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.Index):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.MultiIndex):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.DataFrame):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.Series):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.Index):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.MultiIndex):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.DataFrame):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.Series):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.Index):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.MultiIndex):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.DataFrame):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.Series):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.Index):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.MultiIndex):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.DataFrame):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.Series):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.Index):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.MultiIndex):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.DataFrame):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.Series):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.Index):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.MultiIndex):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.DataFrame):
		value = '#' + str(value)
	# If the value is a dataframe, add a '#' to the end
	elif isinstance(value, pd.Series):
		value = '#' + str(value)
	# If

====================================================================================================

PROMPT 15:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly at each hour of the day

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 15:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly at each hour of the day

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd

# Create a function to return the SQL statement
def sql_generator(schema, question):
	# Create a list to store the SQL statements
	sql_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names
	col_list = []
	# Create a list to store the column types
	col_type_list = []
	# Create a list to store the column names

====================================================================================================

PROMPT 16:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in Philly grouped by week

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 16:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in Philly grouped by week

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to database
conn = psycopg2.connect(
    host = "localhost",
    database = "philly_crime_data",
    user = "postgres",
    password = "postgres"
)

# Create cursor
cur = conn.cursor()

# Query
cur.execute("""
	SELECT COUNT(Crime_ID)
	FROM philly_crime_data
	WHERE Crime_Date LIKE '%2019-%'
	GROUP BY Crime_Date
	ORDER BY Crime_Date
""")

# Fetch data
data = cur.fetchall()

# Close connection
cur.close()
conn.close()

# Create dataframe
df = pd.DataFrame(data, columns=["Count"])

# Print dataframe
print(df)

# Create SQL statement
sql = """
	SELECT COUNT(Crime_ID)
	FROM philly_crime_data
	WHERE Crime_Date LIKE '%2019-%'
	GROUP BY Crime_Date
	ORDER BY Crime_Date
"""

# Print SQL statement
print(sql)

# Create dataframe
df = pd.read_sql(sql, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create SQL statement
sql = """
	SELECT COUNT(Crime_ID)
	FROM philly_crime_data
	WHERE Crime_Date LIKE '%2019-%'
	GROUP BY Crime_Date
	ORDER BY Crime_Date
"""

# Print SQL statement
print(sql)

# Create dataframe
df = pd.read_sql(sql, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create SQL statement
sql = """
	SELECT COUNT(Crime_ID)
	FROM philly_crime_data
	WHERE Crime_Date LIKE '%2019-%'
	GROUP BY Crime_Date
	ORDER BY Crime_Date
"""

# Print SQL statement
print(sql)

# Create dataframe
df = pd.read_sql(sql, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create SQL statement
sql = """
	SELECT COUNT(Crime_ID)
	FROM philly_crime_data
	WHERE Crime_Date LIKE '%2019-%'
	GROUP BY Crime_Date
	ORDER BY Crime_Date
"""

# Print SQL statement
print(sql)

# Create dataframe
df = pd.read_sql(sql, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create SQL statement
sql = """
	SELECT COUNT(Crime_ID)
	FROM philly_crime_data
	WHERE Crime_Date LIKE '%2019-%'
	GROUP BY Crime_Date
	ORDER BY Crime_Date
"""

# Print SQL statement
print(sql)

# Create dataframe
df = pd.read_sql(sql, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create SQL statement
sql = """
	SELECT COUNT(Crime_ID)
	FROM philly_crime_data
	WHERE Crime_Date LIKE '%2019-%'
	GROUP BY Crime_Date
	ORDER BY Crime_Date
"""

# Print SQL statement
print(sql)

# Create dataframe
df = pd.read_sql(sql, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create SQL statement
sql = """
	SELECT COUNT(Crime_ID)
	FROM philly_crime_data
	WHERE Crime_Date LIKE '%2019-%'
	GROUP BY Crime_Date
	ORDER BY Crime_Date
"""

# Print SQL statement
print(sql)

# Create dataframe
df = pd.read_sql(sql, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create SQL statement
sql = """
	SELECT COUNT(Crime_ID)
	FROM philly_crime_data
	WHERE Crime_Date LIKE '%2019-%'
	GROUP BY Crime_Date
	ORDER BY Crime_Date
"""

# Print SQL statement
print(sql)

# Create dataframe
df = pd.read_sql(sql, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create SQL statement
sql = """
	SELECT COUNT(Crime_ID)
	FROM philly_crime_data
	WHERE Crime_Date LIKE '%2019-%'
	GROUP BY Crime_Date
	ORDER BY Crime_Date
"""

# Print SQL statement
print(sql)

# Create dataframe
df = pd.read_sql(sql, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create SQL statement
sql = """
	SELECT COUNT(Crime_ID)
	FROM philly_crime_data
	WHERE Crime_Date LIKE '%2019-%'
	GROUP BY Crime_Date
	ORDER BY Crime_Date
"""

# Print SQL statement
print(sql)

# Create dataframe
df = pd.read_sql(sql, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create SQL statement
sql = """
	SELECT COUNT(Crime_ID)
	FROM philly_crime_data
	WHERE Crime_Date LIKE '%2019-%'
	GROUP BY Crime_Date
	ORDER BY Crime_Date
"""

# Print SQL statement
print(sql)

# Create dataframe
df = pd.read_sql(sql, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create SQL statement
sql = """
	SELECT COUNT(Crime_ID)
	FROM philly_crime_data
	WHERE Crime_Date LIKE '%2019-%'
	GROUP BY Crime_Date
	ORDER BY Crime_Date
"""

# Print SQL statement
print(sql)

# Create dataframe
df = pd.read_sql(sql, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create SQL statement
sql = """
	SELECT COUNT(Crime_ID)
	FROM philly_crime_data
	WHERE Crime_Date LIKE '%2019-%'
	GROUP BY Crime_Date
	ORDER BY Crime_Date
"""

# Print SQL statement
print(sql)

# Create dataframe
df = pd.read_sql(sql, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create SQL statement
sql = """
	SELECT COUNT(Crime_ID)
	FROM philly_crime_data
	WHERE Crime_Date LIKE '%2019-%'
	GROUP BY Crime_Date
	ORDER BY Crime_Date
"""

# Print SQL statement
print(sql)

# Create dataframe
df = pd.read_sql(sql, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create SQL statement
sql = """
	SELECT COUNT(Crime_ID)
	FROM philly_crime_data
	WHERE Crime_Date LIKE '%2019-%'
	GROUP BY Crime_Date
	ORDER BY Crime_Date
"""

# Print SQL statement
print(sql)

# Create dataframe
df = pd.read_sql(sql, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create SQL statement
sql = """
	SELECT COUNT(Crime_ID)
	FROM philly_crime_data
	WHERE Crime_Date LIKE '%

====================================================================================================

PROMPT 17:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of Atlanta

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 17:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of Atlanta

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd

# Create a dataframe from the csv file
df = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df2 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df3 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df4 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df5 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df6 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df7 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df8 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df9 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df10 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df11 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df12 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df13 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df14 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df15 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df16 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df17 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df18 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df19 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df20 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df21 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df22 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df23 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df24 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df25 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df26 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df27 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df28 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df29 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df30 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df31 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df32 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df33 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df34 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df35 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df36 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df37 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df38 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')

# Create a dataframe from the csv file
df39 = pd.read_csv('/Users/joshuacampden-santos/Desktop/Python/SQL/Crime_Data.csv')


====================================================================================================

PROMPT 18:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area of Atlanta give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 18:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area of Atlanta give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd
import numpy as np

# Create a dataframe from the csv file
df = pd.read_csv('/Users/josh/Desktop/Data_Science/Data_Science_Projects/Data_Science_Project_1/Data/atlanta_crime_data.csv')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df = df.groupby('Crime_Type').size().reset_index(name='counts')

# Create a dataframe of the most common crime types
crime_type_df =

====================================================================================================

PROMPT 19:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of LA

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 19:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of LA

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	How many crimes are there in each area of LA?
	
Sample Output:
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Area_Name = "West"
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Area_Name = "East"
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Area_Name = "South"
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Area_Name = "North"
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


====================================================================================================

PROMPT 20:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area of LA give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 20:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area of LA give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	la_crime_data
	

====================================================================================================

PROMPT 21:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of New York

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 21:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of New York

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd
import numpy as np

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the areas
nyc_areas = pd.read_csv("nyc_areas.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_

====================================================================================================

PROMPT 22:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area of New York give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 22:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area of New York give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd

# Create a function to generate the SQL statement
def generate_sql(schema, question):
	# Create a list of the columns in the schema
	columns = list(schema.columns)
	# Create a list of the columns in the question
	question_columns = list(question.columns)
	# Create a list of the columns in the question that are not in the schema
	question_columns_not_in_schema = [x for x in question_columns if x not in columns]
	# If there are columns in the question that are not in the schema, return the error message
	if question_columns_not_in_schema:
		return "INSUFFICENT"
	# If there are no columns in the question that are not in the schema, create a list of the columns in the schema that are not in the question
	else:
		schema_columns_not_in_question = [x for x in columns if x not in question_columns]
		# If there are columns in the schema that are not in the question, return the error message
		if schema_columns_not_in_question:
			return "INSUFFICENT"
		# If there are no columns in the schema that are not in the question, create a list of the columns in the question that are in the schema
		else:
			question_columns_in_schema = [x for x in question_columns if x in columns]
			# Create a list of the columns in the question that are in the schema
			# Create a list of the columns in the schema that are in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not in the question
			# Create a list of the columns in the schema that are in the question and are not

====================================================================================================

PROMPT 23:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of Philly

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 23:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of Philly

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd
import numpy as np

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = pd.read_csv('philly_crime_data.csv')

# Create a dataframe of the area data
philly_area_data = pd.read_csv('philly_area_data.csv')

# Create a dataframe of the crime data
philly_crime_data = p

====================================================================================================

PROMPT 24:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area of Philly give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 24:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area of Philly give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "philly_crime_data",
    user = "postgres",
    password = "postgres"
)

# Create a cursor
cur = conn.cursor()

# Create a function to get the most common crime type
def get_most_common_crime_type(df):
    # Create a new dataframe to store the most common crime type
    most_common_crime_type = pd.DataFrame(columns=['Crime_Type'])
    # Iterate through the dataframe
    for i in range(len(df)):
        # Get the crime type
        crime_type = df.iloc[i]['Crime_Type']
        # If the crime type is not in the new dataframe, add it
        if crime_type not in most_common_crime_type['Crime_Type'].values:
            most_common_crime_type = most_common_crime_type.append({'Crime_Type': crime_type}, ignore_index=True)
    # Return the most common crime type
    return most_common_crime_type

# Create a function to get the most common crime type
def get_most_common_crime_type(df):
    # Create a new dataframe to store the most common crime type
    most_common_crime_type = pd.DataFrame(columns=['Crime_Type'])
    # Iterate through the dataframe
    for i in range(len(df)):
        # Get the crime type
        crime_type = df.iloc[i]['Crime_Type']
        # If the crime type is not in the new dataframe, add it
        if crime_type not in most_common_crime_type['Crime_Type'].values:
            most_common_crime_type = most_common_crime_type.append({'Crime_Type': crime_type}, ignore_index=True)
    # Return the most common crime type
    return most_common_crime_type

# Create a function to get the most common crime type
def get_most_common_crime_type(df):
    # Create a new dataframe to store the most common crime type
    most_common_crime_type = pd.DataFrame(columns=['Crime_Type'])
    # Iterate through the dataframe
    for i in range(len(df)):
        # Get the crime type
        crime_type = df.iloc[i]['Crime_Type']
        # If the crime type is not in the new dataframe, add it
        if crime_type not in most_common_crime_type['Crime_Type'].values:
            most_common_crime_type = most_common_crime_type.append({'Crime_Type': crime_type}, ignore_index=True)
    # Return the most common crime type
    return most_common_crime_type

# Create a function to get the most common crime type
def get_most_common_crime_type(df):
    # Create a new dataframe to store the most common crime type
    most_common_crime_type = pd.DataFrame(columns=['Crime_Type'])
    # Iterate through the dataframe
    for i in range(len(df)):
        # Get the crime type
        crime_type = df.iloc[i]['Crime_Type']
        # If the crime type is not in the new dataframe, add it
        if crime_type not in most_common_crime_type['Crime_Type'].values:
            most_common_crime_type = most_common_crime_type.append({'Crime_Type': crime_type}, ignore_index=True)
    # Return the most common crime type
    return most_common_crime_type

# Create a function to get the most common crime type
def get_most_common_crime_type(df):
    # Create a new dataframe to store the most common crime type
    most_common_crime_type = pd.DataFrame(columns=['Crime_Type'])
    # Iterate through the dataframe
    for i in range(len(df)):
        # Get the crime type
        crime_type = df.iloc[i]['Crime_Type']
        # If the crime type is not in the new dataframe, add it
        if crime_type not in most_common_crime_type['Crime_Type'].values:
            most_common_crime_type = most_common_crime_type.append({'Crime_Type': crime_type}, ignore_index=True)
    # Return the most common crime type
    return most_common_crime_type

# Create a function to get the most common crime type
def get_most_common_crime_type(df):
    # Create a new dataframe to store the most common crime type
    most_common_crime_type = pd.DataFrame(columns=['Crime_Type'])
    # Iterate through the dataframe
    for i in range(len(df)):
        # Get the crime type
        crime_type = df.iloc[i]['Crime_Type']
        # If the crime type is not in the new dataframe, add it
        if crime_type not in most_common_crime_type['Crime_Type'].values:
            most_common_crime_type = most_common_crime_type.append({'Crime_Type': crime_type}, ignore_index=True)
    # Return the most common crime type
    return most_common_crime_type

# Create a function to get the most common crime type
def get_most_common_crime_type(df):
    # Create a new dataframe to store the most common crime type
    most_common_crime_type = pd.DataFrame(columns=['Crime_Type'])
    # Iterate through the dataframe
    for i in range(len(df)):
        # Get the crime type
        crime_type = df.iloc[i]['Crime_Type']
        # If the crime type is not in the new dataframe, add it
        if crime_type not in most_common_crime_type['Crime_Type'].values:
            most_common_crime_type = most_common_crime_type.append({'Crime_Type': crime_type}, ignore_index=True)
    # Return the most common crime type
    return most_common_crime_type

# Create a function to get the most common crime type
def get_most_common_crime_type(df):
    # Create a new dataframe to store the most common crime type
    most_common_crime_type = pd.DataFrame(columns=['Crime_Type'])
    # Iterate through the dataframe
    for i in range(len(df)):
        # Get the crime type
        crime_type = df.iloc[i]['Crime_Type']
        # If the crime type is not in the new dataframe, add it
        if crime_type not in most_common_crime_type['Crime_Type'].values:
            most_common_crime_type = most_common_crime_type.append({'Crime_Type': crime_type}, ignore_index=True)
    # Return the most common crime type
    return most_common_crime_type

# Create a function to get the most common crime type
def get_most_common_crime_type(df):
    # Create a new dataframe to store the most common crime type
    most_common_crime_type = pd.DataFrame(columns=['Crime_Type'])
    # Iterate through the dataframe
    for i in range(len(df)):
        # Get the crime type
        crime_type = df.iloc[i]['Crime_Type']
        # If the crime type is not in the new dataframe, add it
        if crime_type not in most_common_crime_type['Crime_Type'].values:
            most_common_crime_

====================================================================================================

PROMPT 25:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Atlanta spaced by 0.01 degrees, give the most common crime type and its count

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 25:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Atlanta spaced by 0.01 degrees, give the most common crime type and its count

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to database
conn = psycopg2.connect(
	host = "localhost",
	database = "postgres",
	user = "postgres",
	password = "postgres"
)

# create cursor
cur = conn.cursor()

# create query
query = """
	SELECT
		Crime_Type,
		COUNT(Crime_Type)
	FROM
		atlanta_crime_data
	WHERE
		Latitude > 0.0
		AND Latitude < 0.1
		AND Longitude > -0.1
		AND Longitude < -0.0
	GROUP BY
		Crime_Type
	ORDER BY
		COUNT(Crime_Type) DESC
	LIMIT 1;
"""

# execute query
cur.execute(query)

# fetch results
results = cur.fetchall()

# print results
print(results)

# close connection
conn.close()

====================================================================================================

PROMPT 26:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Atlanta spaced by 0.01 degrees, give the total crime count.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 26:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Atlanta spaced by 0.01 degrees, give the total crime count.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
	(1, 1, 1, 1, 1, 1, 1, 1, 1, 1

====================================================================================================

PROMPT 27:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of LA spaced by 0.01 degrees, give the total crime count.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 27:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of LA spaced by 0.01 degrees, give the total crime count.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	(1, 1, '2018-01-01', '2018-01-01', '00:00:00', 'Assault', 'Los Angeles', '25', 'M', 'Knife', '1234 Main St', '34.01', '-118.32')

Sample Output:
	SELECT COUNT(Crime_ID) FROM la_crime_data WHERE Latitude >= 34.01 AND Latitude <= 34.02 AND Longitude >= -118.32 AND Longitude <= -118.31;

"""

import psycopg2
import re

# Connect to the database
conn = psycopg2.connect(
    host="localhost",
    database="postgres",
    user="postgres",
    password="postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database to get the data
cur.execute("SELECT * FROM la_crime_data;")

# Get the data
data = cur.fetchall()

# Close the cursor
cur.close()

# Close the database connection
conn.close()

# Create a list to hold the data
crime_list = []

# Iterate through the data
for i in data:
    # Create a list to hold the data
    crime_list.append(i)

# Create a list to hold the data
crime_list_2 = []

# Iterate through the data
for i in crime_list:
    # Create a list to hold the data
    crime_list_2.append(i[-2])

# Create a list to hold the data
crime_list_3 = []

# Iterate through the data
for i in crime_list_2:
    # Create a list to hold the data
    crime_list_3.append(i)

# Create a list to hold the data
crime_list_4 = []

# Iterate through the data
for i in crime_list_3:
    # Create a list to hold the data
    crime_list_4.append(i)

# Create a list to hold the data
crime_list_5 = []

# Iterate through the data
for i in crime_list_4:
    # Create a list to hold the data
    crime_list_5.append(i)

# Create a list to hold the data
crime_list_6 = []

# Iterate through the data
for i in crime_list_5:
    # Create a list to hold the data
    crime_list_6.append(i)

# Create a list to hold the data
crime_list_7 = []

# Iterate through the data
for i in crime_list_6:
    # Create a list to hold the data
    crime_list_7.append(i)

# Create a list to hold the data
crime_list_8 = []

# Iterate through the data
for i in crime_list_7:
    # Create a list to hold the data
    crime_list_8.append(i)

# Create a list to hold the data
crime_list_9 = []

# Iterate through the data
for i in crime_list_8:
    # Create a list to hold the data
    crime_list_9.append(i)

# Create a list to hold the data
crime_list_10 = []

# Iterate through the data
for i in crime_list_9:
    # Create a list to hold the data
    crime_list_10.append(i)

# Create a list to hold the data
crime_list_11 = []

# Iterate through the data
for i in crime_list_10:
    # Create a list to hold the data
    crime_list_11.append(i)

# Create a list to hold the data
crime_list_12 = []

# Iterate through the data
for i in crime_list_11:
    # Create a list to hold the data
    crime_list_12.append(i)

# Create a list to hold the data
crime_list_13 = []

# Iterate through the data
for i in crime_list_12:
    # Create a list to hold the data
    crime_list_13.append(i)

# Create a list to hold the data
crime_list_14 = []

# Iterate through the data
for i in crime_list_13:
    # Create a list to hold the data
    crime_list_14.append(i)

# Create a list to hold the data
crime_list_15 = []

# Iterate through the data
for i in crime_list_14:
    # Create a list to hold the data
    crime_list_15.append(i)

# Create a list to hold the data
crime_list_16 = []

# Iterate through the data
for i in crime_list_15:
    # Create a list to hold the data
    crime_list_16.append(i)

# Create a list to hold the data
crime_list_17 = []

# Iterate through the data
for i in crime_list_16:
    # Create a list to hold the data
    crime_list_17.append(i)

# Create a list to hold the data
crime_list_18 = []

# Iterate through the data
for i in crime_list_17:
    # Create a list to hold the data
    crime_list_18.append(i)

# Create a list to hold the data
crime_list_19 = []

# Iterate through the data
for i in crime_list_18:
    # Create a list to hold the data
    crime_list_19.append(i)

# Create a list to hold the data
crime_list_20 = []

# Iterate through the data
for i in crime_list_19:
    # Create a list to hold the data
    crime_list_20.append(i)

# Create a list to hold the data
crime_list_21 = []

# Iterate through the data
for i in crime_list_20:
    # Create a list to hold the data
    crime_list_21.append(i)

# Create a list to hold the data
crime_list_22 = []

# Iterate through the data
for i in crime_list_21:
    # Create a list to hold the data
    crime_list_22.append(i)

# Create a list to hold the data
crime_list_23 = []

# Iterate through the data
for i in crime_list_22:
    # Create a list to hold the data
    crime_list_23.append(i)

# Create a list to hold the data
crime_list_24 = []

# Iterate through the data
for i in crime_list_23:
    # Create a list to hold the data
    crime_list_24.append(i)

# Create a list to hold the data
crime_list_25 = []

# Iterate through the data
for i in crime_list_24:
    # Create a list to hold the data
    crime_list_25.append(i)

# Create a list to hold the data
crime_list_26 = []

# Iterate through the data
for i in crime_list_25:
    # Create a list to hold the data
    crime_list_26.append(i)

# Create a list to hold the data
crime_list_27 = []

# Iterate through the data
for i in crime_list_26:
    # Create a list to hold the data
    crime_list_27.append(i)

# Create a list to hold the data
crime_list_28 = []

# Iterate through the data
for i in crime_list_27:
    # Create a list to hold the data
    crime_list_28.append(i)

# Create a list to hold the data
crime_list_29 = []

# Iterate through the

====================================================================================================

PROMPT 28:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of LA spaced by 0.01 degrees, give the most common crime type and its count

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 28:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of LA spaced by 0.01 degrees, give the most common crime type and its count

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "crime_data",
    user = "postgres",
    password = "postgres"
)

# Create a cursor
cur = conn.cursor()

# Create a query
query = """
SELECT
	Crime_Type,
	COUNT(Crime_Type)
FROM
	la_crime_data
GROUP BY
	Crime_Type
ORDER BY
	COUNT(Crime_Type) DESC
LIMIT 1;
"""

# Execute the query
cur.execute(query)

# Fetch the results
results = cur.fetchall()

# Print the results
print(results)

# Close the cursor
cur.close()

# Close the connection
conn.close()

====================================================================================================

PROMPT 29:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of New York spaced by 0.01 degrees, give the total crime count.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 29:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of New York spaced by 0.01 degrees, give the total crime count.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")

# Create a cursor
cur = conn.cursor()

# Query the database
cur.execute("SELECT * FROM nyc_crime_data")

# Fetch the data
data = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Create a dataframe
df = pd.DataFrame(data)

# Print the dataframe
print(df)

# Create a new dataframe
new_df = df[['Latitude', 'Longitude']]

# Print the new dataframe
print(new_df)

# Create a new dataframe
new_df2 = new_df.groupby(['Latitude', 'Longitude']).size().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df2)

# Create a new dataframe
new_df3 = new_df2.groupby(['Latitude', 'Longitude'])['Crime Count'].sum().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df3)

# Create a new dataframe
new_df4 = new_df3.groupby(['Latitude', 'Longitude'])['Crime Count'].max().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df4)

# Create a new dataframe
new_df5 = new_df4.groupby(['Latitude', 'Longitude'])['Crime Count'].min().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df5)

# Create a new dataframe
new_df6 = new_df5.groupby(['Latitude', 'Longitude'])['Crime Count'].mean().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df6)

# Create a new dataframe
new_df7 = new_df6.groupby(['Latitude', 'Longitude'])['Crime Count'].median().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df7)

# Create a new dataframe
new_df8 = new_df7.groupby(['Latitude', 'Longitude'])['Crime Count'].count().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df8)

# Create a new dataframe
new_df9 = new_df8.groupby(['Latitude', 'Longitude'])['Crime Count'].max().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df9)

# Create a new dataframe
new_df10 = new_df9.groupby(['Latitude', 'Longitude'])['Crime Count'].min().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df10)

# Create a new dataframe
new_df11 = new_df10.groupby(['Latitude', 'Longitude'])['Crime Count'].mean().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df11)

# Create a new dataframe
new_df12 = new_df11.groupby(['Latitude', 'Longitude'])['Crime Count'].median().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df12)

# Create a new dataframe
new_df13 = new_df12.groupby(['Latitude', 'Longitude'])['Crime Count'].count().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df13)

# Create a new dataframe
new_df14 = new_df13.groupby(['Latitude', 'Longitude'])['Crime Count'].max().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df14)

# Create a new dataframe
new_df15 = new_df14.groupby(['Latitude', 'Longitude'])['Crime Count'].min().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df15)

# Create a new dataframe
new_df16 = new_df15.groupby(['Latitude', 'Longitude'])['Crime Count'].mean().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df16)

# Create a new dataframe
new_df17 = new_df16.groupby(['Latitude', 'Longitude'])['Crime Count'].median().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df17)

# Create a new dataframe
new_df18 = new_df17.groupby(['Latitude', 'Longitude'])['Crime Count'].count().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df18)

# Create a new dataframe
new_df19 = new_df18.groupby(['Latitude', 'Longitude'])['Crime Count'].max().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df19)

# Create a new dataframe
new_df20 = new_df19.groupby(['Latitude', 'Longitude'])['Crime Count'].min().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df20)

# Create a new dataframe
new_df21 = new_df20.groupby(['Latitude', 'Longitude'])['Crime Count'].mean().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df21)

# Create a new dataframe
new_df22 = new_df21.groupby(['Latitude', 'Longitude'])['Crime Count'].median().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df22)

# Create a new dataframe
new_df23 = new_df22.groupby(['Latitude', 'Longitude'])['Crime Count'].count().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df23)

# Create a new dataframe
new_df24 = new_df23.groupby(['Latitude', 'Longitude'])['Crime Count'].max().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df24)

# Create a new dataframe
new_df25 = new_df24.groupby(['Latitude', 'Longitude'])['Crime Count'].min().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df25)

# Create a new dataframe
new_df26 = new_df25.groupby(['Latitude', 'Longitude'])['Crime Count'].mean().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df26)

# Create a new dataframe
new_df27 = new_df26.groupby(['Latitude', 'Longitude'])['Crime Count'].median().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df27)

# Create a new dataframe
new_df28 = new_df27.groupby(['Latitude', 'Longitude'])['Crime Count'].count().reset_index(name='Crime Count')

# Print the new dataframe
print(new_df28)

# Create a new dataframe
new_df29 = new

====================================================================================================

PROMPT 30:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of New York spaced by 0.01 degrees, give the most common crime type and its count

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 30:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of New York spaced by 0.01 degrees, give the most common crime type and its count

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "nyc_crime_data",
    user = "postgres",
    password = "postgres"
)

# Create a cursor
cur = conn.cursor()

# Create a function to get the most common crime type and its count
def get_most_common_crime(lat, lon):
    # Create a query to get the most common crime type and its count
    query = "SELECT crime_type, COUNT(crime_type) FROM nyc_crime_data WHERE latitude = " + str(lat) + " AND longitude = " + str(lon) + " GROUP BY crime_type ORDER BY COUNT(crime_type) DESC LIMIT 1"
    # Execute the query
    cur.execute(query)
    # Fetch the result
    result = cur.fetchall()
    # Return the most common crime type and its count
    return result[0][0]

# Create a function to get the most common crime type and its count
def get_most_common_crime_count(lat, lon):
    # Create a query to get the most common crime type and its count
    query = "SELECT COUNT(crime_type) FROM nyc_crime_data WHERE latitude = " + str(lat) + " AND longitude = " + str(lon)
    # Execute the query
    cur.execute(query)
    # Fetch the result
    result = cur.fetchall()
    # Return the most common crime type and its count
    return result[0][0]

# Create a function to get the most common crime type and its count
def get_most_common_crime_count_by_area(lat, lon):
    # Create a query to get the most common crime type and its count
    query = "SELECT COUNT(crime_type) FROM nyc_crime_data WHERE latitude = " + str(lat) + " AND longitude = " + str(lon) + " GROUP BY area_name"
    # Execute the query
    cur.execute(query)
    # Fetch the result
    result = cur.fetchall()
    # Return the most common crime type and its count
    return result

# Create a function to get the most common crime type and its count
def get_most_common_crime_count_by_area_and_time(lat, lon):
    # Create a query to get the most common crime type and its count
    query = "SELECT COUNT(crime_type) FROM nyc_crime_data WHERE latitude = " + str(lat) + " AND longitude = " + str(lon) + " GROUP BY area_name, crime_date, crime_time"
    # Execute the query
    cur.execute(query)
    # Fetch the result
    result = cur.fetchall()
    # Return the most common crime type and its count
    return result

# Create a function to get the most common crime type and its count
def get_most_common_crime_count_by_area_and_time_and_type(lat, lon):
    # Create a query to get the most common crime type and its count
    query = "SELECT COUNT(crime_type) FROM nyc_crime_data WHERE latitude = " + str(lat) + " AND longitude = " + str(lon) + " GROUP BY area_name, crime_date, crime_time, crime_type"
    # Execute the query
    cur.execute(query)
    # Fetch the result
    result = cur.fetchall()
    # Return the most common crime type and its count
    return result

# Create a function to get the most common crime type and its count
def get_most_common_crime_count_by_area_and_time_and_type_and_time(lat, lon):
    # Create a query to get the most common crime type and its count
    query = "SELECT COUNT(crime_type) FROM nyc_crime_data WHERE latitude = " + str(lat) + " AND longitude = " + str(lon) + " GROUP BY area_name, crime_date, crime_time, crime_type, crime_time"
    # Execute the query
    cur.execute(query)
    # Fetch the result
    result = cur.fetchall()
    # Return the most common crime type and its count
    return result

# Create a function to get the most common crime type and its count
def get_most_common_crime_count_by_area_and_time_and_type_and_time_and_date(lat, lon):
    # Create a query to get the most common crime type and its count
    query = "SELECT COUNT(crime_type) FROM nyc_crime_data WHERE latitude = " + str(lat) + " AND longitude = " + str(lon) + " GROUP BY area_name, crime_date, crime_time, crime_type, crime_time, crime_date"
    # Execute the query
    cur.execute(query)
    # Fetch the result
    result = cur.fetchall()
    # Return the most common crime type and its count
    return result

# Create a function to get the most common crime type and its count
def get_most_common_crime_count_by_area_and_time_and_type_and_time_and_date_and_time(lat, lon):
    # Create a query to get the most common crime type and its count
    query = "SELECT COUNT(crime_type) FROM nyc_crime_data WHERE latitude = " + str(lat) + " AND longitude = " + str(lon) + " GROUP BY area_name, crime_date, crime_time, crime_type, crime_time, crime_date, crime_time"
    # Execute the query
    cur.execute(query)
    # Fetch the result
    result = cur.fetchall()
    # Return the most common crime type and its count
    return result

# Create a function to get the most common crime type and its count
def get_most_common_crime_count_by_area_and_time_and_type_and_time_and_date_and_time_and_time(lat, lon):
    # Create a query to get the most common crime type and its count
    query = "SELECT COUNT(crime_type) FROM nyc_crime_data WHERE latitude = " + str(lat) + " AND longitude = " + str(lon) + " GROUP BY area_name, crime_date, crime_time, crime_type, crime_time, crime_date, crime_time, crime_time"
    # Execute the query
    cur.execute(query)
    # Fetch the result
    result = cur.fetchall()
    # Return the most common crime type and its count
    return result

# Create a function to get the most common crime type and its count
def get_most_common_crime_count_by_area_and_time_and_type_and_time_and_date_and_time_and_time_and_time(lat, lon):
    # Create a query to get the most common crime type and its count
    query = "SELECT COUNT(crime_type) FROM nyc_crime_data WHERE latitude = " + str(lat) + " AND longitude = " + str(lon) + " GROUP BY area_name, crime_date, crime_time, crime_type, crime_time, crime_date, crime_time, crime_time, crime_time"
    # Execute the query
    cur.execute(query)
    # Fetch the result
    result = cur.fetchall()
    # Return the most common crime type and its count
    return result

# Create a function to get the most common crime type and its count
def get_most_common_crime_count_by_area_and_time_and_type_and_time_and_date_and_time

====================================================================================================

PROMPT 31:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the total crime count.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 31:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the total crime count.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2

# Connect to the database
conn = psycopg2.connect(
	host = "localhost",
	database = "philly_crime_data",
	user = "postgres",
	password = "postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT COUNT(Crime_ID)
	FROM philly_crime_data
	WHERE (Latitude > -75.0 AND Latitude < -74.0) AND (Longitude > -75.0 AND Longitude < -74.0)
""")

# Fetch the results
rows = cur.fetchall()

# Close the cursor and the connection
cur.close()
conn.close()

# Print the results
print(rows)

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

# Print the total number of crimes
print(rows[0][0])

#

====================================================================================================

PROMPT 32:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the most common crime type and its count

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 32:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the most common crime type and its count

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd
import numpy as np
import re

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "philly_crime_data",
    user = "postgres",
    password = "postgres"
)

# Create a cursor to perform database operations
cur = conn.cursor()

# Create a dataframe to store the results
df = pd.DataFrame(columns=['Crime_Type', 'Count'])

# Create a function to get the most common crime type and its count
def get_most_common_crime_type(lat, lon):
    # Create a query to get the most common crime type and its count
    query = """
        SELECT crime_type, COUNT(crime_type)
        FROM philly_crime_data
        WHERE longitude = %s AND latitude = %s
        GROUP BY crime_type
        ORDER BY COUNT(crime_type) DESC
        LIMIT 1;
    """
    # Execute the query
    cur.execute(query, (lon, lat))
    # Fetch the results
    results = cur.fetchall()
    # Return the most common crime type and its count
    return results[0]

# Create a function to get the most common crime type and its count
def get_most_common_crime_type_and_count(lat, lon):
    # Create a query to get the most common crime type and its count
    query = """
        SELECT crime_type, COUNT(crime_type)
        FROM philly_crime_data
        WHERE longitude = %s AND latitude = %s
        GROUP BY crime_type
        ORDER BY COUNT(crime_type) DESC
        LIMIT 1;
    """
    # Execute the query
    cur.execute(query, (lon, lat))
    # Fetch the results
    results = cur.fetchall()
    # Return the most common crime type and its count
    return results[0]

# Create a function to get the most common crime type and its count
def get_most_common_crime_type_and_count_with_radius(lat, lon, radius):
    # Create a query to get the most common crime type and its count
    query = """
        SELECT crime_type, COUNT(crime_type)
        FROM philly_crime_data
        WHERE longitude = %s AND latitude = %s
        AND (
            (
                (
                    (
                        (
                            (
                                (
                                    (
                                        (
                                            (
                                                (
                                                    (
                                                        (
                                                            (
                                                                (
                                                                    (
                                                                        (
                                                                            (
                                                                                (
                                                                                    (
                                                                                        (
                                                                                            (
                                                                                                (
                                                                                                    (
                                                                                                        (
                                                                                                            (
                                                                                                                (
                                                                                                                  (
                                                                                                                      (
                                                                                                                        (
                                                                                                                            (
                                                                                                                                (
                                                                                                                                    (
                                                                                                                                       (
                                                                                                                                            (
                                                                                                                                                (
                                                                                                                                                   (
                                                                                                                                                      (
                                                                                                                                                          (
                                                                                                                                                                  (
                                                                                                                                                                        (
                                                                                                                                                                            (
                                                                                                                                                                                 (
                                                                                                                                                                                    (
                                                                                                                                                                                       (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                           (
                                                                                                                                                                                          

====================================================================================================

PROMPT 33:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in Atlanta

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 33:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in Atlanta

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT COUNT(Crime_ID)
	FROM atlanta_crime_data
	WHERE Crime_Type = 'THEFT'
	""")

# Fetch the results
results = cur.fetchall()

# Close the cursor and the connection
cur.close()
conn.close()

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the

====================================================================================================

PROMPT 34:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each crime type in Atlanta, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 34:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each crime type in Atlanta, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	How many crimes of type 'THEFT' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred in the last year?
	How many crimes of type 'ROBBERY' occurred

====================================================================================================

PROMPT 35:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in LA

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 35:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in LA

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "la_crime_data",
    user = "postgres",
    password = "postgres"
)

# Create a cursor
cur = conn.cursor()

# Create a query
query = """
SELECT
	COUNT(Crime_ID)
FROM
	la_crime_data
WHERE
	Crime_Type = 'LARCENY/THEFT'
"""

# Execute the query
cur.execute(query)

# Fetch the results
results = cur.fetchall()

# Print the results
print(results)

# Close the cursor
cur.close()

# Close the connection
conn.close()

====================================================================================================

PROMPT 36:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each crime type in LA, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 36:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each crime type in LA, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd
import numpy as np

# Connect to database
conn = psycopg2.connect(
    host = "localhost",
    database = "crime_data",
    user = "postgres",
    password = "postgres"
)

# Create cursor
cur = conn.cursor()

# Create query
cur.execute("""
	SELECT 
		COUNT(*) AS "Crime_Count",
		MAX(Date_Reported) AS "Last_Reported_Date",
		MAX(Crime_Date) AS "Last_Reported_Date_Crime",
		MAX(Crime_Time) AS "Last_Reported_Time_Crime",
		MAX(Area_Name) AS "Most_Common_Area",
		(MAX(Crime_Date) - MIN(Crime_Date)) / 7 AS "Week_Increase"
	FROM
		la_crime_data
	GROUP BY
		Crime_Type
	ORDER BY
		Crime_Count DESC;
""")

# Fetch data
data = cur.fetchall()

# Close cursor
cur.close()

# Create dataframe
df = pd.DataFrame(data)

# Rename columns
df.columns = ["Crime_Count", "Last_Reported_Date", "Last_Reported_Date_Crime", "Last_Reported_Time_Crime", "Most_Common_Area", "Week_Increase"]

# Print dataframe
print(df)

# Close connection
conn.close()

# Create query
cur.execute("""
	SELECT 
		COUNT(*) AS "Crime_Count",
		MAX(Date_Reported) AS "Last_Reported_Date",
		MAX(Crime_Date) AS "Last_Reported_Date_Crime",
		MAX(Crime_Time) AS "Last_Reported_Time_Crime",
		MAX(Area_Name) AS "Most_Common_Area",
		(MAX(Crime_Date) - MIN(Crime_Date)) / 7 AS "Week_Increase"
	FROM
		la_crime_data
	GROUP BY
		Crime_Type
	ORDER BY
		Crime_Count DESC;
""")

# Fetch data
data = cur.fetchall()

# Close cursor
cur.close()

# Create dataframe
df = pd.DataFrame(data)

# Rename columns
df.columns = ["Crime_Count", "Last_Reported_Date", "Last_Reported_Date_Crime", "Last_Reported_Time_Crime", "Most_Common_Area", "Week_Increase"]

# Print dataframe
print(df)

# Close connection
conn.close()

# Create query
cur.execute("""
	SELECT 
		COUNT(*) AS "Crime_Count",
		MAX(Date_Reported) AS "Last_Reported_Date",
		MAX(Crime_Date) AS "Last_Reported_Date_Crime",
		MAX(Crime_Time) AS "Last_Reported_Time_Crime",
		MAX(Area_Name) AS "Most_Common_Area",
		(MAX(Crime_Date) - MIN(Crime_Date)) / 7 AS "Week_Increase"
	FROM
		la_crime_data
	GROUP BY
		Crime_Type
	ORDER BY
		Crime_Count DESC;
""")

# Fetch data
data = cur.fetchall()

# Close cursor
cur.close()

# Create dataframe
df = pd.DataFrame(data)

# Rename columns
df.columns = ["Crime_Count", "Last_Reported_Date", "Last_Reported_Date_Crime", "Last_Reported_Time_Crime", "Most_Common_Area", "Week_Increase"]

# Print dataframe
print(df)

# Close connection
conn.close()

# Create query
cur.execute("""
	SELECT 
		COUNT(*) AS "Crime_Count",
		MAX(Date_Reported) AS "Last_Reported_Date",
		MAX(Crime_Date) AS "Last_Reported_Date_Crime",
		MAX(Crime_Time) AS "Last_Reported_Time_Crime",
		MAX(Area_Name) AS "Most_Common_Area",
		(MAX(Crime_Date) - MIN(Crime_Date)) / 7 AS "Week_Increase"
	FROM
		la_crime_data
	GROUP BY
		Crime_Type
	ORDER BY
		Crime_Count DESC;
""")

# Fetch data
data = cur.fetchall()

# Close cursor
cur.close()

# Create dataframe
df = pd.DataFrame(data)

# Rename columns
df.columns = ["Crime_Count", "Last_Reported_Date", "Last_Reported_Date_Crime", "Last_Reported_Time_Crime", "Most_Common_Area", "Week_Increase"]

# Print dataframe
print(df)

# Close connection
conn.close()

# Create query
cur.execute("""
	SELECT 
		COUNT(*) AS "Crime_Count",
		MAX(Date_Reported) AS "Last_Reported_Date",
		MAX(Crime_Date) AS "Last_Reported_Date_Crime",
		MAX(Crime_Time) AS "Last_Reported_Time_Crime",
		MAX(Area_Name) AS "Most_Common_Area",
		(MAX(Crime_Date) - MIN(Crime_Date)) / 7 AS "Week_Increase"
	FROM
		la_crime_data
	GROUP BY
		Crime_Type
	ORDER BY
		Crime_Count DESC;
""")

# Fetch data
data = cur.fetchall()

# Close cursor
cur.close()

# Create dataframe
df = pd.DataFrame(data)

# Rename columns
df.columns = ["Crime_Count", "Last_Reported_Date", "Last_Reported_Date_Crime", "Last_Reported_Time_Crime", "Most_Common_Area", "Week_Increase"]

# Print dataframe
print(df)

# Close connection
conn.close()

# Create query
cur.execute("""
	SELECT 
		COUNT(*) AS "Crime_Count",
		MAX(Date_Reported) AS "Last_Reported_Date",
		MAX(Crime_Date) AS "Last_Reported_Date_Crime",
		MAX(Crime_Time) AS "Last_Reported_Time_Crime",
		MAX(Area_Name) AS "Most_Common_Area",
		(MAX(Crime_Date) - MIN(Crime_Date)) / 7 AS "Week_Increase"
	FROM
		la_crime_data
	GROUP BY
		Crime_Type
	ORDER BY
		Crime_Count DESC;
""")

# Fetch data
data = cur.fetchall()

# Close cursor
cur.close()

# Create dataframe
df = pd.DataFrame(data)

# Rename columns
df.columns = ["Crime_Count", "Last_Reported_Date", "Last_Reported_Date_Crime", "Last_Reported_Time_Crime", "Most_Common_Area", "Week_Increase"]

# Print dataframe
print(df)

# Close connection
conn.close()

# Create query
cur.execute("""
	SELECT 
		COUNT(*) AS "Crime_Count",
		MAX(Date_Reported) AS "Last_Reported_Date",
		MAX(Crime_Date) AS "Last_Reported_Date_Crime",
		MAX(Crime_Time) AS "Last_Reported_Time_Crime",
		MAX(Area_Name) AS "Most_Common_Area",
		(MAX(Crime_Date) - MIN(Crime_Date)) / 7 AS "Week_Increase"

====================================================================================================

PROMPT 37:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in New York

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 37:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in New York

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv("nyc_crime_data.csv")

# Create a dataframe of the crime data
nyc_crime_data = pd.read

====================================================================================================

PROMPT 38:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each crime type in New York, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 38:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each crime type in New York, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01', '00:00:00', 'Homicide', 'Homicide', 'Manhattan', 40.7128, -73.9249
	1, 1, '2020-01-01

====================================================================================================

PROMPT 39:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in Philly

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 39:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in Philly

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd

# Create a dataframe from the csv file
df = pd.read_csv('philly_crime_data.csv')

# Create a list of the unique crime types
crime_types = df['Crime_Type'].unique()

# Create a list of the unique areas
areas = df['Area_#'].unique()

# Create a list of the unique addresses
addresses = df['Address'].unique()

# Create a list of the unique longitudes
longitudes = df['Longitude'].unique()

# Create a list of the unique latitudes
latitudes = df['Latitude'].unique()

# Create a list of the unique dates
dates = df['Crime_Date'].unique()

# Create a list of the unique times
times = df['Crime_Time'].unique()

# Create a list of the unique report numbers
report_numbers = df['Report_#'].unique()

# Create a list of the unique crime IDs
crime_ids = df['Crime_ID'].unique()

# Create a list of the unique addresses
addresses = df['Address'].unique()

# Create a list of the unique longitudes
longitudes = df['Longitude'].unique()

# Create a list of the unique latitudes
latitudes = df['Latitude'].unique()

# Create a list of the unique dates
dates = df['Crime_Date'].unique()

# Create a list of the unique times
times = df['Crime_Time'].unique()

# Create a list of the unique report numbers
report_numbers = df['Report_#'].unique()

# Create a list of the unique crime IDs
crime_ids = df['Crime_ID'].unique()

# Create a list of the unique addresses
addresses = df['Address'].unique()

# Create a list of the unique longitudes
longitudes = df['Longitude'].unique()

# Create a list of the unique latitudes
latitudes = df['Latitude'].unique()

# Create a list of the unique dates
dates = df['Crime_Date'].unique()

# Create a list of the unique times
times = df['Crime_Time'].unique()

# Create a list of the unique report numbers
report_numbers = df['Report_#'].unique()

# Create a list of the unique crime IDs
crime_ids = df['Crime_ID'].unique()

# Create a list of the unique addresses
addresses = df['Address'].unique()

# Create a list of the unique longitudes
longitudes = df['Longitude'].unique()

# Create a list of the unique latitudes
latitudes = df['Latitude'].unique()

# Create a list of the unique dates
dates = df['Crime_Date'].unique()

# Create a list of the unique times
times = df['Crime_Time'].unique()

# Create a list of the unique report numbers
report_numbers = df['Report_#'].unique()

# Create a list of the unique crime IDs
crime_ids = df['Crime_ID'].unique()

# Create a list of the unique addresses
addresses = df['Address'].unique()

# Create a list of the unique longitudes
longitudes = df['Longitude'].unique()

# Create a list of the unique latitudes
latitudes = df['Latitude'].unique()

# Create a list of the unique dates
dates = df['Crime_Date'].unique()

# Create a list of the unique times
times = df['Crime_Time'].unique()

# Create a list of the unique report numbers
report_numbers = df['Report_#'].unique()

# Create a list of the unique crime IDs
crime_ids = df['Crime_ID'].unique()

# Create a list of the unique addresses
addresses = df['Address'].unique()

# Create a list of the unique longitudes
longitudes = df['Longitude'].unique()

# Create a list of the unique latitudes
latitudes = df['Latitude'].unique()

# Create a list of the unique dates
dates = df['Crime_Date'].unique()

# Create a list of the unique times
times = df['Crime_Time'].unique()

# Create a list of the unique report numbers
report_numbers = df['Report_#'].unique()

# Create a list of the unique crime IDs
crime_ids = df['Crime_ID'].unique()

# Create a list of the unique addresses
addresses = df['Address'].unique()

# Create a list of the unique longitudes
longitudes = df['Longitude'].unique()

# Create a list of the unique latitudes
latitudes = df['Latitude'].unique()

# Create a list of the unique dates
dates = df['Crime_Date'].unique()

# Create a list of the unique times
times = df['Crime_Time'].unique()

# Create a list of the unique report numbers
report_numbers = df['Report_#'].unique()

# Create a list of the unique crime IDs
crime_ids = df['Crime_ID'].unique()

# Create a list of the unique addresses
addresses = df['Address'].unique()

# Create a list of the unique longitudes
longitudes = df['Longitude'].unique()

# Create a list of the unique latitudes
latitudes = df['Latitude'].unique()

# Create a list of the unique dates
dates = df['Crime_Date'].unique()

# Create a list of the unique times
times = df['Crime_Time'].unique()

# Create a list of the unique report numbers
report_numbers = df['Report_#'].unique()

# Create a list of the unique crime IDs
crime_ids = df['Crime_ID'].unique()

# Create a list of the unique addresses
addresses = df['Address'].unique()

# Create a list of the unique longitudes
longitudes = df['Longitude'].unique()

# Create a list of the unique latitudes
latitudes = df['Latitude'].unique()

# Create a list of the unique dates
dates = df['Crime_Date'].unique()

# Create a list of the unique times
times = df['Crime_Time'].unique()

# Create a list of the unique report numbers
report_numbers = df['Report_#'].unique()

# Create a list of the unique crime IDs
crime_ids = df['Crime_ID'].unique()

# Create a list of the unique addresses
addresses = df['Address'].unique()

# Create a list of the unique longitudes
longitudes = df['Longitude'].unique()

# Create a list of the unique latitudes
latitudes = df['Latitude'].unique()

# Create a list of the unique dates
dates = df['Crime_Date'].unique()

# Create a list of the unique times
times = df['Crime_Time'].unique()

# Create a list of the unique report numbers
report_numbers = df['Report_#'].unique()

# Create a list of the unique crime IDs
crime_ids = df['Crime_ID'].unique()

# Create a list of the unique addresses
addresses = df['Address'].unique()

# Create a list of the unique longitudes
longitudes = df['Longitude'].unique()

# Create a list of the unique latitudes
latitudes = df['Latitude'].unique()

# Create a list of the unique dates
dates = df['Crime_Date'].unique()

# Create a list of the unique times
times = df['Crime_Time'].unique()

# Create a list of the unique report numbers
report_numbers = df['Report_#'].unique()

# Create a list of the unique crime IDs
crime_ids = df['Crime_ID'].unique()

# Create a list of the unique addresses
addresses = df['Address'].unique()

# Create a list of the unique longitudes
longitudes = df['Longitude'].unique()

# Create a list of the unique latitudes

====================================================================================================

PROMPT 40:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each crime type in Philly, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 40:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each crime type in Philly, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "philly_crime_data",
    user = "postgres",
    password = "postgres"
)

# Create a cursor
cur = conn.cursor()

# Create a query
query = """
SELECT
	Crime_Type,
	COUNT(Crime_Type),
	MAX(Crime_Date),
	MAX(Crime_Time),
	MAX(Area_#),
	MAX(Address),
	MAX(Longitude),
	MAX(Latitude)
FROM
	philly_crime_data
GROUP BY
	Crime_Type
ORDER BY
	COUNT(Crime_Type) DESC;
"""

# Execute the query
cur.execute(query)

# Fetch the results
results = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Create a dataframe
df = pd.DataFrame(results)

# Rename the columns
df.columns = ["Crime_Type", "Count", "Last_Reported_Date", "Last_Reported_Time", "Most_Common_Area", "Most_Common_Address", "Most_Common_Longitude", "Most_Common_Latitude"]

# Print the dataframe
print(df)

# Create a query
query = """
SELECT
	Crime_Type,
	COUNT(Crime_Type),
	MAX(Crime_Date),
	MAX(Crime_Time),
	MAX(Area_#),
	MAX(Address),
	MAX(Longitude),
	MAX(Latitude)
FROM
	philly_crime_data
GROUP BY
	Crime_Type
HAVING
	COUNT(Crime_Type) > 1
ORDER BY
	COUNT(Crime_Type) DESC;
"""

# Execute the query
cur.execute(query)

# Fetch the results
results = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Create a dataframe
df = pd.DataFrame(results)

# Rename the columns
df.columns = ["Crime_Type", "Count", "Last_Reported_Date", "Last_Reported_Time", "Most_Common_Area", "Most_Common_Address", "Most_Common_Longitude", "Most_Common_Latitude"]

# Print the dataframe
print(df)

# Create a query
query = """
SELECT
	Crime_Type,
	COUNT(Crime_Type),
	MAX(Crime_Date),
	MAX(Crime_Time),
	MAX(Area_#),
	MAX(Address),
	MAX(Longitude),
	MAX(Latitude)
FROM
	philly_crime_data
GROUP BY
	Crime_Type
HAVING
	COUNT(Crime_Type) > 1
ORDER BY
	COUNT(Crime_Type) DESC;
"""

# Execute the query
cur.execute(query)

# Fetch the results
results = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Create a dataframe
df = pd.DataFrame(results)

# Rename the columns
df.columns = ["Crime_Type", "Count", "Last_Reported_Date", "Last_Reported_Time", "Most_Common_Area", "Most_Common_Address", "Most_Common_Longitude", "Most_Common_Latitude"]

# Print the dataframe
print(df)

# Create a query
query = """
SELECT
	Crime_Type,
	COUNT(Crime_Type),
	MAX(Crime_Date),
	MAX(Crime_Time),
	MAX(Area_#),
	MAX(Address),
	MAX(Longitude),
	MAX(Latitude)
FROM
	philly_crime_data
GROUP BY
	Crime_Type
HAVING
	COUNT(Crime_Type) > 1
ORDER BY
	COUNT(Crime_Type) DESC;
"""

# Execute the query
cur.execute(query)

# Fetch the results
results = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Create a dataframe
df = pd.DataFrame(results)

# Rename the columns
df.columns = ["Crime_Type", "Count", "Last_Reported_Date", "Last_Reported_Time", "Most_Common_Area", "Most_Common_Address", "Most_Common_Longitude", "Most_Common_Latitude"]

# Print the dataframe
print(df)

# Create a query
query = """
SELECT
	Crime_Type,
	COUNT(Crime_Type),
	MAX(Crime_Date),
	MAX(Crime_Time),
	MAX(Area_#),
	MAX(Address),
	MAX(Longitude),
	MAX(Latitude)
FROM
	philly_crime_data
GROUP BY
	Crime_Type
HAVING
	COUNT(Crime_Type) > 1
ORDER BY
	COUNT(Crime_Type) DESC;
"""

# Execute the query
cur.execute(query)

# Fetch the results
results = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Create a dataframe
df = pd.DataFrame(results)

# Rename the columns
df.columns = ["Crime_Type", "Count", "Last_Reported_Date", "Last_Reported_Time", "Most_Common_Area", "Most_Common_Address", "Most_Common_Longitude", "Most_Common_Latitude"]

# Print the dataframe
print(df)

# Create a query
query = """
SELECT
	Crime_Type,
	COUNT(Crime_Type),
	MAX(Crime_Date),
	MAX(Crime_Time),
	MAX(Area_#),
	MAX(Address),
	MAX(Longitude),
	MAX(Latitude)
FROM
	philly_crime_data
GROUP BY
	Crime_Type
HAVING
	COUNT(Crime_Type) > 1
ORDER BY
	COUNT(Crime_Type) DESC;
"""

# Execute the query
cur.execute(query)

# Fetch the results
results = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Create a dataframe
df = pd.DataFrame(results)

# Rename the columns
df.columns = ["Crime_Type", "Count", "Last_Reported_Date", "Last_Reported_Time", "Most_Common_Area", "Most_Common_Address", "Most_Common_Longitude", "Most_Common_Latitude"]

# Print the dataframe
print(df)

# Create a query
query = """
SELECT
	Crime_Type,
	COUNT(Crime_Type),
	MAX(Crime_Date),
	MAX(Crime_Time),
	MAX(Area_#),
	MAX(Address),
	MAX(Longitude),
	MAX(Latitude)
FROM
	philly_crime_data
GROUP BY
	Crime_Type
HAVING
	COUNT(Crime_Type) > 1
ORDER BY
	COUNT(Crime_Type) DESC;
"""

# Execute the query
cur.execute(query)

# Fetch the results
results = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Create a dataframe
df = pd.DataFrame(results)

# Ren

====================================================================================================

PROMPT 41:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area in Atlanta, give count of each crime type.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 41:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area in Atlanta, give count of each crime type.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the areas in the database
# Create a list of all the crime types
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area
# Create a list of all the crimes in each area


====================================================================================================

PROMPT 42:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area in LA, give count of each crime type.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 42:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area in LA, give count of each crime type.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the areas in LA

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a list of all the crime types

# Create a

====================================================================================================

PROMPT 43:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area in New York, give count of each crime type.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 43:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area in New York, give count of each crime type.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the areas in New York

# Create a list of all the crime types

# Create a list of all the crime types and their counts

# Create a list of all the areas and their counts

# Create a list of all the crime types and their counts in each area

# Create a list of all the areas and their counts of each crime type

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type in each area

# Create a list of all the areas and their counts of each crime type

====================================================================================================

PROMPT 44:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area in Philly, give count of each crime type.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 44:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area in Philly, give count of each crime type.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the areas in philly
areas = ['Allegheny', 'Armstrong', 'Beaver', 'Bedford', 'Berks', 'Blair', 'Bucks', 'Butler', 'Cambria', 'Centre', 'Chester', 'Clarion', 'Clearfield', 'Clinton', 'Columbia', 'Crawford', 'Cumberland', 'Dauphin', 'Delaware', 'Elk', 'Erie', 'Fayette', 'Forest', 'Franklin', 'Fulton', 'Greene', 'Huntingdon', 'Indiana', 'Jefferson', 'Juniata', 'Lackawanna', 'Lancaster', 'Lawrence', 'Lebanon', 'Lehigh', 'Luzerne', 'Lycoming', 'McKean', 'Mercer', 'Mifflin', 'Monroe', 'Montgomery', 'Montour', 'Northumberland', 'Perry', 'Philadelphia', 'Pike', 'Potter', 'Schuylkill', 'Snyder', 'Somerset', 'Sullivan', 'Susquehanna', 'Tioga', 'Union', 'Venango', 'Warren', 'Washington', 'Wayne', 'Westmoreland', 'Wyoming', 'York']

# Create a list of all the crimes
crimes = ['Assault', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Robbery', 'Shooting', 'Vandalism', 'Arson', 'Burglary', 'Larceny',

====================================================================================================

PROMPT 45:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in Atlanta.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 45:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in Atlanta.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd
import numpy as np
import re

# connect to database
conn = psycopg2.connect(
	host = "localhost",
	database = "crime_data",
	user = "postgres",
	password = "postgres"
)

# create a cursor
cur = conn.cursor()

# create a query
query = """
	SELECT
		COUNT(DISTINCT(Crime_ID)) AS 'Crime_Count',
		COUNT(DISTINCT(Report_#)) AS 'Report_Count',
		COUNT(DISTINCT(Day_Occurred)) AS 'Day_Count',
		COUNT(DISTINCT(Crime_Date)) AS 'Crime_Date_Count',
		COUNT(DISTINCT(Crime_Time)) AS 'Crime_Time_Count',
		COUNT(DISTINCT(Crime_Type)) AS 'Crime_Type_Count',
		COUNT(DISTINCT(Area_Name)) AS 'Area_Name_Count',
		COUNT(DISTINCT(Address)) AS 'Address_Count',
		COUNT(DISTINCT(Longitude)) AS 'Longitude_Count',
		COUNT(DISTINCT(Latitude)) AS 'Latitude_Count'
	FROM
		atlanta_crime_data
	GROUP BY
		Crime_Type,
		Crime_Date,
		Crime_Time,
		Day_Occurred,
		Area_Name,
		Address,
		Longitude,
		Latitude
	HAVING
		Crime_Count > 1;
"""

# execute the query
cur.execute(query)

# get the results
results = cur.fetchall()

# close the cursor
cur.close()

# close the connection
conn.close()

# print the results
print(results)

# create a dataframe
df = pd.DataFrame(results)

# print the dataframe
print(df)

# create a new dataframe
df2 = pd.DataFrame(columns=['Crime_Type', 'Crime_Date', 'Crime_Time', 'Day_Occurred', 'Area_Name', 'Address', 'Longitude', 'Latitude', 'Crime_Count'])

# iterate over the dataframe
for i in range(len(df)):
	# get the crime type
	crime_type = df.iloc[i,0]
	# get the crime date
	crime_date = df.iloc[i,2]
	# get the crime time
	crime_time = df.iloc[i,3]
	# get the day of the week
	day_occurred = df.iloc[i,4]
	# get the area name
	area_name = df.iloc[i,5]
	# get the address
	address = df.iloc[i,6]
	# get the longitude
	longitude = df.iloc[i,7]
	# get the latitude
	latitude = df.iloc[i,8]
	# get the count
	count = df.iloc[i,9]
	# create a new row
	new_row = {'Crime_Type': crime_type, 'Crime_Date': crime_date, 'Crime_Time': crime_time, 'Day_Occurred': day_occurred, 'Area_Name': area_name, 'Address': address, 'Longitude': longitude, 'Latitude': latitude, 'Crime_Count': count}
	# append the new row
	df2 = df2.append(new_row, ignore_index=True)

# print the new dataframe
print(df2)

# create a new dataframe
df3 = pd.DataFrame(columns=['Crime_Type', 'Crime_Date', 'Crime_Time', 'Day_Occurred', 'Area_Name', 'Address', 'Longitude', 'Latitude', 'Crime_Count'])

# iterate over the dataframe
for i in range(len(df2)):
	# get the crime type
	crime_type = df2.iloc[i,0]
	# get the crime date
	crime_date = df2.iloc[i,1]
	# get the crime time
	crime_time = df2.iloc[i,2]
	# get the day of the week
	day_occurred = df2.iloc[i,3]
	# get the area name
	area_name = df2.iloc[i,4]
	# get the address
	address = df2.iloc[i,5]
	# get the longitude
	longitude = df2.iloc[i,6]
	# get the latitude
	latitude = df2.iloc[i,7]
	# get the count
	count = df2.iloc[i,8]
	# create a new row
	new_row = {'Crime_Type': crime_type, 'Crime_Date': crime_date, 'Crime_Time': crime_time, 'Day_Occurred': day_occurred, 'Area_Name': area_name, 'Address': address, 'Longitude': longitude, 'Latitude': latitude, 'Crime_Count': count}
	# append the new row
	df3 = df3.append(new_row, ignore_index=True)

# print the new dataframe
print(df3)

# create a new dataframe
df4 = pd.DataFrame(columns=['Crime_Type', 'Crime_Date', 'Crime_Time', 'Day_Occurred', 'Area_Name', 'Address', 'Longitude', 'Latitude', 'Crime_Count'])

# iterate over the dataframe
for i in range(len(df3)):
	# get the crime type
	crime_type = df3.iloc[i,0]
	# get the crime date
	crime_date = df3.iloc[i,1]
	# get the crime time
	crime_time = df3.iloc[i,2]
	# get the day of the week
	day_occurred = df3.iloc[i,3]
	# get the area name
	area_name = df3.iloc[i,4]
	# get the address
	address = df3.iloc[i,5]
	# get the longitude
	longitude = df3.iloc[i,6]
	# get the latitude
	latitude = df3.iloc[i,7]
	# get the count
	count = df3.iloc[i,8]
	# create a new row
	new_row = {'Crime_Type': crime_type, 'Crime_Date': crime_date, 'Crime_Time': crime_time, 'Day_Occurred': day_occurred, 'Area_Name': area_name, 'Address': address, 'Longitude': longitude, 'Latitude': latitude, 'Crime_Count': count}
	# append the new row
	df4 = df4.append(new_row, ignore_index=True)

# print the new dataframe
print(df4)

# create a new dataframe
df5 = pd.DataFrame(columns=['Crime_Type', 'Crime_Date', 'Crime_Time', 'Day_Occurred', 'Area_Name', 'Address', 'Longitude', 'Latitude', 'Crime_Count'])

# iterate over the dataframe
for i in range(len(df4)):
	# get the crime type
	crime_type = df4.iloc[i,0]
	# get the crime date
	crime_date = df4.iloc[i,1]
	# get the crime time
	crime_time = df4.iloc[i,2]
	# get the day of the week
	day_occurred = df4.iloc[i,3]
	# get the area name
	area_name = df4.iloc[i,4]
	# get the address
	address

====================================================================================================

PROMPT 46:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in Atlanta.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 46:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in Atlanta.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# import statements
import psycopg2
import pandas as pd

# connect to database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# create cursor
cur = conn.cursor()

# create query
query = """
SELECT
	CASE
		WHEN Crime_Type = 'THEFT' THEN 'THEFT'
		WHEN Crime_Type = 'BATTERY' THEN 'BATTERY'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIMINAL DAMAGE' THEN 'CRIMINAL DAMAGE'
		WHEN Crime_Type = 'CRIMINAL TRESPASS' THEN 'CRIMINAL TRESPASS'
		WHEN Crime_Type = 'CRIM

====================================================================================================

PROMPT 47:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in Atlanta.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 47:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in Atlanta.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	INSUFFICENT

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM atlanta_crime_data WHERE Crime_Date = '01/01/2017'

Sample Input:
	How many different types of crimes were reported in the month of January?

Sample Output:
	SELECT COUNT

====================================================================================================

PROMPT 48:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in LA.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 48:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in LA.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	How many different types of crimes were reported on Monday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Monday'

Sample Input:
	How many different types of crimes were reported on Sunday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Sunday'

Sample Input:
	How many different types of crimes were reported on Friday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Friday'

Sample Input:
	How many different types of crimes were reported on Saturday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Saturday'

Sample Input:
	How many different types of crimes were reported on Sunday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Sunday'

Sample Input:
	How many different types of crimes were reported on Monday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Monday'

Sample Input:
	How many different types of crimes were reported on Tuesday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Tuesday'

Sample Input:
	How many different types of crimes were reported on Wednesday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Wednesday'

Sample Input:
	How many different types of crimes were reported on Thursday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Thursday'

Sample Input:
	How many different types of crimes were reported on Friday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Friday'

Sample Input:
	How many different types of crimes were reported on Saturday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Saturday'

Sample Input:
	How many different types of crimes were reported on Sunday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Sunday'

Sample Input:
	How many different types of crimes were reported on Monday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Monday'

Sample Input:
	How many different types of crimes were reported on Tuesday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Tuesday'

Sample Input:
	How many different types of crimes were reported on Wednesday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Wednesday'

Sample Input:
	How many different types of crimes were reported on Thursday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Thursday'

Sample Input:
	How many different types of crimes were reported on Friday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Friday'

Sample Input:
	How many different types of crimes were reported on Saturday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Saturday'

Sample Input:
	How many different types of crimes were reported on Sunday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Sunday'

Sample Input:
	How many different types of crimes were reported on Monday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Monday'

Sample Input:
	How many different types of crimes were reported on Tuesday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Tuesday'

Sample Input:
	How many different types of crimes were reported on Wednesday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Wednesday'

Sample Input:
	How many different types of crimes were reported on Thursday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Thursday'

Sample Input:
	How many different types of crimes were reported on Friday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Friday'

Sample Input:
	How many different types of crimes were reported on Saturday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Saturday'

Sample Input:
	How many different types of crimes were reported on Sunday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Sunday'

Sample Input:
	How many different types of crimes were reported on Monday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Monday'

Sample Input:
	How many different types of crimes were reported on Tuesday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Tuesday'

Sample Input:
	How many different types of crimes were reported on Wednesday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Wednesday'

Sample Input:
	How many different types of crimes were reported on Thursday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Thursday'

Sample Input:
	How many different types of crimes were reported on Friday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Friday'

Sample Input:
	How many different types of crimes were reported on Saturday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Saturday'

Sample Input:
	How many different types of crimes were reported on Sunday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Sunday'

Sample Input:
	How many different types of crimes were reported on Monday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Monday'

Sample Input:
	How many different types of crimes were reported on Tuesday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Tuesday'

Sample Input:
	How many different types of crimes were reported on Wednesday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Wednesday'

Sample Input:
	How many different types of crimes were reported on Thursday?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = 'Thursday'

Sample Input:
	How many different types of crimes were reported on Friday?

Sample Output:

====================================================================================================

PROMPT 49:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in LA.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 49:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in LA.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	How many different types of crimes are there in LA?
	How many different types of crimes are there in LA in the month of January?
	How many different types of crimes are there in LA in the month of January in the year 2018?
	How many different types of crimes are there in LA in the month of January in the year 2018 in the hour of 12:00?
	How many different types of crimes are there in LA in the month of January in the year 2018 in the hour of 12:00 in the year 2018?

Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date = '2018-01-01' AND Crime_Time = '12:00:00'
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data WHERE Crime_Date =

====================================================================================================

PROMPT 50:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in LA.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 50:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in LA.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	How many different types of crimes are there in LA?
	
Sample Output:
	SELECT COUNT(DISTINCT Crime_Type) FROM la_crime_data;

"""

# Import statements
import pandas as pd

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a dataframe of the crime data
la_crime_data = pd.read_csv('la_crime_data.csv')

# Create a

====================================================================================================

PROMPT 51:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in New York.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 51:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in New York.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data

====================================================================================================

PROMPT 52:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in New York.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 52:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in New York.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data = pd.read_csv('nyc_crime_data.csv')

# Create a dataframe of the crime data
nyc_crime_data

====================================================================================================

PROMPT 53:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in New York.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 53:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in New York.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

#

====================================================================================================

PROMPT 54:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in Philly.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 54:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in Philly.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database
# Create a list of all the latitudes in the database

# Create a list of all the crimes in the database
# Create a list of all the days of the week
# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the addresses in the database
# Create a list of all the longitudes in the database

====================================================================================================

PROMPT 55:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in Philly.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 55:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in Philly.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
#

====================================================================================================

PROMPT 56:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in Philly.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 56:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in Philly.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to database
conn = psycopg2.connect(
    host = "localhost",
    database = "philly_crime_data",
    user = "postgres",
    password = "postgres"
)

# Create cursor
cur = conn.cursor()

# Query
cur.execute("""
	SELECT 
		COUNT(Crime_ID) AS 'Crime_Count',
		Crime_Type,
		MONTH(Crime_Date)
	FROM philly_crime_data
	GROUP BY Crime_Type, MONTH(Crime_Date)
	ORDER BY Crime_Type, MONTH(Crime_Date)
""")

# Fetch results
results = cur.fetchall()

# Close connection
cur.close()
conn.close()

# Create dataframe
df = pd.DataFrame(results)

# Rename columns
df.columns = ['Crime_Count', 'Crime_Type', 'Month']

# Print dataframe
print(df)

# Create query
query = """
	SELECT 
		COUNT(Crime_ID) AS 'Crime_Count',
		Crime_Type,
		MONTH(Crime_Date)
	FROM philly_crime_data
	GROUP BY Crime_Type, MONTH(Crime_Date)
	ORDER BY Crime_Type, MONTH(Crime_Date)
"""

# Print query
print(query)

# Create dataframe
df = pd.read_sql_query(query, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create query
query = """
	SELECT 
		COUNT(Crime_ID) AS 'Crime_Count',
		Crime_Type,
		MONTH(Crime_Date)
	FROM philly_crime_data
	GROUP BY Crime_Type, MONTH(Crime_Date)
	ORDER BY Crime_Type, MONTH(Crime_Date)
"""

# Print query
print(query)

# Create dataframe
df = pd.read_sql_query(query, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create query
query = """
	SELECT 
		COUNT(Crime_ID) AS 'Crime_Count',
		Crime_Type,
		MONTH(Crime_Date)
	FROM philly_crime_data
	GROUP BY Crime_Type, MONTH(Crime_Date)
	ORDER BY Crime_Type, MONTH(Crime_Date)
"""

# Print query
print(query)

# Create dataframe
df = pd.read_sql_query(query, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create query
query = """
	SELECT 
		COUNT(Crime_ID) AS 'Crime_Count',
		Crime_Type,
		MONTH(Crime_Date)
	FROM philly_crime_data
	GROUP BY Crime_Type, MONTH(Crime_Date)
	ORDER BY Crime_Type, MONTH(Crime_Date)
"""

# Print query
print(query)

# Create dataframe
df = pd.read_sql_query(query, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create query
query = """
	SELECT 
		COUNT(Crime_ID) AS 'Crime_Count',
		Crime_Type,
		MONTH(Crime_Date)
	FROM philly_crime_data
	GROUP BY Crime_Type, MONTH(Crime_Date)
	ORDER BY Crime_Type, MONTH(Crime_Date)
"""

# Print query
print(query)

# Create dataframe
df = pd.read_sql_query(query, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create query
query = """
	SELECT 
		COUNT(Crime_ID) AS 'Crime_Count',
		Crime_Type,
		MONTH(Crime_Date)
	FROM philly_crime_data
	GROUP BY Crime_Type, MONTH(Crime_Date)
	ORDER BY Crime_Type, MONTH(Crime_Date)
"""

# Print query
print(query)

# Create dataframe
df = pd.read_sql_query(query, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create query
query = """
	SELECT 
		COUNT(Crime_ID) AS 'Crime_Count',
		Crime_Type,
		MONTH(Crime_Date)
	FROM philly_crime_data
	GROUP BY Crime_Type, MONTH(Crime_Date)
	ORDER BY Crime_Type, MONTH(Crime_Date)
"""

# Print query
print(query)

# Create dataframe
df = pd.read_sql_query(query, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create query
query = """
	SELECT 
		COUNT(Crime_ID) AS 'Crime_Count',
		Crime_Type,
		MONTH(Crime_Date)
	FROM philly_crime_data
	GROUP BY Crime_Type, MONTH(Crime_Date)
	ORDER BY Crime_Type, MONTH(Crime_Date)
"""

# Print query
print(query)

# Create dataframe
df = pd.read_sql_query(query, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create query
query = """
	SELECT 
		COUNT(Crime_ID) AS 'Crime_Count',
		Crime_Type,
		MONTH(Crime_Date)
	FROM philly_crime_data
	GROUP BY Crime_Type, MONTH(Crime_Date)
	ORDER BY Crime_Type, MONTH(Crime_Date)
"""

# Print query
print(query)

# Create dataframe
df = pd.read_sql_query(query, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create query
query = """
	SELECT 
		COUNT(Crime_ID) AS 'Crime_Count',
		Crime_Type,
		MONTH(Crime_Date)
	FROM philly_crime_data
	GROUP BY Crime_Type, MONTH(Crime_Date)
	ORDER BY Crime_Type, MONTH(Crime_Date)
"""

# Print query
print(query)

# Create dataframe
df = pd.read_sql_query(query, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create query
query = """
	SELECT 
		COUNT(Crime_ID) AS 'Crime_Count',
		Crime_Type,
		MONTH(Crime_Date)
	FROM philly_crime_data
	GROUP BY Crime_Type, MONTH(Crime_Date)
	ORDER BY Crime_Type, MONTH(Crime_Date)
"""

# Print query
print(query)

# Create dataframe
df = pd.read_sql_query(query, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

# Create query
query = """
	SELECT 
		COUNT(Crime_ID) AS 'Crime_Count',
		Crime_Type,
		MONTH(Crime_Date)
	FROM philly_crime_data
	GROUP BY Crime_Type, MONTH(Crime_Date)
	ORDER BY Crime_Type, MONTH(Crime_Date)
"""

# Print query
print(query)

# Create dataframe
df = pd.read_sql_query(query, conn)

# Close connection
conn.close()

# Print dataframe
print(df)

#

====================================================================================================

