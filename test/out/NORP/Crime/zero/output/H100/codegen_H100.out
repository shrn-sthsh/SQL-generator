PROMPT 1:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta on each day of the week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 1:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta on each day of the week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your SQL query statement below

SELECT
	DATE_FORMAT(DATE(crimes.date_of_crime),'%A') as day_of_week,
	COUNT(DISTINCT crimes.id) as num_crimes
FROM
	crimes
GROUP BY
	DATE_FORMAT(DATE(crimes.date_of_crime),'%A')
ORDER BY
	num_crimes DESC
LIMIT 1;

# Answer:

# SELECT
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A') as day_of_week,
# 	COUNT(DISTINCT crimes.id) as num_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A')
# ORDER BY
# 	num_crimes DESC
# LIMIT 1;

# Answer:

# SELECT
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A') as day_of_week,
# 	COUNT(DISTINCT crimes.id) as num_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A')
# ORDER BY
# 	num_crimes DESC
# LIMIT 1;

# Answer:

# SELECT
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A') as day_of_week,
# 	COUNT(DISTINCT crimes.id) as num_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A')
# ORDER BY
# 	num_crimes DESC
# LIMIT 1;

# Answer:

# SELECT
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A') as day_of_week,
# 	COUNT(DISTINCT crimes.id) as num_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A')
# ORDER BY
# 	num_crimes DESC
# LIMIT 1;

# Answer:

# SELECT
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A') as day_of_week,
# 	COUNT(DISTINCT crimes.id) as num_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A')
# ORDER BY
# 	num_crimes DESC
# LIMIT 1;

# Answer:

# SELECT
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A') as day_of_week,
# 	COUNT(DISTINCT crimes.id) as num_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A')
# ORDER BY
# 	num_crimes DESC
# LIMIT 1;

# Answer:

# SELECT
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A') as day_of_week,
# 	COUNT(DISTINCT crimes.id) as num_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A')
# ORDER BY
# 	num_crimes DESC
# LIMIT 1;

# Answer:

# SELECT
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A') as day_of_week,
# 	COUNT(DISTINCT crimes.id) as num_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A')
# ORDER BY
# 	num_crimes DESC
# LIMIT 1;

# Answer:

# SELECT
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A') as day_of_week,
# 	COUNT(DISTINCT crimes.id) as num_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A')
# ORDER BY
# 	num_crimes DESC
# LIMIT 1;

# Answer:

# SELECT
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A') as day_of_week,
# 	COUNT(DISTINCT crimes.id) as num_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A')
# ORDER BY
# 	num_crimes DESC
# LIMIT 1;

# Answer:

# SELECT
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A') as day_of_week,
# 	COUNT(DISTINCT crimes.id) as num_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A')
# ORDER BY
# 	num_crimes DESC
# LIMIT 1;

# Answer:

# SELECT
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A') as day_of_week,
# 	COUNT(DISTINCT crimes.id) as num_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A')
# ORDER BY
# 	num_crimes DESC
# LIMIT 1;

# Answer:

# SELECT
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A') as day_of_week,
# 	COUNT(DISTINCT crimes.id) as num_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A')
# ORDER BY
# 	num_crimes DESC
# LIMIT 1;

# Answer:

# SELECT
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A') as day_of_week,
# 	COUNT(DISTINCT crimes.id) as num_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A')
# ORDER BY
# 	num_crimes DESC
# LIMIT 1;

# Answer:

# SELECT
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A') as day_of_week,
# 	COUNT(DISTINCT crimes.id) as num_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A')
# ORDER BY
# 	num_crimes DESC
# LIMIT 1;

# Answer:

# SELECT
# 	DATE_FORMAT(DATE(crimes.date_of_crime),'%A') as day_of_week,
# 	COUNT(DISTINCT crimes.id

====================================================================================================

PROMPT 2:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta during each month of the year

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 2:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta during each month of the year

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of months
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Create a list of crimes
crimes = ['murder', 'rape', 'robbery', 'aggravated assault', 'property crime', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larc

====================================================================================================

PROMPT 3:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta at each hour of the day

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 3:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta at each hour of the day

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your SQL query statement below

SELECT hour(time) as hour,
	count(*) as num_crimes
FROM crime_incidents
GROUP BY hour(time)
ORDER BY hour(time)

# Answer

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY hour(time)
# LIMIT 1

# SELECT hour(time) as hour,
# 	count(*) as num_crimes
# FROM crime_incidents
# GROUP BY hour(time)
# ORDER BY

====================================================================================================

PROMPT 4:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in Atlanta grouped by week since January 2009

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 4:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in Atlanta grouped by week since January 2009

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your SQL query statement below

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = 2009
GROUP BY
	DATE_PART('week', crimes.date)
ORDER BY
	DATE_PART('week', crimes.date)

# Answer

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	cr

====================================================================================================

PROMPT 5:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA on each day of the week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 5:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA on each day of the week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A list of crimes in chronological order

Output Format:
	A SQL statement that answers the question

Sample Input:
	[
		"Murder",
		"Robbery",
		"Rape",
		"Murder",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",


====================================================================================================

PROMPT 6:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA during each month of the year

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 6:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA during each month of the year

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A list of months in the year (e.g. January, February, March, ...)

Constraints:
	1 <= len(months) <= 6
	1 <= len(months[i]) <= 3
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g. January, February, ...)
	months[i] is a 3-letter month (e.g. Jan, Feb, ...)
	months[i] is in uppercase
	months[i] is a valid month of the year (e.g.

====================================================================================================

PROMPT 7:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA at each hour of the day

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 7:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA at each hour of the day

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- A list of crimes in the format:
		[
			{
				"hour": "12",
				"type": "mugging",
				"latitude": "34.05",
				"longitude": "-118.25"
			},
			{
				"hour": "12",
				"type": "mugging",
				"latitude": "34.05",
				"longitude": "-118.25"
			}
		]

Output:
	- An SQL statement that answers the question.
	- If the information is not sufficient, return the string "INSUFFICENT".
	- If the SQL statement is not correct, return the string "ERROR".

Example:
	Input:
		[
			{
				"hour": "12",
				"type": "mugging",
				"latitude": "34.05",
				"longitude": "-118.25"
			},
			{
				"hour": "12",
				"type": "mugging",
				"latitude": "34.05",
				"longitude": "-118.25"
			}
		]
	Output:
		"SELECT COUNT(*) FROM crimes WHERE latitude = 34.05 AND longitude = -118.25"
"""

# Write your MySQL query statement below

SELECT COUNT(*) FROM crimes WHERE latitude = 34.05 AND longitude = -118.25


====================================================================================================

PROMPT 8:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in LA grouped by week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 8:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in LA grouped by week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- A list of crimes in LA
	- A list of weeks
	- A list of months
	- A list of years
	- A list of neighborhoods
	- A list of latitude and longitude coordinates
	- A list of crime types
	- A list of crime descriptions
	- A list of crime outcomes
	- A list of crime dates
	- A list of crime times
	- A list of crime locations

Output:
	- A single SQL statement
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of crime counts
	- A list of

====================================================================================================

PROMPT 9:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York on each day of the week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 9:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York on each day of the week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	Input:
		"What is the total number of crimes in New York on each day of the week?"
	Output:
		"SELECT COUNT(*) FROM crimes WHERE DATE(crimes.date) = 'Monday' OR DATE(crimes.date) = 'Tuesday' OR DATE(crimes.date) = 'Wednesday' OR DATE(crimes.date) = 'Thursday' OR DATE(crimes.date) = 'Friday' OR DATE(crimes.date) = 'Saturday' OR DATE(crimes.date) = 'Sunday';"

"""

# Write your MySQL query statement below

"SELECT COUNT(*) FROM crimes WHERE DATE(crimes.date) = 'Monday' OR DATE(crimes.date) = 'Tuesday' OR DATE(crimes.date) = 'Wednesday' OR DATE(crimes.date) = 'Thursday' OR DATE(crimes.date) = 'Friday' OR DATE(crimes.date) = 'Saturday' OR DATE(crimes.date) = 'Sunday';"


====================================================================================================

PROMPT 10:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York during each month of the year

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 10:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York during each month of the year

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import pandas as pd

# Create a dataframe
df = pd.read_csv('nypd_arrest_data.csv')

# Create a list of months
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Create a list of years
years = [str(i) for i in range(2000, 2018)]

# Create a list of crimes
crimes = ['MURDER', 'ROBBERY', 'LARCENY', 'AUTO THEFT', 'SEX ABUSE', 'AGGRAVATED ASSAULT', 'BRIBERY', 'Burglary', 'LARCENY/THEFT', 'ARSON', 'HURT/GREVIOUS HURT', 'ROBBERY/LARCENY', 'NARCOTICS', 'CRIMINAL TRESPASS', 'CRIMINAL DAMAGE', 'NON-CRIMINAL', 'PROSTITUTION', 'PUBLIC PEACE VIOLATION', 'LIQUOR LAW VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/NARCOTIC VIOLATION', 'DRUG/

====================================================================================================

PROMPT 11:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York at each hour of the day

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 11:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York at each hour of the day

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- A list of tuples, each tuple is a crime record.
	- A list of tuples, each tuple is a time record.
	- A list of tuples, each tuple is a location record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a crime time record.
	- A list of tuples, each tuple is a crime type record.
	- A list of tuples, each tuple is a crime location record.
	- A list of tuples, each tuple is a

====================================================================================================

PROMPT 12:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in New York grouped by week since January 2023

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 12:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in New York grouped by week since January 2023

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your SQL query statement below

SELECT
	COUNT(DISTINCT(crimes.id))
FROM
	crimes
WHERE
	crimes.year = '2023'
GROUP BY
	DATE_PART('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year = '2023'
# GROUP BY
# 	DATE_TRUNC('week', crimes.date)

# You can also use the following to get the same result:
# SELECT
# 	COUNT(DISTINCT(crimes.id))
# FROM
# 	crimes
# WHERE
# 	crimes.year

====================================================================================================

PROMPT 13:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly on each day of the week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 13:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly on each day of the week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- A list of crimes
	- A list of days
	- A list of months
	- A list of years

Output:
	- A SQL statement that answers the question

"""

# TODO:
# 1. Create a function that takes in a list of crimes, a list of days, a list of months, and a list of years.
# 2. Create a list of tuples that contains the date of the crime, the month of the crime, and the year of the crime.
# 3. Create a list of tuples that contains the day of the week, the month of the crime, and the year of the crime.
# 4. Create a list of tuples that contains the month of the crime, the day of the week, and the year of the crime.
# 5. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 6. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 7. Create a list of tuples that contains the month of the crime, the year of the crime, and the day of the week.
# 8. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 9. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 10. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 11. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 12. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 13. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 14. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 15. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 16. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 17. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 18. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 19. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 20. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 21. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 22. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 23. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 24. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 25. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 26. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 27. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 28. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 29. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 30. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 31. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 32. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 33. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 34. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 35. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 36. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 37. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 38. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 39. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 40. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 41. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 42. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 43. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 44. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 45. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 46. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 47. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 48. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 49. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 50. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 51. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 52. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 53. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 54. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 55. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 56. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 57. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 58. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 59. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 60. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 61. Create a list of tuples that contains the year of the crime, the day of the week, and the month of the crime.
# 62. Create a list of tuples that contains the year of the crime, the month of the crime, and the day of the week.
# 63. Create a list of tuples

====================================================================================================

PROMPT 14:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly during each month of the year

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 14:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly during each month of the year

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- A list of tuples, each tuple is a month and the number of crimes
	- A list of tuples, each tuple is a month and the number of crimes
	- A list of tuples, each tuple is a month and the number of crimes

Output:
	- A single SQL statement
	- A single SQL statement
	- A single SQL statement

Example:
	Input:
		[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)]
		[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)]
		[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)]
	Output:
		"SELECT COUNT(*) FROM crimes WHERE month = 1"
		"SELECT COUNT(*) FROM crimes WHERE month = 2"
		"SELECT COUNT(*) FROM crimes WHERE month = 3"
"""

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO: Your code here

# TODO:

====================================================================================================

PROMPT 15:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly at each hour of the day

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 15:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly at each hour of the day

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- A list of crimes in the format:
	[
		{
			"type": "the type of crime",
			"time": "the time of the crime",
			"date": "the date of the crime"
		},
		{
			"type": "the type of crime",
			"time": "the time of the crime",
			"date": "the date of the crime"
		},
		...
	]

Output:
	- An SQL statement to answer the question.
	- If the answer is insufficient, return INSUFFICENT.
	- If the answer is not sufficient, return the answer.
	- If the answer is correct, return the answer.

Example:
	Input:
	[
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		},
		{
			"type": "murder",
			"time": "12:00",
			"date": "2020-01-01"
		

====================================================================================================

PROMPT 16:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in Philly grouped by week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 16:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in Philly grouped by week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- Crime data:
		- crime_data.csv
	- Question:
		- "How many crimes are there in Philadelphia grouped by week?"

Output:
	- SQL statement:
		- "SELECT COUNT(DISTINCT(crimes.week)) FROM crimes GROUP BY crimes.week"

"""

# Import necessary libraries
import pandas as pd

# Read in the data
df = pd.read_csv('crime_data.csv')

# Create a query
query = "SELECT COUNT(DISTINCT(crimes.week)) FROM crimes GROUP BY crimes.week"

# Print the query
print(query)


====================================================================================================

PROMPT 17:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of Atlanta

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 17:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of Atlanta

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of crimes in each area
crimes_in_each_area = [
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:',
	'The following are the most common crimes in each area:

====================================================================================================

PROMPT 18:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of Atlanta give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 18:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of Atlanta give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A list of questions, each of which is a list of the following:
	[area, crime_type, date, week_increase]
	
	area: 	The name of the area of interest.
	crime_type: 	The type of crime.
	date: 	The date of the crime.
	week_increase: 	The increase in the week.
	
	For example, the first question could be:
	[['Downtown'], ['ROBBERY'], ['2015-01-01'], -0.1]
	
Output Format:
	A single SQL statement that answers the question.
	
Sample Output:
	SELECT COUNT(*) FROM crime_incidents
	WHERE area_of_incident = 'Downtown' AND type_of_incident = 'ROBBERY' AND date_of_incident = '2015-01-01' AND week_of_incident = 1.0;
	
Explanation:
	The most common crime in Downtown is Robbery, the most recent crime in Downtown is Robbery on 2015-01-01, and the increase in the week is -0.1.
	
"""

import psycopg2
import re

# Connect to the database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")
cur = conn.cursor()

# Get the list of questions
questions = []
with open("questions.txt", "r") as f:
	for line in f:
		questions.append(line.strip().split(","))

# For each question, generate the SQL statement
for question in questions:
	# Get the information
	area = question[0]
	crime_type = question[1]
	date = question[2]
	week_increase = question[3]
	
	# Generate the SQL statement
	sql = "SELECT COUNT(*) FROM crime_incidents WHERE area_of_incident = '{}' AND type_of_incident = '{}' AND date_of_incident = '{}' AND week_of_incident = {}.0;".format(area, crime_type, date, week_increase)
	
	# Execute the SQL statement
	cur.execute(sql)
	
	# Get the result
	result = cur.fetchone()
	
	# Print the result
	print(result)

# Close the database
cur.close()
conn.close()


====================================================================================================

PROMPT 19:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of LA

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 19:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of LA

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	How many crimes are there in the area of the city of San Francisco?
	
	INSUFFICIENT
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total of 5,000 crimes in the area of the city of San Francisco.
	
	How many crimes are there in the area of the city of San Francisco?
	
	There are a total

====================================================================================================

PROMPT 20:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of LA give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 20:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of LA give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	The crime data is in the file 'la_crime_data.csv'
	The question is in the file 'la_crime_question.txt'

Output:
	The SQL statement is printed to the screen.

Sample output:
	SELECT
		COUNT(*) AS 'Crime Count',
		MAX(date) AS 'Last Reported Date',
		COUNT(DISTINCT type) AS 'Crime Type Count',
		type,
		MAX(type) AS 'Most Common Crime Type',
		(CAST(MAX(type) AS float) - CAST(MIN(type) AS float)) / CAST(MAX(type) AS float) * 100 AS 'Weekly Increase in Crime Type'
	FROM
		la_crime_data
	GROUP BY
		type
	ORDER BY
		type;

"""

import csv
import pandas as pd
import numpy as np

# Read in the data
df = pd.read_csv('la_crime_data.csv', header=0)

# Read in the question
with open('la_crime_question.txt') as f:
	question = f.read()

# Generate the SQL statement
sql_statement = "SELECT COUNT(*) AS 'Crime Count', MAX(date) AS 'Last Reported Date', COUNT(DISTINCT type) AS 'Crime Type Count', type, MAX(type) AS 'Most Common Crime Type', (CAST(MAX(type) AS float) - CAST(MIN(type) AS float)) / CAST(MAX(type) AS float) * 100 AS 'Weekly Increase in Crime Type' FROM la_crime_data GROUP BY type ORDER BY type;"

# Print the SQL statement
print(sql_statement)


====================================================================================================

PROMPT 21:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of New York

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 21:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of New York

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A list of lists of the form:
	[
		[
			"area_1",
			"area_2",
			...
			"area_n"
		],
		[
			"crime_1",
			"crime_2",
			...
			"crime_n"
		],
		...
		[
			"crime_1",
			"crime_2",
			...
			"crime_n"
		]
	]

Output Format:
	A list of lists of the form:
	[
		[
			"area_1",
			"area_2",
			...
			"area_n"
		],
		[
			"crime_1",
			"crime_2",
			...
			"crime_n"
		]
	]

Sample Input:
	[
		[
			"Manhattan",
			"Brooklyn",
			"Queens",
			"Bronx"
		],
		[
			"Theft",
			"Burglary",
			"Larceny",
			"Motor Vehicle Theft"
		],
		[
			"Theft",
			"Burglary",
			"Larceny",
			"Motor Vehicle Theft"
		],
		[
			"Burglary",
			"Larceny",
			"Motor Vehicle Theft",
			"Arson"
		],
		[
			"Motor Vehicle Theft",
			"Arson",
			"Rape",
			"Robbery"
		],
		[
			"Arson",
			"Rape",
			"Robbery",
			"Aggravated Assault"
		],
		[
			"Robbery",
			"Aggravated Assault",
			"Larceny",
			"Larceny From Motor Vehicle"
		],
		[
			"Aggravated Assault",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Burglary"
		],
		[
			"Larceny From Motor Vehicle",
			"Burglary",
			"Larceny",
			"Motor Vehicle Theft"
		],
		[
			"Motor Vehicle Theft",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Burglary"
		],
		[
			"Larceny From Motor Vehicle",
			"Burglary",
			"Larceny",
			"Motor Vehicle Theft"
		],
		[
			"Burglary",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Motor Vehicle Theft"
		],
		[
			"Larceny From Motor Vehicle",
			"Motor Vehicle Theft",
			"Larceny",
			"Burglary"
		],
		[
			"Motor Vehicle Theft",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Burglary"
		],
		[
			"Larceny From Motor Vehicle",
			"Burglary",
			"Larceny",
			"Motor Vehicle Theft"
		],
		[
			"Burglary",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Motor Vehicle Theft"
		],
		[
			"Larceny From Motor Vehicle",
			"Motor Vehicle Theft",
			"Larceny",
			"Burglary"
		],
		[
			"Motor Vehicle Theft",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Burglary"
		],
		[
			"Larceny From Motor Vehicle",
			"Burglary",
			"Larceny",
			"Motor Vehicle Theft"
		],
		[
			"Burglary",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Motor Vehicle Theft"
		],
		[
			"Larceny From Motor Vehicle",
			"Motor Vehicle Theft",
			"Larceny",
			"Burglary"
		],
		[
			"Motor Vehicle Theft",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Burglary"
		],
		[
			"Larceny From Motor Vehicle",
			"Burglary",
			"Larceny",
			"Motor Vehicle Theft"
		],
		[
			"Burglary",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Motor Vehicle Theft"
		],
		[
			"Larceny From Motor Vehicle",
			"Motor Vehicle Theft",
			"Larceny",
			"Burglary"
		],
		[
			"Motor Vehicle Theft",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Burglary"
		],
		[
			"Larceny From Motor Vehicle",
			"Burglary",
			"Larceny",
			"Motor Vehicle Theft"
		],
		[
			"Burglary",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Motor Vehicle Theft"
		],
		[
			"Larceny From Motor Vehicle",
			"Motor Vehicle Theft",
			"Larceny",
			"Burglary"
		],
		[
			"Motor Vehicle Theft",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Burglary"
		],
		[
			"Larceny From Motor Vehicle",
			"Burglary",
			"Larceny",
			"Motor Vehicle Theft"
		],
		[
			"Burglary",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Motor Vehicle Theft"
		],
		[
			"Larceny From Motor Vehicle",
			"Motor Vehicle Theft",
			"Larceny",
			"Burglary"
		],
		[
			"Motor Vehicle Theft",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Burglary"
		],
		[
			"Larceny From Motor Vehicle",
			"Burglary",
			"Larceny",
			"Motor Vehicle Theft"
		],
		[
			"Burglary",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Motor Vehicle Theft"
		],
		[
			"Larceny From Motor Vehicle",
			"Motor Vehicle Theft",
			"Larceny",
			"Burglary"
		],
		[
			"Motor Vehicle Theft",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Burglary"
		],
		[
			"Larceny From Motor Vehicle",
			"Burglary",
			"Larceny",
			"Motor Vehicle Theft"
		],
		[
			"Burglary",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Motor Vehicle Theft"
		],
		[
			"Larceny From Motor Vehicle",
			"Motor Vehicle Theft",
			"Larceny",
			"Burglary"
		],
		[
			"Motor Vehicle Theft",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Burglary"
		],
		[
			"Larceny From Motor Vehicle",
			"Burglary",
			"Larceny",
			"Motor Vehicle Theft"
		],
		[
			"Burglary",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Motor Vehicle Theft"
		],
		[
			"Larceny From Motor Vehicle",
			"Motor Vehicle Theft",
			"Larceny",
			"Burglary"
		],
		[
			"Motor Vehicle Theft",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Burglary"
		],
		[
			"Larceny From Motor Vehicle",
			"Burglary",
			"Larceny",
			"Motor Vehicle Theft"
		],
		[
			"Burglary",
			"Larceny",
			"Larceny From Motor Vehicle",
			"Motor

====================================================================================================

PROMPT 22:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of New York give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 22:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of New York give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	The question is passed in as a string.

Output:
	The answer is returned as a string.
"""

# Import statements
import psycopg2
import re

# Global variables
DBNAME = "news"

# Connect to the database
def connect(query):
	db = psycopg2.connect(database=DBNAME)
	c = db.cursor()
	c.execute(query)
	result = c.fetchall()
	db.close()
	return result

# Get the most common crime type
def get_most_common_crime_type(query):
	result = connect(query)
	crime_type_list = []
	for row in result:
		crime_type_list.append(row[0])
	crime_type_list = list(set(crime_type_list))
	crime_type_list.sort()
	if len(crime_type_list) == 1:
		return crime_type_list[0]
	elif len(crime_type_list) == 2:
		if crime_type_list[0] == crime_type_list[1]:
			return crime_type_list[0]
		else:
			return crime_type_list[1]
	else:
		return "INSUFFICENT"

# Get the most common crime type
def get_most_common_crime_type_weekly(query):
	result = connect(query)
	crime_type_list = []
	for row in result:
		crime_type_list.append(row[0])
	crime_type_list = list(set(crime_type_list))
	crime_type_list.sort()
	if len(crime_type_list) == 1:
		return crime_type_list[0]
	elif len(crime_type_list) == 2:
		if crime_type_list[0] == crime_type_list[1]:
			return crime_type_list[0]
		else:
			return crime_type_list[1]
	else:
		return "INSUFFICENT"

# Get the most common crime type
def get_most_common_crime_type_monthly(query):
	result = connect(query)
	crime_type_list = []
	for row in result:
		crime_type_list.append(row[0])
	crime_type_list = list(set(crime_type_list))
	crime_type_list.sort()
	if len(crime_type_list) == 1:
		return crime_type_list[0]
	elif len(crime_type_list) == 2:
		if crime_type_list[0] == crime_type_list[1]:
			return crime_type_list[0]
		else:
			return crime_type_list[1]
	else:
		return "INSUFFICENT"

# Get the most common crime type
def get_most_common_crime_type_yearly(query):
	result = connect(query)
	crime_type_list = []
	for row in result:
		crime_type_list.append(row[0])
	crime_type_list = list(set(crime_type_list))
	crime_type_list.sort()
	if len(crime_type_list) == 1:
		return crime_type_list[0]
	elif len(crime_type_list) == 2:
		if crime_type_list[0] == crime_type_list[1]:
			return crime_type_list[0]
		else:
			return crime_type_list[1]
	else:
		return "INSUFFICENT"

# Get the most common crime type
def get_most_common_crime_type_weekly_increase(query):
	result = connect(query)
	crime_type_list = []
	for row in result:
		crime_type_list.append(row[0])
	crime_type_list = list(set(crime_type_list))
	crime_type_list.sort()
	if len(crime_type_list) == 1:
		return crime_type_list[0]
	elif len(crime_type_list) == 2:
		if crime_type_list[0] == crime_type_list[1]:
			return crime_type_list[0]
		else:
			return crime_type_list[1]
	else:
		return "INSUFFICENT"

# Get the most common crime type
def get_most_common_crime_type_monthly_increase(query):
	result = connect(query)
	crime_type_list = []
	for row in result:
		crime_type_list.append(row[0])
	crime_type_list = list(set(crime_type_list))
	crime_type_list.sort()
	if len(crime_type_list) == 1:
		return crime_type_list[0]
	elif len(crime_type_list) == 2:
		if crime_type_list[0] == crime_type_list[1]:
			return crime_type_list[0]
		else:
			return crime_type_list[1]
	else:
		return "INSUFFICENT"

# Get the most common crime type
def get_most_common_crime_type_yearly_increase(query):
	result = connect(query)
	crime_type_list = []
	for row in result:
		crime_type_list.append(row[0])
	crime_type_list = list(set(crime_type_list))
	crime_type_list.sort()
	if len(crime_type_list) == 1:
		return crime_type_list[0]
	elif len(crime_type_list) == 2:
		if crime_type_list[0] == crime_type_list[1]:
			return crime_type_list[0]
		else:
			return crime_type_list[1]
	else:
		return "INSUFFICENT"

# Get the most common crime type
def get_most_common_crime_type_weekly_increase_percentage(query):
	result = connect(query)
	crime_type_list = []
	for row in result:
		crime_type_list.append(row[0])
	crime_type_list = list(set(crime_type_list))
	crime_type_list.sort()
	if len(crime_type_list) == 1:
		return crime_type_list[0]
	elif len(crime_type_list) == 2:
		if crime_type_list[0] == crime_type_list[1]:
			return crime_type_list[0]
		else:
			return crime_type_list[1]
	else:
		return "INSUFFICENT"

# Get the most common crime type
def get_most_common_crime_type_monthly_increase_percentage(query):
	result = connect(query)
	crime_type_list = []
	for row in result:
		crime_type_list.append(row[0])
	crime_type_list = list(set(crime_type_list))
	crime_type_list.sort()
	if len(crime_type_list) == 1:
		return crime_type_list[0]
	elif len(crime_type_list) == 2:
		if crime_type_list[0] == crime_type_list[1]:
			return crime_type_list[0]
		else:
			return crime_type_list[1]
	else:
		return "INSUFFICENT"

# Get the most common crime type
def get_most_common_crime_type_yearly_increase_percentage(query):
	result = connect(query)
	crime_type_list = []
	for row in result:
		crime_type_list.append(row[0])
	crime_type_list = list(set(crime_type_list))
	crime_type_list.sort

====================================================================================================

PROMPT 23:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of Philly

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 23:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of Philly

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of crimes in each area
crimes_in_area = [
	('West', 'Larceny'),
	('West', 'Theft'),
	('West', 'Assault'),
	('West', 'Vehicle'),
	('West', 'Robbery'),
	('West', 'Aggravated Assault'),
	('West', 'Burglary'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault'),
	('West', 'Simple Burglary'),
	('West', 'Simple Robbery'),
	('West', 'Simple Assault

====================================================================================================

PROMPT 24:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of Philly give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 24:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of Philly give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each area of Philadelphia, the total number of crimes reported, the last reported date of any crime, the type of crime, the most common crime type and the weekly increase in crimes by percentage, in order of most common to least common.
	
	SELECT
		COUNT(DISTINCT(crimes.crime_id)) as total_crimes,
		MAX(crimes.date_of_crime) as last_reported,
		crimes.crime_type,
		crimes.crime_type_most_common,
		(crimes.crime_type_most_common/COUNT(DISTINCT(crimes.crime_id)))*100 as weekly_increase_in_crimes
	FROM
		crimes
	GROUP BY
		crimes.crime_type_most_common
	ORDER BY
		crimes.crime_type_most_common DESC
	LIMIT
		10;
"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(
	host = "localhost",
	database = "philly_crime",
	user = "postgres",
	password = "postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database
cur.execute(
	"""
	SELECT
		COUNT(DISTINCT(crimes.crime_id)) as total_crimes,
		MAX(crimes.date_of_crime) as last_reported,
		crimes.crime_type,
		crimes.crime_type_most_common,
		(crimes.crime_type_most_common/COUNT(DISTINCT(crimes.crime_id)))*100 as weekly_increase_in_crimes
	FROM
		crimes
	GROUP BY
		crimes.crime_type_most_common
	ORDER BY
		crimes.crime_type_most_common DESC
	LIMIT
		10;
	"""
)

# Fetch the results
rows = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Print the results
print(rows)

# Print the results in a dataframe
df = pd.DataFrame(rows, columns=["Total Crimes", "Last Reported", "Crime Type", "Most Common Crime Type", "Weekly Increase in Crimes"])
print(df)

# Print the results in a csv
df.to_csv("output.csv")


====================================================================================================

PROMPT 25:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Atlanta spaced by 0.01 degrees, give the most common crime type and its count

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 25:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Atlanta spaced by 0.01 degrees, give the most common crime type and its count

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input: 
	latitude, longitude, crime_type

Output:
	SQL statement

'''

# Import the necessary libraries
import psycopg2
import pandas as pd
import numpy as np

# Connect to the database
conn = psycopg2.connect(
	host = "localhost",
	database = "postgres",
	user = "postgres",
	password = "postgres"
)

# Create a cursor to perform database operations
cur = conn.cursor()

# Create a function to generate the SQL statement
def generate_sql(lat, lon, crime_type):
	# Generate the SQL statement
	sql = "SELECT crime_type, count(crime_type) FROM crime_incidents WHERE latitude = " + str(lat) + " AND longitude = " + str(lon) + " GROUP BY crime_type ORDER BY count(crime_type) DESC LIMIT 1"
	return sql

# Create a function to get the most common crime type
def get_most_common_crime(lat, lon):
	# Generate the SQL statement
	sql = generate_sql(lat, lon, "")
	# Execute the SQL statement
	cur.execute(sql)
	# Get the most common crime type
	most_common_crime = cur.fetchone()[0]
	return most_common_crime

# Create a function to get the number of crimes
def get_number_of_crimes(lat, lon):
	# Generate the SQL statement
	sql = generate_sql(lat, lon, "")
	# Execute the SQL statement
	cur.execute(sql)
	# Get the number of crimes
	number_of_crimes = cur.fetchone()[1]
	return number_of_crimes

# Create a function to get the number of crimes
def get_number_of_crimes(lat, lon):
	# Generate the SQL statement
	sql = generate_sql(lat, lon, "")
	# Execute the SQL statement
	cur.execute(sql)
	# Get the number of crimes
	number_of_crimes = cur.fetchone()[1]
	return number_of_crimes

# Create a function to get the number of crimes
def get_number_of_crimes(lat, lon):
	# Generate the SQL statement
	sql = generate_sql(lat, lon, "")
	# Execute the SQL statement
	cur.execute(sql)
	# Get the number of crimes
	number_of_crimes = cur.fetchone()[1]
	return number_of_crimes

# Create a function to get the number of crimes
def get_number_of_crimes(lat, lon):
	# Generate the SQL statement
	sql = generate_sql(lat, lon, "")
	# Execute the SQL statement
	cur.execute(sql)
	# Get the number of crimes
	number_of_crimes = cur.fetchone()[1]
	return number_of_crimes

# Create a function to get the number of crimes
def get_number_of_crimes(lat, lon):
	# Generate the SQL statement
	sql = generate_sql(lat, lon, "")
	# Execute the SQL statement
	cur.execute(sql)
	# Get the number of crimes
	number_of_crimes = cur.fetchone()[1]
	return number_of_crimes

# Create a function to get the number of crimes
def get_number_of_crimes(lat, lon):
	# Generate the SQL statement
	sql = generate_sql(lat, lon, "")
	# Execute the SQL statement
	cur.execute(sql)
	# Get the number of crimes
	number_of_crimes = cur.fetchone()[1]
	return number_of_crimes

# Create a function to get the number of crimes
def get_number_of_crimes(lat, lon):
	# Generate the SQL statement
	sql = generate_sql(lat, lon, "")
	# Execute the SQL statement
	cur.execute(sql)
	# Get the number of crimes
	number_of_crimes = cur.fetchone()[1]
	return number_of_crimes

# Create a function to get the number of crimes
def get_number_of_crimes(lat, lon):
	# Generate the SQL statement
	sql = generate_sql(lat, lon, "")
	# Execute the SQL statement
	cur.execute(sql)
	# Get the number of crimes
	number_of_crimes = cur.fetchone()[1]
	return number_of_crimes

# Create a function to get the number of crimes
def get_number_of_crimes(lat, lon):
	# Generate the SQL statement
	sql = generate_sql(lat, lon, "")
	# Execute the SQL statement
	cur.execute(sql)
	# Get the number of crimes
	number_of_crimes = cur.fetchone()[1]
	return number_of_crimes

# Create a function to get the number of crimes
def get_number_of_crimes(lat, lon):
	# Generate the SQL statement
	sql = generate_sql(lat, lon, "")
	# Execute the SQL statement
	cur.execute(sql)
	# Get the number of crimes
	number_of_crimes = cur.fetchone()[1]
	return number_of_crimes

# Create a function to get the number of crimes
def get_number_of_crimes(lat, lon):
	# Generate the SQL statement
	sql = generate_sql(lat, lon, "")
	# Execute the SQL statement
	cur.execute(sql)
	# Get the number of crimes
	number_of_crimes = cur.fetchone()[1]
	return number_of_crimes

# Create a function to get the number of crimes
def get_number_of_crimes(lat, lon):
	# Generate the SQL statement
	sql = generate_sql(lat, lon, "")
	# Execute the SQL statement
	cur.execute(sql)
	# Get the number of crimes
	number_of_crimes = cur.fetchone()[1]
	return number_of_crimes

# Create a function to get the number of crimes
def get_number_of_crimes(lat, lon):
	# Generate the SQL statement
	sql = generate_sql(lat, lon, "")
	# Execute the SQL statement
	cur.execute(sql)
	# Get the number of crimes
	number_of_crimes = cur.fetchone()[1]
	return number_of_crimes

# Create a function to get the number of crimes
def get_number_of_crimes(lat, lon):
	# Generate the SQL statement
	sql = generate_sql(lat, lon, "")
	# Execute the SQL statement
	cur.execute(sql)
	# Get the number of crimes
	number_of_crimes = cur.fetchone()[1]
	return number_of_crimes

# Create a function to get the number of crimes
def get_number_of_crimes(lat, lon):
	# Generate the SQL statement
	sql = generate_sql(lat, lon, "")
	# Execute the SQL statement
	cur.execute(sql)
	# Get the number of crimes
	number_of_crimes = cur.fetchone()[1]
	return number_of_crimes

# Create a function to get the number of crimes
def get_number_of_crimes(lat, lon):
	# Generate the SQL statement
	sql = generate_sql(lat, lon, "")
	# Execute the SQL statement
	cur.execute(sql)
	# Get the number of crimes
	number_of_crimes = cur.fetchone()[1]
	return number_of_crimes

# Create a function to get the number of crimes
def get_number

====================================================================================================

PROMPT 26:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Atlanta spaced by 0.01 degrees, give the total crime count.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 26:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Atlanta spaced by 0.01 degrees, give the total crime count.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For latitude = 33.7, longitude = -84.3, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 33.7 AND 33.8 AND longitude BETWEEN -84.3 AND -84.2;

"""

# Import the required libraries
import psycopg2
import numpy as np

# Connect to the database
conn = psycopg2.connect(
	host = "localhost",
	database = "postgres",
	user = "postgres",
	password = "postgres"
)

# Create a cursor to perform database operations
cur = conn.cursor()

# Define the latitude and longitude of Atlanta
latitude = 33.7
longitude = -84.3

# Define the step size
step_size = 0.01

# Define the lower and upper bound of the latitude and longitude
lat_lower_bound = latitude - step_size
lat_upper_bound = latitude + step_size

long_lower_bound = longitude - step_size
long_upper_bound = longitude + step_size

# Define the SQL statement
sql_statement = "SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN " + str(lat_lower_bound) + " AND " + str(lat_upper_bound) + " AND longitude BETWEEN " + str(long_lower_bound) + " AND " + str(long_upper_bound) + ";"

# Execute the SQL statement
cur.execute(sql_statement)

# Fetch the result
result = cur.fetchall()

# Print the result
print(result)

# Close the cursor and the connection
cur.close()
conn.close()


====================================================================================================

PROMPT 27:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of LA spaced by 0.01 degrees, give the total crime count.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 27:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of LA spaced by 0.01 degrees, give the total crime count.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	latitude: float
	longitude: float

Output:
	SQL statement: string
"""

def generate_sql_statement(latitude, longitude):
	# Your code here
	# You can use the following to test your code locally
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.0, 1.0))
	# print(generate_sql_statement(1.

====================================================================================================

PROMPT 28:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of LA spaced by 0.01 degrees, give the most common crime type and its count

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 28:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of LA spaced by 0.01 degrees, give the most common crime type and its count

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	latitude, longitude

Output:
	SQL statement

'''

# Import statements
import psycopg2
import pandas as pd
import numpy as np
import re

# Connect to database
conn = psycopg2.connect(
	host = "localhost",
	database = "crime_data",
	user = "postgres",
	password = "postgres"
)

# Create a cursor
cur = conn.cursor()

# Create a function to get the most common crime type
def get_most_common_crime(latitude, longitude):
	# Create a query
	query = "SELECT crime_type, COUNT(crime_type) FROM crime_data WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {} GROUP BY crime_type ORDER BY COUNT(crime_type) DESC LIMIT 1;".format(latitude, latitude+0.01, longitude, longitude+0.01)
	# Execute the query
	cur.execute(query)
	# Fetch the results
	results = cur.fetchall()
	# Return the most common crime type
	return results[0][0]

# Create a function to get the most common crime type
def get_most_common_crime_count(latitude, longitude):
	# Create a query
	query = "SELECT COUNT(crime_type) FROM crime_data WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {} GROUP BY crime_type ORDER BY COUNT(crime_type) DESC LIMIT 1;".format(latitude, latitude+0.01, longitude, longitude+0.01)
	# Execute the query
	cur.execute(query)
	# Fetch the results
	results = cur.fetchall()
	# Return the most common crime type
	return results[0][0]

# Create a function to get the most common crime type
def get_most_common_crime_count_by_year(latitude, longitude, year):
	# Create a query
	query = "SELECT COUNT(crime_type) FROM crime_data WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {} AND year = {} GROUP BY crime_type ORDER BY COUNT(crime_type) DESC LIMIT 1;".format(latitude, latitude+0.01, longitude, longitude+0.01, year)
	# Execute the query
	cur.execute(query)
	# Fetch the results
	results = cur.fetchall()
	# Return the most common crime type
	return results[0][0]

# Create a function to get the most common crime type
def get_most_common_crime_count_by_year_and_month(latitude, longitude, year, month):
	# Create a query
	query = "SELECT COUNT(crime_type) FROM crime_data WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {} AND year = {} AND month = {} GROUP BY crime_type ORDER BY COUNT(crime_type) DESC LIMIT 1;".format(latitude, latitude+0.01, longitude, longitude+0.01, year, month)
	# Execute the query
	cur.execute(query)
	# Fetch the results
	results = cur.fetchall()
	# Return the most common crime type
	return results[0][0]

# Create a function to get the most common crime type
def get_most_common_crime_count_by_year_and_month_and_day(latitude, longitude, year, month, day):
	# Create a query
	query = "SELECT COUNT(crime_type) FROM crime_data WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {} AND year = {} AND month = {} AND day = {} GROUP BY crime_type ORDER BY COUNT(crime_type) DESC LIMIT 1;".format(latitude, latitude+0.01, longitude, longitude+0.01, year, month, day)
	# Execute the query
	cur.execute(query)
	# Fetch the results
	results = cur.fetchall()
	# Return the most common crime type
	return results[0][0]

# Create a function to get the most common crime type
def get_most_common_crime_count_by_year_and_month_and_day_and_hour(latitude, longitude, year, month, day, hour):
	# Create a query
	query = "SELECT COUNT(crime_type) FROM crime_data WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {} AND year = {} AND month = {} AND day = {} AND hour = {} GROUP BY crime_type ORDER BY COUNT(crime_type) DESC LIMIT 1;".format(latitude, latitude+0.01, longitude, longitude+0.01, year, month, day, hour)
	# Execute the query
	cur.execute(query)
	# Fetch the results
	results = cur.fetchall()
	# Return the most common crime type
	return results[0][0]

# Create a function to get the most common crime type
def get_most_common_crime_count_by_year_and_month_and_day_and_hour_and_minute(latitude, longitude, year, month, day, hour, minute):
	# Create a query
	query = "SELECT COUNT(crime_type) FROM crime_data WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {} AND year = {} AND month = {} AND day = {} AND hour = {} AND minute = {} GROUP BY crime_type ORDER BY COUNT(crime_type) DESC LIMIT 1;".format(latitude, latitude+0.01, longitude, longitude+0.01, year, month, day, hour, minute)
	# Execute the query
	cur.execute(query)
	# Fetch the results
	results = cur.fetchall()
	# Return the most common crime type
	return results[0][0]

# Create a function to get the most common crime type
def get_most_common_crime_count_by_year_and_month_and_day_and_hour_and_minute_and_second(latitude, longitude, year, month, day, hour, minute, second):
	# Create a query
	query = "SELECT COUNT(crime_type) FROM crime_data WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {} AND year = {} AND month = {} AND day = {} AND hour = {} AND minute = {} AND second = {} GROUP BY crime_type ORDER BY COUNT(crime_type) DESC LIMIT 1;".format(latitude, latitude+0.01, longitude, longitude+0.01, year, month, day, hour, minute, second)
	# Execute the query
	cur.execute(query)
	# Fetch the results
	results = cur.fetchall()
	# Return the most common crime type
	return results[0][0]

# Create a function to get the most common crime type
def get_most_common_crime_count_by_year_and_month_and_day_and_hour_and_minute_and_second_and_microsecond(latitude, longitude, year, month, day, hour, minute, second, microsecond):
	# Create a query
	query = "SELECT COUNT(crime_type) FROM crime_data WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {} AND year = {} AND month = {} AND day = {} AND hour = {} AND minute = {} AND second = {} AND microsecond = {} GROUP BY crime_type ORDER BY COUNT(crime_type) DESC LIMIT 1;".format(latitude, latitude+0.01, longitude, longitude+0.01, year, month, day, hour, minute, second, microsecond)
	# Execute the query
	cur.execute(query)
	# Fetch the results
	results = cur.fetchall()
	# Return the most common crime type
	return results[0][0]

# Create a function to get the most common crime type
def get_most_common_crime_count_by_year_and_month_and_day_and_hour_and_minute_and_second_and

====================================================================================================

PROMPT 29:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of New York spaced by 0.01 degrees, give the total crime count.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 29:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of New York spaced by 0.01 degrees, give the total crime count.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;
	
	For latitude = 40.715 and longitude = -73.935, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 40.715 AND 40.715 AND longitude BETWEEN -73.935 AND -73.935;


====================================================================================================

PROMPT 30:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of New York spaced by 0.01 degrees, give the most common crime type and its count

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 30:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of New York spaced by 0.01 degrees, give the most common crime type and its count

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For latitude = 40.715, longitude = -74.006, the answer is:
	"The most common crime is the type of 'THEFT' and the count is 4"

Input Format:
	A single line of input containing the latitude and longitude of New York, separated by a space.

Constraints:
	Latitude and longitude are valid latitude and longitude values.

Output Format:
	A single line of output containing the most common crime type and its count.

Sample Input:
	40.715 -74.006

Sample Output:
	"The most common crime is the type of 'THEFT' and the count is 4"

Explanation:
	The most common crime in the area is theft, with 4 instances.

"""

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the mostCommonCrime function below.
def mostCommonCrime(latitude, longitude):
    # Write your code here.
    # return a string
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "INSUFFICENT"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THEFT' and the count is 4"
    # return "The most common crime is the type of 'THE

====================================================================================================

PROMPT 31:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the total crime count.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 31:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the total crime count.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	latitude, longitude, crime_type, crime_count

Output:
	SQL statement

'''

import psycopg2
import numpy as np

conn = psycopg2.connect(database="postgres", user="postgres", password="postgres", host="localhost", port="5432")
cur = conn.cursor()

# Create table
cur.execute("DROP TABLE IF EXISTS crime_data;")
cur.execute("CREATE TABLE crime_data (latitude FLOAT, longitude FLOAT, crime_type VARCHAR(50), crime_count INT);")

# Insert data
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.7, -75.2, "BURGLARY", 1))
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.7, -75.1, "BURGLARY", 1))
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.7, -75.0, "BURGLARY", 1))
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.6, -75.2, "BURGLARY", 1))
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.6, -75.1, "BURGLARY", 1))
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.6, -75.0, "BURGLARY", 1))
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.5, -75.2, "BURGLARY", 1))
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.5, -75.1, "BURGLARY", 1))
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.5, -75.0, "BURGLARY", 1))
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.4, -75.2, "BURGLARY", 1))
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.4, -75.1, "BURGLARY", 1))
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.4, -75.0, "BURGLARY", 1))
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.3, -75.2, "BURGLARY", 1))
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.3, -75.1, "BURGLARY", 1))
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.3, -75.0, "BURGLARY", 1))
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.2, -75.2, "BURGLARY", 1))
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.2, -75.1, "BURGLARY", 1))
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.2, -75.0, "BURGLARY", 1))
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.1, -75.2, "BURGLARY", 1))
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.1, -75.1, "BURGLARY", 1))
cur.execute("INSERT INTO crime_data VALUES (%s, %s, %s, %s);", (40.1, -75.0, "BURGLARY", 1))

# Commit changes
conn.commit()

# Query
cur.execute("SELECT * FROM crime_data;")

# Get data
data = cur.fetchall()

# Close connection
conn.close()

# Create a list of all crime types
crime_types = []
for i in range(len(data)):
	crime_types.append(data[i][2])

# Create a list of all crime counts
crime_counts = []
for i in range(len(data)):
	crime_counts.append(data[i][3])

# Create a list of all latitudes
latitudes = []
for i in range(len(data)):
	latitudes.append(data[i][0])

# Create a list of all longitudes
longitudes = []
for i in range(len(data)):
	longitudes.append(data[i][1])

# Create a list of all crime counts for each coordinate
crime_counts_by_coordinate = []
for i in range(len(data)):
	crime_counts_by_coordinate.append(crime_counts[i])

# Create a list of all latitudes for each coordinate
latitudes_by_coordinate = []
for i in range(len(data)):
	latitudes_by_coordinate.append(latitudes[i])

# Create a list of all longitudes for each coordinate
longitudes_by_coordinate = []
for i in range(len(data)):
	longitudes_by_coordinate.append(longitudes[i])

# Create a list of all crime counts for each coordinate
crime_counts_by_coordinate = []
for i in range(len(data)):
	crime_counts_by_coordinate.append(crime_counts[i])

# Create a list of all latitudes for each coordinate
latitudes_by_coordinate = []
for i in range(len(data)):
	latitudes_by_coordinate.append(latitudes[i])

# Create a list of all longitudes for each coordinate
longitudes_by_coordinate = []
for i in range(len(data)):
	longitudes_by_coordinate.append(longitudes[i])

# Create a list of all crime counts for each coordinate
crime_counts_by_coordinate = []
for i in range(len(data)):
	crime_counts_by_coordinate.append(crime_counts[i])

# Create a list of all latitudes for each coordinate
latitudes_by_coordinate = []
for i in range(len(data)):
	latitudes_by_coordinate.append(latitudes[i])

# Create a list of all longitudes for each coordinate
longitudes_by_coordinate = []
for i in range(len(data)):
	longitudes_by_coordinate.append(longitudes[i])

# Create a list of all crime counts for each coordinate
crime_counts_by_coordinate = []
for i in range(len(data)):
	crime_counts_by_coordinate.append(crime_counts[i])

# Create a list of all latitudes for each coordinate
latitudes_by_coordinate = []
for i in range(len(data)):
	latitudes_by_coordinate.append(latitudes[i])

# Create a list of all longitudes for each coordinate
longitudes_by_coordinate = []
for i in range(len(data)):
	longitudes_by_coordinate.append(longitudes[i])

# Create a list of all crime counts for each coordinate
crime_counts_by_coordinate = []
for i in range(len(data)):
	crime_counts_by_coordinate.append(crime_counts[i])

# Create a list of all latitudes for each coordinate


====================================================================================================

PROMPT 32:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the most common crime type and its count

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 32:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the most common crime type and its count

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For example, if the question is:
	What is the most common crime type in the area of latitude 40.7, longitude -75.2?
	
	The answer is:
	The most common crime type in the area of latitude 40.7, longitude -75.2 is Burglary.
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWEEN -75.2 AND -75.3
	GROUP BY crime_type
	ORDER BY count(crime_type) DESC
	LIMIT 1;
	
	The SQL statement is:
	SELECT crime_type, count(crime_type)
	FROM crime_incidents
	WHERE latitude BETWEEN 40.7 AND 40.8
	AND longitude BETWE

====================================================================================================

PROMPT 33:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in Atlanta

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 33:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in Atlanta

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of crimes
crimes = [
	"murder",
	"rape",
	"robbery",
	"aggravated assault",
	"property crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burg

====================================================================================================

PROMPT 34:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in Atlanta, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 34:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in Atlanta, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For example, if the question is:
		How many total crimes have there been in Atlanta?
	The response would be:
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'ATL'
	
	If the question is:
		What is the last reported date of the crime with the most reported incidents in Atlanta?
	The response would be:
		SELECT MAX(date) FROM crime_incidents WHERE area = 'ATL'
	
	If the question is:
		What is the last reported area of the crime with the most reported incidents in Atlanta?
	The response would be:
		SELECT MAX(area) FROM crime_incidents WHERE area = 'ATL'
	
	If the question is:
		What is the most common area for crimes of the type 'THEFT' in Atlanta?
	The response would be:
		SELECT area FROM crime_incidents WHERE type = 'THEFT' GROUP BY area ORDER BY COUNT(*) DESC LIMIT 1
	
	If the question is:
		What is the percentage increase in the number of crimes of the type 'THEFT' in Atlanta by week?
	The response would be:
		SELECT COUNT(*) FROM crime_incidents WHERE type = 'THEFT' AND area = 'ATL'
		GROUP BY week
		ORDER BY week
		LIMIT 1
		-100
"""

# Import statements
import psycopg2
import sys

# Connect to the database
try:
	conn = psycopg2.connect("dbname=postgres user=postgres")
	cur = conn.cursor()
except:
	print("Unable to connect to the database")
	sys.exit(0)

# Get the question
question = input("What is the question? ")

# Get the answer
answer = input("What is the answer? ")

# Close the database
cur.close()
conn.close()

# Print the answer
print(answer)


====================================================================================================

PROMPT 35:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in LA

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 35:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in LA

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A list of crime types, separated by commas.

Constraints:
	1 <= len(crime_types) <= 5
	1 <= len(crime_types[i]) <= 5
	1 <= len(crime_types[i][j]) <= 5
	
Output Format:
	A single SQL statement that answers the question.

Sample Input:
	"BAD, LARCENY, THEFT"

Sample Output:
	"SELECT COUNT(*) FROM CRIME_TYPES WHERE CRIME_TYPE_ID = 1"

Explanation:
	There are 3 types of crime in LA: BAD, LARCENY, and THEFT.
	The first 3 characters of the crime type is BAD, LARCENY, and THEFT.
	The first 3 characters of BAD is BAD, LARCENY, and THEFT.
	The first 3 characters of LARCENY is BAD, LARCENY, and THEFT.
	The first 3 characters of THEFT is BAD, LARCENY, and THEFT.
	Therefore, the SQL statement is:
	"SELECT COUNT(*) FROM CRIME_TYPES WHERE CRIME_TYPE_ID = 1"
	
	
"""

# Solution

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the countTriplets function below.
def countTriplets(arr, r):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            for k in range(j+1, len(arr)):
                if arr[i]*r == arr[j]*r and arr[j]*r == arr[k]*r:
                    count += 1
    return count

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    nr = input().rstrip().split()

    n = int(nr[0])

    r = int(nr[1])

    arr = list(map(int, input().rstrip().split()))

    ans = countTriplets(arr, r)

    fptr.write(str(ans) + '\n')

    fptr.close()


====================================================================================================

PROMPT 36:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in LA, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 36:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in LA, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	The crime type, the year, and the week.

Output:
	An SQL statement that answers the question.

Sample Input:
	"MURDER"
	"2012"
	"1"

Sample Output:
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT MAX(date) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER" AND year = "2012" AND week = 1;
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "MURDER"

====================================================================================================

PROMPT 37:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in New York

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 37:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in New York

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	crime_type: A string of the crime type
	
	city: A string of the city
	
	state: A string of the state
	
	year: An int of the year
	
	month: An int of the month
	
	day: An int of the day
	
	hour: An int of the hour
	
	minute: An int of the minute
	
	latitude: A float of the latitude
	
	longitude: A float of the longitude
	
	location: A string of the location
	
	
Output:
	An SQL statement that will return the total count of the given crime type
	in the given time period, location, and area.
	
	For example, if the user inputs:
	
	"ROBBERY"
	"NEW YORK"
	"NY"
	"2015"
	"1"
	"1"
	"1"
	"40.7"
	"-74.0"
	"BROOKLYN"
	
	The output should be:
	
	"SELECT COUNT(crimes.crime_type) FROM crimes
	INNER JOIN locations
	ON crimes.location_id = locations.location_id
	WHERE crimes.crime_type = 'ROBBERY'
	AND locations.city = 'NEW YORK'
	AND locations.state = 'NY'
	AND locations.year = '2015'
	AND locations.month = '1'
	AND locations.day = '1'
	AND locations.hour = '1'
	AND locations.minute = '1'
	AND locations.latitude = '40.7'
	AND locations.longitude = '-74.0'
	AND locations.location = 'BROOKLYN'"
	
	
	"SELECT COUNT(crimes.crime_type) FROM crimes
	INNER JOIN locations
	ON crimes.location_id = locations.location_id
	WHERE crimes.crime_type = 'ROBBERY'
	AND locations.city = 'NEW YORK'
	AND locations.state = 'NY'
	AND locations.year = '2015'
	AND locations.month = '1'
	AND locations.day = '1'
	AND locations.hour = '1'
	AND locations.minute = '1'
	AND locations.latitude = '40.7'
	AND locations.longitude = '-74.0'
	AND locations.location = 'BROOKLYN'"
	
	"SELECT COUNT(crimes.crime_type) FROM crimes
	INNER JOIN locations
	ON crimes.location_id = locations.location_id
	WHERE crimes.crime_type = 'ROBBERY'
	AND locations.city = 'NEW YORK'
	AND locations.state = 'NY'
	AND locations.year = '2015'
	AND locations.month = '1'
	AND locations.day = '1'
	AND locations.hour = '1'
	AND locations.minute = '1'
	AND locations.latitude = '40.7'
	AND locations.longitude = '-74.0'
	AND locations.location = 'BROOKLYN'"
	
	"SELECT COUNT(crimes.crime_type) FROM crimes
	INNER JOIN locations
	ON crimes.location_id = locations.location_id
	WHERE crimes.crime_type = 'ROBBERY'
	AND locations.city = 'NEW YORK'
	AND locations.state = 'NY'
	AND locations.year = '2015'
	AND locations.month = '1'
	AND locations.day = '1'
	AND locations.hour = '1'
	AND locations.minute = '1'
	AND locations.latitude = '40.7'
	AND locations.longitude = '-74.0'
	AND locations.location = 'BROOKLYN'"
	
	"SELECT COUNT(crimes.crime_type) FROM crimes
	INNER JOIN locations
	ON crimes.location_id = locations.location_id
	WHERE crimes.crime_type = 'ROBBERY'
	AND locations.city = 'NEW YORK'
	AND locations.state = 'NY'
	AND locations.year = '2015'
	AND locations.month = '1'
	AND locations.day = '1'
	AND locations.hour = '1'
	AND locations.minute = '1'
	AND locations.latitude = '40.7'
	AND locations.longitude = '-74.0'
	AND locations.location = 'BROOKLYN'"
	
	"SELECT COUNT(crimes.crime_type) FROM crimes
	INNER JOIN locations
	ON crimes.location_id = locations.location_id
	WHERE crimes.crime_type = 'ROBBERY'
	AND locations.city = 'NEW YORK'
	AND locations.state = 'NY'
	AND locations.year = '2015'
	AND locations.month = '1'
	AND locations.day = '1'
	AND locations.hour = '1'
	AND locations.minute = '1'
	AND locations.latitude = '40.7'
	AND locations.longitude = '-74.0'
	AND locations.location = 'BROOKLYN'"
	
	"SELECT COUNT(crimes.crime_type) FROM crimes
	INNER JOIN locations
	ON crimes.location_id = locations.location_id
	WHERE crimes.crime_type = 'ROBBERY'
	AND locations.city = 'NEW YORK'
	AND locations.state = 'NY'
	AND locations.year = '2015'
	AND locations.month = '1'
	AND locations.day = '1'
	AND locations.hour = '1'
	AND locations.minute = '1'
	AND locations.latitude = '40.7'
	AND locations.longitude = '-74.0'
	AND locations.location = 'BROOKLYN'"
	
	"SELECT COUNT(crimes.crime_type) FROM crimes
	INNER JOIN locations
	ON crimes.location_id = locations.location_id
	WHERE crimes.crime_type = 'ROBBERY'
	AND locations.city = 'NEW YORK'
	AND locations.state = 'NY'
	AND locations.year = '2015'
	AND locations.month = '1'
	AND locations.day = '1'
	AND locations.hour = '1'
	AND locations.minute = '1'
	AND locations.latitude = '40.7'
	AND locations.longitude = '-74.0'
	AND locations.location = 'BROOKLYN'"
	
	"SELECT COUNT(crimes.crime_type) FROM crimes
	INNER JOIN locations
	ON crimes.location_id = locations.location_id
	WHERE crimes.crime_type = 'ROBBERY'
	AND locations.city = 'NEW YORK'
	AND locations.state = 'NY'
	AND locations.year = '2015'
	AND locations.month = '1'
	AND locations.day = '1'
	AND locations.hour = '1'
	AND locations.minute = '1'
	AND locations.latitude = '40.7'
	AND locations.longitude = '-74.0'
	AND locations.location = 'BROOKLYN'"
	
	"SELECT COUNT(crimes.crime_type) FROM crimes
	INNER JOIN locations
	ON crimes.location_id = locations.location_id
	WHERE crimes.crime_type = 'ROBBERY'
	AND locations.city = 'NEW YORK'
	AND locations.state = 'NY'
	AND locations.year = '2015'
	AND locations.month = '1'
	AND locations.day = '1'
	AND locations.hour = '1'
	AND locations.minute = '1'
	AND locations.latitude = '40.7'
	AND locations.longitude = '-74.0'
	AND locations.location = 'BROOKLYN'"
	
	"SELECT COUNT(crimes.crime_type) FROM crimes
	INNER JOIN locations
	ON crimes.location_id = locations.location_id
	WHERE crimes.crime_type = 'ROBBERY'
	AND locations.city = 'NEW YORK'
	AND locations.state = 'NY'
	AND locations.year = '2015'
	

====================================================================================================

PROMPT 38:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in New York, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 38:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in New York, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For example, if the question is:
	What is the total count of all crimes in New York?
	
	The answer is:
	SELECT COUNT(*) FROM crime_type;
	
	The most accurate SQL statement is:
	SELECT COUNT(*) FROM crime_type;
	
	If the question is:
	What is the total count of all crimes in New York, and the most common area for this crime type?
	
	The answer is:
	SELECT COUNT(*) FROM crime_type, area, week_increase
	WHERE area.area_id = crime_type.area_id
	AND week_increase.crime_type_id = crime_type.crime_type_id
	AND week_increase.week_id = area.week_id
	AND area.city = 'New York';
	
	The most accurate SQL statement is:
	SELECT COUNT(*) FROM crime_type, area, week_increase
	WHERE area.area_id = crime_type.area_id
	AND week_increase.crime_type_id = crime_type.crime_type_id
	AND week_increase.week_id = area.week_id
	AND area.city = 'New York';
	
	If the question is:
	What is the total count of all crimes in New York, and the most common area for this crime type, and the percentage increase in this crime type by week?
	
	The answer is:
	SELECT COUNT(*) FROM crime_type, area, week_increase
	WHERE area.area_id = crime_type.area_id
	AND week_increase.crime_type_id = crime_type.crime_type_id
	AND week_increase.week_id = area.week_id
	AND area.city = 'New York';
	
	The most accurate SQL statement is:
	SELECT COUNT(*) FROM crime_type, area, week_increase
	WHERE area.area_id = crime_type.area_id
	AND week_increase.crime_type_id = crime_type.crime_type_id
	AND week_increase.week_id = area.week_id
	AND area.city = 'New York';
	
	If the question is:
	What is the total count of all crimes in New York, and the most common area for this crime type, and the percentage increase in this crime type by week, and the most common area for this crime type?
	
	The answer is:
	SELECT COUNT(*) FROM crime_type, area, week_increase, most_common_area
	WHERE area.area_id = crime_type.area_id
	AND week_increase.crime_type_id = crime_type.crime_type_id
	AND week_increase.week_id = area.week_id
	AND area.city = 'New York';
	
	The most accurate SQL statement is:
	SELECT COUNT(*) FROM crime_type, area, week_increase, most_common_area
	WHERE area.area_id = crime_type.area_id
	AND week_increase.crime_type_id = crime_type.crime_type_id
	AND week_increase.week_id = area.week_id
	AND area.city = 'New York';
	
	If the question is:
	What is the total count of all crimes in New York, and the most common area for this crime type, and the percentage increase in this crime type by week, and the most common area for this crime type, and the most common area for this crime type?
	
	The answer is:
	SELECT COUNT(*) FROM crime_type, area, week_increase, most_common_area, most_common_area_for_crime_type
	WHERE area.area_id = crime_type.area_id
	AND week_increase.crime_type_id = crime_type.crime_type_id
	AND week_increase.week_id = area.week_id
	AND area.city = 'New York';
	
	The most accurate SQL statement is:
	SELECT COUNT(*) FROM crime_type, area, week_increase, most_common_area, most_common_area_for_crime_type
	WHERE area.area_id = crime_type.area_id
	AND week_increase.crime_type_id = crime_type.crime_type_id
	AND week_increase.week_id = area.week_id
	AND area.city = 'New York';
	
	If the question is:
	What is the total count of all crimes in New York, and the most common area for this crime type, and the percentage increase in this crime type by week, and the most common area for this crime type, and the most common area for this crime type, and the most common area for this crime type?
	
	The answer is:
	SELECT COUNT(*) FROM crime_type, area, week_increase, most_common_area, most_common_area_for_crime_type, most_common_area_for_crime_type_for_crime_type
	WHERE area.area_id = crime_type.area_id
	AND week_increase.crime_type_id = crime_type.crime_type_id
	AND week_increase.week_id = area.week_id
	AND area.city = 'New York';
	
	The most accurate SQL statement is:
	SELECT COUNT(*) FROM crime_type, area, week_increase, most_common_area, most_common_area_for_crime_type, most_common_area_for_crime_type_for_crime_type
	WHERE area.area_id = crime_type.area_id
	AND week_increase.crime_type_id = crime_type.crime_type_id
	AND week_increase.week_id = area.week_id
	AND area.city = 'New York';
	
	If the question is:
	What is the total count of all crimes in New York, and the most common area for this crime type, and the percentage increase in this crime type by week, and the most common area for this crime type, and the most common area for this crime type, and the most common area for this crime type, and the most common area for this crime type, and the most common area for this crime type?
	
	The answer is:
	SELECT COUNT(*) FROM crime_type, area, week_increase, most_common_area, most_common_area_for_crime_type, most_common_area_for_crime_type_for_crime_type, most_common_area_for_crime_type_for_crime_type_for_crime_type
	WHERE area.area_id = crime_type.area_id
	AND week_increase.crime_type_id = crime_type.crime_type_id
	AND week_increase.week_id = area.week_id
	AND area.city = 'New York';
	
	The most accurate SQL statement is:
	SELECT COUNT(*) FROM crime_type, area, week_increase, most_common_area, most_common_area_for_crime_type, most_common_area_for_crime_type_for_crime_type, most_common_area_for_crime_type_for_crime_type_for_crime_type
	WHERE area.area_id = crime_type.area_id
	AND week_increase.crime_type_id = crime_type.crime_type_id
	AND week_increase.week_id = area.week_id
	AND area.city = 'New York';
	
	If the question is:
	What is the total count of all crimes in New York, and the most common area for this crime type, and the percentage increase in this crime type by week, and the most common area for this crime type, and the most common area for this crime type, and the most common area for this crime type, and the most common area for this crime type, and the most common area for this crime type, and the most common area for this crime type, and the most common area for this crime type?
	
	The answer is:
	SELECT COUNT(*) FROM crime_type, area, week_increase, most_common_area, most_common_area

====================================================================================================

PROMPT 39:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in Philly

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 39:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in Philly

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	crime_type: string, the crime type
	
	city: string, the city
	
	state: string, the state
	
	lat: float, the latitude
	
	lng: float, the longitude
	
	year: int, the year
	
	month: int, the month
	
	day: int, the day
	
	hour: int, the hour
	
	minute: int, the minute
	
	second: int, the second
	
	
Output:
	string, the SQL statement
	
	
'''

# Import statements
import psycopg2

# Connect to the database
conn = psycopg2.connect(database="postgres", user="postgres", password="postgres", host="localhost", port=5432)

# Open a cursor to perform database operations
cur = conn.cursor()

# Write the SQL query
cur.execute("""
	SELECT COUNT(*)
	FROM crime_incidents
	WHERE city = 'Philadelphia'
	AND state = 'Pennsylvania'
	AND latitude = 40.7
	AND longitude = -75.1
	AND year = '2015'
	AND month = '1'
	AND day = '1'
	AND hour = '0'
	AND minute = '0'
	AND second = '0'
	;
	""")

# Obtain the result
result = cur.fetchone()

# Close the cursor
cur.close()

# Close the database connection
conn.close()

# Print the result
print(result)

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
# The count is a long, so we need to cast it to a string
print(str(result[0]))

# The result is a tuple with a single element, the count
#

====================================================================================================

PROMPT 40:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in Philly, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 40:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in Philly, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- crime_type: the type of crime
	- date: the date of the crime
	- area: the area of the crime
	- week: the week of the crime
	- count: the number of crimes

Output:
	- SQL statement

'''

# Import statements
import psycopg2
import sys

# Connect to the database
try:
	conn = psycopg2.connect("dbname='postgres' user='postgres' host='localhost' password='postgres'")
	cur = conn.cursor()
except:
	print("Unable to connect to the database")
	sys.exit(1)

# Create a function to generate a SQL statement
def generate_sql(crime_type, date, area, week, count):
	# Create a string to hold the SQL statement
	sql_string = ""

	# If the crime type is not in the database, return an error
	if crime_type not in ["THEFT", "CRIMINAL DAMAGE", "ASSAULT", "BATTERY", "DECEPTIVE PRACTICE", "CRIMINAL TRESPASS"]:
		return "INSUFFICENT"

	# If the crime type is in the database, add the SQL statement
	else:
		# If the crime type is theft, add the SQL statement
		if crime_type == "THEFT":
			sql_string = "SELECT COUNT(*) FROM theft WHERE date = '" + date + "' AND area = '" + area + "'"
			sql_string += " AND week = '" + week + "'"
			sql_string += " AND count = " + str(count)
			sql_string += " AND (count > 0 AND count < 2)"
			sql_string += " AND (count > 1 AND count < 3)"
			sql_string += " AND (count > 2 AND count < 4)"
			sql_string += " AND (count > 3 AND count < 5)"
			sql_string += " AND (count > 4 AND count < 6)"
			sql_string += " AND (count > 5 AND count < 7)"
			sql_string += " AND (count > 6 AND count < 8)"
			sql_string += " AND (count > 7 AND count < 9)"
			sql_string += " AND (count > 8 AND count < 10)"
			sql_string += " AND (count > 9 AND count < 11)"
			sql_string += " AND (count > 10 AND count < 12)"
			sql_string += " AND (count > 11 AND count < 13)"
			sql_string += " AND (count > 12 AND count < 14)"
			sql_string += " AND (count > 13 AND count < 15)"
			sql_string += " AND (count > 14 AND count < 16)"
			sql_string += " AND (count > 15 AND count < 17)"
			sql_string += " AND (count > 16 AND count < 18)"
			sql_string += " AND (count > 17 AND count < 19)"
			sql_string += " AND (count > 18 AND count < 20)"
			sql_string += " AND (count > 19 AND count < 21)"
			sql_string += " AND (count > 20 AND count < 22)"
			sql_string += " AND (count > 21 AND count < 23)"
			sql_string += " AND (count > 22 AND count < 24)"
			sql_string += " AND (count > 23 AND count < 25)"
			sql_string += " AND (count > 24 AND count < 26)"
			sql_string += " AND (count > 25 AND count < 27)"
			sql_string += " AND (count > 26 AND count < 28)"
			sql_string += " AND (count > 27 AND count < 29)"
			sql_string += " AND (count > 28 AND count < 30)"
			sql_string += " AND (count > 29 AND count < 31)"
			sql_string += " AND (count > 30 AND count < 32)"
			sql_string += " AND (count > 31 AND count < 33)"
			sql_string += " AND (count > 32 AND count < 34)"
			sql_string += " AND (count > 33 AND count < 35)"
			sql_string += " AND (count > 34 AND count < 36)"
			sql_string += " AND (count > 35 AND count < 37)"
			sql_string += " AND (count > 36 AND count < 38)"
			sql_string += " AND (count > 37 AND count < 39)"
			sql_string += " AND (count > 38 AND count < 40)"
			sql_string += " AND (count > 39 AND count < 41)"
			sql_string += " AND (count > 40 AND count < 42)"
			sql_string += " AND (count > 41 AND count < 43)"
			sql_string += " AND (count > 42 AND count < 44)"
			sql_string += " AND (count > 43 AND count < 45)"
			sql_string += " AND (count > 44 AND count < 46)"
			sql_string += " AND (count > 45 AND count < 47)"
			sql_string += " AND (count > 46 AND count < 48)"
			sql_string += " AND (count > 47 AND count < 49)"
			sql_string += " AND (count > 48 AND count < 50)"
			sql_string += " AND (count > 49 AND count < 51)"
			sql_string += " AND (count > 50 AND count < 52)"
			sql_string += " AND (count > 51 AND count < 53)"
			sql_string += " AND (count > 52 AND count < 54)"
			sql_string += " AND (count > 53 AND count < 55)"
			sql_string += " AND (count > 54 AND count < 56)"
			sql_string += " AND (count > 55 AND count < 57)"
			sql_string += " AND (count > 56 AND count < 58)"
			sql_string += " AND (count > 57 AND count < 59)"
			sql_string += " AND (count > 58 AND count < 60)"
			sql_string += " AND (count > 59 AND count < 61)"
			sql_string += " AND (count > 60 AND count < 62)"
			sql_string += " AND (count > 61 AND count < 63)"
			sql_string += " AND (count > 62 AND count < 64)"
			sql_string += " AND (count > 63 AND count < 65)"
			sql_string += " AND (count > 64 AND count < 66)"
			sql_string += " AND (count > 65 AND count < 67)"
			sql_string += " AND (count > 66 AND count < 68)"
			sql_string += " AND (count > 67 AND count < 69)"
			sql_string += " AND (count > 68 AND count < 70)"
			sql_string += " AND (count > 69 AND count < 71)"
			sql_string += " AND (count > 70 AND count < 72)"
			sql_string += " AND (count > 71 AND count < 73)"
			sql_string += " AND (count > 72 AND count < 74)"
			sql_string += " AND (count > 73 AND count < 75)"
			sql_string += " AND (count > 74 AND count < 76)"
			sql_string += " AND (count > 75 AND count < 77)"
			sql_string += " AND (count > 76 AND count < 78)"
			sql_string += " AND (count > 77 AND count < 79)"
			sql_string += " AND (count > 78 AND count < 80)"
			sql_string += " AND (count > 79 AND count < 81)"
			sql_string += " AND (count > 80 AND count < 82)"
			sql_string += " AND (count > 81 AND count < 83)"
			sql_string += " AND (count > 82 AND count < 84)"
			sql_string += " AND (count > 83 AND count < 85)"
			sql_string += " AND (count > 84 AND count < 86)"
			sql_string += " AND (count > 85 AND count < 87)"
			sql_string += " AND (count > 86 AND count < 88)"
			sql_string += " AND (count > 87 AND count < 89)"
			sql_string += " AND (count > 88 AND count < 90)"
			sql_string += " AND (count > 89 AND count < 91)"
			sql_string += " AND (count > 90 AND count < 92)"
			sql_string += " AND (count > 91 AND count < 93)"
			sql_string += " AND (count >

====================================================================================================

PROMPT 41:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in Atlanta, give count of each crime type.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 41:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in Atlanta, give count of each crime type.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the crimes in the database
crimes = [
	'Aggravated Assault',
	'Burglary',
	'Larceny-Theft',
	'Motor Vehicle Theft',
	'Robbery',
	'Rape',
	'Larceny-Theft',
	'Arson',
	'Burglary',
	'Assault',
	'Homicide',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'L

====================================================================================================

PROMPT 42:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in LA, give count of each crime type.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 42:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in LA, give count of each crime type.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	area: string
	crime_type: string

Output:
	SQL statement: string

'''

# Create a list of all the crime types
crime_types = ['murder', 'rape', 'robbery', 'aggravated assault', 'property crime', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'vehicle theft

====================================================================================================

PROMPT 43:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in New York, give count of each crime type.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 43:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in New York, give count of each crime type.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each area in New York, give count of each crime type.
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 1
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 2
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 3
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 4
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 5
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 6
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 7
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 8
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 9
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 10
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 11
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 12
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 13
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 14
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 15
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 16
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 17
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 18
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 19
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 20
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 21
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 22
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 23
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 24
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 25
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 26
	GROUP BY
		crime_type
	ORDER BY
		COUNT(DISTINCT crime_type) DESC
	LIMIT
		1;
	
	SELECT
		COUNT(DISTINCT crime_type)
	FROM
		crimes
	WHERE
		area_id = 27
	GROUP BY


====================================================================================================

PROMPT 44:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in Philly, give count of each crime type.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 44:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in Philly, give count of each crime type.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	crime_type: a string, the crime type
	area: a string, the area
	
Output:
	An SQL statement, the answer to the question.
"""

def generate_sql(crime_type, area):
	# Your code here
	return "SELECT COUNT(*) FROM crime_incidents WHERE crime_type = '{}' AND area = '{}'".format(crime_type, area)

# Test Cases
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql("mugging", "east_philly"))
print(generate_sql("mugging", "west_philly"))
print(generate_sql("mugging", "south_philly"))
print(generate_sql

====================================================================================================

PROMPT 45:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in Atlanta.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 45:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in Atlanta.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your MySQL query statement below

SELECT
	COUNT(DISTINCT(crimes.crime_type)) AS crime_type,
	DAY(crimes.date) AS day,
	MONTH(crimes.date) AS month,
	YEAR(crimes.date) AS year
FROM
	crimes
GROUP BY
	DAY(crimes.date),
	MONTH(crimes.date),
	YEAR(crimes.date)
ORDER BY
	DAY(crimes.date),
	MONTH(crimes.date),
	YEAR(crimes.date)

# Answer

# SELECT
# 	COUNT(DISTINCT(crimes.crime_type)) AS crime_type,
# 	DAY(crimes.date) AS day,
# 	MONTH(crimes.date) AS month,
# 	YEAR(crimes.date) AS year
# FROM
# 	crimes
# GROUP BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)
# ORDER BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)

# SELECT
# 	COUNT(DISTINCT(crimes.crime_type)) AS crime_type,
# 	DAY(crimes.date) AS day,
# 	MONTH(crimes.date) AS month,
# 	YEAR(crimes.date) AS year
# FROM
# 	crimes
# GROUP BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)
# ORDER BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)

# SELECT
# 	COUNT(DISTINCT(crimes.crime_type)) AS crime_type,
# 	DAY(crimes.date) AS day,
# 	MONTH(crimes.date) AS month,
# 	YEAR(crimes.date) AS year
# FROM
# 	crimes
# GROUP BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)
# ORDER BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)

# SELECT
# 	COUNT(DISTINCT(crimes.crime_type)) AS crime_type,
# 	DAY(crimes.date) AS day,
# 	MONTH(crimes.date) AS month,
# 	YEAR(crimes.date) AS year
# FROM
# 	crimes
# GROUP BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)
# ORDER BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)

# SELECT
# 	COUNT(DISTINCT(crimes.crime_type)) AS crime_type,
# 	DAY(crimes.date) AS day,
# 	MONTH(crimes.date) AS month,
# 	YEAR(crimes.date) AS year
# FROM
# 	crimes
# GROUP BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)
# ORDER BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)

# SELECT
# 	COUNT(DISTINCT(crimes.crime_type)) AS crime_type,
# 	DAY(crimes.date) AS day,
# 	MONTH(crimes.date) AS month,
# 	YEAR(crimes.date) AS year
# FROM
# 	crimes
# GROUP BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)
# ORDER BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)

# SELECT
# 	COUNT(DISTINCT(crimes.crime_type)) AS crime_type,
# 	DAY(crimes.date) AS day,
# 	MONTH(crimes.date) AS month,
# 	YEAR(crimes.date) AS year
# FROM
# 	crimes
# GROUP BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)
# ORDER BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)

# SELECT
# 	COUNT(DISTINCT(crimes.crime_type)) AS crime_type,
# 	DAY(crimes.date) AS day,
# 	MONTH(crimes.date) AS month,
# 	YEAR(crimes.date) AS year
# FROM
# 	crimes
# GROUP BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)
# ORDER BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)

# SELECT
# 	COUNT(DISTINCT(crimes.crime_type)) AS crime_type,
# 	DAY(crimes.date) AS day,
# 	MONTH(crimes.date) AS month,
# 	YEAR(crimes.date) AS year
# FROM
# 	crimes
# GROUP BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)
# ORDER BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)

# SELECT
# 	COUNT(DISTINCT(crimes.crime_type)) AS crime_type,
# 	DAY(crimes.date) AS day,
# 	MONTH(crimes.date) AS month,
# 	YEAR(crimes.date) AS year
# FROM
# 	crimes
# GROUP BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)
# ORDER BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)

# SELECT
# 	COUNT(DISTINCT(crimes.crime_type)) AS crime_type,
# 	DAY(crimes.date) AS day,
# 	MONTH(crimes.date) AS month,
# 	YEAR(crimes.date) AS year
# FROM
# 	crimes
# GROUP BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)
# ORDER BY
# 	DAY(crimes.date),
# 	MONTH(crimes.date),
# 	YEAR(crimes.date)

# SELECT
# 	COUNT(DISTINCT(crimes.crime_type)) AS crime_type,
# 	DAY(crimes.date) AS day,
# 	MONTH(crimes.date) AS month,
# 	YEAR(crimes.date) AS year
# FROM
# 	crimes
# GROUP BY
# 	DAY(crimes.date),


====================================================================================================

PROMPT 46:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in Atlanta.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 46:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in Atlanta.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a query to get the count of each crime type for each hour of the day in Atlanta.
# Use the GROUP BY and HAVING clauses to get the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the crime type and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the count of each crime type.
# Use the LIMIT clause to only get the top 5 results.
# Use the SELECT clause to get the hour and the count of each crime type.
# Use the ORDER BY clause to sort the results by the

====================================================================================================

PROMPT 47:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in Atlanta.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 47:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in Atlanta.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a query to answer the question
query = """
SELECT
	month,
	crime_type,
	COUNT(*)
FROM
	crimes
GROUP BY
	month,
	crime_type
ORDER BY
	month,
	COUNT(*) DESC
LIMIT
	1;
"""

# Execute the query
query_result = db.query(query)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print the results
print(query_result)

# Print

====================================================================================================

PROMPT 48:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in LA.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 48:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in LA.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A list of lists, where each sublist is a row of the data.
	Each sublist is a day of the week, followed by a space, followed by a crime type.
	The sublist is in the following format:
	[day, crime_type, ...]

Output Format:
	A single SQL statement that answers the question.

Sample Input:
	[
		[
			"Monday",
			"Robbery"
		],
		[
			"Tuesday",
			"Robbery"
		],
		[
			"Wednesday",
			"Robbery"
		],
		[
			"Thursday",
			"Robbery"
		],
		[
			"Friday",
			"Robbery"
		],
		[
			"Saturday",
			"Robbery"
		],
		[
			"Sunday",
			"Robbery"
		]
	]

Sample Output:
	SELECT COUNT(crime_type) FROM crime_data
	WHERE day_of_week = "Monday" AND crime_type = "Robbery"
	
	SELECT COUNT(crime_type) FROM crime_data
	WHERE day_of_week = "Tuesday" AND crime_type = "Robbery"
	
	SELECT COUNT(crime_type) FROM crime_data
	WHERE day_of_week = "Wednesday" AND crime_type = "Robbery"
	
	SELECT COUNT(crime_type) FROM crime_data
	WHERE day_of_week = "Thursday" AND crime_type = "Robbery"
	
	SELECT COUNT(crime_type) FROM crime_data
	WHERE day_of_week = "Friday" AND crime_type = "Robbery"
	
	SELECT COUNT(crime_type) FROM crime_data
	WHERE day_of_week = "Saturday" AND crime_type = "Robbery"
	
	SELECT COUNT(crime_type) FROM crime_data
	WHERE day_of_week = "Sunday" AND crime_type = "Robbery"
	
	INSUFFICIENT

Explanation:
	The first row of the data is Monday, Robbery.
	The second row of the data is Tuesday, Robbery.
	The third row of the data is Wednesday, Robbery.
	The fourth row of the data is Thursday, Robbery.
	The fifth row of the data is Friday, Robbery.
	The sixth row of the data is Saturday, Robbery.
	The seventh row of the data is Sunday, Robbery.
	
	The first and second rows of the data are Monday and Tuesday, respectively,
	and the crime type is Robbery.
	The third, fourth, fifth, and sixth rows of the data are Wednesday, Thursday,
	Friday, and Saturday, respectively, and the crime type is Robbery.
	The seventh row of the data is Sunday, and the crime type is Robbery.
	
	The first, second, third, fourth, fifth, and sixth rows of the data are Monday,
	Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively, and the
	crime type is Robbery.
	The seventh row of the data is Sunday, and the crime type is Robbery.
	
	The first, second, third, fourth, fifth, and sixth rows of the data are Monday,
	Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively, and the
	crime type is Robbery.
	The seventh row of the data is Sunday, and the crime type is Robbery.
	
	The first, second, third, fourth, fifth, and sixth rows of the data are Monday,
	Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively, and the
	crime type is Robbery.
	The seventh row of the data is Sunday, and the crime type is Robbery.
	
	The first, second, third, fourth, fifth, and sixth rows of the data are Monday,
	Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively, and the
	crime type is Robbery.
	The seventh row of the data is Sunday, and the crime type is Robbery.
	
	The first, second, third, fourth, fifth, and sixth rows of the data are Monday,
	Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively, and the
	crime type is Robbery.
	The seventh row of the data is Sunday, and the crime type is Robbery.
	
	The first, second, third, fourth, fifth, and sixth rows of the data are Monday,
	Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively, and the
	crime type is Robbery.
	The seventh row of the data is Sunday, and the crime type is Robbery.
	
	The first, second, third, fourth, fifth, and sixth rows of the data are Monday,
	Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively, and the
	crime type is Robbery.
	The seventh row of the data is Sunday, and the crime type is Robbery.
	
	The first, second, third, fourth, fifth, and sixth rows of the data are Monday,
	Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively, and the
	crime type is Robbery.
	The seventh row of the data is Sunday, and the crime type is Robbery.
	
	The first, second, third, fourth, fifth, and sixth rows of the data are Monday,
	Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively, and the
	crime type is Robbery.
	The seventh row of the data is Sunday, and the crime type is Robbery.
	
	The first, second, third, fourth, fifth, and sixth rows of the data are Monday,
	Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively, and the
	crime type is Robbery.
	The seventh row of the data is Sunday, and the crime type is Robbery.
	
	The first, second, third, fourth, fifth, and sixth rows of the data are Monday,
	Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively, and the
	crime type is Robbery.
	The seventh row of the data is Sunday, and the crime type is Robbery.
	
	The first, second, third, fourth, fifth, and sixth rows of the data are Monday,
	Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively, and the
	crime type is Robbery.
	The seventh row of the data is Sunday, and the crime type is Robbery.
	
	The first, second, third, fourth, fifth, and sixth rows of the data are Monday,
	Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively, and the
	crime type is Robbery.
	The seventh row of the data is Sunday, and the crime type is Robbery.
	
	The first, second, third, fourth, fifth, and sixth rows of the data are Monday,
	Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively, and the
	crime type is Robbery.
	The seventh row of the data is Sunday, and the crime type is Robbery.
	
	The first, second, third, fourth, fifth, and sixth rows of the data are Monday,
	Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively, and the
	crime type is Robbery.
	The seventh row of the data is Sunday, and the crime type is Robbery.
	
	The first, second, third, fourth, fifth, and sixth rows of the data are Monday,
	Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively, and the
	crime type is Robbery.
	The seventh row of the data is Sunday, and the crime type is Robbery.
	
	The first, second, third, fourth, fifth, and sixth rows of the data are Monday,
	Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively, and the
	crime type is Robbery.
	The seventh row of the data is Sunday, and the crime type is Robbery.
	
	The first, second, third, fourth, fifth, and sixth rows of the data are Monday,
	Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively, and the
	crime type is Robbery.
	The seventh row of the data is Sunday, and the crime type is Robbery.
	
	The first, second, third, fourth, fifth, and sixth rows of the data are Monday,
	Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively, and the
	crime type is Robbery.
	The seventh row of the data is Sunday, and the crime type is Robbery.
	
	The first, second, third, fourth, fifth, and sixth rows

====================================================================================================

PROMPT 49:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in LA.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 49:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in LA.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	crime_type: A string of the crime type.
	hour: A string of the hour of the day.
	latitude: A string of the latitude.
	longitude: A string of the longitude.

Output:
	An SQL statement to answer the question.

'''

crime_type = 'mugging'
hour = '12'
latitude = '33.45'
longitude = '-11.25'

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code here

# Your code

====================================================================================================

PROMPT 50:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in LA.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 50:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in LA.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A list of lists, where each sublist contains:
	- The month number
	- The crime type
	- The count

Output Format:
	A single SQL statement, that is, a string.

Sample Input:
	[
		[1, 'mugging', 2],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[1, 'grand larceny', 3],
		[

====================================================================================================

PROMPT 51:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in New York.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 51:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in New York.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A list of lists of the form:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"Robbery",
			"Robbery",
			"Robbery",
			"Robbery",
			"Robbery",
			"Robbery",
			"Robbery"
		],
		[
			"Theft",
			"Theft",
			"Theft",
			"Theft",
			"Theft",
			"Theft",
			"Theft"
		],
		[
			"Assault",
			"Assault",
			"Assault",
			"Assault",
			"Assault",
			"Assault",
			"Assault"
		]
	]

Output Format:
	A list of lists of the form:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"Robbery",
			"Robbery",
			"Robbery",
			"Robbery",
			"Robbery",
			"Robbery",
			"Robbery"
		],
		[
			"Theft",
			"Theft",
			"Theft",
			"Theft",
			"Theft",
			"Theft",
			"Theft"
		],
		[
			"Assault",
			"Assault",
			"Assault",
			"Assault",
			"Assault",
			"Assault",
			"Assault"
		]
	]

Sample Input:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"Robbery",
			"Robbery",
			"Robbery",
			"Robbery",
			"Robbery",
			"Robbery",
			"Robbery"
		],
		[
			"Theft",
			"Theft",
			"Theft",
			"Theft",
			"Theft",
			"Theft",
			"Theft"
		],
		[
			"Assault",
			"Assault",
			"Assault",
			"Assault",
			"Assault",
			"Assault",
			"Assault"
		]
	]

Sample Output:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"Robbery",
			"Robbery",
			"Robbery",
			"Robbery",
			"Robbery",
			"Robbery",
			"Robbery"
		],
		[
			"Theft",
			"Theft",
			"Theft",
			"Theft",
			"Theft",
			"Theft",
			"Theft"
		],
		[
			"Assault",
			"Assault",
			"Assault",
			"Assault",
			"Assault",
			"Assault",
			"Assault"
		]
	]

Explanation:
	The crime count for each day of the week is:
	Monday: Robberies: 2, Thefts: 1, Assaults: 1
	Tuesday: Robberies: 1, Thefts: 1, Assaults: 1
	Wednesday: Robberies: 1, Thefts: 1, Assaults: 1
	Thursday: Robberies: 1, Thefts: 1, Assaults: 1
	Friday: Robberies: 1, Thefts: 1, Assaults: 1
	Saturday: Robberies: 1, Thefts: 1, Assaults: 1
	Sunday: Robberies: 1, Thefts: 1, Assaults: 1

"""

# Solution

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the countTriplets function below.
def countTriplets(arr, r):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            for k in range(j+1, len(arr)):
                if arr[i] * r == arr[j] * r and arr[j] * r == arr[k] * r:
                    count += 1
    return count

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    nr = input().rstrip().split()

    n = int(nr[0])

    r = int(nr[1])

    arr = list(map(int, input().rstrip().split()))

    ans = countTriplets(arr, r)

    fptr.write(str(ans) + '\n')

    fptr.close()


====================================================================================================

PROMPT 52:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in New York.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 52:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in New York.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	Input:
		What is the count of each crime type for each hour of the day in New York?
	Output:
		SELECT COUNT(DISTINCT(crimes.type)) FROM crimes
		WHERE crimes.hour = '1'
		GROUP BY crimes.hour;

"""

# Write your MySQL query statement below

SELECT COUNT(DISTINCT(crimes.type)) FROM crimes
WHERE crimes.hour = '1'
GROUP BY crimes.hour;


====================================================================================================

PROMPT 53:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in New York.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 53:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in New York.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	crime_type: String
	month: String
	year: String

Output:
	SQL statement: String
"""

def generate_sql(crime_type, month, year):
	# Your code here
	return "SELECT COUNT(*) FROM crime_incidents WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)

# Test cases
print(generate_sql("MURDER", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'MURDER' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'ROBBERY' AND month = 'JANUARY' AND year = '2015'

print(generate_sql("ROBBERY", "JANUARY", "2015"))
# Correct output:
# SELECT COUNT(

====================================================================================================

PROMPT 54:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in Philly.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 54:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in Philly.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
	"SUNDAY"
]

# Create a list of crimes for each day of the week
crimes_per_day = [
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"

====================================================================================================

PROMPT 55:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in Philly.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 55:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in Philly.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	crime_type: A string of the crime type.
	hour: An int of the hour.
	day: An int of the day.
	month: An int of the month.
	year: An int of the year.

Output:
	An SQL statement to answer the question.

'''

# Your code here

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format() method to create a string with placeholders
# for values. For example, "SELECT COUNT(*) FROM Table WHERE Name = {0}".format(name)
# will create a string with a placeholder for the value of name.

# HINT: You can use the .format()

====================================================================================================

PROMPT 56:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in Philly.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 56:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in Philly.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	crime_type: string, the crime type
	month: int, the month
	year: int, the year
	
Output:
	SQL statement, a single string.
	
'''

# Your code here

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)
# will create a string that is a valid SQL statement.

# HINT: You can use the .format() method to create SQL statements.
# For example,
# "SELECT COUNT(*) FROM crimes WHERE crime_type = '{}' AND month = '{}' AND year = '{}'".format(crime_type, month, year)

====================================================================================================

