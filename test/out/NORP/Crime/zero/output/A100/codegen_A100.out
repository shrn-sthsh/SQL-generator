PROMPT 1:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta on each day of the week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 1:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta on each day of the week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your SQL query statement below

SELECT
	DATE(crimes.date) as day,
	COUNT(crimes.id) as total_crimes
FROM
	crimes
GROUP BY
	DATE(crimes.date)
ORDER BY
	DATE(crimes.date)

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date) as day,
# 	COUNT(crimes.id) as total_crimes
# FROM
# 	crimes
# GROUP BY
# 	DATE(crimes.date)
# ORDER BY
# 	DATE(crimes.date)
# LIMIT
# 	1

# Answer

# SELECT
# 	DATE(crimes.date)

====================================================================================================

PROMPT 2:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta during each month of the year

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 2:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta during each month of the year

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your code here!

# Create a list of months
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Create a list of crimes
crimes = ['murder', 'rape', 'robbery', 'aggravated assault', 'property crime', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'grand larceny']

# Create a list of years
years = [str(i) for i in range(2000, 2019)]

# Create a list of months
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Create a list of crimes
crimes = ['murder', 'rape', 'robbery', 'aggravated assault', 'property crime', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'grand larceny']

# Create a list of years
years = [str(i) for i in range(2000, 2019)]

# Create a list of months
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Create a list of crimes
crimes = ['murder', 'rape', 'robbery', 'aggravated assault', 'property crime', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'grand larceny']

# Create a list of years
years = [str(i) for i in range(2000, 2019)]

# Create a list of months
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Create a list of crimes
crimes = ['murder', 'rape', 'robbery', 'aggravated assault', 'property crime', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'grand larceny']

# Create a list of years
years = [str(i) for i in range(2000, 2019)]

# Create a list of months
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Create a list of crimes
crimes = ['murder', 'rape', 'robbery', 'aggravated assault', 'property crime', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'grand larceny']

# Create a list of years
years = [str(i) for i in range(2000, 2019)]

# Create a list of months
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Create a list of crimes
crimes = ['murder', 'rape', 'robbery', 'aggravated assault', 'property crime', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'grand larceny']

# Create a list of years
years = [str(i) for i in range(2000, 2019)]

# Create a list of months
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Create a list of crimes
crimes = ['murder', 'rape', 'robbery', 'aggravated assault', 'property crime', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'grand larceny']

# Create a list of years
years = [str(i) for i in range(2000, 2019)]

# Create a list of months
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Create a list of crimes
crimes = ['murder', 'rape', 'robbery', 'aggravated assault', 'property crime', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'grand larceny']

# Create a list of years
years = [str(i) for i in range(2000, 2019)]

# Create a list of months
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Create a list of crimes
crimes = ['murder', 'rape', 'robbery', 'aggravated assault', 'property crime', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'grand larceny']

# Create a list of years
years = [str(i) for i in range(2000, 2019)]

# Create a list of months
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Create a list of crimes
crimes = ['murder', 'rape', 'robbery', 'aggravated assault', 'property crime', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'grand larceny']

# Create a list of years
years = [str(i) for i in range(2000, 2019)]

# Create a list of months
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Create a list of crimes
crimes = ['murder', 'rape', 'robbery', 'aggravated assault', 'property crime', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'grand larceny']

# Create a list of years
years = [str(i) for i in range(2000, 2019)]

# Create a list of months
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Create a list of crimes
crimes = ['murder', 'rape', 'robbery', 'aggravated assault', 'property crime', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'grand larceny']

# Create a list of years
years = [str(i) for i in range(2000, 2019)]

# Create a list of months
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Create a list of crimes
crimes = ['murder', 'rape', 'robbery', 'aggravated assault', 'property crime', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'grand larceny']

# Create a list of years
years = [str(i) for i in range(2000, 2019)]

# Create a list of months
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Create a list of crimes
crimes = ['murder', 'rape', 'robbery', 'aggravated assault', 'property crime', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'grand larceny']

# Create a list of years
years = [str(i) for i in range(2000, 2019)]

# Create a list of months
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Create a list of crimes
crimes = ['murder', 'rape', 'robbery', 'aggravated assault', 'property crime', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'grand larceny']

# Create a list of years
years = [str(i) for i in range(2000, 2019)]

# Create a list of months
months = ['January', 'February', 'March', 'April', 'May',

====================================================================================================

PROMPT 3:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta at each hour of the day

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 3:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta at each hour of the day

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the crimes in the database
crimes = [
	"Aggravated Assault",
	"Burglary",
	"Larceny",
	"Motor Vehicle Theft",
	"Robbery",
	"Rape",
	"Theft",
	"Vandalism"
]

# Create a list of all the hours in the database
hours = [
	"1",
	"2",
	"3",
	"4",
	"5",
	"6",
	"7",
	"8",
	"9",
	"10",
	"11",
	"12",
	"13",
	"14",
	"15",
	"16",
	"17",
	"18",
	"19",
	"20",
	"21",
	"22",
	"23",
	"24"
]

# Create a list of all the months in the database
months = [
	"January",
	"February",
	"March",
	"April",
	"May",
	"June",
	"July",
	"August",
	"September",
	"October",
	"November",
	"December"
]

# Create a list of all the years in the database
years = [
	"2000",
	"2001",
	"2002",
	"2003",
	"2004",
	"2005",
	"2006",
	"2007",
	"2008",
	"2009",
	"2010",
	"2011",
	"2012",
	"2013",
	"2014",
	"2015",
	"2016",
	"2017",
	"2018",
	"2019",
	"2020",
	"2021",
	"2022",
	"2023",
	"2024",
	"2025",
	"2026",
	"2027",
	"2028",
	"2029",
	"2030",
	"2031",
	"2032",
	"2033",
	"2034",
	"2035",
	"2036",
	"2037",
	"2038",
	"2039",
	"2040",
	"2041",
	"2042",
	"2043",
	"2044",
	"2045",
	"2046",
	"2047",
	"2048",
	"2049",
	"2050",
	"2051",
	"2052",
	"2053",
	"2054",
	"2055",
	"2056",
	"2057",
	"2058",
	"2059",
	"2060",
	"2061",
	"2062",
	"2063",
	"2064",
	"2065",
	"2066",
	"2067",
	"2068",
	"2069",
	"2070",
	"2071",
	"2072",
	"2073",
	"2074",
	"2075",
	"2076",
	"2077",
	"2078",
	"2079",
	"2080",
	"2081",
	"2082",
	"2083",
	"2084",
	"2085",
	"2086",
	"2087",
	"2088",
	"2089",
	"2090",
	"2091",
	"2092",
	"2093",
	"2094",
	"2095",
	"2096",
	"2097",
	"2098",
	"2099",
	"2100",
	"2101",
	"2102",
	"2103",
	"2104",
	"2105",
	"2106",
	"2107",
	"2108",
	"2109",
	"2110",
	"2111",
	"2112",
	"2113",
	"2114",
	"2115",
	"2116",
	"2117",
	"2118",
	"2119",
	"2120",
	"2121",
	"2122",
	"2123",
	"2124",
	"2125",
	"2126",
	"2127",
	"2128",
	"2129",
	"2130",
	"2131",
	"2132",
	"2133",
	"2134",
	"2135",
	"2136",
	"2137",
	"2138",
	"2139",
	"2140",
	"2141",
	"2142",
	"2143",
	"2144",
	"2145",
	"2146",
	"2147",
	"2148",
	"2149",
	"2150",
	"2151",
	"2152",
	"2153",
	"2154",
	"2155",
	"2156",
	"2157",
	"2158",
	"2159",
	"2160",
	"2161",
	"2162",
	"2163",
	"2164",
	"2165",
	"2166",
	"2167",
	"2168",
	"2169",
	"2170",
	"2171",
	"2172",
	"2173",
	"2174",
	"2175",
	"2176",
	"2177",
	"2178",
	"2179",
	"2180",
	"2181",
	"2182",
	"2183",
	"2184",
	"2185",
	"2186",
	"2187",
	"2188",
	"2189",
	"2190",
	"2191",
	"2192",
	"2193",
	"2194",
	"2195",
	"2196",
	"2197",
	"2198",
	"2199",
	"2200",
	"2201",
	"2202",
	"2203",
	"2204",
	"2205",
	"2206",
	"2207",
	"2208",
	"2209",
	"2210",
	"2211",
	"2212",
	"2213",
	"2214",
	"2215",
	"2216",
	"2217",
	"2218",
	"2219",
	"2220",
	"2221",
	"2222",
	"2223",
	"2224",
	"2225",
	"2226",
	"2227",
	"2228",
	"2229",
	"2230",
	"2231",
	"2232",
	"2233",
	"2234",
	"2235",
	"2236",
	"2237",
	"2238",
	"2239",
	"2240",
	"2241",
	"2242",
	"2243",
	"2244",
	"2245",
	"2246",
	"2247",
	"2248",
	"2249",
	"2250",
	"2251",
	"2252",
	"2253",
	"2254",
	"2255",
	"2256",
	"2257",
	"2258",
	"2259",
	"2260",
	"2261",
	"2262",
	"2263",
	"2264",
	"2265",
	"2266",
	"2267",
	"2268",
	"2269",
	"2270",
	"2271",
	"2272",
	"2273",
	"2274",
	"2275",
	"2276",
	"2277",
	"2278",
	"2279",
	"2280",
	"2281",
	"22

====================================================================================================

PROMPT 4:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in Atlanta grouped by week since January 2009

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 4:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in Atlanta grouped by week since January 2009

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to database
conn = psycopg2.connect(
	host = "localhost",
	database = "postgres",
	user = "postgres",
	password = "postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database and obtain data as Python objects
cur.execute("""
	SELECT COUNT(*)
	FROM crime_incidents
	WHERE crime_incidents.year >= 2009
	AND crime_incidents.month >= 1
	AND crime_incidents.month <= 12
	AND crime_incidents.day >= 1
	AND crime_incidents.day <= 31
	AND crime_incidents.hour >= 0
	AND crime_incidents.hour <= 23
	AND crime_incidents.minute >= 0
	AND crime_incidents.minute <= 59
	AND crime_incidents.second >= 0
	AND crime_incidents.second <= 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime_incidents.minute <> 0
	AND crime_incidents.second <> 0
	AND crime_incidents.hour <> 23
	AND crime_incidents.minute <> 59
	AND crime_incidents.second <> 59
	AND crime_incidents.hour <> 0
	AND crime

====================================================================================================

PROMPT 5:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA on each day of the week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 5:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA on each day of the week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A list of crimes in chronological order

Output Format:
	A SQL statement that answers the question

Sample Input:
	[
		"Murder",
		"Robbery",
		"Rape",
		"Murder",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",
		"Robbery",
		"Rape",


====================================================================================================

PROMPT 6:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA during each month of the year

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 6:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA during each month of the year

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A list of months in the year, in order, separated by commas.
	For example, January, February, March, April, May, June, July, August, September, October, November, December.

Constraints:
	1 <= len(months) <= 12
	1 <= len(months[i]) <= 3
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of the year
	months[i] is in uppercase
	months[i] is a valid month of

====================================================================================================

PROMPT 7:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA at each hour of the day

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 7:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA at each hour of the day

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- A list of crimes in the format:
		[
			{
				"hour": "12",
				"type": "mugging"
			},
			{
				"hour": "12",
				"type": "robbery"
			}
		]

Output:
	- An SQL statement that answers the question.
	- The SQL statement should be in the format:
		SELECT COUNT(*) FROM Crimes
		WHERE Type = 'robbery'
		AND Hour = 12;
"""

# Your code here

# Hint:
# You can use the following to get the current time:
# import datetime
# datetime.datetime.now().strftime("%H")

# You can also use the following to convert a string to a datetime object:
# datetime.datetime.strptime("2018-01-01", "%Y-%m-%d")

# You can also use the following to convert a datetime object to a string:
# datetime.datetime.strftime(datetime.datetime.now(), "%Y-%m-%d")

# You can also use the following to get the day of the week:
# datetime.datetime.now().strftime("%A")

# You can also use the following to get the day of the year:
# datetime.datetime.now().strftime("%j")

# You can also use the following to get the month:
# datetime.datetime.now().strftime("%B")

# You can also use the following to get the year:
# datetime.datetime.now().strftime("%Y")

# You can also use the following to get the current date:
# datetime.datetime.now().strftime("%Y-%m-%d")

# You can also use the following to get the current year:
# datetime.datetime.now().strftime("%Y")

# You can also use the following to get the current day of the week:
# datetime.datetime.now().strftime("%A")

# You can also use the following to get the current day of the year:
# datetime.datetime.now().strftime("%j")

# You can also use the following to get the current month:
# datetime.datetime.now().strftime("%B")

# You can also use the following to get the current year:
# datetime.datetime.now().strftime("%Y")

# You can also use the following to get the current date:
# datetime.datetime.now().strftime("%Y-%m-%d")

# You can also use the following to get the current day of the week:
# datetime.datetime.now().strftime("%A")

# You can also use the following to get the current day of the year:
# datetime.datetime.now().strftime("%j")

# You can also use the following to get the current month:
# datetime.datetime.now().strftime("%B")

# You can also use the following to get the current year:
# datetime.datetime.now().strftime("%Y")

# You can also use the following to get the current date:
# datetime.datetime.now().strftime("%Y-%m-%d")

# You can also use the following to get the current day of the week:
# datetime.datetime.now().strftime("%A")

# You can also use the following to get the current day of the year:
# datetime.datetime.now().strftime("%j")

# You can also use the following to get the current month:
# datetime.datetime.now().strftime("%B")

# You can also use the following to get the current year:
# datetime.datetime.now().strftime("%Y")

# You can also use the following to get the current date:
# datetime.datetime.now().strftime("%Y-%m-%d")

# You can also use the following to get the current day of the week:
# datetime.datetime.now().strftime("%A")

# You can also use the following to get the current day of the year:
# datetime.datetime.now().strftime("%j")

# You can also use the following to get the current month:
# datetime.datetime.now().strftime("%B")

# You can also use the following to get the current year:
# datetime.datetime.now().strftime("%Y")

# You can also use the following to get the current date:
# datetime.datetime.now().strftime("%Y-%m-%d")

# You can also use the following to get the current day of the week:
# datetime.datetime.now().strftime("%A")

# You can also use the following to get the current day of the year:
# datetime.datetime.now().strftime("%j")

# You can also use the following to get the current month:
# datetime.datetime.now().strftime("%B")

# You can also use the following to get the current year:
# datetime.datetime.now().strftime("%Y")

# You can also use the following to get the current date:
# datetime.datetime.now().strftime("%Y-%m-%d")

# You can also use the following to get the current day of the week:
# datetime.datetime.now().strftime("%A")

# You can also use the following to get the current day of the year:
# datetime.datetime.now().strftime("%j")

# You can also use the following to get the current month:
# datetime.datetime.now().strftime("%B")

# You can also use the following to get the current year:
# datetime.datetime.now().strftime("%Y")

# You can also use the following to get the current date:
# datetime.datetime.now().strftime("%Y-%m-%d")

# You can also use the following to get the current day of the week:
# datetime.datetime.now().strftime("%A")

# You can also use the following to get the current day of the year:
# datetime.datetime.now().strftime("%j")

# You can also use the following to get the current month:
# datetime.datetime.now().strftime("%B")

# You can also use the following to get the current year:
# datetime.datetime.now().strftime("%Y")

# You can also use the following to get the current date:
# datetime.datetime.now().strftime("%Y-%m-%d")

# You can also use the following to get the current day of the week:
# datetime.datetime.now().strftime("%A")

# You can also use the following to get the current day of the year:
# datetime.datetime.now().strftime("%j")

# You can also use the following to get the current month:
# datetime.datetime.now().strftime("%B")

# You can also use the following to get the current year:
# datetime.datetime.now().strftime("%Y")

# You can also use the following to get the current date:
# datetime.datetime.now().strftime("%Y-%m-%d")

# You can also use the following to get the current day of the week:
# datetime.datetime.now().strftime("%A")

# You can also use the following to get the current day of the year:
# datetime.datetime.now().strftime("%j")

# You can also use the following to get the current month:
# datetime.datetime.now().strftime("%B")

# You can also use the following to get the current year:
# datetime.datetime.now().strftime("%Y")

# You can also use the following to get the current date:
# datetime.datetime.now().strftime("%Y-%m-%d")

# You can also use the following to get the current day of the week:
# datetime.datetime.now().str

====================================================================================================

PROMPT 8:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in LA grouped by week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 8:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in LA grouped by week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd
import numpy as np

# Connect to database
conn = psycopg2.connect(database="postgres", user="postgres", password="postgres", host="localhost", port="5432")

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database to get the data
cur.execute("""
	SELECT
		CASE
			WHEN EXTRACT(WEEK FROM date) = 1
				THEN 'Monday'
			WHEN EXTRACT(WEEK FROM date) = 2
				THEN 'Tuesday'
			WHEN EXTRACT(WEEK FROM date) = 3
				THEN 'Wednesday'
			WHEN EXTRACT(WEEK FROM date) = 4
				THEN 'Thursday'
			WHEN EXTRACT(WEEK FROM date) = 5
				THEN 'Friday'
			WHEN EXTRACT(WEEK FROM date) = 6
				THEN 'Saturday'
			WHEN EXTRACT(WEEK FROM date) = 7
				THEN 'Sunday'
			ELSE 'INSUFFICIENT'
		END as day,
		COUNT(*)
	FROM crime_incidents
	GROUP BY
		CASE
			WHEN EXTRACT(WEEK FROM date) = 1
				THEN 'Monday'
			WHEN EXTRACT(WEEK FROM date) = 2
				THEN 'Tuesday'
			WHEN EXTRACT(WEEK FROM date) = 3
				THEN 'Wednesday'
			WHEN EXTRACT(WEEK FROM date) = 4
				THEN 'Thursday'
			WHEN EXTRACT(WEEK FROM date) = 5
				THEN 'Friday'
			WHEN EXTRACT(WEEK FROM date) = 6
				THEN 'Saturday'
			WHEN EXTRACT(WEEK FROM date) = 7
				THEN 'Sunday'
			ELSE 'INSUFFICIENT'
		END;
""")

# Convert query to a pandas dataframe
df = pd.DataFrame(cur.fetchall(), columns=['day', 'count'])

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Print the dataframe
print(df)

# Generate a response
response = "The total count of crimes in LA grouped by week is: " + str(df['count'].sum())

# Print the response
print(response)


====================================================================================================

PROMPT 9:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York on each day of the week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 9:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York on each day of the week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A single line of input containing the question.

Output Format:
	A single line of output containing the answer.

Sample Input:
	How many crimes occurred in New York on each day of the week?

Sample Output:
	SELECT COUNT(crimes.day) FROM crimes WHERE crimes.day = 'Monday'

Explanation:
	The question is asking for the number of crimes that occurred in New York on each day of the week.
	The most accurate way to answer this question is to select the day of the week and count the number of crimes.
	The SQL statement is:
	SELECT COUNT(crimes.day) FROM crimes WHERE crimes.day = 'Monday'
	
	The SQL statement is not accurate enough, so the program should return 'INSUFFICENT'

"""

# Solution

# Import your libraries
import pandas as pd

# Start writing code
df = pd.read_csv('Crimes_-_2001_to_present.csv')

# Your code goes here
df = df.groupby(['Day of Week'])['ID'].count()

df = df.reset_index()

df = df.rename(columns = {'ID':'COUNT'})

df = df.sort_values(by = 'COUNT', ascending = False)

df = df.head(1)

df = df.iloc[0,0]

if df == 0:
	print('INSUFFICENT')
else:
	print(df)


====================================================================================================

PROMPT 10:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York during each month of the year

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 10:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York during each month of the year

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- A list of tuples, each tuple is a crime record.
	- A list of months, in order.
	- A list of years, in order.
	- A list of crime types, in order.

Output:
	- A single SQL statement.
	- If the statement is not sufficient, return 'INSUFFICENT'
"""

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

# TODO: Your code here!

====================================================================================================

PROMPT 11:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York at each hour of the day

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 11:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York at each hour of the day

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	Input:
		What is the total number of crimes in New York?
	Output:
		SELECT COUNT(*) FROM crimes WHERE location = 'New York'

"""

# Write your code here!

# HINT: You can use the "WHERE" clause to filter the data.
# HINT: You can use the "GROUP BY" clause to aggregate the data.
# HINT: You can use the "ORDER BY" clause to sort the data.
# HINT: You can use the "LIMIT" clause to limit the data.
# HINT: You can use the "OFFSET" clause to offset the data.
# HINT: You can use the "IN" clause to check if a value is in a list.
# HINT: You can use the "LIKE" clause to check if a value is similar to a list.
# HINT: You can use the "BETWEEN" clause to check if a value is between two values.
# HINT: You can use the "HAVING" clause to filter the data.
# HINT: You can use the "OR" clause to combine two or more conditions.
# HINT: You can use the "AND" clause to combine two or more conditions.
# HINT: You can use the "NOT" clause to negate a condition.
# HINT: You can use the "IS NULL" clause to check if a value is null.
# HINT: You can use the "IS NOT NULL" clause to check if a value is not null.
# HINT: You can use the "IS TRUE" clause to check if a value is true.
# HINT: You can use the "IS FALSE" clause to check if a value is false.
# HINT: You can use the "IS UNKNOWN" clause to check if a value is unknown.
# HINT: You can use the "IS NOT TRUE" clause to check if a value is not true.
# HINT: You can use the "IS NOT FALSE" clause to check if a value is not false.
# HINT: You can use the "IS NOT UNKNOWN" clause to check if a value is not unknown.
# HINT: You can use the "IS NULL" clause to check if a value is null.
# HINT: You can use the "IS NOT NULL" clause to check if a value is not null.
# HINT: You can use the "IS TRUE" clause to check if a value is true.
# HINT: You can use the "IS FALSE" clause to check if a value is false.
# HINT: You can use the "IS UNKNOWN" clause to check if a value is unknown.
# HINT: You can use the "IS NOT TRUE" clause to check if a value is not true.
# HINT: You can use the "IS NOT FALSE" clause to check if a value is not false.
# HINT: You can use the "IS NOT UNKNOWN" clause to check if a value is not unknown.
# HINT: You can use the "IS IN" clause to check if a value is in a list.
# HINT: You can use the "IS NOT IN" clause to check if a value is not in a list.
# HINT: You can use the "IS NOT" clause to check if a value is not equal to another value.
# HINT: You can use the "IS" clause to check if a value is equal to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to check if a value is not similar to another value.
# HINT: You can use the "LIKE" clause to check if a value is similar to another value.
# HINT: You can use the "NOT LIKE" clause to

====================================================================================================

PROMPT 12:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in New York grouped by week since January 2023

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 12:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in New York grouped by week since January 2023

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd
import numpy as np
import re

# Connect to database
conn = psycopg2.connect(
	host = "localhost",
	port = "5432",
	database = "postgres",
	user = "postgres",
	password = "postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database and obtain data as Python objects
cur.execute("""
	SELECT
		CASE
			WHEN EXTRACT(WEEK FROM date) = 1
				THEN 'Monday'
			WHEN EXTRACT(WEEK FROM date) = 2
				THEN 'Tuesday'
			WHEN EXTRACT(WEEK FROM date) = 3
				THEN 'Wednesday'
			WHEN EXTRACT(WEEK FROM date) = 4
				THEN 'Thursday'
			WHEN EXTRACT(WEEK FROM date) = 5
				THEN 'Friday'
			WHEN EXTRACT(WEEK FROM date) = 6
				THEN 'Saturday'
			WHEN EXTRACT(WEEK FROM date) = 7
				THEN 'Sunday'
			ELSE 'INSUFFICIENT'
		END as day,
		COUNT(*) as count
	FROM
		crimes
	GROUP BY
		day
	ORDER BY
		day;
""")

# Obtain query results
rows = cur.fetchall()

# Close cursor
cur.close()

# Close connection
conn.close()

# Convert query results to a dataframe
df = pd.DataFrame(rows, columns=['day', 'count'])

# Print dataframe
print(df)

# Generate SQL statement
sql = """
	SELECT
		CASE
			WHEN EXTRACT(WEEK FROM date) = 1
				THEN 'Monday'
			WHEN EXTRACT(WEEK FROM date) = 2
				THEN 'Tuesday'
			WHEN EXTRACT(WEEK FROM date) = 3
				THEN 'Wednesday'
			WHEN EXTRACT(WEEK FROM date) = 4
				THEN 'Thursday'
			WHEN EXTRACT(WEEK FROM date) = 5
				THEN 'Friday'
			WHEN EXTRACT(WEEK FROM date) = 6
				THEN 'Saturday'
			WHEN EXTRACT(WEEK FROM date) = 7
				THEN 'Sunday'
			ELSE 'INSUFFICIENT'
		END as day,
		COUNT(*) as count
	FROM
		crimes
	GROUP BY
		day
	ORDER BY
		day;
"""

# Print SQL statement
print(sql)

# Obtain query results
rows = cur.fetchall()

# Close cursor
cur.close()

# Close connection
conn.close()

# Convert query results to a dataframe
df = pd.DataFrame(rows, columns=['day', 'count'])

# Print dataframe
print(df)

# Generate SQL statement
sql = """
	SELECT
		CASE
			WHEN EXTRACT(WEEK FROM date) = 1
				THEN 'Monday'
			WHEN EXTRACT(WEEK FROM date) = 2
				THEN 'Tuesday'
			WHEN EXTRACT(WEEK FROM date) = 3
				THEN 'Wednesday'
			WHEN EXTRACT(WEEK FROM date) = 4
				THEN 'Thursday'
			WHEN EXTRACT(WEEK FROM date) = 5
				THEN 'Friday'
			WHEN EXTRACT(WEEK FROM date) = 6
				THEN 'Saturday'
			WHEN EXTRACT(WEEK FROM date) = 7
				THEN 'Sunday'
			ELSE 'INSUFFICIENT'
		END as day,
		COUNT(*) as count
	FROM
		crimes
	GROUP BY
		day
	HAVING
		COUNT(*) > 1
	ORDER BY
		day;
"""

# Print SQL statement
print(sql)

# Obtain query results
rows = cur.fetchall()

# Close cursor
cur.close()

# Close connection
conn.close()

# Convert query results to a dataframe
df = pd.DataFrame(rows, columns=['day', 'count'])

# Print dataframe
print(df)

# Generate SQL statement
sql = """
	SELECT
		CASE
			WHEN EXTRACT(WEEK FROM date) = 1
				THEN 'Monday'
			WHEN EXTRACT(WEEK FROM date) = 2
				THEN 'Tuesday'
			WHEN EXTRACT(WEEK FROM date) = 3
				THEN 'Wednesday'
			WHEN EXTRACT(WEEK FROM date) = 4
				THEN 'Thursday'
			WHEN EXTRACT(WEEK FROM date) = 5
				THEN 'Friday'
			WHEN EXTRACT(WEEK FROM date) = 6
				THEN 'Saturday'
			WHEN EXTRACT(WEEK FROM date) = 7
				THEN 'Sunday'
			ELSE 'INSUFFICIENT'
		END as day,
		COUNT(*) as count
	FROM
		crimes
	GROUP BY
		day
	HAVING
		COUNT(*) > 1
	ORDER BY
		day;
"""

# Print SQL statement
print(sql)

# Obtain query results
rows = cur.fetchall()

# Close cursor
cur.close()

# Close connection
conn.close()

# Convert query results to a dataframe
df = pd.DataFrame(rows, columns=['day', 'count'])

# Print dataframe
print(df)

# Generate SQL statement
sql = """
	SELECT
		CASE
			WHEN EXTRACT(WEEK FROM date) = 1
				THEN 'Monday'
			WHEN EXTRACT(WEEK FROM date) = 2
				THEN 'Tuesday'
			WHEN EXTRACT(WEEK FROM date) = 3
				THEN 'Wednesday'
			WHEN EXTRACT(WEEK FROM date) = 4
				THEN 'Thursday'
			WHEN EXTRACT(WEEK FROM date) = 5
				THEN 'Friday'
			WHEN EXTRACT(WEEK FROM date) = 6
				THEN 'Saturday'
			WHEN EXTRACT(WEEK FROM date) = 7
				THEN 'Sunday'
			ELSE 'INSUFFICIENT'
		END as day,
		COUNT(*) as count
	FROM
		crimes
	GROUP BY
		day
	HAVING
		COUNT(*) > 1
	ORDER BY
		day;
"""

# Print SQL statement
print(sql)

# Obtain query results
rows = cur.fetchall()

# Close cursor
cur.close()

# Close connection
conn.close()

# Convert query results to a dataframe
df = pd.DataFrame(rows, columns=['day', 'count'])

# Print dataframe
print(df)

# Generate SQL statement
sql = """
	SELECT
		CASE
			WHEN EXTRACT(WEEK FROM date) = 1
				THEN 'Monday'
			WHEN EXTRACT(WEEK FROM date) = 2
				THEN 'Tuesday'
			WHEN EXTRACT(WEEK FROM date) = 3
				THEN 'Wednesday'
			WHEN EXTRACT(WEEK FROM date) = 4
				THEN 'Thursday'
			WHEN EXTRACT(WEEK FROM date) = 5
				THEN 'Friday'
			WHEN EXTRACT(WEEK FROM date) = 6
				THEN 'Saturday'
			WHEN EXTRACT(WEEK FROM date) = 7
				THEN 'Sunday'
			ELSE 'INSUFFICIENT'
		END as day,
		COUNT(*) as count
	FROM
		crimes
	GROUP BY
		day
	HAVING
		COUNT(*) > 1
	ORDER BY
		day;
"""

# Print SQL statement
print(sql)

# Obtain query results
rows = cur.fetchall()

# Close cursor
cur.close()

# Close connection
conn.close()

# Convert query

====================================================================================================

PROMPT 13:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly on each day of the week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 13:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly on each day of the week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- A list of crimes in the format of:
		[{'Crime': 'Robbery', 'Date': '2020-01-01'},
		{'Crime': 'Robbery', 'Date': '2020-01-02'},
		{'Crime': 'Robbery', 'Date': '2020-01-03'},
		{'Crime': 'Robbery', 'Date': '2020-01-04'},
		{'Crime': 'Robbery', 'Date': '2020-01-05'},
		{'Crime': 'Robbery', 'Date': '2020-01-06'},
		{'Crime': 'Robbery', 'Date': '2020-01-07'},
		{'Crime': 'Robbery', 'Date': '2020-01-08'},
		{'Crime': 'Robbery', 'Date': '2020-01-09'},
		{'Crime': 'Robbery', 'Date': '2020-01-10'},
		{'Crime': 'Robbery', 'Date': '2020-01-11'},
		{'Crime': 'Robbery', 'Date': '2020-01-12'},
		{'Crime': 'Robbery', 'Date': '2020-01-13'},
		{'Crime': 'Robbery', 'Date': '2020-01-14'},
		{'Crime': 'Robbery', 'Date': '2020-01-15'},
		{'Crime': 'Robbery', 'Date': '2020-01-16'},
		{'Crime': 'Robbery', 'Date': '2020-01-17'},
		{'Crime': 'Robbery', 'Date': '2020-01-18'},
		{'Crime': 'Robbery', 'Date': '2020-01-19'},
		{'Crime': 'Robbery', 'Date': '2020-01-20'},
		{'Crime': 'Robbery', 'Date': '2020-01-21'},
		{'Crime': 'Robbery', 'Date': '2020-01-22'},
		{'Crime': 'Robbery', 'Date': '2020-01-23'},
		{'Crime': 'Robbery', 'Date': '2020-01-24'},
		{'Crime': 'Robbery', 'Date': '2020-01-25'},
		{'Crime': 'Robbery', 'Date': '2020-01-26'},
		{'Crime': 'Robbery', 'Date': '2020-01-27'},
		{'Crime': 'Robbery', 'Date': '2020-01-28'},
		{'Crime': 'Robbery', 'Date': '2020-01-29'},
		{'Crime': 'Robbery', 'Date': '2020-01-30'},
		{'Crime': 'Robbery', 'Date': '2020-01-31'},
		{'Crime': 'Robbery', 'Date': '2020-02-01'},
		{'Crime': 'Robbery', 'Date': '2020-02-02'},
		{'Crime': 'Robbery', 'Date': '2020-02-03'},
		{'Crime': 'Robbery', 'Date': '2020-02-04'},
		{'Crime': 'Robbery', 'Date': '2020-02-05'},
		{'Crime': 'Robbery', 'Date': '2020-02-06'},
		{'Crime': 'Robbery', 'Date': '2020-02-07'},
		{'Crime': 'Robbery', 'Date': '2020-02-08'},
		{'Crime': 'Robbery', 'Date': '2020-02-09'},
		{'Crime': 'Robbery', 'Date': '2020-02-10'},
		{'Crime': 'Robbery', 'Date': '2020-02-11'},
		{'Crime': 'Robbery', 'Date': '2020-02-12'},
		{'Crime': 'Robbery', 'Date': '2020-02-13'},
		{'Crime': 'Robbery', 'Date': '2020-02-14'},
		{'Crime': 'Robbery', 'Date': '2020-02-15'},
		{'Crime': 'Robbery', 'Date': '2020-02-16'},
		{'Crime': 'Robbery', 'Date': '2020-02-17'},
		{'Crime': 'Robbery', 'Date': '2020-02-18'},
		{'Crime': 'Robbery', 'Date': '2020-02-19'},
		{'Crime': 'Robbery', 'Date': '2020-02-20'},
		{'Crime': 'Robbery', 'Date': '2020-02-21'},
		{'Crime': 'Robbery', 'Date': '2020-02-22'},
		{'Crime': 'Robbery', 'Date': '2020-02-23'},
		{'Crime': 'Robbery', 'Date': '2020-02-24'},
		{'Crime': 'Robbery', 'Date': '2020-02-25'},
		{'Crime': 'Robbery', 'Date': '2020-02-26'},
		{'Crime': 'Robbery', 'Date': '2020-02-27'},
		{'Crime': 'Robbery', 'Date': '2020-02-28'},
		{'Crime': 'Robbery', 'Date': '2020-02-29'},
		{'Crime': 'Robbery', 'Date': '2020-02-30'},
		{'Crime': 'Robbery', 'Date': '2020-02-31'},
		{'Crime': 'Robbery', 'Date': '2020-03-01'},
		{'Crime': 'Robbery', 'Date': '2020-03-02'},
		{'Crime': 'Robbery', 'Date': '2020-03-03'},
		{'Crime': 'Robbery', 'Date': '2020-03-04'},
		{'Crime': 'Robbery', 'Date': '2020-03-05'},
		{'Crime': 'Robbery', 'Date': '2020-03-06'},
		{'Crime': 'Robbery', 'Date': '2020-03-07'},
		{'Crime': 'Robbery', 'Date': '2020-03-08'},
		{'Crime': 'Robbery', 'Date': '2020-03-09'},
		{'Crime': 'Robbery', 'Date': '2020-03-10'},
		{'Crime': 'Robbery', 'Date': '2020-03-11'},
		{'Crime': 'Robbery', 'Date': '2020-03-12'},
		{'Crime': 'Robbery', 'Date': '2020-03-13'},
		{'Crime': 'Robbery', 'Date': '2020-03-14'},
		{'Crime': 'Robbery', 'Date': '2020-03-15'},
		{'Crime': 'Robbery', 'Date': '2020-03-16'},
		{'Crime': 'Robbery', 'Date': '2020-03-17'},
		{'Crime': 'Robbery', 'Date': '2020-03-18'},
		{'Crime': 'Robbery', 'Date': '2020-03-19'},
		{'Crime': 'Robbery', 'Date': '2020-03-20'},
		{'Crime': 'Robbery', 'Date': '2020-03-21'},
		{'Crime': 'Robbery', 'Date': '2020-03-22'},
		{'Crime': 'Robbery', 'Date': '2020-03-23'},
		{'Crime': 'Robbery', 'Date': '2020-03-24'},
		{'Crime': 'Robbery', 'Date': '2020-03-25'},
		{'Crime': 'Robbery', 'Date': '2020-03-26'},
		{'Crime': 'Robbery', 'Date': '2020-03-27'},
		{'Crime': 'Robbery', 'Date': '2020-03-28'},
		{'Crime': 'Robbery', 'Date': '2020-03-29'},
		{'Crime': 'Robbery', 'Date': '2020-03-30'},
		{'Crime': 'Robbery', 'Date': '2020-03-31'},
		{'Crime': 'Robbery', 'Date': '2020-04

====================================================================================================

PROMPT 14:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly during each month of the year

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 14:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly during each month of the year

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2

# Connect to database
conn = psycopg2.connect(
	host = "localhost",
	database = "postgres",
	user = "postgres",
	password = "postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT month, SUM(crimes)
	FROM crime_data
	GROUP BY month
	ORDER BY month;
""")

# Obtain the result
rows = cur.fetchall()

# Print the result
for row in rows:
	print(row)

# Close the cursor and the connection to so the server can allocate
# bandwidth to other requests
cur.close()
conn.close()

====================================================================================================

PROMPT 15:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly at each hour of the day

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 15:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly at each hour of the day

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- A list of crimes in the format:
	[
		{
			"type": "the type of crime",
			"time": "the time of the crime",
			"location": "the location of the crime"
		},
		{
			"type": "the type of crime",
			"time": "the time of the crime",
			"location": "the location of the crime"
		},
		...
	]

Output:
	- An SQL statement that answers the question.
	- If the question is not answered, return 'INSUFFICENT'.
"""

def generate_sql_statement(crimes):
	# TODO: Write the SQL statement here
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	#
	

====================================================================================================

PROMPT 16:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in Philly grouped by week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 16:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in Philly grouped by week

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of crimes
crimes = [
	"Theft",
	"Assault",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery

====================================================================================================

PROMPT 17:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of Atlanta

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 17:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of Atlanta

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of crimes in each area
crimes_in_each_area = [
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in the area:',
	'The following crimes are in

====================================================================================================

PROMPT 18:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of Atlanta give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 18:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of Atlanta give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A list of questions, each of which is a list of the following:
	[area, question, type]
	
	area: 
		The name of the area of interest, e.g. "East" or "West"
	
	question:
		The question to answer, e.g. "How many crimes were reported in the East area of Atlanta?"
	
	type:
		The type of the question, e.g. "count" or "date"
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

====================================================================================================

PROMPT 19:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of LA

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 19:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of LA

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of crimes in each area
crimes_in_each_area = [
	('Los Angeles', 'Los Angeles'),
	('San Diego', 'San Diego'),
	('San Francisco', 'San Francisco'),
	('San Jose', 'San Jose'),
	('Santa Clara', 'Santa Clara'),
	('Santa Cruz', 'Santa Cruz'),
	('Alameda', 'Alameda'),
	('Contra Costa', 'Contra Costa'),
	('Marin', 'Marin'),
	('Mariposa', 'Mariposa'),
	('Mendocino', 'Mendocino'),
	('Napa', 'Napa'),
	('Orange', 'Orange'),
	('Placer', 'Placer'),
	('Riverside', 'Riverside'),
	('San Mateo', 'San Mateo'),
	('Santa Clara', 'Santa Clara'),
	('Solano', 'Solano'),
	('Sonoma', 'Sonoma'),
	('Stanislaus', 'Stanislaus'),
	('Sutter', 'Sutter'),
	('Tehama', 'Tehama'),
	('Trinity', 'Trinity'),
	('Tulare', 'Tulare'),
	('Tuolumne', 'Tuolumne'),
	('Yolo', 'Yolo'),
	('Yuba', 'Yuba')
]

# Create a list of areas
areas = [
	'Los Angeles',
	'San Diego',
	'San Francisco',
	'San Jose',
	'Santa Clara',
	'Santa Cruz',
	'Alameda',
	'Contra Costa',
	'Marin',
	'Mariposa',
	'Mendocino',
	'Napa',
	'Orange',
	'Placer',
	'Riverside',
	'San Mateo',
	'Santa Clara',
	'Solano',
	'Sonoma',
	'Stanislaus',
	'Sutter',
	'Tehama',
	'Trinity',
	'Tulare',
	'Tuolumne',
	'Yolo',
	'Yuba'
]

# Create a list of crimes
crimes = [
	'Theft',
	'Assault',
	'Burglary',
	'Larceny',
	'Motor Vehicle Theft',
	'Robbery',
	'Arson',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Murder',
	'Mur

====================================================================================================

PROMPT 20:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of LA give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 20:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of LA give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	The crime data is in the file 'la_crime_data.csv'
	The question is in the file 'question.txt'

Output:
	The SQL statement is printed to the screen.

Sample output:
	SELECT
	  COUNT(*)
	  ,MAX(date)
	  ,SUM(CASE WHEN type = 'THEFT' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'ASSAULT' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'BATTERY' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'CRIMINAL DAMAGE' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'CRIMINAL TRESPASS' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'DECEPTIVE PRACTICE' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'DRIVING UNDER THE INFLUENCE' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'DRUG/NARCOTIC' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'FELONY ASSAULT' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'FORGERY/COUNTERFEITING' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'FRAUD' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'GAMBLING' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'HOMICIDE' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'HUMAN TRAFFICKING' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'LIQUOR LAWS' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'LOITERING' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'MISSING PERSON' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'OTHER OFFENSE' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'PORNOGRAPHY/OBSCENE MAT' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'PROSTITUTION' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'PUBLIC INDECENCY' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'ROBBERY' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'RUNAWAY' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'SECONDARY CODES' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'SEX OFFENSE' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'STOLEN PROPERTY' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'SUICIDE' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'TRESPASS' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'VANDALISM' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'VEHICLE THEFT' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'WARRANTS' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'WEAPONS LAWS' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NARCOTICS' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(CASE WHEN type = 'NON-CRIMINAL' THEN 1 ELSE 0 END)
	  ,SUM(C

====================================================================================================

PROMPT 21:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of New York

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 21:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of New York

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	Input: 
		How many crimes in Manhattan?
	Output:
		There are <number> in Manhattan.

"""

# Import statements
import pandas as pd

# Functions
def generate_sql(question):
	# Create a dataframe with the data
	df = pd.read_csv("nyc_crimes.csv")
	# Create a list of the areas
	areas = list(df["Area"].unique())
	# Create a list of the crimes
	crimes = list(df["Primary Type"].unique())
	# Create a list of the years
	years = list(df["Year"].unique())
	# Create a list of the months
	months = list(df["Month"].unique())
	# Create a list of the days
	days = list(df["Day"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list of the times
	times = list(df["Time"].unique())
	# Create a list

====================================================================================================

PROMPT 22:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of New York give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 22:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of New York give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A list of the areas of New York, in the order in which they are listed in the map.

Output Format:
	An SQL statement that answers the question.

Sample Input:
	['Manhattan', 'Brooklyn', 'Queens', 'Bronx', 'Staten Island']

Sample Output:
	SELECT
		COUNT(*) AS 'Total Crimes',
		MAX(date) AS 'Last Reported Date',
		COUNT(DISTINCT(type)) AS 'Most Common Crime',
		(SELECT COUNT(type) FROM crime_incidents WHERE type = 'Robbery' AND date > '2019-01-01' AND date < '2019-01-02' AND area = 'Brooklyn') / COUNT(DISTINCT(type)) * 100 AS 'Brooklyn Robbery',
		(SELECT COUNT(type) FROM crime_incidents WHERE type = 'Robbery' AND date > '2019-01-01' AND date < '2019-01-02' AND area = 'Manhattan' ) / COUNT(DISTINCT(type)) * 100 AS 'Manhattan Robbery',
		(SELECT COUNT(type) FROM crime_incidents WHERE type = 'Robbery' AND date > '2019-01-01' AND date < '2019-01-02' AND area = 'Queens' ) / COUNT(DISTINCT(type)) * 100 AS 'Queens Robbery',
		(SELECT COUNT(type) FROM crime_incidents WHERE type = 'Robbery' AND date > '2019-01-01' AND date < '2019-01-02' AND area = 'Bronx' ) / COUNT(DISTINCT(type)) * 100 AS 'Bronx Robbery',
		(SELECT COUNT(type) FROM crime_incidents WHERE type = 'Robbery' AND date > '2019-01-01' AND date < '2019-01-02' AND area = 'Staten Island' ) / COUNT(DISTINCT(type)) * 100 AS 'Staten Island Robbery'
	FROM crime_incidents
	WHERE area = 'Brooklyn'
	GROUP BY area;

Explanation:
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most common crime in Brooklyn is Robbery.
	The most common crime in Manhattan is Robbery.
	The most common crime in Queens is Robbery.
	The most common crime in Bronx is Robbery.
	The most common crime in Staten Island is Robbery.
	The most

====================================================================================================

PROMPT 23:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of Philly

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 23:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of Philly

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of crimes in each area
crimes_in_area = [
	"Theft",
	"Assault",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Aggravated Assault",
	"Property Crime",
	"Vehicle Crime",
	"Murder",
	"Burglary",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",
	"Larceny",


====================================================================================================

PROMPT 24:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of Philly give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 24:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of Philly give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	The crime data for the area of interest.

Output:
	An SQL statement that answers the question.

'''

# Import statements
import pandas as pd
import numpy as np

# Create a function to return the SQL statement
def sql_statement(df):
	# Create a list of the most common crime types
	crime_types = list(df['Primary Type'].value_counts().index)
	# Create a list of the most common crime types
	crime_types_count = list(df['Primary Type'].value_counts())
	# Create a list of the most common crime types
	crime_types_count_percent = [round(i/len(df),2) for i in crime_types_count]
	# Create a list of the most common crime types
	crime_types_count_percent_round = [round(i*100,2) for i in crime_types_count_percent]
	# Create a list of the most common crime types
	crime_types_count_percent_round_str = [str(i) for i in crime_types_count_percent_round]
	# Create a list of the most common crime types
	crime_types_count_percent_round_str_comma = [i + '%' for i in crime_types_count_percent_round_str]
	# Create a list of the most common crime types
	crime_types_count_percent_round_str_comma_str = [str(i) for i in crime_types_count_percent_round_str_comma]
	# Create a list of the most common crime types
	crime_types_count_percent_round_str_comma_str_comma = [i + ',' for i in crime_types_count_percent_round_str_comma_str]
	# Create a list of the most common crime types
	crime_types_count_percent_round_str_comma_str_comma_str = [i + '%' for i in crime_types_count_percent_round_str_comma_str_comma]
	# Create a list of the most common crime types
	crime_types_count_percent_round_str_comma_str_comma_str_comma = [i + ',' for i in crime_types_count_percent_round_str_comma_str_comma_str]
	# Create a list of the most common crime types
	crime_types_count_percent_round_str_comma_str_comma_str_comma_str = [i + '%' for i in crime_types_count_percent_round_str_comma_str_comma_str_comma_str]
	# Create a list of the most common crime types
	crime_types_count_percent_round_str_comma_str_comma_str_comma_str_comma = [i + ',' for i in crime_types_count_percent_round_str_comma_str_comma_str_comma_str_comma_str]
	# Create a list of the most common crime types
	crime_types_count_percent_round_str_comma_str_comma_str_comma_str_comma_str_comma = [i + '%' for i in crime_types_count_percent_round_str_comma_str_comma_str_comma_str_comma_str_comma_str]
	# Create a list of the most common crime types
	crime_types_count_percent_round_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma = [i + ',' for i in crime_types_count_percent_round_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str]
	# Create a list of the most common crime types
	crime_types_count_percent_round_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma = [i + '%' for i in crime_types_count_percent_round_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str]
	# Create a list of the most common crime types
	crime_types_count_percent_round_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_comma_str_

====================================================================================================

PROMPT 25:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Atlanta spaced by 0.01 degrees, give the most common crime type and its count

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 25:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Atlanta spaced by 0.01 degrees, give the most common crime type and its count

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A list of two lists, the first is a list of latitude values, the second is a list of longitude values.

Output Format:
	A single SQL statement.

Sample Input:
	[
		[
			[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0

====================================================================================================

PROMPT 26:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Atlanta spaced by 0.01 degrees, give the total crime count.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 26:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Atlanta spaced by 0.01 degrees, give the total crime count.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For latitude = 33.7, longitude = -84.3, the answer is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 33.7 AND 33.8 AND longitude BETWEEN -84.3 AND -84.2;

"""

# Import the required libraries
import psycopg2
import numpy as np

# Connect to the database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database
cur.execute("""SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN 33.7 AND 33.8 AND longitude BETWEEN -84.3 AND -84.2;""")

# Fetch the results
rows = cur.fetchall()

# Print the results
print(rows)

# Close the cursor
cur.close()

# Close the database connection
conn.close()


====================================================================================================

PROMPT 27:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of LA spaced by 0.01 degrees, give the total crime count.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 27:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of LA spaced by 0.01 degrees, give the total crime count.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	latitude: float
	longitude: float

Output:
	SQL statement: string
"""

def generate_sql_statement(latitude, longitude):
	# Your code here
	return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime"
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND {}".format(latitude, latitude+0.01, longitude, longitude+0.01)
	#return "SELECT COUNT(*) FROM crime WHERE latitude BETWEEN {} AND {} AND longitude BETWEEN {} AND

====================================================================================================

PROMPT 28:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of LA spaced by 0.01 degrees, give the most common crime type and its count

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 28:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of LA spaced by 0.01 degrees, give the most common crime type and its count

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	latitude, longitude

Output:
	SQL statement

'''

# Import the necessary libraries
import psycopg2
import numpy as np

# Connect to the database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")
cur = conn.cursor()

# Define the function
def generate_sql(latitude, longitude):
	# Define the SQL statement
	sql_statement = "SELECT crime_type, COUNT(crime_type) FROM crime_incidents WHERE latitude BETWEEN " + str(latitude - 0.01) + " AND " + str(latitude + 0.01) + " AND longitude BETWEEN " + str(longitude - 0.01) + " AND " + str(longitude + 0.01) + " GROUP BY crime_type ORDER BY COUNT(crime_type) DESC LIMIT 1"
	return sql_statement

# Define the function
def main():
	# Define the latitude and longitude
	latitude = 33.7
	longitude = -118.3
	# Generate the SQL statement
	sql_statement = generate_sql(latitude, longitude)
	# Execute the SQL statement
	cur.execute(sql_statement)
	# Fetch the results
	results = cur.fetchall()
	# Print the results
	print(results)

# Call the main function
if __name__ == "__main__":
	main()


====================================================================================================

PROMPT 29:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of New York spaced by 0.01 degrees, give the total crime count.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 29:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of New York spaced by 0.01 degrees, give the total crime count.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For latitude = -74.0, longitude = 40.0, the result is:
	SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN -74.0 AND -73.99 AND longitude BETWEEN 40.0 AND 40.01;

"""

# Import the required libraries
import psycopg2

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor()

# Define the SQL statement
sql = "SELECT COUNT(*) FROM crime_data WHERE latitude BETWEEN -74.0 AND -73.99 AND longitude BETWEEN 40.0 AND 40.01;"

# Execute the SQL statement
cur.execute(sql)

# Fetch the result
result = cur.fetchall()

# Print the result
print(result)

# Close the cursor
cur.close()

# Close the database connection
conn.close()

====================================================================================================

PROMPT 30:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of New York spaced by 0.01 degrees, give the most common crime type and its count

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 30:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of New York spaced by 0.01 degrees, give the most common crime type and its count

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For latitude = 40.715 and longitude = -73.935, the response would be:
	"The most common crime is MURDER, with a count of 1"

Input Format:
	A single line of two space-separated longitude and latitude values.

Constraints:
	Latitude and longitude values are in decimal degrees.
	The input is guaranteed to be within the boundaries of New York.

Output Format:
	A single line containing the most common crime type and its count.

Sample Input:
	40.715, -73.935

Sample Output:
	"The most common crime is MURDER, with a count of 1"

Explanation:
	The most common crime in New York is MURDER, with a count of 1.

"""

# Solution

# Import your libraries
import pandas as pd
import numpy as np

# Start writing code
df = pd.read_csv('nypd_arrests.csv')

# Convert the dataframe to a numpy array
arr = np.array(df)

# Get the unique crimes
crimes = np.unique(arr[:,1])

# Initialize a dictionary
d = {}

# Iterate over the unique crimes
for crime in crimes:
	# Get the rows of the dataframe where the crime is equal to the current crime
	rows = arr[arr[:,1] == crime]
	# Get the unique years
	years = np.unique(rows[:,0])
	# Initialize a list
	l = []
	# Iterate over the unique years
	for year in years:
		# Get the rows of the dataframe where the year is equal to the current year
		year_rows = rows[rows[:,0] == year]
		# Get the unique months
		months = np.unique(year_rows[:,2])
		# Initialize a list
		m = []
		# Iterate over the unique months
		for month in months:
			# Get the rows of the dataframe where the month is equal to the current month
			month_rows = year_rows[year_rows[:,2] == month]
			# Get the unique days
			days = np.unique(month_rows[:,3])
			# Initialize a list
			d = []
			# Iterate over the unique days
			for day in days:
				# Get the rows of the dataframe where the day is equal to the current day
				day_rows = month_rows[month_rows[:,3] == day]
				# Get the unique times
				times = np.unique(day_rows[:,4])
				# Initialize a list
				t = []
				# Iterate over the unique times
				for time in times:
					# Get the rows of the dataframe where the time is equal to the current time
					time_rows = day_rows[day_rows[:,4] == time]
					# Get the unique locations
					locations = np.unique(time_rows[:,5])
					# Initialize a list
					l = []
					# Iterate over the unique locations
					for location in locations:
						# Get the rows of the dataframe where the location is equal to the current location
						location_rows = time_rows[time_rows[:,5] == location]
						# Get the unique IDs
						ids = np.unique(location_rows[:,6])
						# Initialize a list
						i = []
						# Iterate over the unique IDs
						for id in ids:
							# Get the rows of the dataframe where the ID is equal to the current ID
							id_rows = location_rows[location_rows[:,6] == id]
							# Get the unique IDs
							ids = np.unique(id_rows[:,7])
							# Initialize a list
							i = []
							# Iterate over the unique IDs
							for id in ids:
								# Get the rows of the dataframe where the ID is equal to the current ID
								id_rows = id_rows[id_rows[:,7] == id]
								# Get the unique IDs
								ids = np.unique(id_rows[:,8])
								# Initialize a list
								i = []
								# Iterate over the unique IDs
								for id in ids:
									# Get the rows of the dataframe where the ID is equal to the current ID
									id_rows = id_rows[id_rows[:,8] == id]
									# Get the unique IDs
									ids = np.unique(id_rows[:,9])
									# Initialize a list
									i = []
									# Iterate over the unique IDs
									for id in ids:
										# Get the rows of the dataframe where the ID is equal to the current ID
										id_rows = id_rows[id_rows[:,9] == id]
										# Get the unique IDs
										ids = np.unique(id_rows[:,10])
										# Initialize a list
										i = []
										# Iterate over the unique IDs
										for id in ids:
											# Get the rows of the dataframe where the ID is equal to the current ID
											id_rows = id_rows[id_rows[:,10] == id]
											# Get the unique IDs
											ids = np.unique(id_rows[:,11])
											# Initialize a list
											i = []
											# Iterate over the unique IDs
											for id in ids:
												# Get the rows of the dataframe where the ID is equal to the current ID
												id_rows = id_rows[id_rows[:,11] == id]
												# Get the unique IDs
												ids = np.unique(id_rows[:,12])
												# Initialize a list
												i = []
												# Iterate over the unique IDs
												for id in ids:
													# Get the rows of the dataframe where the ID is equal to the current ID
													id_rows = id_rows[id_rows[:,12] == id]
													# Get the unique IDs
													ids = np.unique(id_rows[:,13])
													# Initialize a list
													i = []
													# Iterate over the unique IDs
													for id in ids:
														# Get the rows of the dataframe where the ID is equal to the current ID
														id_rows = id_rows[id_rows[:,13] == id]
														# Get the unique IDs
														ids = np.unique(id_rows[:,14])
														# Initialize a list
														i = []
														# Iterate over the unique IDs
														for id in ids:
															# Get the rows of the dataframe where the ID is equal to the current ID
															id_rows = id_rows[id_rows[:,14] == id]
															# Get the unique IDs
															ids = np.unique(id_rows[:,15])
															# Initialize a list
															i = []
															# Iterate over the unique IDs
															for id in ids:
																# Get the rows of the dataframe where the ID is equal to the current ID
																id_rows = id_rows[id_rows[:,15] == id]
																# Get the unique IDs
																ids = np.unique(id_rows[:,16])
																# Initialize a list
																i = []
																# Iterate over the unique IDs
																for id in ids:
																	# Get the rows of the dataframe where the ID is equal to the current ID
																	id_rows = id_rows[id_rows[:,16] == id]
																	# Get the unique IDs
																	ids = np.unique(id_rows[:,17])
																	# Initialize a list
																	i = []
																	# Iterate over the unique IDs
																	for id in ids:
																		# Get the rows of the dataframe where the ID is equal

====================================================================================================

PROMPT 31:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the total crime count.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 31:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the total crime count.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0
	
	The total crime count is:
	
	For latitude: -75.0
	For longitude: -75.0

====================================================================================================

PROMPT 32:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the most common crime type and its count

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 32:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the most common crime type and its count

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	latitude, longitude

Output:
	SQL statement
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

====================================================================================================

PROMPT 33:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in Atlanta

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 33:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in Atlanta

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of crimes
crimes = [
	"murder",
	"rape",
	"robbery",
	"aggravated assault",
	"property crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burglary",
	"larceny",
	"motor vehicle theft",
	"arson",
	"vehicle crime",
	"burg

====================================================================================================

PROMPT 34:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in Atlanta, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 34:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in Atlanta, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For example, if the question is:
		How many total crimes have there been in the city of Atlanta?
	The answer should be:
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
	
	If the question is:
		What is the total count of crimes in the city of Atlanta?
	The answer should be:
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
	
	If the question is:
		What is the last reported date of the crime with the most reported incidents in the city of Atlanta?
	The answer should be:
		SELECT MAX(date) FROM crime_incidents WHERE area = 'Atlanta'
	
	If the question is:
		What is the last reported area of the crime with the most reported incidents in the city of Atlanta?
	The answer should be:
		SELECT MAX(area) FROM crime_incidents WHERE area = 'Atlanta'
	
	If the question is:
		What is the most common area of crime in the city of Atlanta?
	The answer should be:
		SELECT area FROM crime_incidents GROUP BY area ORDER BY COUNT(*) DESC LIMIT 1
	
	If the question is:
		What is the percentage increase in the number of crimes in the city of Atlanta by week?
	The answer should be:
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta'
		/
		SELECT COUNT(*) FROM crime_incidents WHERE area = 'Atlanta

====================================================================================================

PROMPT 35:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in LA

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 35:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in LA

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	Input: 
		What is the total count of crimes in LA?
	Output:
		SELECT COUNT(crimes.id) FROM crimes;

"""

# Your code here

# Hint: 
# 1. You can use the count() function to get the count of a particular crime.
# 2. You can use the IN operator to check if a particular crime is in the list.
# 3. You can use the GROUP BY operator to get the count of each crime.
# 4. You can use the ORDER BY operator to sort the crimes.
# 5. You can use the LIMIT operator to get the first n records.
# 6. You can use the DISTINCT operator to get the distinct crimes.
# 7. You can use the UNION operator to combine two or more queries.
# 8. You can use the UNION ALL operator to combine two or more queries.
# 9. You can use the EXCEPT operator to get the difference between two or more queries.
# 10. You can use the INTERSECT operator to get the intersection between two or more queries.
# 11. You can use the EXTRACT operator to get the year, month, and day of a particular date.
# 12. You can use the DATE_PART operator to get the year, month, and day of a particular date.
# 13. You can use the BETWEEN operator to check if a particular date is between two other dates.
# 14. You can use the LIKE operator to check if a particular string is in another string.
# 15. You can use the INSTR operator to check if a particular substring is in another string.
# 16. You can use the LOWER function to convert a string to lower case.
# 17. You can use the UPPER function to convert a string to upper case.
# 18. You can use the SUBSTRING function to get a substring from a string.
# 19. You can use the TRIM function to remove any leading and trailing spaces from a string.
# 20. You can use the SUBSTR function to get a substring from a string.
# 21. You can use the CONCAT function to concatenate two or more strings.
# 22. You can use the CONCAT_WS function to concatenate two or more strings.
# 23. You can use the CHAR_LENGTH function to get the length of a string.
# 24. You can use the LTRIM function to remove any leading spaces from a string.
# 25. You can use the RTRIM function to remove any trailing spaces from a string.
# 26. You can use the REPLACE function to replace a substring in a string.
# 27. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 28. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 29. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 30. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 31. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 32. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 33. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 34. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 35. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 36. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 37. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 38. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 39. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 40. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 41. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 42. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 43. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 44. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 45. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 46. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 47. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 48. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 49. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 50. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 51. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 52. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 53. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 54. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 55. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 56. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 57. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 58. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 59. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 60. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 61. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 62. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 63. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 64. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 65. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 66. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 67. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 68. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 69. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 70. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 71. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 72. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 73. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 74. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 75. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 76. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 77. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 78. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 79. You can use the COUNT function to get the number of times a particular substring appears in a string.
# 80. You can use the COUNT function to get the number

====================================================================================================

PROMPT 36:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in LA, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 36:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in LA, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	The crime type, the year, and the week.

Output:
	An SQL statement that answers the question.

Sample output:
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = 'THEFT' AND year = '2016' AND week = '1'
	SELECT COUNT(*) FROM crime_inc

====================================================================================================

PROMPT 37:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in New York

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 37:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in New York

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	crime_type: A string of the crime type.
	
	city: A string of the city.
	
	state: A string of the state.
	
	year: A string of the year.
	
	month: A string of the month.
	
	day: A string of the day.
	
	hour: A string of the hour.
	
	minute: A string of the minute.
	
	second: A string of the second.
	
	latitude: A string of the latitude.
	
	longitude: A string of the longitude.
	
	location: A string of the location.
	
	
Output:
	A single SQL statement.
	
	
Sample Input:
	crime_type: "murder"
	
	city: "new york"
	
	state: "new york"
	
	year: "2018"
	
	month: "1"
	
	day: "1"
	
	hour: "0"
	
	minute: "0"
	
	second: "0"
	
	latitude: "40.7"
	
	longitude: "74.0"
	
	location: "east"
	
	
Sample Output:
	SELECT COUNT(*) FROM crime_incidents
	WHERE crime_type = "murder"
	AND city = "new york"
	AND state = "new york"
	AND year = "2018"
	AND month = "1"
	AND day = "1"
	AND hour = "0"
	AND minute = "0"
	AND second = "0"
	AND latitude = "40.7"
	AND longitude = "74.0"
	AND location = "east"
	
	
Explanation:
	The crime type is murder, the city is new york, the state is new york,
	the year is 2018, the month is 1, the day is 1, the hour is 0, the
	minute is 0, the second is 0, the latitude is 40.7, the longitude is
	74.0, and the location is east.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


====================================================================================================

PROMPT 38:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in New York, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 38:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in New York, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	The crime type and the year.

Output:
	An SQL statement that answers the question.

Sample Input:
	"THEFT"
	"2016"

Sample Output:
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT MAX(date) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND year = "2016"
	SELECT COUNT(*) FROM crime_incidents WHERE crime_type = "THEFT" AND

====================================================================================================

PROMPT 39:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in Philly

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 39:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in Philly

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of crimes
crimes = [
	"Theft",
	"Assault",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",

====================================================================================================

PROMPT 40:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in Philly, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 40:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in Philly, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	The crime type, the number of crimes, the last reported date, the last reported area, the most common area, and the percentage increase in the number of crimes.

Output:
	An SQL statement to answer the question.

Sample Input:
	"MURDER"
	"1"
	"2015-01-01"
	"Philadelphia"
	"Philadelphia"
	"0.0"

Sample Output:
	"SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0"

'''

# Write your MySQL query statement below

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER' AND last_reported_date = '2015-01-01' AND last_reported_area = 'PHILADELPHIA' AND most_common_area = 'PHILADELPHIA' AND percentage_increase = 0.0

# SELECT COUNT(*) FROM crimes WHERE crime_type = 'MURDER'

====================================================================================================

PROMPT 41:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in Atlanta, give count of each crime type.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 41:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in Atlanta, give count of each crime type.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the crimes in the database
crimes = [
	'Aggravated Assault',
	'Burglary',
	'Larceny-Theft',
	'Motor Vehicle Theft',
	'Robbery',
	'Rape',
	'Larceny-Theft',
	'Arson',
	'Homicide',
	'Assault',
	'Burglary',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'Larceny-Theft',
	'L

====================================================================================================

PROMPT 42:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in LA, give count of each crime type.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 42:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in LA, give count of each crime type.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	- A list of crime types, in the order in which they are listed in the database.
	- A list of areas, in the order in which they are listed in the database.

Output:
	- An SQL statement that answers the question.

'''

# Import statements
import psycopg2

# Connect to the database
conn = psycopg2.connect(database="postgres", user="postgres", password="postgres", host="localhost", port="5432")

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database to get the list of crime types
cur.execute("SELECT DISTINCT(crime_type) FROM crime_incidents;")

# Get the list of crime types
crime_types = cur.fetchall()

# Query the database to get the list of areas
cur.execute("SELECT DISTINCT(area) FROM crime_incidents;")

# Get the list of areas
areas = cur.fetchall()

# Close the cursor
cur.close()

# Close the database connection
conn.close()

# Create a list of tuples, where each tuple is a crime type
crime_type_list = []
for crime_type in crime_types:
	crime_type_list.append(crime_type[0])

# Create a list of tuples, where each tuple is an area
area_list = []
for area in areas:
	area_list.append(area[0])

# Create a list of tuples, where each tuple is a tuple of a crime type and an area
crime_type_area_list = []
for crime_type in crime_type_list:
	for area in area_list:
		crime_type_area_list.append((crime_type, area))

# Create a list of tuples, where each tuple is a tuple of a crime type and an area
# and the count of that crime type in that area
crime_type_area_count_list = []
for crime_type_area in crime_type_area_list:
	crime_type = crime_type_area[0]
	area = crime_type_area[1]
	cur.execute("SELECT COUNT(crime_type) FROM crime_incidents WHERE crime_type = %s AND area = %s;", (crime_type, area))
	crime_type_area_count = cur.fetchall()
	crime_type_area_count_list.append((crime_type_area, crime_type_area_count[0][0]))

# Create a list of tuples, where each tuple is a tuple of a crime type and an area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the count of that crime type in that area
# and the

====================================================================================================

PROMPT 43:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in New York, give count of each crime type.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 43:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in New York, give count of each crime type.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A list of crimes in New York.

Output Format:
	An SQL statement that answers the question.

Sample Input:
	[
		"Robbery",
		"Theft",
		"Arson",
		"Assault",
		"Burglary",
		"Larceny",
		"Motor Vehicle Theft",
		"Murder",
		"Rape",
		"Violence"
	]

Sample Output:
	SELECT COUNT(*) FROM Crime
	WHERE Crime = 'Robbery'
	OR Crime = 'Theft'
	OR Crime = 'Arson'
	OR Crime = 'Assault'
	OR Crime = 'Burglary'
	OR Crime = 'Larceny'
	OR Crime = 'Motor Vehicle Theft'
	OR Crime = 'Murder'
	OR Crime = 'Rape'
	OR Crime = 'Violence'
	;

Explanation:
	The most accurate SQL statement is:
	SELECT COUNT(*) FROM Crime
	WHERE Crime = 'Robbery'
	OR Crime = 'Theft'
	OR Crime = 'Arson'
	OR Crime = 'Assault'
	OR Crime = 'Burglary'
	OR Crime = 'Larceny'
	OR Crime = 'Motor Vehicle Theft'
	OR Crime = 'Murder'
	OR Crime = 'Rape'
	OR Crime = 'Violence'
	;

'''

# Solution

# Import your libraries
import pandas as pd

# Start writing code
df = pd.read_csv('crime_data.csv')

# Create a list of crimes
crimes = df['Crime'].unique()

# Create a list of SQL statements
statements = []

# Loop through the crimes
for crime in crimes:
	# Create a query to select the count of the crime
	query = "SELECT COUNT(*) FROM Crime WHERE Crime = '{}'".format(crime)
	# Append the query to the list
	statements.append(query)

# Join the list of statements into a single string
query = " ".join(statements)

# Print the query
print(query)


====================================================================================================

PROMPT 44:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in Philly, give count of each crime type.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 44:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in Philly, give count of each crime type.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	crime_type: a string, the crime type
	area: a string, the area
	
Output:
	An SQL statement to answer the question.
	
'''

# Your code here

# Hint: Use the .format() method to insert variables into strings.
# The .format() method is new to Python 3, and is a great way to insert variables into strings.
# For example, "I'm going to {} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in "I'm going to go my car".

# Hint: You can use the .format() method to insert variables into strings.
# For example, "I'm going to {0} my car".format('go') would result in

====================================================================================================

PROMPT 45:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in Atlanta.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 45:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in Atlanta.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your MySQL query statement below

SELECT
	DATE(crimes.date) as day,
	COUNT(crimes.crime_type) as count
FROM
	crimes
GROUP BY
	DATE(crimes.date)
ORDER BY
	day;


====================================================================================================

PROMPT 46:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in Atlanta.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 46:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in Atlanta.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	crime_type: A string of the crime type.
	hour: A string of the hour of the day.
	latitude: A string of the latitude of the location.
	longitude: A string of the longitude of the location.

Output:
	An SQL statement that answers the question.

'''

# Your code here

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude = '{latitude}' AND
# longitude = '{longitude}'".

# HINT: You can use the .format() method to create a string of the
# form "SELECT COUNT(crime_type) FROM crime_data WHERE crime_type =
# '{crime_type}' AND hour = '{hour}' AND latitude =

====================================================================================================

PROMPT 47:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in Atlanta.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 47:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in Atlanta.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a query to get the count of each crime type for each month in Atlanta.
# Use the GROUP BY and ORDER BY keywords.
# Use the GROUP BY keyword to group the results by month.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword to order the results by count.
# Use the LIMIT keyword to limit the number of results.
# Use the ORDER BY keyword

====================================================================================================

PROMPT 48:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in LA.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 48:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in LA.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A list of lists of the form:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"robbery",
			"murder",
			"theft",
			"assault",
			"burglary",
			"larceny",
			"all"
		]
	]

Output Format:
	A list of lists of the form:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"robbery",
			"murder",
			"theft",
			"assault",
			"burglary",
			"larceny",
			"all"
		]
	]

Sample Input:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"robbery",
			"murder",
			"theft",
			"assault",
			"burglary",
			"larceny",
			"all"
		]
	]

Sample Output:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"robbery",
			"murder",
			"theft",
			"assault",
			"burglary",
			"larceny",
			"all"
		]
	]

Explanation:
	The crime count for each day of the week is:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"robbery",
			"murder",
			"theft",
			"assault",
			"burglary",
			"larceny",
			"all"
		]
	]
	
	The crime count for each day of the week is:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"robbery",
			"murder",
			"theft",
			"assault",
			"burglary",
			"larceny",
			"all"
		]
	]
	
	The crime count for each day of the week is:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"robbery",
			"murder",
			"theft",
			"assault",
			"burglary",
			"larceny",
			"all"
		]
	]
	
	The crime count for each day of the week is:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"robbery",
			"murder",
			"theft",
			"assault",
			"burglary",
			"larceny",
			"all"
		]
	]
	
	The crime count for each day of the week is:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"robbery",
			"murder",
			"theft",
			"assault",
			"burglary",
			"larceny",
			"all"
		]
	]
	
	The crime count for each day of the week is:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"robbery",
			"murder",
			"theft",
			"assault",
			"burglary",
			"larceny",
			"all"
		]
	]
	
	The crime count for each day of the week is:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"robbery",
			"murder",
			"theft",
			"assault",
			"burglary",
			"larceny",
			"all"
		]
	]
	
	The crime count for each day of the week is:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"robbery",
			"murder",
			"theft",
			"assault",
			"burglary",
			"larceny",
			"all"
		]
	]
	
	The crime count for each day of the week is:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"robbery",
			"murder",
			"theft",
			"assault",
			"burglary",
			"larceny",
			"all"
		]
	]
	
	The crime count for each day of the week is:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"robbery",
			"murder",
			"theft",
			"assault",
			"burglary",
			"larceny",
			"all"
		]
	]
	
	The crime count for each day of the week is:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"robbery",
			"murder",
			"theft",
			"assault",
			"burglary",
			"larceny",
			"all"
		]
	]
	
	The crime count for each day of the week is:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"robbery",
			"murder",
			"theft",
			"assault",
			"burglary",
			"larceny",
			"all"
		]
	]
	
	The crime count for each day of the week is:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"robbery",
			"murder",
			"theft",
			"assault",
			"burglary",
			"larceny",
			"all"
		]
	]
	
	The crime count for each day of the week is:
	[
		[
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday"
		],
		[
			"robbery",
			"murder",
			"theft",
			"assault",
			"burglary",
			"larceny",
			"all"
		]
	]
	
	The crime count for each day of the week is:
	[
		

====================================================================================================

PROMPT 49:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in LA.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 49:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in LA.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	Input:
		What is the count of each crime type for each hour of the day in LA?
	Output:
		SELECT COUNT(DISTINCT(crimes.type)) FROM crimes
		WHERE crimes.hour = '1'
		GROUP BY crimes.type
		ORDER BY COUNT(DISTINCT(crimes.type)) DESC;

"""

# Write your MySQL query statement below

SELECT COUNT(DISTINCT(crimes.type)) FROM crimes
WHERE crimes.hour = '1'
GROUP BY crimes.type
ORDER BY COUNT(DISTINCT(crimes.type)) DESC;


====================================================================================================

PROMPT 50:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in LA.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 50:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in LA.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	crime_type: A string representing the crime type.
	month: A string representing the month.
	year: A string representing the year.

Output:
	A single SQL statement.
"""

# Your code here

# Hint:
# 1. You can use the .format() method to concatenate strings.
# 2. You can use the .format() method to concatenate strings.
# 3. You can use the .format() method to concatenate strings.
# 4. You can use the .format() method to concatenate strings.
# 5. You can use the .format() method to concatenate strings.
# 6. You can use the .format() method to concatenate strings.
# 7. You can use the .format() method to concatenate strings.
# 8. You can use the .format() method to concatenate strings.
# 9. You can use the .format() method to concatenate strings.
# 10. You can use the .format() method to concatenate strings.
# 11. You can use the .format() method to concatenate strings.
# 12. You can use the .format() method to concatenate strings.
# 13. You can use the .format() method to concatenate strings.
# 14. You can use the .format() method to concatenate strings.
# 15. You can use the .format() method to concatenate strings.
# 16. You can use the .format() method to concatenate strings.
# 17. You can use the .format() method to concatenate strings.
# 18. You can use the .format() method to concatenate strings.
# 19. You can use the .format() method to concatenate strings.
# 20. You can use the .format() method to concatenate strings.
# 21. You can use the .format() method to concatenate strings.
# 22. You can use the .format() method to concatenate strings.
# 23. You can use the .format() method to concatenate strings.
# 24. You can use the .format() method to concatenate strings.
# 25. You can use the .format() method to concatenate strings.
# 26. You can use the .format() method to concatenate strings.
# 27. You can use the .format() method to concatenate strings.
# 28. You can use the .format() method to concatenate strings.
# 29. You can use the .format() method to concatenate strings.
# 30. You can use the .format() method to concatenate strings.
# 31. You can use the .format() method to concatenate strings.
# 32. You can use the .format() method to concatenate strings.
# 33. You can use the .format() method to concatenate strings.
# 34. You can use the .format() method to concatenate strings.
# 35. You can use the .format() method to concatenate strings.
# 36. You can use the .format() method to concatenate strings.
# 37. You can use the .format() method to concatenate strings.
# 38. You can use the .format() method to concatenate strings.
# 39. You can use the .format() method to concatenate strings.
# 40. You can use the .format() method to concatenate strings.
# 41. You can use the .format() method to concatenate strings.
# 42. You can use the .format() method to concatenate strings.
# 43. You can use the .format() method to concatenate strings.
# 44. You can use the .format() method to concatenate strings.
# 45. You can use the .format() method to concatenate strings.
# 46. You can use the .format() method to concatenate strings.
# 47. You can use the .format() method to concatenate strings.
# 48. You can use the .format() method to concatenate strings.
# 49. You can use the .format() method to concatenate strings.
# 50. You can use the .format() method to concatenate strings.
# 51. You can use the .format() method to concatenate strings.
# 52. You can use the .format() method to concatenate strings.
# 53. You can use the .format() method to concatenate strings.
# 54. You can use the .format() method to concatenate strings.
# 55. You can use the .format() method to concatenate strings.
# 56. You can use the .format() method to concatenate strings.
# 57. You can use the .format() method to concatenate strings.
# 58. You can use the .format() method to concatenate strings.
# 59. You can use the .format() method to concatenate strings.
# 60. You can use the .format() method to concatenate strings.
# 61. You can use the .format() method to concatenate strings.
# 62. You can use the .format() method to concatenate strings.
# 63. You can use the .format() method to concatenate strings.
# 64. You can use the .format() method to concatenate strings.
# 65. You can use the .format() method to concatenate strings.
# 66. You can use the .format() method to concatenate strings.
# 67. You can use the .format() method to concatenate strings.
# 68. You can use the .format() method to concatenate strings.
# 69. You can use the .format() method to concatenate strings.
# 70. You can use the .format() method to concatenate strings.
# 71. You can use the .format() method to concatenate strings.
# 72. You can use the .format() method to concatenate strings.
# 73. You can use the .format() method to concatenate strings.
# 74. You can use the .format() method to concatenate strings.
# 75. You can use the .format() method to concatenate strings.
# 76. You can use the .format() method to concatenate strings.
# 77. You can use the .format() method to concatenate strings.
# 78. You can use the .format() method to concatenate strings.
# 79. You can use the .format() method to concatenate strings.
# 80. You can use the .format() method to concatenate strings.
# 81. You can use the .format() method to concatenate strings.
# 82. You can use the .format() method to concatenate strings.
# 83. You can use the .format() method to concatenate strings.
# 84. You can use the .format() method to concatenate strings.
# 85. You can use the .format() method to concatenate strings.
# 86. You can use the .format() method to concatenate strings.
# 87. You can use the .format() method to concatenate strings.
# 88. You can use the .format() method to concatenate strings.
# 89. You can use the .format() method to concatenate strings.
# 90. You can use the .format() method to concatenate strings.
# 91. You can use the .format() method to concatenate strings.
# 92. You can use the .format() method to concatenate strings.
# 93. You can use the .format() method to concatenate strings.
# 94. You can use the .format() method to concatenate strings.
# 95. You can use the .format() method to concatenate strings.
# 96. You can use the .format() method to concatenate strings.
# 97. You can use the .format() method to concatenate strings.
# 98. You can use the .format() method to concatenate strings.
# 99. You can use the .format() method to concatenate strings.
# 100. You can use the .format() method to concatenate strings.
# 101. You can use the .format() method to concatenate strings.
# 102. You can use the .format() method to concatenate strings.
# 103. You can use the .format() method to concatenate strings.
# 104. You can use the .format() method to concatenate strings.
# 105. You can use the .format() method to concatenate strings.
# 106. You can use the .format() method to concatenate strings.
# 107. You can use the .format() method to concatenate strings

====================================================================================================

PROMPT 51:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in New York.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 51:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in New York.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Write your MySQL query statement below

SELECT 
	COUNT(DISTINCT(crimes.type)) as "Number of Crimes",
	DAY(crimes.date) as "Day of the Week"
FROM
	crimes
GROUP BY
	DAY(crimes.date)
ORDER BY
	DAY(crimes.date)


====================================================================================================

PROMPT 52:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in New York.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 52:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in New York.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	Input:
		What is the count of each crime type for each hour of the day in New York?
	Output:
		SELECT COUNT(DISTINCT(crimes.type)) AS "count"
		FROM crimes
		WHERE crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'
		AND crimes.date_time LIKE '%2020-01-01%'

====================================================================================================

PROMPT 53:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in New York.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 53:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in New York.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	Input:
		What is the count of each crime type for each month in New York?
	Output:
		SELECT month, crime_type, COUNT(crime_type) FROM crime GROUP BY month, crime_type;

"""

# Write your MySQL query statement below

SELECT month, crime_type, COUNT(crime_type) FROM crime GROUP BY month, crime_type;


====================================================================================================

PROMPT 54:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in Philly.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 54:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in Philly.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input Format:
	A list of crimes in the following format:
	[
		{
			"type": "the_type_of_crime",
			"day_of_week": "the_day_of_the_week",
			"time_of_day": "the_time_of_day"
		},
		{
			"type": "the_type_of_crime",
			"day_of_week": "the_day_of_the_week",
			"time_of_day": "the_time_of_day"
		}
	]

Output Format:
	A single SQL statement.

Sample Input:
	[
		{
			"type": "murder",
			"day_of_week": "Monday",
			"time_of_day": "morning"
		},
		{
			"type": "murder",
			"day_of_week": "Monday",
			"time_of_day": "afternoon"
		},
		{
			"type": "murder",
			"day_of_week": "Tuesday",
			"time_of_day": "morning"
		},
		{
			"type": "murder",
			"day_of_week": "Tuesday",
			"time_of_day": "afternoon"
		},
		{
			"type": "murder",
			"day_of_week": "Wednesday",
			"time_of_day": "morning"
		},
		{
			"type": "murder",
			"day_of_week": "Wednesday",
			"time_of_day": "afternoon"
		},
		{
			"type": "murder",
			"day_of_week": "Thursday",
			"time_of_day": "morning"
		},
		{
			"type": "murder",
			"day_of_week": "Thursday",
			"time_of_day": "afternoon"
		},
		{
			"type": "murder",
			"day_of_week": "Friday",
			"time_of_day": "morning"
		},
		{
			"type": "murder",
			"day_of_week": "Friday",
			"time_of_day": "afternoon"
		},
		{
			"type": "murder",
			"day_of_week": "Saturday",
			"time_of_day": "morning"
		},
		{
			"type": "murder",
			"day_of_week": "Saturday",
			"time_of_day": "afternoon"
		},
		{
			"type": "murder",
			"day_of_week": "Sunday",
			"time_of_day": "morning"
		},
		{
			"type": "murder",
			"day_of_week": "Sunday",
			"time_of_day": "afternoon"
		}
	]

Sample Output:
	SELECT COUNT(*) FROM crimes
	WHERE day_of_week = "Monday"
	AND time_of_day = "morning"
	OR day_of_week = "Monday"
	AND time_of_day = "afternoon"
	OR day_of_week = "Tuesday"
	AND time_of_day = "morning"
	OR day_of_week = "Tuesday"
	AND time_of_day = "afternoon"
	OR day_of_week = "Wednesday"
	AND time_of_day = "morning"
	OR day_of_week = "Wednesday"
	AND time_of_day = "afternoon"
	OR day_of_week = "Thursday"
	AND time_of_day = "morning"
	OR day_of_week = "Thursday"
	AND time_of_day = "afternoon"
	OR day_of_week = "Friday"
	AND time_of_day = "morning"
	OR day_of_week = "Friday"
	AND time_of_day = "afternoon"
	OR day_of_week = "Saturday"
	AND time_of_day = "morning"
	OR day_of_week = "Saturday"
	AND time_of_day = "afternoon"
	OR day_of_week = "Sunday"
	AND time_of_day = "morning"
	OR day_of_week = "Sunday"
	AND time_of_day = "afternoon"

Explanation:
	The crime count for Monday is 2, for Tuesday is 2, for Wednesday is 2, for Thursday is 2, for Friday is 1, for Saturday is 1, and for Sunday is 1.
	The most common crime is murder, and the most common time of day to commit a murder is in the morning.

"""

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the countCrimes function below.
def countCrimes(crimes):
    # create a dictionary to store the count of each crime
    crime_count = {}
    # loop through the crimes
    for crime in crimes:
        # if the crime is in the dictionary, increment the count
        if crime["type"] in crime_count:
            crime_count[crime["type"]] += 1
        # otherwise, add the crime to the dictionary
        else:
            crime_count[crime["type"]] = 1
    # create a list to store the count of each day of the week
    day_count = [0,0,0,0,0,0,0]
    # loop through the crimes
    for crime in crimes:
        # if the day of the week is in the list, increment the count
        if crime["day_of_week"] in day_count:
            day_count[day_count.index(crime["day_of_week"])] += 1
        # otherwise, add the day of the week to the list
        else:
            day_count.append(crime["day_of_week"])
            day_count[day_count.index(crime["day_of_week"])] += 1
    # create a list to store the count of each time of the day
    time_count = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

====================================================================================================

PROMPT 55:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in Philly.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 55:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in Philly.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of crimes
crimes = [
	"Theft",
	"Assault",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Vehicle Theft",
	"Arson",
	"Murder",
	"Murder and Nonnegligent Manslaughter",
	"Rape",
	"Sex Crimes",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",
	"Robbery",
	"Larceny",
	"Vandalism",
	"Burglary",

====================================================================================================

PROMPT 56:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in Philly.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 56:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in Philly.

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of months
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Create a list of crimes
crimes = ['murder', 'rape', 'robbery', 'aggravated assault', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson', 'drugs', 'weapons', 'theft', 'vehicle theft', 'burglary', 'larceny', 'motor vehicle theft', 'arson

====================================================================================================

