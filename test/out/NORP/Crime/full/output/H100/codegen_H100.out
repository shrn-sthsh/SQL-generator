PROMPT 1:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta on each day of the week

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 1:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta on each day of the week

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Create a cursor
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT
		CASE
			WHEN DATE_PART('dow', CAST(Crime_Date as DATE)) = 1 THEN 'Monday'
			WHEN DATE_PART('dow', CAST(Crime_Date as DATE)) = 2 THEN 'Tuesday'
			WHEN DATE_PART('dow', CAST(Crime_Date as DATE)) = 3 THEN 'Wednesday'
			WHEN DATE_PART('dow', CAST(Crime_Date as DATE)) = 4 THEN 'Thursday'
			WHEN DATE_PART('dow', CAST(Crime_Date as DATE)) = 5 THEN 'Friday'
			WHEN DATE_PART('dow', CAST(Crime_Date as DATE)) = 6 THEN 'Saturday'
			WHEN DATE_PART('dow', CAST(Crime_Date as DATE)) = 7 THEN 'Sunday'
			ELSE 'INSUFFICENT'
		END,
		COUNT(Crime_ID)
	FROM
		la_crime_data
	GROUP BY
		1
	ORDER BY
		1
	;
""")

# Fetch the results
rows = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Create a dataframe
df = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the dataframe
print(df)

# Create a new dataframe
df2 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df2)

# Create a new dataframe
df3 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df3)

# Create a new dataframe
df4 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df4)

# Create a new dataframe
df5 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df5)

# Create a new dataframe
df6 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df6)

# Create a new dataframe
df7 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df7)

# Create a new dataframe
df8 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df8)

# Create a new dataframe
df9 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df9)

# Create a new dataframe
df10 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df10)

# Create a new dataframe
df11 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df11)

# Create a new dataframe
df12 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df12)

# Create a new dataframe
df13 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df13)

# Create a new dataframe
df14 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df14)

# Create a new dataframe
df15 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df15)

# Create a new dataframe
df16 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df16)

# Create a new dataframe
df17 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df17)

# Create a new dataframe
df18 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df18)

# Create a new dataframe
df19 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df19)

# Create a new dataframe
df20 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df20)

# Create a new dataframe
df21 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df21)

# Create a new dataframe
df22 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df22)

# Create a new dataframe
df23 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df23)

# Create a new dataframe
df24 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df24)

# Create a new dataframe
df25 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df25)

# Create a new dataframe
df26 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe
print(df26)

# Create a new dataframe
df27 = pd.DataFrame(rows, columns = ['Day_of_Week', 'Number_of_Crimes'])

# Print the new dataframe


====================================================================================================

PROMPT 2:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta during each month of the year

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 2:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta during each month of the year

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT
	    COUNT(DISTINCT(Crime_ID))
	FROM
	    la_crime_data
	WHERE
	    Crime_Date = '2020-01-01'
	""")

# Fetch the results
results = cur.fetchall()

# Close the cursor
cur.close()

# Close the database connection
conn.close()

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

# Print the results
print(results)

#

====================================================================================================

PROMPT 3:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta at each hour of the day

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 3:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta at each hour of the day

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes

====================================================================================================

PROMPT 4:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in Atlanta grouped by week since January 2009

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 4:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in Atlanta grouped by week since January 2009

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd
import numpy as np

# Connect to database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Create a cursor
cur = conn.cursor()

# Query the database
cur.execute("""
    SELECT COUNT(*)
    FROM la_crime_data
    WHERE Crime_Date > '2009-01-01'
""")

# Save the results
results = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Print the results
print(results)

# Print the results
print(results)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create

====================================================================================================

PROMPT 5:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA on each day of the week

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 5:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA on each day of the week

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Create a cursor
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT
		COUNT(*)
	FROM
		la_crime_data
	WHERE
		Crime_Date = '2020-01-01'
	""")

# Fetch the results
rows = cur.fetchall()

# Print the results
print(rows)

# Close the cursor
cur.close()

# Close the connection
conn.close()

====================================================================================================

PROMPT 6:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA during each month of the year

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 6:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA during each month of the year

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Create a cursor
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT
		COUNT(Crime_ID)
	FROM
		la_crime_data
	WHERE
		Crime_Date = '2020-01-01'
	;
""")

# Fetch the results
rows = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Print the results
print(rows)

# Print the number of rows
print(len(rows))

# Print the first row
print(rows[0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column
print(rows[0][0])

# Print the first row's first column


====================================================================================================

PROMPT 7:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA at each hour of the day

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 7:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA at each hour of the day

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database
cur.execute("""
    SELECT
        CASE
            WHEN crime_date = '2020-01-01' THEN 'January 1'
            WHEN crime_date = '2020-01-02' THEN 'January 2'
            WHEN crime_date = '2020-01-03' THEN 'January 3'
            WHEN crime_date = '2020-01-04' THEN 'January 4'
            WHEN crime_date = '2020-01-05' THEN 'January 5'
            WHEN crime_date = '2020-01-06' THEN 'January 6'
            WHEN crime_date = '2020-01-07' THEN 'January 7'
            WHEN crime_date = '2020-01-08' THEN 'January 8'
            WHEN crime_date = '2020-01-09' THEN 'January 9'
            WHEN crime_date = '2020-01-10' THEN 'January 10'
            WHEN crime_date = '2020-01-11' THEN 'January 11'
            WHEN crime_date = '2020-01-12' THEN 'January 12'
            WHEN crime_date = '2020-01-13' THEN 'January 13'
            WHEN crime_date = '2020-01-14' THEN 'January 14'
            WHEN crime_date = '2020-01-15' THEN 'January 15'
            WHEN crime_date = '2020-01-16' THEN 'January 16'
            WHEN crime_date = '2020-01-17' THEN 'January 17'
            WHEN crime_date = '2020-01-18' THEN 'January 18'
            WHEN crime_date = '2020-01-19' THEN 'January 19'
            WHEN crime_date = '2020-01-20' THEN 'January 20'
            WHEN crime_date = '2020-01-21' THEN 'January 21'
            WHEN crime_date = '2020-01-22' THEN 'January 22'
            WHEN crime_date = '2020-01-23' THEN 'January 23'
            WHEN crime_date = '2020-01-24' THEN 'January 24'
            WHEN crime_date = '2020-01-25' THEN 'January 25'
            WHEN crime_date = '2020-01-26' THEN 'January 26'
            WHEN crime_date = '2020-01-27' THEN 'January 27'
            WHEN crime_date = '2020-01-28' THEN 'January 28'
            WHEN crime_date = '2020-01-29' THEN 'January 29'
            WHEN crime_date = '2020-01-30' THEN 'January 30'
            WHEN crime_date = '2020-01-31' THEN 'January 31'
            WHEN crime_date = '2020-02-01' THEN 'February 1'
            WHEN crime_date = '2020-02-02' THEN 'February 2'
            WHEN crime_date = '2020-02-03' THEN 'February 3'
            WHEN crime_date = '2020-02-04' THEN 'February 4'
            WHEN crime_date = '2020-02-05' THEN 'February 5'
            WHEN crime_date = '2020-02-06' THEN 'February 6'
            WHEN crime_date = '2020-02-07' THEN 'February 7'
            WHEN crime_date = '2020-02-08' THEN 'February 8'
            WHEN crime_date = '2020-02-09' THEN 'February 9'
            WHEN crime_date = '2020-02-10' THEN 'February 10'
            WHEN crime_date = '2020-02-11' THEN 'February 11'
            WHEN crime_date = '2020-02-12' THEN 'February 12'
            WHEN crime_date = '2020-02-13' THEN 'February 13'
            WHEN crime_date = '2020-02-14' THEN 'February 14'
            WHEN crime_date = '2020-02-15' THEN 'February 15'
            WHEN crime_date = '2020-02-16' THEN 'February 16'
            WHEN crime_date = '2020-02-17' THEN 'February 17'
            WHEN crime_date = '2020-02-18' THEN 'February 18'
            WHEN crime_date = '2020-02-19' THEN 'February 19'
            WHEN crime_date = '2020-02-20' THEN 'February 20'
            WHEN crime_date = '2020-02-21' THEN 'February 21'
            WHEN crime_date = '2020-02-22' THEN 'February 22'
            WHEN crime_date = '2020-02-23' THEN 'February 23'
            WHEN crime_date = '2020-02-24' THEN 'February 24'
            WHEN crime_date = '2020-02-25' THEN 'February 25'
            WHEN crime_date = '2020-02-26' THEN 'February 26'
            WHEN crime_date = '2020-02-27' THEN 'February 27'
            WHEN crime_date = '2020-02-28' THEN 'February 28'
            WHEN crime_date = '2020-02-29' THEN 'February 29'
            WHEN crime_date = '2020-02-30' THEN 'February 30'
            WHEN crime_date = '2020-02-31' THEN 'February 31'
            WHEN crime_date = '2020-03-01' THEN 'March 1'
            WHEN crime_date = '2020-03-02' THEN 'March 2'
            WHEN crime_date = '2020-03-03' THEN 'March 3'
            WHEN crime_date = '2020-03-04' THEN 'March 4'
            WHEN crime_date = '2020-03-05' THEN 'March 5'
            WHEN crime_date = '2020-03-06' THEN 'March 6'
            WHEN crime_date = '2020-03-07' THEN 'March 7'
            WHEN crime_date = '2020-03-08' THEN 'March 8'
            WHEN crime_date = '2020-03-09' THEN 'March 9'
            WHEN crime_date = '2020-03-10' THEN 'March 10'
            WHEN crime_date = '2020-03-11' THEN 'March 11'
            WHEN crime_date = '2020-03-12' THEN 'March 12'
            WHEN crime_date = '2020-03-13' THEN 'March 13'
            WHEN crime_date = '2020-03-14' THEN 'March 14'
            WHEN crime_date = '2020-03-15' THEN 'March 15'
            WHEN crime_date = '2020-03-16' THEN 'March 16'
            WHEN crime_date = '2020-03-17' THEN 'March 17'
            WHEN crime_date = '2020-03-18' THEN 'March 18'
            WHEN crime_date = '2020-03-19' THEN 'March 19'
            WHEN crime_date = '2020-03-20' THEN 'March 20'
            WHEN crime_date = '2020-03-21' THEN 'March 21'
            WHEN crime_date = '2020-03-22' THEN 'March 22'


====================================================================================================

PROMPT 8:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in LA grouped by week

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 8:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in LA grouped by week

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd
import numpy as np

# Connect to database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Create a cursor
cur = conn.cursor()

# Query
cur.execute("""
	SELECT
	    COUNT(DISTINCT(Crime_ID))
	FROM
	    la_crime_data
	GROUP BY
	    DATE_PART('week', Crime_Date)
	ORDER BY
	    DATE_PART('week', Crime_Date)
	""")

# Fetch the results
rows = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Create a dataframe
df = pd.DataFrame(rows, columns = ['Count'])

# Print the dataframe
print(df)

# Create a new dataframe
df2 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df2)

# Create a new dataframe
df3 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df3)

# Create a new dataframe
df4 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df4)

# Create a new dataframe
df5 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df5)

# Create a new dataframe
df6 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df6)

# Create a new dataframe
df7 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df7)

# Create a new dataframe
df8 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df8)

# Create a new dataframe
df9 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df9)

# Create a new dataframe
df10 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df10)

# Create a new dataframe
df11 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df11)

# Create a new dataframe
df12 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df12)

# Create a new dataframe
df13 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df13)

# Create a new dataframe
df14 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df14)

# Create a new dataframe
df15 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df15)

# Create a new dataframe
df16 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df16)

# Create a new dataframe
df17 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df17)

# Create a new dataframe
df18 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df18)

# Create a new dataframe
df19 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df19)

# Create a new dataframe
df20 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df20)

# Create a new dataframe
df21 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df21)

# Create a new dataframe
df22 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df22)

# Create a new dataframe
df23 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df23)

# Create a new dataframe
df24 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df24)

# Create a new dataframe
df25 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df25)

# Create a new dataframe
df26 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df26)

# Create a new dataframe
df27 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df27)

# Create a new dataframe
df28 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df28)

# Create a new dataframe
df29 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df29)

# Create a new dataframe
df30 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df30)

# Create a new dataframe
df31 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df31)

# Create a new dataframe
df32 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df32)

# Create a new dataframe
df33 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df33)

# Create a new dataframe
df34 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df34)

# Create a new dataframe
df35 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df35)

# Create a new dataframe
df36 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df36)

# Create a new dataframe
df37 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df37)

# Create a new dataframe
df38 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df38)

# Create a new dataframe
df39 = pd.DataFrame(rows, columns = ['Count'])

# Print the new dataframe
print(df39)

# Create a new dataframe
df40 = pd.DataFrame(rows, columns = ['Count'])

====================================================================================================

PROMPT 9:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York on each day of the week

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 9:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York on each day of the week

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import datetime

# Connect to database
conn = psycopg2.connect(
    host="localhost",
    database="postgres",
    user="postgres",
    password="postgres"
)

# Create a cursor
cur = conn.cursor()

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return most_recent_date

# Create a function to get the most recent date
def get_most_recent_date():
    # Get the most recent date
    cur.execute("SELECT max(Crime_Date) FROM atlanta_crime_data;")
    most_recent_date = cur.fetchone()[0]
    return

====================================================================================================

PROMPT 10:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York during each month of the year

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 10:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York during each month of the year

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Create a cursor
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude
	FROM
	    la_crime_data
	WHERE
	    la_crime_data.Crime_Date = '2020-01-01'
	ORDER BY
	    la_crime_data.Crime_ID
	;
""")

# Save the results
results = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a list of the unique crime types
crime_types = df['Crime_Type'].unique()

# Create a list of the unique areas
areas = df['Area_Name'].unique()

# Create a list of the unique months
months = df['Crime_Date'].unique()

# Create a list of the unique years
years = df['Crime_Date'].str.split('-').str[0].unique()

# Create a list of the unique days
days = df['Crime_Date'].str.split('-').str[1].unique()

# Create a list of the unique times
times = df['Crime_Time'].unique()

# Create a list of the unique weapons
weapons = df['Weapon_Desc'].unique()

# Create a list of the unique addresses
addresses = df['Address'].unique()

# Create a list of the unique latitudes
latitudes = df['Latitude'].unique()

# Create a list of the unique longitudes
longitudes = df['Longitude'].unique()

# Create a list of the unique victim ages
victim_ages = df['Vict_Age'].unique()

# Create a list of the unique victim sexes
victim_sexes = df['Vict_Sex'].unique()

# Create a list of the unique crime classes
crime_classes = df['Crime_Class'].unique()

# Create a list of the unique crime types
crime_types = df['Crime_Type'].unique()

# Create a list of the unique areas
areas = df['Area_Name'].unique()

# Create a list of the unique months
months = df['Crime_Date'].unique()

# Create a list of the unique years
years = df['Crime_Date'].str.split('-').str[0].unique()

# Create a list of the unique days
days = df['Crime_Date'].str.split('-').str[1].unique()

# Create a list of the unique times
times = df['Crime_Time'].unique()

# Create a list of the unique weapons
weapons = df['Weapon_Desc'].unique()

# Create a list of the unique addresses
addresses = df['Address'].unique()

# Create a list of the unique latitudes
latitudes = df['Latitude'].unique()

# Create a list of the unique longitudes
longitudes = df['Longitude'].unique()

# Create a list of the unique victim ages
victim_ages = df['Vict_Age'].unique()

# Create a list of the unique victim sexes
victim_sexes = df['Vict_Sex'].unique()

# Create a list of the unique crime classes
crime_classes = df['Crime_Class'].unique()

# Create a list of the unique crime types
crime_types = df['Crime_Type'].unique()

# Create a list of the unique areas
areas = df['Area_Name'].unique()

# Create a list of the unique months
months = df['Crime_Date'].unique()

# Create a list of the unique years
years = df['Crime_Date'].str.split('-').str[0].unique()

# Create a list of the unique days
days = df['Crime_Date'].str.split('-').str[1].unique()

# Create a list of the unique times
times = df['Crime_Time'].unique()

# Create a list of the unique weapons
weapons = df['Weapon_Desc'].unique()

# Create a list of the unique addresses
addresses = df['Address'].unique()

# Create a list of the unique latitudes
latitudes = df['Latitude'].unique()

# Create a list of the unique longitudes
longitudes = df['Longitude'].unique()

# Create a list of the unique victim ages
victim_ages = df['Vict_Age'].unique()

# Create a list of the unique victim sexes
victim_sexes = df['Vict_Sex'].unique()

# Create a list of the unique crime classes
crime_classes = df['Crime_Class'].unique()

# Create a list of the unique crime types
crime_types = df['Crime_Type'].unique()

# Create a list of the unique areas
areas = df['Area_Name'].unique()

# Create a list of the unique months
months = df['Crime_Date'].unique()

# Create a list of the unique years
years = df['Crime_Date'].str.split('-').str[0].unique()

# Create a list of the unique days
days = df['Crime_Date'].str.split('-').str[1].unique()

# Create a list of the unique times
times = df['Crime_Time'].unique()

# Create a list of the unique weapons
weapons = df['Weapon_Desc'].unique()

# Create a list of the unique addresses
addresses = df['Address'].unique()

# Create a list of the unique latitudes
latitudes = df['Latitude'].unique()

# Create a list of the unique longitudes
longitudes = df['Longitude'].unique()

# Create a list of the unique victim ages
victim_ages = df['Vict_Age'].unique()

# Create a list of the unique victim sexes
victim_sexes = df['Vict_Sex'].unique()

# Create a list of the unique crime classes
crime_classes = df['Crime_Class'].unique()

# Create a list of the unique crime types
crime_types = df['Crime_Type'].unique()

# Create a list of the unique areas
areas = df['Area_Name'].unique()

# Create a list of the unique months
months = df['Crime_Date'].unique()

# Create a list of the unique years
years = df['Crime_Date'].str.split('-').str[0].unique()

# Create

====================================================================================================

PROMPT 11:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York at each hour of the day

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 11:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York at each hour of the day

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database
cur.execute("""
    SELECT
        CASE
            WHEN Crime_Date = '2018-01-01' THEN 'January'
            WHEN Crime_Date = '2018-01-02' THEN 'February'
            WHEN Crime_Date = '2018-01-03' THEN 'March'
            WHEN Crime_Date = '2018-01-04' THEN 'April'
            WHEN Crime_Date = '2018-01-05' THEN 'May'
            WHEN Crime_Date = '2018-01-06' THEN 'June'
            WHEN Crime_Date = '2018-01-07' THEN 'July'
            WHEN Crime_Date = '2018-01-08' THEN 'August'
            WHEN Crime_Date = '2018-01-09' THEN 'September'
            WHEN Crime_Date = '2018-01-10' THEN 'October'
            WHEN Crime_Date = '2018-01-11' THEN 'November'
            WHEN Crime_Date = '2018-01-12' THEN 'December'
            WHEN Crime_Date = '2018-01-13' THEN 'January'
            WHEN Crime_Date = '2018-01-14' THEN 'February'
            WHEN Crime_Date = '2018-01-15' THEN 'March'
            WHEN Crime_Date = '2018-01-16' THEN 'April'
            WHEN Crime_Date = '2018-01-17' THEN 'May'
            WHEN Crime_Date = '2018-01-18' THEN 'June'
            WHEN Crime_Date = '2018-01-19' THEN 'July'
            WHEN Crime_Date = '2018-01-20' THEN 'August'
            WHEN Crime_Date = '2018-01-21' THEN 'September'
            WHEN Crime_Date = '2018-01-22' THEN 'October'
            WHEN Crime_Date = '2018-01-23' THEN 'November'
            WHEN Crime_Date = '2018-01-24' THEN 'December'
            WHEN Crime_Date = '2018-01-25' THEN 'January'
            WHEN Crime_Date = '2018-01-26' THEN 'February'
            WHEN Crime_Date = '2018-01-27' THEN 'March'
            WHEN Crime_Date = '2018-01-28' THEN 'April'
            WHEN Crime_Date = '2018-01-29' THEN 'May'
            WHEN Crime_Date = '2018-01-30' THEN 'June'
            WHEN Crime_Date = '2018-01-31' THEN 'July'
            WHEN Crime_Date = '2018-02-01' THEN 'August'
            WHEN Crime_Date = '2018-02-02' THEN 'September'
            WHEN Crime_Date = '2018-02-03' THEN 'October'
            WHEN Crime_Date = '2018-02-04' THEN 'November'
            WHEN Crime_Date = '2018-02-05' THEN 'December'
            WHEN Crime_Date = '2018-02-06' THEN 'January'
            WHEN Crime_Date = '2018-02-07' THEN 'February'
            WHEN Crime_Date = '2018-02-08' THEN 'March'
            WHEN Crime_Date = '2018-02-09' THEN 'April'
            WHEN Crime_Date = '2018-02-10' THEN 'May'
            WHEN Crime_Date = '2018-02-11' THEN 'June'
            WHEN Crime_Date = '2018-02-12' THEN 'July'
            WHEN Crime_Date = '2018-02-13' THEN 'August'
            WHEN Crime_Date = '2018-02-14' THEN 'September'
            WHEN Crime_Date = '2018-02-15' THEN 'October'
            WHEN Crime_Date = '2018-02-16' THEN 'November'
            WHEN Crime_Date = '2018-02-17' THEN 'December'
            WHEN Crime_Date = '2018-02-18' THEN 'January'
            WHEN Crime_Date = '2018-02-19' THEN 'February'
            WHEN Crime_Date = '2018-02-20' THEN 'March'
            WHEN Crime_Date = '2018-02-21' THEN 'April'
            WHEN Crime_Date = '2018-02-22' THEN 'May'
            WHEN Crime_Date = '2018-02-23' THEN 'June'
            WHEN Crime_Date = '2018-02-24' THEN 'July'
            WHEN Crime_Date = '2018-02-25' THEN 'August'
            WHEN Crime_Date = '2018-02-26' THEN 'September'
            WHEN Crime_Date = '2018-02-27' THEN 'October'
            WHEN Crime_Date = '2018-02-28' THEN 'November'
            WHEN Crime_Date = '2018-02-29' THEN 'December'
            WHEN Crime_Date = '2018-03-01' THEN 'January'
            WHEN Crime_Date = '2018-03-02' THEN 'February'
            WHEN Crime_Date = '2018-03-03' THEN 'March'
            WHEN Crime_Date = '2018-03-04' THEN 'April'
            WHEN Crime_Date = '2018-03-05' THEN 'May'
            WHEN Crime_Date = '2018-03-06' THEN 'June'
            WHEN Crime_Date = '2018-03-07' THEN 'July'
            WHEN Crime_Date = '2018-03-08' THEN 'August'
            WHEN Crime_Date = '2018-03-09' THEN 'September'
            WHEN Crime_Date = '2018-03-10' THEN 'October'
            WHEN Crime_Date = '2018-03-11' THEN 'November'
            WHEN Crime_Date = '2018-03-12' THEN 'December'
            WHEN Crime_Date = '2018-03-13' THEN 'January'
            WHEN Crime_Date = '2018-03-14' THEN 'February'
            WHEN Crime_Date = '2018-03-15' THEN 'March'
            WHEN Crime_Date = '2018-03-16' THEN 'April'
            WHEN Crime_Date = '2018-03-17' THEN 'May'
            WHEN Crime_Date = '2018-03-18' THEN 'June'
            WHEN Crime_Date = '2018-03-19' THEN 'July'
            WHEN Crime_Date = '2018-03-20' THEN 'August'
            WHEN Crime_Date = '2018-03-21' THEN 'September'
            WHEN Crime_Date = '2018-03-22' THEN 'October'
            WHEN Crime_Date = '2018-03-23' THEN 'November'
            WHEN Crime_Date = '2018-03-24' THEN 'December'
            WHEN Crime_Date = '2018-03-25' THEN 'January'
            WHEN Crime_Date = '2018-03-26' THEN 'February'
            WHEN Crime_Date = '2018-03-27' THEN 'March'
            WHEN Crime_Date = '2018-03-28' THEN 'April'
            WHEN Crime_Date =

====================================================================================================

PROMPT 12:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in New York grouped by week since January 2023

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 12:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in New York grouped by week since January 2023

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd
import numpy as np

# Connect to database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Create a cursor
cur = conn.cursor()

# Query
cur.execute("""
    SELECT COUNT(*)
    FROM la_crime_data
    WHERE Crime_Date > '2023-01-01'
""")

# Fetch the results
rows = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print

====================================================================================================

PROMPT 13:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly on each day of the week

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 13:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly on each day of the week

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database
cur.execute("""
    SELECT
        CASE
            WHEN DATE_PART('dow', CAST(Crime_Date as DATE)) = 1 THEN 'Monday'
            WHEN DATE_PART('dow', CAST(Crime_Date as DATE)) = 2 THEN 'Tuesday'
            WHEN DATE_PART('dow', CAST(Crime_Date as DATE)) = 3 THEN 'Wednesday'
            WHEN DATE_PART('dow', CAST(Crime_Date as DATE)) = 4 THEN 'Thursday'
            WHEN DATE_PART('dow', CAST(Crime_Date as DATE)) = 5 THEN 'Friday'
            WHEN DATE_PART('dow', CAST(Crime_Date as DATE)) = 6 THEN 'Saturday'
            WHEN DATE_PART('dow', CAST(Crime_Date as DATE)) = 7 THEN 'Sunday'
            ELSE 'INSUFFICENT'
        END as Day_of_Week,
        Crime_Type,
        COUNT(Crime_ID) as Total_Crimes
    FROM
        la_crime_data
    GROUP BY
        1,
        2
    ORDER BY
        1,
        2;
""")

# Fetch the results
rows = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame(rows, columns=['Day_of_Week', 'Crime_Type', 'Total_Crimes'])

# Print the dataframe
print(df)

# Create a dataframe from the results
df = pd.DataFrame

====================================================================================================

PROMPT 14:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly during each month of the year

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 14:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly during each month of the year

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd
import numpy as np

# Connect to database
conn = psycopg2.connect(database="postgres", user="postgres", password="postgres", host="localhost", port="5432")

# Create a cursor
cur = conn.cursor()

# Query
cur.execute("""
SELECT
	la_crime_data.Crime_ID,
	la_crime_data.Report_#,
	la_crime_data.Date_Reported,
	la_crime_data.Crime_Date,
	la_crime_data.Crime_Time,
	la_crime_data.Crime_Type,
	la_crime_data.Area_Name,
	la_crime_data.Vict_Age,
	la_crime_data.Vict_Sex,
	la_crime_data.Weapon_Desc,
	la_crime_data.Address,
	la_crime_data.Latitude,
	la_crime_data.Longitude
FROM
	la_crime_data
WHERE
	la_crime_data.Crime_Date = '2020-01-01'
	AND la_crime_data.Crime_Type = 'MURDER'
	AND la_crime_data.Area_Name = 'PHILADELPHIA'
	AND la_crime_data.Vict_Age = 'ALL'
	AND la_crime_data.Vict_Sex = 'ALL'
	AND la_crime_data.Weapon_Desc = 'ALL'
	AND la_crime_data.Address = 'ALL'
	AND la_crime_data.Latitude = 'ALL'
	AND la_crime_data.Longitude = 'ALL'
ORDER BY
	la_crime_data.Crime_ID
;
""")

# Save the results
crime_data = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the dataframe
print(crime_df)

# Create a dataframe
crime_df = pd.DataFrame(crime_data)

# Print the

====================================================================================================

PROMPT 15:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly at each hour of the day

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 15:

Generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly at each hour of the day

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd
import numpy as np

# Connect to database
conn = psycopg2.connect(database="postgres", user="postgres", password="postgres", host="localhost", port="5432")

# Create a cursor
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT
	    CASE WHEN COUNT(*) > 1 THEN 'INSUFFICENT' ELSE 'SUFFICIENT' END AS "Sufficient Data",
	    COUNT(*)
	FROM
	    (
	        SELECT
	            CASE WHEN COUNT(*) > 1 THEN 'INSUFFICENT' ELSE 'SUFFICIENT' END AS "Sufficient Data",
	            COUNT(*)
	        FROM
	            (
	                SELECT
	                    CASE WHEN COUNT(*) > 1 THEN 'INSUFFICENT' ELSE 'SUFFICIENT' END AS "Sufficient Data",
	                    COUNT(*)
	                FROM
	                    (
	                        SELECT
	                            CASE WHEN COUNT(*) > 1 THEN 'INSUFFICENT' ELSE 'SUFFICIENT' END AS "Sufficient Data",
	                            COUNT(*)
	                        FROM
	                            (
	                                SELECT
	                                    CASE WHEN COUNT(*) > 1 THEN 'INSUFFICENT' ELSE 'SUFFICIENT' END AS "Sufficient Data",
	                                    COUNT(*)
	                                FROM
	                                    (
	                                        SELECT
	                                            CASE WHEN COUNT(*) > 1 THEN 'INSUFFICENT' ELSE 'SUFFICIENT' END AS "Sufficient Data",
	                                            COUNT(*)
	                                        FROM
	                                            (
	                                                SELECT
	                                                    CASE WHEN COUNT(*) > 1 THEN 'INSUFFICENT' ELSE 'SUFFICIENT' END AS "Sufficient Data",
	                                                    COUNT(*)
	                                                FROM
	                                                    (
	                                                        SELECT
	                                                            CASE WHEN COUNT(*) > 1 THEN 'INSUFFICENT' ELSE 'SUFFICIENT' END AS "Sufficient Data",
	                                                            COUNT(*)
	                                                        FROM
	                                                            (
	                                                                SELECT
	                                                                    CASE WHEN COUNT(*) > 1 THEN 'INSUFFICENT' ELSE 'SUFFICIENT' END AS "Sufficient Data",
	                                                                    COUNT(*)
	                                                                FROM
	                                                                    (
	                                                                        SELECT
	                                                                            CASE WHEN COUNT(*) > 1 THEN 'INSUFFICENT' ELSE 'SUFFICIENT' END AS "Sufficient Data",
	                                                                            COUNT(*)
	                                                                        FROM
	                                                                            (
	                                                                                SELECT
	                                                                                    CASE WHEN COUNT(*) > 1 THEN 'INSUFFICENT' ELSE 'SUFFICIENT' END AS "Sufficient Data",
	                                                                                    COUNT(*)
	                                                                                FROM
	                                                                                    (
	                                                                                        SELECT
	                                                                                            CASE WHEN COUNT(*) > 1 THEN 'INSUFFICENT' ELSE 'SUFFICIENT' END AS "Sufficient Data",
	                                                                                            COUNT(*)
	                                                                                        FROM
	                                                                                            (
	                                                                                                SELECT
	                                                                                                    CASE WHEN COUNT(*) > 1 THEN 'INSUFFICENT' ELSE 'SUFFICIENT' END AS "Sufficient Data",
	                                                                                                    COUNT(*)
	                                                                                                FROM
	                                                                                                    (
	                                                                                                        SELECT
	                                                                                                            CASE WHEN COUNT(*) > 1 THEN 'INSUFFICENT' ELSE 'SUFFICIENT' END AS "Sufficient Data",
	                                                                                                            COUNT(*)
	                                                                                                        FROM
	                                                                                                            (
	                                                                                                                SELECT
	                                                                                                                    CASE WHEN COUNT(*) > 1 THEN 'INSUFFICENT' ELSE 'SUFFICIENT' END AS "Sufficient Data",
	                                                                                                                    COUNT(*)
	                                                                                                                FROM
	                                                                                                                    (
	                                                                                                                        SELECT
	                                                                                                                            CASE WHEN COUNT(*) > 1 THEN 'INSUFFICENT' ELSE 'SUFFICIENT' END AS "Sufficient Data",
	                                                                                                                            COUNT(*)
	                                                                                                                        FROM
	                                                                                                                            (
	                                                                                                                                SELECT
	                                                                                                                                    CASE WHEN COUNT(*) > 1 THEN 'INSUFFICENT' ELSE 'SUFFICIENT' END AS "Sufficient Data",
	                                                                                                                                COUNT(*)
	                                                                                                                            )
	                                                                                                                    )
	                                                                                                            )
	                                                                                                        )
	                                                                                                    )
	                                                                                                )
	                                                                                            )
	                                                                                        )
	                                                                                    )
	                                                                                )
	                                                                            )
	                                                                        )
	                                                                    )
	                                                                )
	                                                            )
	                                                        )
	                                                    )
	                                                )
	                                            )
	                                        )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                    )
	                                )
	                                

====================================================================================================

PROMPT 16:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in Philly grouped by week

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 16:

Generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in Philly grouped by week

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to database
conn = psycopg2.connect(
    host = "localhost",
    database = "crime_data",
    user = "postgres",
    password = "postgres"
)

# Create a cursor
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT COUNT(*)
	FROM la_crime_data
	GROUP BY week
	""")

# Save the results
results = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Print the results
print(results)

# Print the results
print(results)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a new dataframe
df2 = pd.DataFrame(results)

# Print the new dataframe
print(df2)

# Create a new dataframe
df3 = pd.DataFrame(results)

# Print the new dataframe
print(df3)

# Create a new dataframe
df4 = pd.DataFrame(results)

# Print the new dataframe
print(df4)

# Create a new dataframe
df5 = pd.DataFrame(results)

# Print the new dataframe
print(df5)

# Create a new dataframe
df6 = pd.DataFrame(results)

# Print the new dataframe
print(df6)

# Create a new dataframe
df7 = pd.DataFrame(results)

# Print the new dataframe
print(df7)

# Create a new dataframe
df8 = pd.DataFrame(results)

# Print the new dataframe
print(df8)

# Create a new dataframe
df9 = pd.DataFrame(results)

# Print the new dataframe
print(df9)

# Create a new dataframe
df10 = pd.DataFrame(results)

# Print the new dataframe
print(df10)

# Create a new dataframe
df11 = pd.DataFrame(results)

# Print the new dataframe
print(df11)

# Create a new dataframe
df12 = pd.DataFrame(results)

# Print the new dataframe
print(df12)

# Create a new dataframe
df13 = pd.DataFrame(results)

# Print the new dataframe
print(df13)

# Create a new dataframe
df14 = pd.DataFrame(results)

# Print the new dataframe
print(df14)

# Create a new dataframe
df15 = pd.DataFrame(results)

# Print the new dataframe
print(df15)

# Create a new dataframe
df16 = pd.DataFrame(results)

# Print the new dataframe
print(df16)

# Create a new dataframe
df17 = pd.DataFrame(results)

# Print the new dataframe
print(df17)

# Create a new dataframe
df18 = pd.DataFrame(results)

# Print the new dataframe
print(df18)

# Create a new dataframe
df19 = pd.DataFrame(results)

# Print the new dataframe
print(df19)

# Create a new dataframe
df20 = pd.DataFrame(results)

# Print the new dataframe
print(df20)

# Create a new dataframe
df21 = pd.DataFrame(results)

# Print the new dataframe
print(df21)

# Create a new dataframe
df22 = pd.DataFrame(results)

# Print the new dataframe
print(df22)

# Create a new dataframe
df23 = pd.DataFrame(results)

# Print the new dataframe
print(df23)

# Create a new dataframe
df24 = pd.DataFrame(results)

# Print the new dataframe
print(df24)

# Create a new dataframe
df25 = pd.DataFrame(results)

# Print the new dataframe
print(df25)

# Create a new dataframe
df26 = pd.DataFrame(results)

# Print the new dataframe
print(df26)

# Create a new dataframe
df27 = pd.DataFrame(results)

# Print the new dataframe
print(df27)

# Create a new dataframe
df28 = pd.DataFrame(results)

# Print the new dataframe
print(df28)

# Create a new dataframe
df29 = pd.DataFrame(results)

# Print the new dataframe
print(df29)

# Create a new dataframe
df30 = pd.DataFrame(results)

# Print the new dataframe
print(df30)

# Create a new dataframe
df31 = pd.DataFrame(results)

# Print the new dataframe
print(df31)

# Create a new dataframe
df32 = pd.DataFrame(results)

# Print the new dataframe
print(df32)

# Create a new dataframe
df33 = pd.DataFrame(results)

# Print the new dataframe
print(df33)

# Create a new dataframe
df34 = pd.DataFrame(results)

# Print the new dataframe
print(df34)

# Create a new dataframe
df35 = pd.DataFrame(results)

# Print the new dataframe
print(df35)

# Create a new dataframe
df36 = pd.DataFrame(results)

# Print the new dataframe
print(df36)

# Create a new dataframe
df37 = pd.DataFrame(results)

# Print the new dataframe
print(df37)

# Create a new dataframe
df38 = pd.DataFrame(results)

# Print the new dataframe
print(df38)

# Create a new dataframe
df39 = pd.DataFrame(results)

# Print the new dataframe
print(df39)

# Create a new dataframe
df40 = pd.DataFrame(results)

# Print the new dataframe
print(df40)

# Create a new dataframe
df41 = pd.DataFrame(results)

# Print the new dataframe
print(df41)

# Create a new dataframe
df42 = pd.DataFrame(results)

# Print the new dataframe
print(df42)

# Create a new dataframe
df43 = pd.DataFrame(results)

# Print the new dataframe
print(df43)

# Create a new dataframe
df44 = pd.DataFrame(results)

# Print the new dataframe
print(df44)

# Create a new dataframe
df45 = pd.DataFrame(results)

# Print the new dataframe
print(df45)

# Create a new dataframe
df46 = pd.DataFrame(results)

# Print the new dataframe
print(df46)

# Create a new dataframe
df47 = pd.DataFrame(results)

# Print the new dataframe
print(df47)

# Create a new dataframe
df48 = pd.Data

====================================================================================================

PROMPT 17:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of Atlanta

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 17:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of Atlanta

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the areas in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the

====================================================================================================

PROMPT 18:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of Atlanta give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 18:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of Atlanta give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the areas of atlanta
atlanta_areas = ['Atlanta', 'Cleveland', 'Chicago', 'Dallas', 'Detroit', 'Houston', 'Los Angeles', 'Miami', 'New York', 'Philadelphia', 'San Antonio', 'San Diego', 'San Francisco', 'Seattle', 'Washington']

# Create a list of all the areas of atlanta
nyc_areas = ['Bronx', 'Brooklyn', 'Manhattan', 'Queens', 'Staten Island']

# Create a list of all the areas of atlanta
philly_areas = ['Bristol', 'Kent', 'Newark', 'Pittsburgh', 'Washington']

# Create a list of all the areas of atlanta
la_areas = ['Albany', 'Allegheny', 'Armstrong', 'Beaver', 'Berks', 'Blair', 'Bradford', 'Bucks', 'Butler', 'Cambria', 'Centre', 'Chester', 'Clarion', 'Clearfield', 'Clinton', 'Columbia', 'Crawford', 'Cumberland', 'Dauphin', 'Delaware', 'Elk', 'Erie', 'Fayette', 'Forest', 'Franklin', 'Fulton', 'Greene', 'Huntingdon', 'Indiana', 'Jefferson', 'Juniata', 'Lackawanna', 'Lancaster', 'Lawrence', 'Lebanon', 'Lehigh', 'Luzerne', 'Lycoming', 'McKean', 'Mercer', 'Mifflin', 'Monroe', 'Montgomery', 'Montour', 'Northampton', 'Northumberland', 'Perry', 'Philadelphia', 'Pike', 'Potter', 'Schuylkill', 'Snyder', 'Somerset', 'Sullivan', 'Susquehanna', 'Tioga', 'Union', 'Venango', 'Warren', 'Washington', 'Wayne', 'Westmoreland', 'Wyoming', 'York']

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta

# Create a list of all the areas of atlanta


====================================================================================================

PROMPT 19:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of LA

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 19:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of LA

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the areas in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the

====================================================================================================

PROMPT 20:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of LA give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 20:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of LA give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd
import numpy as np
import re

# Connect to database
conn = psycopg2.connect(host="localhost", database="postgres", user="postgres", password="postgres")

# Create a cursor
cur = conn.cursor()

# Query the database
cur.execute("SELECT * FROM atlanta_crime_data")

# Save the results
results = cur.fetchall()

# Create a dataframe
df = pd.DataFrame(results)

# Create a dataframe with only the relevant columns
df_new = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Vict_Age', 'Vict_Sex', 'Weapon_Desc', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_2 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_3 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_4 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_5 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_6 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_7 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_8 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_9 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_10 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_11 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_12 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_13 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_14 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_15 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_16 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_17 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_18 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_19 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_20 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_21 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_22 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_23 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_24 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_25 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Latitude', 'Longitude']]

# Create a dataframe with only the relevant columns
df_new_26 = df[['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_

====================================================================================================

PROMPT 21:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of New York

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 21:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of New York

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the areas of New York
areas = ['Bronx', 'Brooklyn', 'Manhattan', 'Queens', 'Staten Island']

# Create a list of all the crimes in New York
crimes = ['Theft', 'Robbery', 'Aggravated Assault', 'Burglary', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Robbery', 'Larceny-Theft', 'Motor Vehicle

====================================================================================================

PROMPT 22:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of New York give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 22:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of New York give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the areas of New York
ny_areas = ['Bronx', 'Brooklyn', 'Manhattan', 'Queens', 'Staten Island']

# Create a list of all the areas of Atlanta
atl_areas = ['Atlanta', 'Baldwin', 'Cobb', 'Decatur', 'Douglas', 'Fitzgerald', 'Floyd', 'Gwinnett', 'Hall', 'Hancock', 'Haralson', 'Harris', 'Hart', 'Jackson', 'Jefferson', 'Johnson', 'Jones', 'Lamar', 'Lanier', 'Laurens', 'Lee', 'Liberty', 'Lincoln', 'Lowndes', 'Madison', 'Marion', 'McDuffie', 'Mitchell', 'Monroe', 'Montgomery', 'Morgan', 'Newton', 'Oconee', 'Oglethorpe', 'Paulding', 'Pickens', 'Pierce', 'Polk', 'Putnam', 'Quitman', 'Richmond', 'Robeson', 'Shelby', 'Sumter', 'Taliaferro', 'Tattnall', 'Taylor', 'Thomas', 'Tift', 'Toombs', 'Towns', 'Treutlen', 'Union', 'Volusia', 'Wake', 'Warren', 'Washington', 'Wayne', 'Webster', 'Wilkes', 'Winston']

# Create a list of all the areas of Philadelphia
phl_areas = ['Allegheny', 'Armstrong', 'Beaver', 'Bedford', 'Berks', 'Blair', 'Bradford', 'Bucks', 'Butler', 'Cambria', 'Centre', 'Chester', 'Clarion', 'Clearfield', 'Clinton', 'Columbia', 'Crawford', 'Cumberland', 'Dauphin', 'Delaware', 'Elk', 'Erie', 'Fayette', 'Forest', 'Franklin', 'Fulton', 'Greene', 'Huntingdon', 'Indiana', 'Jefferson', 'Juniata', 'Lackawanna', 'Lancaster', 'Lawrence', 'Lebanon', 'Lehigh', 'Luzerne', 'Lycoming', 'McKean', 'Mercer', 'Mifflin', 'Monroe', 'Montgomery', 'Northampton', 'Northumberland', 'Perry', 'Philadelphia', 'Pike', 'Potter', 'Schuylkill', 'Snyder', 'Somerset', 'Sullivan', 'Susquehanna', 'Tioga', 'Union', 'Venango', 'Warren', 'Washington', 'Westmoreland', 'Wyoming', 'York']

# Create a list of all the areas of Los Angeles
la_areas = ['Los Angeles', 'Orange', 'Redondo Beach', 'Riverside', 'San Bernardino', 'San Diego', 'San Francisco', 'San Gabriel', 'San Mateo', 'Santa Barbara', 'Santa Clara', 'Santa Cruz', 'Santa Maria', 'Shasta', 'Solano', 'Sonoma', 'Sonora', 'Tehama', 'Torrance', 'Ventura', 'Yolo', 'Yuba']

# Create a list of all the areas of Chicago
chi_areas = ['Adams', 'Albany', 'Alger', 'Alexander', 'Allamakee', 'Alpena', 'Antrim', 'Arenac', 'Ashland', 'Ashwaubenon', 'Barron', 'Bayfield', 'Brown', 'Buffalo', 'Burnett', 'Calumet', 'Chippewa', 'Clark', 'Clay', 'Clinton', 'Crawford', 'Dekalb', 'Douglas', 'DuPage', 'Edgar', 'Effingham', 'Fayette', 'Ford', 'Franklin', 'Fulton', 'Gallatin', 'Greene', 'Grundy', 'Hamilton', 'Hancock', 'Hardin', 'Harrison', 'Henry', 'Iroquois', 'Jackson', 'Jasper', 'Jefferson', 'Juneau', 'Kenosha', 'Keweenaw', 'LaSalle', 'Lake', 'Lapeer', 'LeSauce', 'Lincoln', 'Lyon', 'McDonough', 'McHenry', 'McLean', 'Mason', 'Massac', 'Menominee', 'Mercer', 'Monroe', 'Montcalm', 'Montmorency', 'Muskegon', 'Newaygo', 'Oakland', 'Oceana', 'Ogemaw', 'Ontonagon', 'Osceola', 'Oscoda', 'Otsego', 'Otter Tail', 'Page', 'Palo Alto', 'Plymouth', 'Pocahontas', 'Polk', 'Porter', 'Portage', 'Price', 'Racine', 'Richland', 'Rock', 'Rusk', 'St. Clair', 'St. Joseph', 'Saginaw', 'Sanilac', 'Schoolcraft', 'Shiawassee', 'St. Clair Shores', 'St. Joseph Shores', 'Tuscola', 'Van Buren', 'Washtenaw', 'Wayne', 'Wexford', 'Winnebago', 'Wood']

# Create a list of all the areas of San Francisco
sf_areas = ['Alameda', 'Contra Costa', 'Marin', 'Napa', 'San Francisco', 'San Mateo', 'Santa Clara', 'Santa Cruz', 'Solano', 'Sonoma', 'Sonora', 'Tulare', 'Tuolumne', 'Yolo', 'Yuba']

# Create a list of all the areas of New York
ny_areas = ['Bronx', 'Brooklyn', 'Manhattan', 'Queens', 'Staten Island']

# Create a list of all the areas of Atlanta
atl_areas = ['Atlanta', 'Baldwin', 'Cobb', 'Decatur', 'Douglas', 'Fitzgerald', 'Floyd', 'Gwinnett', 'Hall', 'Hancock', 'Haralson', 'Harris', 'Hart', 'Jackson', 'Jefferson', 'Johnson', 'Jones', 'Lamar', 'Lanier', 'Laurens', 'Lee', 'Liberty', 'Lincoln', 'Lowndes', 'Madison', 'Marion', 'McDuffie', 'Mitchell', 'Monroe', 'Montgomery', 'Morgan', 'Newton', 'Oconee', 'Oglethorpe', 'Paulding', 'Pickens', 'Pierce', 'Polk', 'Putnam', 'Quitman', 'Richmond', 'Robeson', 'Shelby', 'Sumter', 'Taliaferro', 'Tattnall', 'Taylor', 'Thomas', 'Tift', 'Toombs', 'Towns', 'Treutlen', 'Union', 'Volusia', 'Wake', 'Warren', 'Washington', 'Wayne', 'Webster', 'Wilkes', 'Winston', 'York']

# Create a list of all the areas of Philadelphia
phl_areas = ['Allegheny', 'Armstrong', 'Beaver', 'Bedford', 'Berks', 'Blair', 'Bradford', 'Bucks', 'Butler', 'Cambria', 'Centre', 'Chester', 'Clarion', 'Clearfield', 'Clinton', 'Columbia', 'Crawford', 'Cumberland', 'Dauphin', 'Delaware', 'Elk', 'Erie', 'Fayette', 'Forest', 'Franklin', 'Fulton', 'Greene', 'Huntingdon', 'Indiana', 'Jefferson', 'Juniata', 'Lackawanna', 'Lancaster', 'Lawrence', 'Lebanon', 'Lehigh', 'Luzerne', 'Lycoming', 'McKean', 'Mercer', 'Mifflin', 'Monroe

====================================================================================================

PROMPT 23:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of Philly

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 23:

Generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of Philly

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the areas in the database
areas = ['la_crime_data', 'atlanta_crime_data', 'nyc_crime_data', 'philly_crime_data']

# Create a list of all the crimes in the database
crimes = ['Murder', 'Rape', 'Robbery', 'Aggravated Assault', 'Property Crime', 'Burglary', 'Larceny', 'Vehicle Theft', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Burglary

====================================================================================================

PROMPT 24:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of Philly give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 24:

Generate an SQL statement to answer a question.

Prompt: 
	For each area of Philly give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd
import numpy as np
import re

# Connect to database
conn = psycopg2.connect(database="postgres", user="postgres", password="postgres", host="localhost", port="5432")
cur = conn.cursor()

# Query to get the most recent date
cur.execute("""
SELECT max(Crime_Date)
FROM la_crime_data;
""")

# Get the most recent date
most_recent_date = cur.fetchall()[0][0]

# Query to get the most common crime type
cur.execute("""
SELECT Crime_Type, count(Crime_Type)
FROM la_crime_data
GROUP BY Crime_Type
ORDER BY count(Crime_Type) DESC
LIMIT 1;
""")

# Get the most common crime type
most_common_crime_type = cur.fetchall()[0][0]

# Query to get the most common crime type
cur.execute("""
SELECT Crime_Type, count(Crime_Type)
FROM la_crime_data
GROUP BY Crime_Type
ORDER BY count(Crime_Type) DESC
LIMIT 1;
""")

# Get the most common crime type
most_common_crime_type = cur.fetchall()[0][0]

# Query to get the most common crime type
cur.execute("""
SELECT Crime_Type, count(Crime_Type)
FROM la_crime_data
GROUP BY Crime_Type
ORDER BY count(Crime_Type) DESC
LIMIT 1;
""")

# Get the most common crime type
most_common_crime_type = cur.fetchall()[0][0]

# Query to get the most common crime type
cur.execute("""
SELECT Crime_Type, count(Crime_Type)
FROM la_crime_data
GROUP BY Crime_Type
ORDER BY count(Crime_Type) DESC
LIMIT 1;
""")

# Get the most common crime type
most_common_crime_type = cur.fetchall()[0][0]

# Query to get the most common crime type
cur.execute("""
SELECT Crime_Type, count(Crime_Type)
FROM la_crime_data
GROUP BY Crime_Type
ORDER BY count(Crime_Type) DESC
LIMIT 1;
""")

# Get the most common crime type
most_common_crime_type = cur.fetchall()[0][0]

# Query to get the most common crime type
cur.execute("""
SELECT Crime_Type, count(Crime_Type)
FROM la_crime_data
GROUP BY Crime_Type
ORDER BY count(Crime_Type) DESC
LIMIT 1;
""")

# Get the most common crime type
most_common_crime_type = cur.fetchall()[0][0]

# Query to get the most common crime type
cur.execute("""
SELECT Crime_Type, count(Crime_Type)
FROM la_crime_data
GROUP BY Crime_Type
ORDER BY count(Crime_Type) DESC
LIMIT 1;
""")

# Get the most common crime type
most_common_crime_type = cur.fetchall()[0][0]

# Query to get the most common crime type
cur.execute("""
SELECT Crime_Type, count(Crime_Type)
FROM la_crime_data
GROUP BY Crime_Type
ORDER BY count(Crime_Type) DESC
LIMIT 1;
""")

# Get the most common crime type
most_common_crime_type = cur.fetchall()[0][0]

# Query to get the most common crime type
cur.execute("""
SELECT Crime_Type, count(Crime_Type)
FROM la_crime_data
GROUP BY Crime_Type
ORDER BY count(Crime_Type) DESC
LIMIT 1;
""")

# Get the most common crime type
most_common_crime_type = cur.fetchall()[0][0]

# Query to get the most common crime type
cur.execute("""
SELECT Crime_Type, count(Crime_Type)
FROM la_crime_data
GROUP BY Crime_Type
ORDER BY count(Crime_Type) DESC
LIMIT 1;
""")

# Get the most common crime type
most_common_crime_type = cur.fetchall()[0][0]

# Query to get the most common crime type
cur.execute("""
SELECT Crime_Type, count(Crime_Type)
FROM la_crime_data
GROUP BY Crime_Type
ORDER BY count(Crime_Type) DESC
LIMIT 1;
""")

# Get the most common crime type
most_common_crime_type = cur.fetchall()[0][0]

# Query to get the most common crime type
cur.execute("""
SELECT Crime_Type, count(Crime_Type)
FROM la_crime_data
GROUP BY Crime_Type
ORDER BY count(Crime_Type) DESC
LIMIT 1;
""")

# Get the most common crime type
most_common_crime_type = cur.fetchall()[0][0]

# Query to get the most common crime type
cur.execute("""
SELECT Crime_Type, count(Crime_Type)
FROM la_crime_data
GROUP BY Crime_Type
ORDER BY count(Crime_Type) DESC
LIMIT 1;
""")

# Get the most common crime type
most_common_crime_type = cur.fetchall()[0][0]

# Query to get the most common crime type
cur.execute("""
SELECT Crime_Type, count(Crime_Type)
FROM la_crime_data
GROUP BY Crime_Type
ORDER BY count(Crime_Type) DESC
LIMIT 1;
""")

# Get the most common crime type
most_common_crime_type = cur.fetchall()[0][0]

# Query to get the most common crime type
cur.execute("""
SELECT Crime_Type, count(Crime_Type)
FROM la_crime_data
GROUP BY Crime_Type
ORDER BY count(Crime_Type) DESC
LIMIT 1;
""")

# Get the most common crime type
most_common_crime_type = cur.fetchall()[0][0]

# Query to get the most common crime type
cur.execute("""
SELECT Crime_Type, count(Crime_Type)
FROM la_crime_data
GROUP BY Crime_Type
ORDER BY count(Crime_Type) DESC
LIMIT 1;
""")

# Get the most common crime type
most_common_crime_type = cur.fetchall()[0][0]

# Query to get the most common crime type
cur.execute("""
SELECT Crime_Type, count(Crime_Type)
FROM la_crime_data
GROUP BY Crime_Type
ORDER BY count(Crime_Type) DESC
LIMIT 1;
""")

# Get the most common crime type
most_common_crime_type = cur.fetchall()[0][0]

# Query to get the most common crime type
cur.execute("""
SELECT Crime_Type, count(Crime_Type)
FROM la_crime_data
GROUP BY Crime_Type
ORD

====================================================================================================

PROMPT 25:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Atlanta spaced by 0.01 degrees, give the most common crime type and its count

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 25:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Atlanta spaced by 0.01 degrees, give the most common crime type and its count

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd
import numpy as np

# Connect to database
conn = psycopg2.connect(database="postgres", user="postgres", password="postgres", host="localhost", port="5432")

# Create a cursor
cur = conn.cursor()

# Query
cur.execute("""
	SELECT la_crime_data.Crime_Type, COUNT(la_crime_data.Crime_Type)
	FROM la_crime_data
	GROUP BY la_crime_data.Crime_Type
	ORDER BY COUNT(la_crime_data.Crime_Type) DESC
	LIMIT 1;
""")

# Fetch the results
rows = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Print the results
print(rows)

# Print the results
print(rows)

# Create a dataframe
df = pd.DataFrame(rows, columns=['Crime_Type', 'Count'])

# Print the dataframe
print(df)

# Create a new dataframe
df1 = df.iloc[0]

# Print the new dataframe
print(df1)

# Create a new dataframe
df2 = df.iloc[0,0]

# Print the new dataframe
print(df2)

# Create a new dataframe
df3 = df.iloc[0,1]

# Print the new dataframe
print(df3)

# Create a new dataframe
df4 = df.iloc[0,0:2]

# Print the new dataframe
print(df4)

# Create a new dataframe
df5 = df.iloc[0,0:2]

# Print the new dataframe
print(df5)

# Create a new dataframe
df6 = df.iloc[0,0:2]

# Print the new dataframe
print(df6)

# Create a new dataframe
df7 = df.iloc[0,0:2]

# Print the new dataframe
print(df7)

# Create a new dataframe
df8 = df.iloc[0,0:2]

# Print the new dataframe
print(df8)

# Create a new dataframe
df9 = df.iloc[0,0:2]

# Print the new dataframe
print(df9)

# Create a new dataframe
df10 = df.iloc[0,0:2]

# Print the new dataframe
print(df10)

# Create a new dataframe
df11 = df.iloc[0,0:2]

# Print the new dataframe
print(df11)

# Create a new dataframe
df12 = df.iloc[0,0:2]

# Print the new dataframe
print(df12)

# Create a new dataframe
df13 = df.iloc[0,0:2]

# Print the new dataframe
print(df13)

# Create a new dataframe
df14 = df.iloc[0,0:2]

# Print the new dataframe
print(df14)

# Create a new dataframe
df15 = df.iloc[0,0:2]

# Print the new dataframe
print(df15)

# Create a new dataframe
df16 = df.iloc[0,0:2]

# Print the new dataframe
print(df16)

# Create a new dataframe
df17 = df.iloc[0,0:2]

# Print the new dataframe
print(df17)

# Create a new dataframe
df18 = df.iloc[0,0:2]

# Print the new dataframe
print(df18)

# Create a new dataframe
df19 = df.iloc[0,0:2]

# Print the new dataframe
print(df19)

# Create a new dataframe
df20 = df.iloc[0,0:2]

# Print the new dataframe
print(df20)

# Create a new dataframe
df21 = df.iloc[0,0:2]

# Print the new dataframe
print(df21)

# Create a new dataframe
df22 = df.iloc[0,0:2]

# Print the new dataframe
print(df22)

# Create a new dataframe
df23 = df.iloc[0,0:2]

# Print the new dataframe
print(df23)

# Create a new dataframe
df24 = df.iloc[0,0:2]

# Print the new dataframe
print(df24)

# Create a new dataframe
df25 = df.iloc[0,0:2]

# Print the new dataframe
print(df25)

# Create a new dataframe
df26 = df.iloc[0,0:2]

# Print the new dataframe
print(df26)

# Create a new dataframe
df27 = df.iloc[0,0:2]

# Print the new dataframe
print(df27)

# Create a new dataframe
df28 = df.iloc[0,0:2]

# Print the new dataframe
print(df28)

# Create a new dataframe
df29 = df.iloc[0,0:2]

# Print the new dataframe
print(df29)

# Create a new dataframe
df30 = df.iloc[0,0:2]

# Print the new dataframe
print(df30)

# Create a new dataframe
df31 = df.iloc[0,0:2]

# Print the new dataframe
print(df31)

# Create a new dataframe
df32 = df.iloc[0,0:2]

# Print the new dataframe
print(df32)

# Create a new dataframe
df33 = df.iloc[0,0:2]

# Print the new dataframe
print(df33)

# Create a new dataframe
df34 = df.iloc[0,0:2]

# Print the new dataframe
print(df34)

# Create a new dataframe
df35 = df.iloc[0,0:2]

# Print the new dataframe
print(df35)

# Create a new dataframe
df36 = df.iloc[0,0:2]

# Print the new dataframe
print(df36)

# Create a new dataframe
df37 = df.iloc[0,0:2]

# Print the new dataframe
print(df37)

# Create a new dataframe
df38 = df.iloc[0,0:2]

# Print the new dataframe
print(df38)

# Create a new dataframe
df39 = df.iloc[0,0:2]

# Print the new dataframe
print(df39)

# Create a new dataframe
df40 = df.iloc[0,0:2]

# Print the new dataframe
print(df40)

# Create a new dataframe
df41 = df.iloc[0,0:2]

# Print the new dataframe
print

====================================================================================================

PROMPT 26:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Atlanta spaced by 0.01 degrees, give the total crime count.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 26:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Atlanta spaced by 0.01 degrees, give the total crime count.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd
import numpy as np

# Connect to database
conn = psycopg2.connect(
    host = "localhost",
    database = "crime_data",
    user = "postgres",
    password = "postgres"
)

# Create a cursor
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT COUNT(*)
	FROM atlanta_crime_data
	WHERE (latitude BETWEEN 33.717 AND 33.726) AND (longitude BETWEEN -84.385 AND -84.375)
""")

# Fetch the results
results = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Print the results
print(results)

# Print the results
print(results)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a new dataframe
df2 = pd.DataFrame(results)

# Print the new dataframe
print(df2)

# Create a new dataframe
df3 = pd.DataFrame(results)

# Print the new dataframe
print(df3)

# Create a new dataframe
df4 = pd.DataFrame(results)

# Print the new dataframe
print(df4)

# Create a new dataframe
df5 = pd.DataFrame(results)

# Print the new dataframe
print(df5)

# Create a new dataframe
df6 = pd.DataFrame(results)

# Print the new dataframe
print(df6)

# Create a new dataframe
df7 = pd.DataFrame(results)

# Print the new dataframe
print(df7)

# Create a new dataframe
df8 = pd.DataFrame(results)

# Print the new dataframe
print(df8)

# Create a new dataframe
df9 = pd.DataFrame(results)

# Print the new dataframe
print(df9)

# Create a new dataframe
df10 = pd.DataFrame(results)

# Print the new dataframe
print(df10)

# Create a new dataframe
df11 = pd.DataFrame(results)

# Print the new dataframe
print(df11)

# Create a new dataframe
df12 = pd.DataFrame(results)

# Print the new dataframe
print(df12)

# Create a new dataframe
df13 = pd.DataFrame(results)

# Print the new dataframe
print(df13)

# Create a new dataframe
df14 = pd.DataFrame(results)

# Print the new dataframe
print(df14)

# Create a new dataframe
df15 = pd.DataFrame(results)

# Print the new dataframe
print(df15)

# Create a new dataframe
df16 = pd.DataFrame(results)

# Print the new dataframe
print(df16)

# Create a new dataframe
df17 = pd.DataFrame(results)

# Print the new dataframe
print(df17)

# Create a new dataframe
df18 = pd.DataFrame(results)

# Print the new dataframe
print(df18)

# Create a new dataframe
df19 = pd.DataFrame(results)

# Print the new dataframe
print(df19)

# Create a new dataframe
df20 = pd.DataFrame(results)

# Print the new dataframe
print(df20)

# Create a new dataframe
df21 = pd.DataFrame(results)

# Print the new dataframe
print(df21)

# Create a new dataframe
df22 = pd.DataFrame(results)

# Print the new dataframe
print(df22)

# Create a new dataframe
df23 = pd.DataFrame(results)

# Print the new dataframe
print(df23)

# Create a new dataframe
df24 = pd.DataFrame(results)

# Print the new dataframe
print(df24)

# Create a new dataframe
df25 = pd.DataFrame(results)

# Print the new dataframe
print(df25)

# Create a new dataframe
df26 = pd.DataFrame(results)

# Print the new dataframe
print(df26)

# Create a new dataframe
df27 = pd.DataFrame(results)

# Print the new dataframe
print(df27)

# Create a new dataframe
df28 = pd.DataFrame(results)

# Print the new dataframe
print(df28)

# Create a new dataframe
df29 = pd.DataFrame(results)

# Print the new dataframe
print(df29)

# Create a new dataframe
df30 = pd.DataFrame(results)

# Print the new dataframe
print(df30)

# Create a new dataframe
df31 = pd.DataFrame(results)

# Print the new dataframe
print(df31)

# Create a new dataframe
df32 = pd.DataFrame(results)

# Print the new dataframe
print(df32)

# Create a new dataframe
df33 = pd.DataFrame(results)

# Print the new dataframe
print(df33)

# Create a new dataframe
df34 = pd.DataFrame(results)

# Print the new dataframe
print(df34)

# Create a new dataframe
df35 = pd.DataFrame(results)

# Print the new dataframe
print(df35)

# Create a new dataframe
df36 = pd.DataFrame(results)

# Print the new dataframe
print(df36)

# Create a new dataframe
df37 = pd.DataFrame(results)

# Print the new dataframe
print(df37)

# Create a new dataframe
df38 = pd.DataFrame(results)

# Print the new dataframe
print(df38)

# Create a new dataframe
df39 = pd.DataFrame(results)

# Print the new dataframe
print(df39)

# Create a new dataframe
df40 = pd.DataFrame(results)

# Print the new dataframe
print(df40)

# Create a new dataframe
df41 = pd.DataFrame(results)

# Print the new dataframe
print(df41)

# Create a new dataframe
df42 = pd.DataFrame(results)

# Print the new dataframe
print(df42)

# Create a new dataframe
df43 = pd.DataFrame(results)

# Print the new dataframe
print(df43)

# Create a new dataframe
df44 = pd.DataFrame(results)

# Print the new dataframe
print(df44)

# Create a new dataframe
df45 = pd.DataFrame(results)

# Print the new dataframe
print(df45)

# Create a new dataframe
df46 = pd.DataFrame(results)

# Print the new dataframe
print(df

====================================================================================================

PROMPT 27:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of LA spaced by 0.01 degrees, give the total crime count.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 27:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of LA spaced by 0.01 degrees, give the total crime count.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import psycopg2.extras

# Connect to the database
conn = psycopg2.connect(
    host="localhost",
    database="postgres",
    user="postgres",
    password="postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

# Query the database
cur.execute("""
SELECT
	CASE
		WHEN latitude < 0 THEN 'SOUTH'
		WHEN latitude > 0 THEN 'NORTH'
		ELSE 'CENTRAL'
	END AS latitude,
	CASE
		WHEN longitude < 0 THEN 'WEST'
		WHEN longitude > 0 THEN 'EAST'
		ELSE 'CENTRAL'
	END AS longitude,
	COUNT(*)
FROM
	(
		SELECT
			CASE
				WHEN latitude < 0 THEN 'SOUTH'
				WHEN latitude > 0 THEN 'NORTH'
				ELSE 'CENTRAL'
			END AS latitude,
			CASE
				WHEN longitude < 0 THEN 'WEST'
				WHEN longitude > 0 THEN 'EAST'
				ELSE 'CENTRAL'
			END AS longitude,
			CASE
				WHEN latitude < 0 THEN 'SOUTH'
				WHEN latitude > 0 THEN 'NORTH'
				ELSE 'CENTRAL'
			END AS latitude,
			CASE
				WHEN longitude < 0 THEN 'WEST'
				WHEN longitude > 0 THEN 'EAST'
				ELSE 'CENTRAL'
			END AS longitude,
			CASE
				WHEN latitude < 0 THEN 'SOUTH'
				WHEN latitude > 0 THEN 'NORTH'
				ELSE 'CENTRAL'
			END AS latitude,
			CASE
				WHEN longitude < 0 THEN 'WEST'
				WHEN longitude > 0 THEN 'EAST'
				ELSE 'CENTRAL'
			END AS longitude,
			CASE
				WHEN latitude < 0 THEN 'SOUTH'
				WHEN latitude > 0 THEN 'NORTH'
				ELSE 'CENTRAL'
			END AS latitude,
			CASE
				WHEN longitude < 0 THEN 'WEST'
				WHEN longitude > 0 THEN 'EAST'
				ELSE 'CENTRAL'
			END AS longitude,
			CASE
				WHEN latitude < 0 THEN 'SOUTH'
				WHEN latitude > 0 THEN 'NORTH'
				ELSE 'CENTRAL'
			END AS latitude,
			CASE
				WHEN longitude < 0 THEN 'WEST'
				WHEN longitude > 0 THEN 'EAST'
				ELSE 'CENTRAL'
			END AS longitude,
			CASE
				WHEN latitude < 0 THEN 'SOUTH'
				WHEN latitude > 0 THEN 'NORTH'
				ELSE 'CENTRAL'
			END AS latitude,
			CASE
				WHEN longitude < 0 THEN 'WEST'
				WHEN longitude > 0 THEN 'EAST'
				ELSE 'CENTRAL'
			END AS longitude,
			CASE
				WHEN latitude < 0 THEN 'SOUTH'
				WHEN latitude > 0 THEN 'NORTH'
				ELSE 'CENTRAL'
			END AS latitude,
			CASE
				WHEN longitude < 0 THEN 'WEST'
				WHEN longitude > 0 THEN 'EAST'
				ELSE 'CENTRAL'
			END AS longitude,
			CASE
				WHEN latitude < 0 THEN 'SOUTH'
				WHEN latitude > 0 THEN 'NORTH'
				ELSE 'CENTRAL'
			END AS latitude,
			CASE
				WHEN longitude < 0 THEN 'WEST'
				WHEN longitude > 0 THEN 'EAST'
				ELSE 'CENTRAL'
			END AS longitude,
			CASE
				WHEN latitude < 0 THEN 'SOUTH'
				WHEN latitude > 0 THEN 'NORTH'
				ELSE 'CENTRAL'
			END AS latitude,
			CASE
				WHEN longitude < 0 THEN 'WEST'
				WHEN longitude > 0 THEN 'EAST'
				ELSE 'CENTRAL'
			END AS longitude,
			CASE
				WHEN latitude < 0 THEN 'SOUTH'
				WHEN latitude > 0 THEN 'NORTH'
				ELSE 'CENTRAL'
			END AS latitude,
			CASE
				WHEN longitude < 0 THEN 'WEST'
				WHEN longitude > 0 THEN 'EAST'
				ELSE 'CENTRAL'
			END AS longitude,
			CASE
				WHEN latitude < 0 THEN 'SOUTH'
				WHEN latitude > 0 THEN 'NORTH'
				ELSE 'CENTRAL'
			END AS latitude,
			CASE
				WHEN longitude < 0 THEN 'WEST'
				WHEN longitude > 0 THEN 'EAST'
				ELSE 'CENTRAL'
			END AS longitude,
			CASE
				WHEN latitude < 0 THEN 'SOUTH'
				WHEN latitude > 0 THEN 'NORTH'
				ELSE 'CENTRAL'
			END AS latitude,
			CASE
				WHEN longitude < 0 THEN 'WEST'
				WHEN longitude > 0 THEN 'EAST'
				ELSE 'CENTRAL'
			END AS longitude,
			CASE
				WHEN latitude < 0 THEN 'SOUTH'
				WHEN latitude > 0 THEN 'NORTH'
				ELSE 'CENTRAL'
			END AS latitude,
			CASE
				WHEN longitude < 0 THEN 'WEST'
				WHEN longitude > 0 THEN 'EAST'
				ELSE 'CENTRAL'
			END AS longitude,
			CASE
				WHEN latitude < 0 THEN 'SOUTH'
				WHEN latitude > 0 THEN 'NORTH'
				ELSE 'CENTRAL'
			END AS latitude,
			CASE
				WHEN longitude < 0 THEN 'WEST'
				WHEN longitude > 0 THEN 'EAST'
				ELSE 'CENTRAL'
			END AS longitude,
			CASE
				WHEN latitude < 0 THEN 'SOUTH'
				WHEN latitude > 0 THEN 'NORTH'
				ELSE 'CENTRAL'
			END AS latitude,
			CASE
				WHEN longitude < 0 THEN 'WEST'
				WHEN longitude > 0 THEN 'EAST'
				ELSE 'CENTRAL'
			END AS longitude,
			CASE
				WHEN latitude < 0 THEN 'SOUTH'
				WHEN latitude > 0 THEN 'NORTH'
				ELSE 'CENTRAL'
			END AS latitude,
			CASE
				WHEN longitude < 0 THEN 'WEST'
				WHEN longitude > 0 THEN 'EAST'
				ELSE 'CENTRAL'
			END AS longitude,
			CASE
				WHEN latitude < 0 THEN 'SOUTH'
				WHEN latitude > 0 THEN 'NORTH'
				ELSE 'CENTRAL'
			END AS latitude,
			CASE
				WHEN longitude < 0 THEN 'WEST'
				WHEN longitude > 0 THEN 'EAST'
				ELSE 'CENTRAL'
			END AS longitude,
			CASE
				WHEN latitude < 0 THEN 'SOUTH'
				WHEN latitude > 0 THEN 'NORTH'
				ELSE 'CENTRAL'
			END AS latitude,
			CASE
				WHEN longitude < 0 THEN 'WEST

====================================================================================================

PROMPT 28:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of LA spaced by 0.01 degrees, give the most common crime type and its count

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 28:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of LA spaced by 0.01 degrees, give the most common crime type and its count

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Create a cursor
cur = conn.cursor()

# Query
cur.execute("""
    SELECT
        Crime_Type,
        COUNT(Crime_Type)
    FROM
        la_crime_data
    GROUP BY
        Crime_Type
    ORDER BY
        COUNT(Crime_Type) DESC
""")

# Fetch the data
data = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Create a dataframe
df = pd.DataFrame(data)

# Print the dataframe
print(df)

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types = df.iloc[0,0]

# Create a list of the counts of the most common crime types
most_common_crime_counts = df.iloc[0,1]

# Create a list of the most common crime types
most_common_crime_types

====================================================================================================

PROMPT 29:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of New York spaced by 0.01 degrees, give the total crime count.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 29:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of New York spaced by 0.01 degrees, give the total crime count.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import psycopg2.extras
import re

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "crime_data",
    user = "postgres",
    password = "postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor(cursor_factory = psycopg2.extras.DictCursor)

# Query the database
cur.execute("""
	SELECT COUNT(*)
	FROM la_crime_data
	WHERE Latitude > 0.0 AND Latitude < 1.0
	AND Longitude > -75.0 AND Longitude < -70.0
	AND Crime_Date = '2020-01-01'
""")

# Fetch the results
results = cur.fetchall()

# Close the cursor and connection
cur.close()
conn.close()

# Print the results
print(results)

# Print the total number of crimes
print(results[0][0])

# Print the number of crimes in the first quarter
print(results[0][0] / 4)

# Print the number of crimes in the second quarter
print(results[0][0] / 4 * 2)

# Print the number of crimes in the third quarter
print(results[0][0] / 4 * 3)

# Print the number of crimes in the fourth quarter
print(results[0][0] / 4 * 4)

# Print the number of crimes in the first half
print(results[0][0] / 2)

# Print the number of crimes in the second half
print(results[0][0] / 2 * 2)

# Print the number of crimes in the first three quarters
print(results[0][0] / 3)

# Print the number of crimes in the last three quarters
print(results[0][0] / 3 * 3)

# Print the number of crimes in the first six months
print(results[0][0] / 6)

# Print the number of crimes in the last six months
print(results[0][0] / 6 * 5)

# Print the number of crimes in the first year
print(results[0][0] / 12)

# Print the number of crimes in the last year
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first two years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last two years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first three years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last three years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first four years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last four years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first five years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last five years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first six years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last six years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first seven years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last seven years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first eight years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last eight years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first nine years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last nine years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first ten years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last ten years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first eleven years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last eleven years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first twelve years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last twelve years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first thirteen years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last thirteen years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first fourteen years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last fourteen years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first fifteen years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last fifteen years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first sixteen years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last sixteen years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first seventeen years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last seventeen years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first eighteen years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last eighteen years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first nineteen years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last nineteen years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first twenty years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last twenty years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first twenty one years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last twenty one years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first twenty two years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last twenty two years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first twenty three years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the last twenty three years
print(results[0][0] / 12 * 11)

# Print the number of crimes in the first twenty four years
print(results[0][

====================================================================================================

PROMPT 30:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of New York spaced by 0.01 degrees, give the most common crime type and its count

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 30:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of New York spaced by 0.01 degrees, give the most common crime type and its count

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(database="postgres", user="postgres", password="postgres", host="localhost", port="5432")

# Create a cursor
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT
		Crime_Type,
		COUNT(Crime_Type)
	FROM
		la_crime_data
	GROUP BY
		Crime_Type
	ORDER BY
		COUNT(Crime_Type) DESC
	LIMIT 1;
""")

# Fetch the results
rows = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Print the results
print(rows)

# Create a dataframe
df = pd.DataFrame(rows, columns=['Crime_Type', 'Count'])

# Print the dataframe
print(df)

# Create a new dataframe
df2 = pd.DataFrame(columns=['Crime_Type', 'Count'])

# Add the most common crime type
df2.loc[0] = ['Murder', rows[0][1]]

# Add the second most common crime type
df2.loc[1] = ['Robbery', rows[1][1]]

# Add the third most common crime type
df2.loc[2] = ['Aggravated Assault', rows[2][1]]

# Add the fourth most common crime type
df2.loc[3] = ['Burglary', rows[3][1]]

# Add the fifth most common crime type
df2.loc[4] = ['Larceny', rows[4][1]]

# Add the sixth most common crime type
df2.loc[5] = ['Misdemeanor', rows[5][1]]

# Add the seventh most common crime type
df2.loc[6] = ['Felony', rows[6][1]]

# Add the eighth most common crime type
df2.loc[7] = ['Forgery', rows[7][1]]

# Add the ninth most common crime type
df2.loc[8] = ['Vandalism', rows[8][1]]

# Add the tenth most common crime type
df2.loc[9] = ['Burglary', rows[9][1]]

# Add the eleventh most common crime type
df2.loc[10] = ['Larceny', rows[10][1]]

# Add the twelfth most common crime type
df2.loc[11] = ['Motor Vehicle Theft', rows[11][1]]

# Add the thirteenth most common crime type
df2.loc[12] = ['Arson', rows[12][1]]

# Add the fourteenth most common crime type
df2.loc[13] = ['Assault', rows[13][1]]

# Add the fifteenth most common crime type
df2.loc[14] = ['Burglary', rows[14][1]]

# Add the sixteenth most common crime type
df2.loc[15] = ['Larceny', rows[15][1]]

# Add the seventeenth most common crime type
df2.loc[16] = ['Robbery', rows[16][1]]

# Add the eighteenth most common crime type
df2.loc[17] = ['Larceny', rows[17][1]]

# Add the nineteenth most common crime type
df2.loc[18] = ['Larceny', rows[18][1]]

# Add the twentieth most common crime type
df2.loc[19] = ['Larceny', rows[19][1]]

# Add the twenty-first most common crime type
df2.loc[20] = ['Larceny', rows[20][1]]

# Add the twenty-second most common crime type
df2.loc[21] = ['Larceny', rows[21][1]]

# Add the twenty-third most common crime type
df2.loc[22] = ['Larceny', rows[22][1]]

# Add the twenty-fourth most common crime type
df2.loc[23] = ['Larceny', rows[23][1]]

# Add the twenty-fifth most common crime type
df2.loc[24] = ['Larceny', rows[24][1]]

# Add the twenty-sixth most common crime type
df2.loc[25] = ['Larceny', rows[25][1]]

# Add the twenty-seventh most common crime type
df2.loc[26] = ['Larceny', rows[26][1]]

# Add the twenty-eighth most common crime type
df2.loc[27] = ['Larceny', rows[27][1]]

# Add the twenty-ninth most common crime type
df2.loc[28] = ['Larceny', rows[28][1]]

# Add the twenty-tenth most common crime type
df2.loc[29] = ['Larceny', rows[29][1]]

# Add the twenty-eleventh most common crime type
df2.loc[30] = ['Larceny', rows[30][1]]

# Add the twenty-twelfth most common crime type
df2.loc[31] = ['Larceny', rows[31][1]]

# Add the twenty-thirteenth most common crime type
df2.loc[32] = ['Larceny', rows[32][1]]

# Add the twenty-fourteenth most common crime type
df2.loc[33] = ['Larceny', rows[33][1]]

# Add the twenty-fifteenth most common crime type
df2.loc[34] = ['Larceny', rows[34][1]]

# Add the twenty-sixteenth most common crime type
df2.loc[35] = ['Larceny', rows[35][1]]

# Add the twenty-seventeenth most common crime type
df2.loc[36] = ['Larceny', rows[36][1]]

# Add the twenty-eighteenth most common crime type
df2.loc[37] = ['Larceny', rows[37][1]]

# Add the twenty-nineteenth most common crime type
df2.loc[38] = ['Larceny', rows[38][1]]

# Add the twenty-twenty-first most common crime type
df2.loc[39] = ['Larceny', rows[39][1]]

# Add the twenty-twenty-second most common crime type
df2.loc[40] = ['Larceny', rows[40][1]]

# Add the twenty-twenty-third most common crime type
df2.loc[41] = ['Larceny', rows[41][1]]

# Add the twenty-twenty-fourth most common crime type
df2.loc[42] = ['Larceny', rows[42][1]]

# Add the twenty-twenty-fifth most common crime type
df2.loc[43] = ['Larceny', rows[43][1]]

# Add the twenty-twenty-sixth most common crime type
df2.loc[44] = ['Larceny', rows[44][1]]

# Add the twenty-twenty-seventh most common crime type
df2.loc[45] = ['Larceny', rows[45][1]]

# Add the twenty-twenty-eighth most common crime type
df2.loc[46] = ['

====================================================================================================

PROMPT 31:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the total crime count.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 31:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the total crime count.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "crime_data",
    user = "postgres",
    password = "postgres"
)

# Create a cursor
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT COUNT(*)
	FROM la_crime_data
	WHERE (Latitude > -75.0 AND Latitude < -73.9) AND (Longitude > 40.0 AND Longitude < 40.1)
""")

# Fetch the results
results = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Print the results
print(results)

# Print the results
print(results)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a

====================================================================================================

PROMPT 32:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the most common crime type and its count

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 32:

Generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the most common crime type and its count

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd
import numpy as np
import sys

# Connect to database
conn = psycopg2.connect(
    host = "localhost",
    database = "crime_data",
    user = "postgres",
    password = "postgres"
)

# Create a cursor
cur = conn.cursor()

# Query the database
cur.execute("""
    SELECT
        Crime_ID,
        Report_#,
        Date_Reported,
        Crime_Date,
        Crime_Time,
        Crime_Type,
        Area_Name,
        Vict_Age,
        Vict_Sex,
        Weapon_Desc,
        Address,
        Latitude,
        Longitude
    FROM
        la_crime_data
    WHERE
        Latitude > %s AND Latitude < %s AND Longitude > %s AND Longitude < %s
    ORDER BY
        Crime_ID
""", (sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4]))

# Save the results
results = cur.fetchall()

# Close the cursor
cur.close()

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a dataframe
df = pd.Data

====================================================================================================

PROMPT 33:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in Atlanta

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 33:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in Atlanta

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the crime types
crime_types = ['THEFT', 'CRIMINAL DAMAGE', 'NARCOTICS', 'ASSAULT', 'BATTERY', 'CRIM SEXUAL ASSAULT', 'CRIMINAL TRESPASS', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAM

====================================================================================================

PROMPT 34:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in Atlanta, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 34:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in Atlanta, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Create a cursor
cur = conn.cursor()

# Query
cur.execute("""
SELECT
	la_crime_data.Crime_ID,
	la_crime_data.Report_#,
	la_crime_data.Date_Reported,
	la_crime_data.Crime_Date,
	la_crime_data.Crime_Time,
	la_crime_data.Crime_Type,
	la_crime_data.Area_Name,
	la_crime_data.Vict_Age,
	la_crime_data.Vict_Sex,
	la_crime_data.Weapon_Desc,
	la_crime_data.Address,
	la_crime_data.Latitude,
	la_crime_data.Longitude,
	la_crime_data.Day_Occurred,
	la_crime_data.Crime_Date,
	la_crime_data.Crime_Time,
	la_crime_data.Crime_Class,
	la_crime_data.Crime_Type,
	la_crime_data.Area_Name,
	la_crime_data.Latitude,
	la_crime_data.Longitude,
	la_crime_data.Day_Occurred,
	la_crime_data.Crime_Date,
	la_crime_data.Crime_Time,
	la_crime_data.Crime_Class,
	la_crime_data.Crime_Type,
	la_crime_data.Area_Name,
	la_crime_data.Latitude,
	la_crime_data.Longitude,
	la_crime_data.Day_Occurred,
	la_crime_data.Crime_Date,
	la_crime_data.Crime_Time,
	la_crime_data.Crime_Class,
	la_crime_data.Crime_Type,
	la_crime_data.Area_Name,
	la_crime_data.Latitude,
	la_crime_data.Longitude,
	la_crime_data.Day_Occurred,
	la_crime_data.Crime_Date,
	la_crime_data.Crime_Time,
	la_crime_data.Crime_Class,
	la_crime_data.Crime_Type,
	la_crime_data.Area_Name,
	la_crime_data.Latitude,
	la_crime_data.Longitude,
	la_crime_data.Day_Occurred,
	la_crime_data.Crime_Date,
	la_crime_data.Crime_Time,
	la_crime_data.Crime_Class,
	la_crime_data.Crime_Type,
	la_crime_data.Area_Name,
	la_crime_data.Latitude,
	la_crime_data.Longitude,
	la_crime_data.Day_Occurred,
	la_crime_data.Crime_Date,
	la_crime_data.Crime_Time,
	la_crime_data.Crime_Class,
	la_crime_data.Crime_Type,
	la_crime_data.Area_Name,
	la_crime_data.Latitude,
	la_crime_data.Longitude,
	la_crime_data.Day_Occurred,
	la_crime_data.Crime_Date,
	la_crime_data.Crime_Time,
	la_crime_data.Crime_Class,
	la_crime_data.Crime_Type,
	la_crime_data.Area_Name,
	la_crime_data.Latitude,
	la_crime_data.Longitude,
	la_crime_data.Day_Occurred,
	la_crime_data.Crime_Date,
	la_crime_data.Crime_Time,
	la_crime_data.Crime_Class,
	la_crime_data.Crime_Type,
	la_crime_data.Area_Name,
	la_crime_data.Latitude,
	la_crime_data.Longitude,
	la_crime_data.Day_Occurred,
	la_crime_data.Crime_Date,
	la_crime_data.Crime_Time,
	la_crime_data.Crime_Class,
	la_crime_data.Crime_Type,
	la_crime_data.Area_Name,
	la_crime_data.Latitude,
	la_crime_data.Longitude,
	la_crime_data.Day_Occurred,
	la_crime_data.Crime_Date,
	la_crime_data.Crime_Time,
	la_crime_data.Crime_Class,
	la_crime_data.Crime_Type,
	la_crime_data.Area_Name,
	la_crime_data.Latitude,
	la_crime_data.Longitude,
	la_crime_data.Day_Occurred,
	la_crime_data.Crime_Date,
	la_crime_data.Crime_Time,
	la_crime_data.Crime_Class,
	la_crime_data.Crime_Type,
	la_crime_data.Area_Name,
	la_crime_data.Latitude,
	la_crime_data.Longitude,
	la_crime_data.Day_Occurred,
	la_crime_data.Crime_Date,
	la_crime_data.Crime_Time,
	la_crime_data.Crime_Class,
	la_crime_data.Crime_Type,
	la_crime_data.Area_Name,
	la_crime_data.Latitude,
	la_crime_data.Longitude,
	la_crime_data.Day_Occurred,
	la_crime_data.Crime_Date,
	la_crime_data.Crime_Time,
	la_crime_data.Crime_Class,
	la_crime_data.Crime_Type,
	la_crime_data.Area_Name,
	la_crime_data.Latitude,
	la_crime_data.Longitude,
	la_crime_data.Day_Occurred,
	la_crime_data.Crime_Date,
	la_crime_data.Crime_Time,
	la_crime_data.Crime_Class,
	la_crime_data.Crime_Type,
	la_crime_data.Area_Name,
	la_crime_data.Latitude,
	la_crime_data.Longitude,
	la_crime_data.Day_Occurred,
	la_crime_data.Crime_Date,
	la_crime_data.Crime_Time,
	la_crime_data.Crime_Class,
	la_crime_data.Crime_Type,
	la_crime_data.Area_Name,
	la_crime_data.Latitude,
	la_crime_data.Longitude,
	la_crime_data.Day_Occurred,
	la_crime_data.Crime_Date,
	la_crime_data.Crime_Time,
	la_crime_data.Crime_Class,
	la_crime_data.Crime_Type,
	la_crime_data.Area_Name,
	la_crime_data.Latitude,
	la_crime

====================================================================================================

PROMPT 35:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in LA

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 35:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in LA

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT
	    COUNT(Crime_ID)
	FROM
	    la_crime_data
	WHERE
	    Crime_Type = 'MURDER'
	""")

# Store the results of the query
results = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Print the results
print(results)

# Print the results
print(results)

# Create a dataframe from the results
df = pd.DataFrame(results)

# Print the dataframe
print(df)

# Create a new dataframe
df2 = pd.DataFrame(columns=['Crime_ID', 'Crime_Type'])

# Populate the dataframe
df2['Crime_ID'] = df[0]
df2['Crime_Type'] = 'MURDER'

# Print the dataframe
print(df2)

# Create a new dataframe
df3 = pd.DataFrame(columns=['Crime_ID', 'Crime_Type'])

# Populate the dataframe
df3['Crime_ID'] = df[0]
df3['Crime_Type'] = 'ROBBERY'

# Print the dataframe
print(df3)

# Create a new dataframe
df4 = pd.DataFrame(columns=['Crime_ID', 'Crime_Type'])

# Populate the dataframe
df4['Crime_ID'] = df[0]
df4['Crime_Type'] = 'THEFT'

# Print the dataframe
print(df4)

# Create a new dataframe
df5 = pd.DataFrame(columns=['Crime_ID', 'Crime_Type'])

# Populate the dataframe
df5['Crime_ID'] = df[0]
df5['Crime_Type'] = 'CRIMINAL DAMAGE'

# Print the dataframe
print(df5)

# Create a new dataframe
df6 = pd.DataFrame(columns=['Crime_ID', 'Crime_Type'])

# Populate the dataframe
df6['Crime_ID'] = df[0]
df6['Crime_Type'] = 'ASSAULT'

# Print the dataframe
print(df6)

# Create a new dataframe
df7 = pd.DataFrame(columns=['Crime_ID', 'Crime_Type'])

# Populate the dataframe
df7['Crime_ID'] = df[0]
df7['Crime_Type'] = 'ARSON'

# Print the dataframe
print(df7)

# Create a new dataframe
df8 = pd.DataFrame(columns=['Crime_ID', 'Crime_Type'])

# Populate the dataframe
df8['Crime_ID'] = df[0]
df8['Crime_Type'] = 'BAD CHECKS'

# Print the dataframe
print(df8)

# Create a new dataframe
df9 = pd.DataFrame(columns=['Crime_ID', 'Crime_Type'])

# Populate the dataframe
df9['Crime_ID'] = df[0]
df9['Crime_Type'] = 'BRIBERY'

# Print the dataframe
print(df9)

# Create a new dataframe
df10 = pd.DataFrame(columns=['Crime_ID', 'Crime_Type'])

# Populate the dataframe
df10['Crime_ID'] = df[0]
df10['Crime_Type'] = 'BURGLARY'

# Print the dataframe
print(df10)

# Create a new dataframe
df11 = pd.DataFrame(columns=['Crime_ID', 'Crime_Type'])

# Populate the dataframe
df11['Crime_ID'] = df[0]
df11['Crime_Type'] = 'CRIMINAL TRESPASS'

# Print the dataframe
print(df11)

# Create a new dataframe
df12 = pd.DataFrame(columns=['Crime_ID', 'Crime_Type'])

# Populate the dataframe
df12['Crime_ID'] = df[0]
df12['Crime_Type'] = 'CRIMINAL DAMAGE'

# Print the dataframe
print(df12)

# Create a new dataframe
df13 = pd.DataFrame(columns=['Crime_ID', 'Crime_Type'])

# Populate the dataframe
df13['Crime_ID'] = df[0]
df13['Crime_Type'] = 'CRIMINAL TRESPASS'

# Print the dataframe
print(df13)

# Create a new dataframe
df14 = pd.DataFrame(columns=['Crime_ID', 'Crime_Type'])

# Populate the dataframe
df14['Crime_ID'] = df[0]
df14['Crime_Type'] = 'CRIMINAL TRESPASS'

# Print the dataframe
print(df14)

# Create a new dataframe
df15 = pd.DataFrame(columns=['Crime_ID', 'Crime_Type'])

# Populate the dataframe
df15['Crime_ID'] = df[0]
df15['Crime_Type'] = 'CRIMINAL TRESPASS'

# Print the dataframe
print(df15)

# Create a new dataframe
df16 = pd.DataFrame(columns=['Crime_ID', 'Crime_Type'])

# Populate the dataframe
df16['Crime_ID'] = df[0]
df16['Crime_Type'] = 'CRIMINAL TRESPASS'

# Print the dataframe
print(df16)

# Create a new dataframe
df17 = pd.DataFrame(columns=['Crime_ID', 'Crime_Type'])

# Populate the dataframe
df17['Crime_ID'] = df[0]
df17['Crime_Type'] = 'CRIMINAL TRESPASS'

# Print the dataframe
print(df17)

# Create a new dataframe
df18 = pd.DataFrame(columns=['Crime_ID', 'Crime_Type'])

# Populate the dataframe
df18['Crime_ID'] = df[0]
df18['Crime_Type'] = 'CRIMINAL TRESPASS'

# Print the dataframe
print(df18)

# Create a new dataframe
df19 = pd.DataFrame(columns=['Crime_ID', 'Crime_Type'])

# Populate the dataframe
df19['Crime_ID'] = df[0]
df19['Crime_Type'] = 'CRIMINAL TRESPASS'

# Print the dataframe
print(df19)

# Create a new dataframe
df20 = pd.DataFrame(columns=['Crime_ID', 'Crime_Type'])

# Populate the dataframe
df20['Crime_ID'] = df[0]
df20['Crime_Type'] = 'CRIMINAL TRESPASS'

# Print the dataframe
print(df

====================================================================================================

PROMPT 36:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in LA, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 36:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in LA, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd
import numpy as np

# Connect to database
conn = psycopg2.connect(database="postgres", user = "postgres", password = "postgres", host = "127.0.0.1", port = "5432")
cur = conn.cursor()

# Query
cur.execute("""
	SELECT
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude,
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude,
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude,
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude,
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude,
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude,
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude,
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude,
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude,
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude,
	    la_

====================================================================================================

PROMPT 37:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in New York

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 37:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in New York

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the crime types
crime_types = ['THEFT', 'CRIMINAL DAMAGE', 'NARCOTICS', 'ASSAULT', 'BATTERY', 'CRIM SEXUAL ASSAULT', 'CRIMINAL TRESPASS', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL

====================================================================================================

PROMPT 38:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in New York, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 38:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in New York, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd
import numpy as np

# Connect to database
conn = psycopg2.connect(database="postgres", user = "postgres", password = "postgres", host = "localhost", port = "5432")

# Create a cursor
cur = conn.cursor()

# Query
cur.execute("""
	SELECT 
	    Crime_ID,
	    COUNT(Crime_ID) as Total_Cases,
	    MAX(Date_Reported) as Last_Reported,
	    MAX(Crime_Date) as Last_Reported_Date,
	    MAX(Crime_Time) as Last_Reported_Time,
	    Crime_Type,
	    Area_Name,
	    MAX(Vict_Age) as Most_Common_Vict_Age,
	    MAX(Vict_Sex) as Most_Common_Vict_Sex,
	    MAX(Weapon_Desc) as Most_Common_Weapon_Desc,
	    MAX(Address) as Most_Common_Address,
	    MAX(Latitude) as Most_Common_Latitude,
	    MAX(Longitude) as Most_Common_Longitude
	FROM
	    la_crime_data
	GROUP BY
	    Crime_ID,
	    Crime_Type,
	    Area_Name,
	    Most_Common_Vict_Age,
	    Most_Common_Vict_Sex,
	    Most_Common_Weapon_Desc,
	    Most_Common_Address,
	    Most_Common_Latitude,
	    Most_Common_Longitude
	ORDER BY
	    Total_Cases DESC;
""")

# Fetch all the results
rows = cur.fetchall()

# Close the cursor
cur.close()

# Close the connection
conn.close()

# Create a dataframe
df = pd.DataFrame(rows, columns = ['Crime_ID', 'Total_Cases', 'Last_Reported', 'Last_Reported_Date', 'Last_Reported_Time', 'Crime_Type', 'Area_Name', 'Most_Common_Vict_Age', 'Most_Common_Vict_Sex', 'Most_Common_Weapon_Desc', 'Most_Common_Address', 'Most_Common_Latitude', 'Most_Common_Longitude'])

# Print the dataframe
print(df)

# Create a dataframe
df1 = pd.DataFrame(rows, columns = ['Crime_ID', 'Total_Cases', 'Last_Reported', 'Last_Reported_Date', 'Last_Reported_Time', 'Crime_Type', 'Area_Name', 'Most_Common_Vict_Age', 'Most_Common_Vict_Sex', 'Most_Common_Weapon_Desc', 'Most_Common_Address', 'Most_Common_Latitude', 'Most_Common_Longitude'])

# Print the dataframe
print(df1)

# Create a dataframe
df2 = pd.DataFrame(rows, columns = ['Crime_ID', 'Total_Cases', 'Last_Reported', 'Last_Reported_Date', 'Last_Reported_Time', 'Crime_Type', 'Area_Name', 'Most_Common_Vict_Age', 'Most_Common_Vict_Sex', 'Most_Common_Weapon_Desc', 'Most_Common_Address', 'Most_Common_Latitude', 'Most_Common_Longitude'])

# Print the dataframe
print(df2)

# Create a dataframe
df3 = pd.DataFrame(rows, columns = ['Crime_ID', 'Total_Cases', 'Last_Reported', 'Last_Reported_Date', 'Last_Reported_Time', 'Crime_Type', 'Area_Name', 'Most_Common_Vict_Age', 'Most_Common_Vict_Sex', 'Most_Common_Weapon_Desc', 'Most_Common_Address', 'Most_Common_Latitude', 'Most_Common_Longitude'])

# Print the dataframe
print(df3)

# Create a dataframe
df4 = pd.DataFrame(rows, columns = ['Crime_ID', 'Total_Cases', 'Last_Reported', 'Last_Reported_Date', 'Last_Reported_Time', 'Crime_Type', 'Area_Name', 'Most_Common_Vict_Age', 'Most_Common_Vict_Sex', 'Most_Common_Weapon_Desc', 'Most_Common_Address', 'Most_Common_Latitude', 'Most_Common_Longitude'])

# Print the dataframe
print(df4)

# Create a dataframe
df5 = pd.DataFrame(rows, columns = ['Crime_ID', 'Total_Cases', 'Last_Reported', 'Last_Reported_Date', 'Last_Reported_Time', 'Crime_Type', 'Area_Name', 'Most_Common_Vict_Age', 'Most_Common_Vict_Sex', 'Most_Common_Weapon_Desc', 'Most_Common_Address', 'Most_Common_Latitude', 'Most_Common_Longitude'])

# Print the dataframe
print(df5)

# Create a dataframe
df6 = pd.DataFrame(rows, columns = ['Crime_ID', 'Total_Cases', 'Last_Reported', 'Last_Reported_Date', 'Last_Reported_Time', 'Crime_Type', 'Area_Name', 'Most_Common_Vict_Age', 'Most_Common_Vict_Sex', 'Most_Common_Weapon_Desc', 'Most_Common_Address', 'Most_Common_Latitude', 'Most_Common_Longitude'])

# Print the dataframe
print(df6)

# Create a dataframe
df7 = pd.DataFrame(rows, columns = ['Crime_ID', 'Total_Cases', 'Last_Reported', 'Last_Reported_Date', 'Last_Reported_Time', 'Crime_Type', 'Area_Name', 'Most_Common_Vict_Age', 'Most_Common_Vict_Sex', 'Most_Common_Weapon_Desc', 'Most_Common_Address', 'Most_Common_Latitude', 'Most_Common_Longitude'])

# Print the dataframe
print(df7)

# Create a dataframe
df8 = pd.DataFrame(rows, columns = ['Crime_ID', 'Total_Cases', 'Last_Reported', 'Last_Reported_Date', 'Last_Reported_Time', 'Crime_Type', 'Area_Name', 'Most_Common_Vict_Age', 'Most_Common_Vict_Sex', 'Most_Common_Weapon_Desc', 'Most_Common_Address', 'Most_Common_Latitude', 'Most_Common_Longitude'])

# Print the dataframe
print(df8)

# Create a dataframe
df9 = pd.DataFrame(rows, columns = ['Crime_ID', 'Total_Cases', 'Last_Reported', 'Last_Reported_Date', 'Last_Reported_Time', 'Crime_Type', 'Area_Name', 'Most_Common_Vict_Age', 'Most_Common_Vict_Sex', 'Most_Common_Weapon_Desc', 'Most_Common_Address', 'Most_Common_Latitude', 'Most_Common_Longitude'])

# Print the dataframe
print(df9)

# Create a dataframe
df10 = pd.DataFrame(rows, columns = ['Crime_ID', 'Total_Cases', 'Last_Reported', 'Last_Reported_

====================================================================================================

PROMPT 39:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in Philly

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 39:

Generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in Philly

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd
import numpy as np

# Connect to database
conn = psycopg2.connect(database="postgres", user="postgres", password="postgres", host="localhost", port="5432")

# Create a cursor
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT COUNT(Crime_ID)
	FROM la_crime_data
	WHERE Crime_Type = 'ROBBERY'
	AND Area_Name = 'PHILADELPHIA'
	AND Date_Reported = '2020-01-01'
	AND Latitude = '40.7128'
	AND Longitude = '-74.0060'
	;
	""")

# Fetch the results
rows = cur.fetchall()

# Print the results
print(rows)

# Close the cursor
cur.close()

# Close the connection
conn.close()


====================================================================================================

PROMPT 40:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in Philly, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 40:

Generate an SQL statement to answer a question.

Prompt: 
	For each crime type in Philly, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd

# Connect to database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Create a cursor
cur = conn.cursor()

# Query
cur.execute("""
	SELECT 
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude,
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude,
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude,
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude,
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude,
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude,
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude,
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude,
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude,
	    la_crime_data.Crime_ID,
	    la_crime_data.Report_#,
	    la_crime_data.Date_Reported,
	    la_crime_data.Crime_Date,
	    la_crime_data.Crime_Time,
	    la_crime_data.Crime_Type,
	    la_crime_data.Area_Name,
	    la_crime_data.Vict_Age,
	    la_crime_data.Vict_Sex,
	    la_crime_data.Weapon_Desc,
	    la_crime_data.Address,
	    la_crime_data.Latitude,
	    la_crime_data.Longitude,
	    la_

====================================================================================================

PROMPT 41:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in Atlanta, give count of each crime type.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 41:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in Atlanta, give count of each crime type.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the areas in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a list of all the crime types in the database
# Create a

====================================================================================================

PROMPT 42:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in LA, give count of each crime type.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 42:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in LA, give count of each crime type.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the areas in LA
la_areas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

# Create a list of all the areas in Atlanta
atlanta_areas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

# Create a list of all the areas in NY
nyc_areas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

# Create a list of all the areas in Philadelphia
philly_areas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

# Create a list of all the areas in Chicago
chicago_areas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

# Create a list of all the areas in San Francisco
sf_areas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

# Create a list of all the areas in Boston
boston_areas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

# Create a list of all the areas in Miami
miami_areas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

# Create a list of all the areas in Seattle
seattle_areas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

# Create a list of all the areas in San Diego
san_diego_areas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

# Create a list of all the areas in San Jose
san_jose_areas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

# Create a list of all the areas in Los Angeles
los_angeles_areas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

# Create a list of all the areas in Chicago
chicago_areas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

# Create a list of all the areas in San Francisco
sf_areas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

# Create a list of all the areas in Boston
boston_areas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

# Create a list of all the areas in Miami
miami_areas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

# Create a list of all the areas in Seattle
seattle_areas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

# Create a list of all the areas in San Diego
san_diego_areas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

# Create a list of all the areas in San Jose
san_jose_areas = ['A', 'B',

====================================================================================================

PROMPT 43:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in New York, give count of each crime type.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 43:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in New York, give count of each crime type.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the areas in New York
ny_areas = ['Bronx', 'Brooklyn', 'Manhattan', 'Queens', 'Staten Island']

# Create a list of all the crimes in New York
ny_crimes = ['Burglary', 'Robbery', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Assault', 'Homicide', 'Other']

# Create a list of all the areas in Atlanta
atl_areas = ['Atlanta', 'Baldwin', 'Cobb', 'Decatur', 'Dothan', 'Fayette', 'Floyd', 'Fulton', 'Gilmer', 'Gwinnett', 'Habersham', 'Hall', 'Hancock', 'Haralson', 'Harris', 'Hart', 'Henry', 'Houston', 'Jackson', 'Jasper', 'Jeff Davis', 'Jefferson', 'Johnson', 'Jones', 'Lamar', 'Laurens', 'Lee', 'Liberty', 'Lincoln', 'Long', 'Lowndes', 'Madison', 'Marion', 'McDuffie', 'Mitchell', 'Monroe', 'Montgomery', 'Morgan', 'Newton', 'Oconee', 'Oglethorpe', 'Paulding', 'Pickens', 'Pierce', 'Pike', 'Polk', 'Putnam', 'Quitman', 'Richmond', 'Roberson', 'Shelby', 'Sumter', 'Taliaferro', 'Tattnall', 'Taylor', 'Thomas', 'Tift', 'Toombs', 'Towns', 'Treutlen', 'Wake', 'Warren', 'Washington', 'Wayne', 'Webster', 'Wilkes', 'Winston']

# Create a list of all the crimes in Atlanta
atl_crimes = ['Burglary', 'Robbery', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Assault', 'Homicide', 'Other']

# Create a list of all the areas in Philadelphia
phl_areas = ['Allegheny', 'Armstrong', 'Beaver', 'Bedford', 'Berks', 'Blair', 'Bradford', 'Bucks', 'Butler', 'Cambria', 'Centre', 'Chester', 'Clarion', 'Clearfield', 'Clinton', 'Columbia', 'Crawford', 'Cumberland', 'Dauphin', 'Delaware', 'Elk', 'Erie', 'Fayette', 'Forest', 'Franklin', 'Fulton', 'Greene', 'Huntingdon', 'Indiana', 'Jefferson', 'Juniata', 'Lackawanna', 'Lancaster', 'Lawrence', 'Lebanon', 'Lehigh', 'Luzerne', 'Lycoming', 'McKean', 'Mercer', 'Mifflin', 'Monroe', 'Montgomery', 'Northumberland', 'Perry', 'Philadelphia', 'Pike', 'Potter', 'Schuylkill', 'Snyder', 'Somerset', 'Sullivan', 'Susquehanna', 'Tioga', 'Union', 'Venango', 'Warren', 'Washington', 'Westmoreland', 'Wyoming', 'York']

# Create a list of all the crimes in Philadelphia
phl_crimes = ['Burglary', 'Robbery', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Assault', 'Homicide', 'Other']

# Create a list of all the areas in Los Angeles
la_areas = ['Los Angeles', 'Orange', 'Redondo Beach', 'Riverside', 'San Bernardino', 'San Diego', 'San Francisco', 'San Gabriel', 'San Mateo', 'Santa Barbara', 'Santa Clara', 'Santa Cruz', 'Santa Maria', 'Santa Monica', 'Santa Rosa', 'Shasta', 'Solano', 'Sonoma', 'Sonoma', 'Tehama', 'Torrance', 'Ventura', 'Yolo', 'Yuba']

# Create a list of all the crimes in Los Angeles
la_crimes = ['Burglary', 'Robbery', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Assault', 'Homicide', 'Other']

# Create a list of all the areas in Philadelphia
phl_areas = ['Allegheny', 'Armstrong', 'Beaver', 'Bedford', 'Berks', 'Blair', 'Bradford', 'Bucks', 'Butler', 'Cambria', 'Centre', 'Chester', 'Clarion', 'Clearfield', 'Clinton', 'Columbia', 'Crawford', 'Cumberland', 'Dauphin', 'Delaware', 'Elk', 'Erie', 'Fayette', 'Forest', 'Franklin', 'Fulton', 'Greene', 'Huntingdon', 'Indiana', 'Jefferson', 'Juniata', 'Lackawanna', 'Lancaster', 'Lawrence', 'Lebanon', 'Lehigh', 'Luzerne', 'Lycoming', 'McKean', 'Mercer', 'Mifflin', 'Monroe', 'Montgomery', 'Northumberland', 'Perry', 'Philadelphia', 'Pike', 'Potter', 'Schuylkill', 'Snyder', 'Somerset', 'Sullivan', 'Susquehanna', 'Tioga', 'Union', 'Venango', 'Warren', 'Washington', 'Westmoreland', 'Wyoming', 'York']

# Create a list of all the crimes in Philadelphia
phl_crimes = ['Burglary', 'Robbery', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Assault', 'Homicide', 'Other']

# Create a list of all the areas in Philadelphia
phl_areas = ['Allegheny', 'Armstrong', 'Beaver', 'Bedford', 'Berks', 'Blair', 'Bradford', 'Bucks', 'Butler', 'Cambria', 'Centre', 'Chester', 'Clarion', 'Clearfield', 'Clinton', 'Columbia', 'Crawford', 'Cumberland', 'Dauphin', 'Delaware', 'Elk', 'Erie', 'Fayette', 'Forest', 'Franklin', 'Fulton', 'Greene', 'Huntingdon', 'Indiana', 'Jefferson', 'Juniata', 'Lackawanna', 'Lancaster', 'Lawrence', 'Lebanon', 'Lehigh', 'Luzerne', 'Lycoming', 'McKean', 'Mercer', 'Mifflin', 'Monroe', 'Montgomery', 'Northumberland', 'Perry', 'Philadelphia', 'Pike', 'Potter', 'Schuylkill', 'Snyder', 'Somerset', 'Sullivan', 'Susquehanna', 'Tioga', 'Union', 'Venango', 'Warren', 'Washington', 'Westmoreland', 'Wyoming', 'York']

# Create a list of all the areas in Philadelphia
phl_crimes = ['Burglary', 'Robbery', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Assault', 'Homicide', 'Other']

# Create a list of all the areas in New York
ny_areas = ['Bronx', 'Brooklyn', 'Manhattan', 'Queens', 'Staten Island']

# Create a list of all the crimes in New York
ny_crimes = ['Burglary', 'Robbery', 'Larceny', 'Motor Vehicle Theft', 'Arson', 'Assault', 'Homicide', 'Other']

# Create a list of all the areas in Atlanta
atl_areas = ['Atlanta', 'Baldwin', 'Cobb', 'Decatur', 'Dothan', 'Fayette', 'Floyd', 'Fulton', 'Gilmer', 'Gwinnett', 'Habersham', 'Hall', 'Hancock', 'Haralson', 'Harris', 'Hart

====================================================================================================

PROMPT 44:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in Philly, give count of each crime type.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 44:

Generate an SQL statement to answer a question.

Prompt: 
	For each area in Philly, give count of each crime type.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the areas in the database
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
# Create a list of all the crime types
#

====================================================================================================

PROMPT 45:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in Atlanta.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 45:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in Atlanta.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of

====================================================================================================

PROMPT 46:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in Atlanta.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 46:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in Atlanta.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the crime types
crime_types = ["Theft", "Assault", "Burglary", "Robbery", "Larceny", "Vehicle Theft", "Vandalism", "Arson", "Murder", "Murder and Nonnegligent Manslaughter", "Rape", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes", "Sex Crimes

====================================================================================================

PROMPT 47:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in Atlanta.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 47:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in Atlanta.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the crime types
crime_types = ['THEFT', 'CRIMINAL DAMAGE', 'NARCOTICS', 'ASSAULT', 'BATTERY', 'CRIM SEXUAL ASSAULT', 'CRIMINAL TRESPASS', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIM

====================================================================================================

PROMPT 48:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in LA.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 48:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in LA.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import datetime

# Connect to the database
conn = psycopg2.connect(
    host = "localhost",
    database = "postgres",
    user = "postgres",
    password = "postgres"
)

# Open a cursor to perform database operations
cur = conn.cursor()

# Query the database
cur.execute("""
    SELECT
        COUNT(Crime_ID)
    FROM
        la_crime_data
    WHERE
        Crime_Date = '2020-01-01'
""")

# Fetch the results
rows = cur.fetchall()

# Close the cursor
cur.close()

# Close the database connection
conn.close()

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)

# Print the results
print(rows)


====================================================================================================

PROMPT 49:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in LA.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 49:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in LA.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the tables
tables = [
	"la_crime_data",
	"atlanta_crime_data",
	"nyc_crime_data",
	"philly_crime_data"
]

# Create a list of all the columns
columns = [
	"Crime_ID",
	"Report_#",
	"Date_Reported",
	"Crime_Date",
	"Crime_Time",
	"Crime_Type",
	"Area_Name",
	"Vict_Age",
	"Vict_Sex",
	"Weapon_Desc",
	"Address",
	"Latitude",
	"Longitude"
]

# Create a list of all the columns
columns_nyc = [
	"Crime_ID",
	"Report_#",
	"Day_Occurred",
	"Crime_Date",
	"Crime_Time",
	"Crime_Type",
	"Area_Name",
	"Latitude",
	"Longitude"
]

# Create a list of all the columns
columns_philly = [
	"Crime_ID",
	"Report_#",
	"Crime_Date",
	"Crime_Time",
	"Crime_Type",
	"Area_#",
	"Address",
	"Longitude",
	"Latitude"
]

# Create a list of all the columns
columns_atlanta = [
	"Crime_ID",
	"Report_#",
	"Crime_Date",
	"Crime_Time",
	"Crime_Type",
	"Area_Name",
	"Address",
	"Longitude",
	"Latitude"
]

# Create a list of all the columns
columns_la = [
	"Crime_ID",
	"Report_#",
	"Crime_Date",
	"Crime_Time",
	"Crime_Type",
	"Area_Name",
	"Vict_Age",
	"Vict_Sex",
	"Weapon_Desc",
	"Address",
	"Latitude",
	"Longitude"
]

# Create a list of all the columns
columns_nyc_crime_data = [
	"Crime_ID",
	"Report_#",
	"Day_Occurred",
	"Crime_Date",
	"Crime_Time",
	"Crime_Type",
	"Area_Name",
	"Latitude",
	"Longitude"
]

# Create a list of all the columns
columns_philly_crime_data = [
	"Crime_ID",
	"Report_#",
	"Crime_Date",
	"Crime_Time",
	"Crime_Type",
	"Area_#",
	"Address",
	"Longitude",
	"Latitude"
]

# Create a list of all the columns
columns_atlanta_crime_data = [
	"Crime_ID",
	"Report_#",
	"Crime_Date",
	"Crime_Time",
	"Crime_Type",
	"Area_Name",
	"Address",
	"Longitude",
	"Latitude"
]

# Create a list of all the columns
columns_la_crime_data = [
	"Crime_ID",
	"Report_#",
	"Crime_Date",
	"Crime_Time",
	"Crime_Type",
	"Area_Name",
	"Vict_Age",
	"Vict_Sex",
	"Weapon_Desc",
	"Address",
	"Latitude",
	"Longitude"
]

# Create a list of all the columns
columns_nyc_crime_data_1 = [
	"Crime_ID",
	"Report_#",
	"Day_Occurred",
	"Crime_Date",
	"Crime_Time",
	"Crime_Type",
	"Area_Name",
	"Latitude",
	"Longitude"
]

# Create a list of all the columns
columns_philly_crime_data_1 = [
	"Crime_ID",
	"Report_#",
	"Crime_Date",
	"Crime_Time",
	"Crime_Type",
	"Area_#",
	"Address",
	"Longitude",
	"Latitude"
]

# Create a list of all the columns
columns_atlanta_crime_data_1 = [
	"Crime_ID",
	"Report_#",
	"Crime_Date",
	"Crime_Time",
	"Crime_Type",
	"Area_Name",
	"Address",
	"Longitude",
	"Latitude"
]

# Create a list of all the columns
columns_la_crime_data_1 = [
	"Crime_ID",
	"Report_#",
	"Crime_Date",
	"Crime_Time",
	"Crime_Type",
	"Area_Name",
	"Vict_Age",
	"Vict_Sex",
	"Weapon_Desc",
	"Address",
	"Latitude",
	"Longitude"
]

# Create a list of all the columns
columns_nyc_crime_data_2 = [
	"Crime_ID",
	"Report_#",
	"Day_Occurred",
	"Crime_Date",
	"Crime_Time",
	"Crime_Type",
	"Area_Name",
	"Latitude",
	"Longitude"
]

# Create a list of all the columns
columns_philly_crime_data_2 = [
	"Crime_ID",
	"Report_#",
	"Crime_Date",
	"Crime_Time",
	"Crime_Type",
	"Area_#",
	"Address",
	"Longitude",
	"Latitude"
]

# Create a list of all the columns
columns_atlanta_crime_data_2 = [
	"Crime_ID",
	"Report_#",
	"Crime_Date",
	"Crime_Time",
	"Crime_Type",
	"Area_Name",
	"Address",
	"Longitude",
	"Latitude"
]

# Create a list of all the columns
columns_la_crime_data_2 = [
	"Crime_ID",
	"Report_#",
	"Crime_Date",
	"Crime_Time",
	"Crime_Type",
	"Area_Name",
	"Vict_Age",
	"Vict_Sex",
	"Weapon_Desc",
	"Address",
	"Latitude",
	"Longitude"
]

# Create a list of all the columns
columns_nyc_crime_data_3 = [
	"Crime_ID",
	"Report_#",
	"Day_Occurred",
	"Crime_Date",
	"Crime_Time",
	"Crime_Type",
	"Area_Name",
	"Latitude",
	"Longitude"
]

# Create a list of all the columns
columns_philly_crime_data_3 = [
	"Crime_ID",
	"Report_#",
	"Crime_Date",
	"Crime_Time",
	"Crime_Type",
	"Area_#",
	"Address",
	"Longitude",
	"Latitude"
]

# Create a list of all the columns
columns_atlanta_crime_data_3 = [
	"Crime_

====================================================================================================

PROMPT 50:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in LA.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 50:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in LA.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the crime types
crime_types = ['Theft', 'Assault', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Vehicle Theft', 'Arson', 'Murder', 'Murder and Nonnegligent Manslaughter', 'Rape', 'Sex Crimes', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery', 'Larceny', 'Vandalism', 'Burglary', 'Robbery',

====================================================================================================

PROMPT 51:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in New York.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 51:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in New York.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list of all the crimes in the database
# Create a list

====================================================================================================

PROMPT 52:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in New York.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 52:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in New York.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the tables
tables = ['la_crime_data', 'atlanta_crime_data', 'nyc_crime_data', 'philly_crime_data']

# Create a list of all the columns
columns = ['Crime_ID', 'Report_#', 'Date_Reported', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Vict_Age', 'Vict_Sex', 'Weapon_Desc', 'Address', 'Latitude', 'Longitude']

# Create a list of all the columns
columns_atlanta = ['Crime_ID', 'Report_#', 'Day_Occurred', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Longitude', 'Latitude']

# Create a list of all the columns
columns_nyc = ['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Class', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']

# Create a list of all the columns
columns_philly = ['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_#', 'Address', 'Longitude', 'Latitude']

# Create a list of all the columns
columns_la = ['Crime_ID', 'Report_#', 'Date_Reported', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Vict_Age', 'Vict_Sex', 'Weapon_Desc', 'Address', 'Latitude', 'Longitude']

# Create a list of all the columns
columns_nyc_crime_data = ['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']

# Create a list of all the columns
columns_philly_crime_data = ['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_#', 'Address', 'Longitude', 'Latitude']

# Create a list of all the columns
columns_la_crime_data = ['Crime_ID', 'Report_#', 'Date_Reported', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Vict_Age', 'Vict_Sex', 'Weapon_Desc', 'Address', 'Latitude', 'Longitude']

# Create a list of all the columns
columns_atlanta_crime_data = ['Crime_ID', 'Report_#', 'Day_Occurred', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Longitude', 'Latitude']

# Create a list of all the columns
columns_nyc_crime_data = ['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']

# Create a list of all the columns
columns_philly_crime_data = ['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_#', 'Address', 'Longitude', 'Latitude']

# Create a list of all the columns
columns_atlanta_crime_data = ['Crime_ID', 'Report_#', 'Day_Occurred', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Longitude', 'Latitude']

# Create a list of all the columns
columns_nyc_crime_data = ['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']

# Create a list of all the columns
columns_philly_crime_data = ['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_#', 'Address', 'Longitude', 'Latitude']

# Create a list of all the columns
columns_la_crime_data = ['Crime_ID', 'Report_#', 'Date_Reported', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Vict_Age', 'Vict_Sex', 'Weapon_Desc', 'Address', 'Latitude', 'Longitude']

# Create a list of all the columns
columns_atlanta_crime_data = ['Crime_ID', 'Report_#', 'Day_Occurred', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Longitude', 'Latitude']

# Create a list of all the columns
columns_nyc_crime_data = ['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']

# Create a list of all the columns
columns_philly_crime_data = ['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_#', 'Address', 'Longitude', 'Latitude']

# Create a list of all the columns
columns_la_crime_data = ['Crime_ID', 'Report_#', 'Date_Reported', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Vict_Age', 'Vict_Sex', 'Weapon_Desc', 'Address', 'Latitude', 'Longitude']

# Create a list of all the columns
columns_nyc_crime_data = ['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']

# Create a list of all the columns
columns_philly_crime_data = ['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_#', 'Address', 'Longitude', 'Latitude']

# Create a list of all the columns
columns_la_crime_data = ['Crime_ID', 'Report_#', 'Date_Reported', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Vict_Age', 'Vict_Sex', 'Weapon_Desc', 'Address', 'Latitude', 'Longitude']

# Create a list of all the columns
columns_atlanta_crime_data = ['Crime_ID', 'Report_#', 'Day_Occurred', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Address', 'Longitude', 'Latitude']

# Create a list of all the columns
columns_nyc_crime_data = ['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Latitude', 'Longitude']

# Create a list of all the columns
columns_philly_crime_data = ['Crime_ID', 'Report_#', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_#', 'Address', 'Longitude', 'Latitude']

# Create a list of all the columns
columns_la_crime_data = ['Crime_ID', 'Report_#', 'Date_Reported', 'Crime_Date', 'Crime_Time', 'Crime_Type', 'Area_Name', 'Vict_Age', 'Vict_Sex', 'Weapon_Desc', 'Address', '

====================================================================================================

PROMPT 53:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in New York.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 53:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in New York.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Create a list of all the crime types
crime_types = ['THEFT', 'CRIMINAL DAMAGE', 'NARCOTICS', 'ASSAULT', 'BATTERY', 'CRIM SEXUAL ASSAULT', 'CRIMINAL TRESPASS', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CRIMINAL DAMAGE', 'CR

====================================================================================================

PROMPT 54:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in Philly.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 54:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in Philly.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import datetime

# Connect to database
conn = psycopg2.connect(
    host="localhost",
    database="postgres",
    user="postgres",
    password="postgres"
)

# Create a cursor
cur = conn.cursor()

# Create a query
query = """
SELECT
	CASE
		WHEN DATE_PART('weekday', CAST(Crime_Date as DATE)) = 0 THEN 'Monday'
		WHEN DATE_PART('weekday', CAST(Crime_Date as DATE)) = 1 THEN 'Tuesday'
		WHEN DATE_PART('weekday', CAST(Crime_Date as DATE)) = 2 THEN 'Wednesday'
		WHEN DATE_PART('weekday', CAST(Crime_Date as DATE)) = 3 THEN 'Thursday'
		WHEN DATE_PART('weekday', CAST(Crime_Date as DATE)) = 4 THEN 'Friday'
		WHEN DATE_PART('weekday', CAST(Crime_Date as DATE)) = 5 THEN 'Saturday'
		WHEN DATE_PART('weekday', CAST(Crime_Date as DATE)) = 6 THEN 'Sunday'
	END as Day_of_Week,
	COUNT(Crime_ID)
FROM
	la_crime_data
GROUP BY
	Day_of_Week
ORDER BY
	Day_of_Week;
"""

# Execute the query
cur.execute(query)

# Fetch the results
rows = cur.fetchall()

# Print the results
for row in rows:
    print(row)

# Close the cursor
cur.close()

# Close the connection
conn.close()


====================================================================================================

PROMPT 55:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in Philly.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 55:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in Philly.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import re

# Connect to the database
conn = psycopg2.connect(database = "postgres", user = "postgres", password = "postgres", host = "127.0.0.1", port = "5432")
cur = conn.cursor()

# Create a list of all the tables
tables = ["la_crime_data", "atlanta_crime_data", "nyc_crime_data", "philly_crime_data"]

# Create a list of all the columns
columns = ["Crime_ID", "Report_#", "Date_Reported", "Crime_Date", "Crime_Time", "Crime_Type", "Area_Name", "Vict_Age", "Vict_Sex", "Weapon_Desc", "Address", "Latitude", "Longitude"]

# Create a list of all the columns for each table
la_columns = ["Crime_ID", "Report_#", "Date_Reported", "Crime_Date", "Crime_Time", "Crime_Type", "Area_Name", "Vict_Age", "Vict_Sex", "Weapon_Desc", "Address", "Latitude", "Longitude"]
atlanta_columns = ["Crime_ID", "Report_#", "Day_Occurred", "Crime_Date", "Crime_Time", "Crime_Type", "Area_Name", "Address", "Longitude", "Latitude"]
nyc_columns = ["Crime_ID", "Report_#", "Crime_Date", "Crime_Time", "Crime_Class", "Crime_Type", "Area_Name", "Latitude", "Longitude"]
philly_columns = ["Crime_ID", "Report_#", "Crime_Date", "Crime_Time", "Crime_Type", "Area_#", "Address", "Longitude", "Latitude"]

# Create a list of all the columns for each table
all_columns = [la_columns, atlanta_columns, nyc_columns, philly_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table
all_columns = [tables, all_columns]

# Create a list of all the tables
all_tables = [tables, all_columns]

# Create a list of all the columns for each table

====================================================================================================

PROMPT 56:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in Philly.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 56:

Generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in Philly.

All Schema: 
	    la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)
	    atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)
	    nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)
	    philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

"""

# Import statements
import psycopg2
import pandas as pd
import numpy as np

# Connect to database
conn = psycopg2.connect(database="postgres", user="postgres", password="postgres", host="localhost", port="5432")

# Create a cursor to perform database operations
cur = conn.cursor()

# Query the database
cur.execute("""
	SELECT 
	    COUNT(DISTINCT(Crime_ID))
	FROM 
	    la_crime_data
	WHERE
	    Crime_Date = '2020-01-01'
	""")

# Save the query results
crime_count = cur.fetchall()

# Close the cursor and connection to so the server can allocate
# bandwidth to other requests
cur.close()
conn.close()

# Print the results
print(crime_count)

# Print the results
print(crime_count)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results
df = pd.DataFrame(crime_count, columns=['Count'])

# Print the dataframe
print(df)

# Create a dataframe to store the results

====================================================================================================

