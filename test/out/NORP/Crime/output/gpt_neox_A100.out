PROMPT 1:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta on each day of the week

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 1:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta on each day of the week

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(*) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday'

Expected Output:
	'INSUFFICENT'

Input:
	'INSUFFICENT'

Output:
	'INSUFFICENT'

Input:
	'SELECT COUNT(*) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday''

Output:
	'INSUFFICENT'

Input:
	'SELECT COUNT(*) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday' AND Area_Name = 'Downtown Atlanta''

Output:
	'INSUFFICENT'

Input:
	'SELECT COUNT(*) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday' AND Area_Name = 'Downtown Atlanta' AND Longitude = '33.748''

Output:
	'INSUFFICENT'

Input:
	'SELECT COUNT(*) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday' AND Area_Name = 'Downtown Atlanta' AND Longitude = '33.748' AND Latitude = '33.748''

Output:
	'INSUFFICENT'

Input:
	'SELECT COUNT(*) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday' AND Area_Name = 'Downtown Atlanta' AND Longitude = '33.748' AND Latitude = '33.748' AND Crime_Type = 'Murder''

Output:
	'INSUFFICENT'

Input:
	'SELECT COUNT(*) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday' AND Area_Name = 'Downtown Atlanta' AND Longitude = '33.748' AND Latitude = '33.748' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015''

Output:
	'INSUFFICENT'

Input:
	'SELECT COUNT(*) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday' AND Area_Name = 'Downtown Atlanta' AND Longitude = '33.748' AND Latitude = '33.748' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00'''

Output:
	'INSUFFICENT'

Input:
	'SELECT COUNT(*) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday' AND Area_Name = 'Downtown Atlanta' AND Longitude = '33.748' AND Latitude = '33.748' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder''

Output:
	'INSUFFICENT'

Input:
	'SELECT COUNT(*) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday' AND Area_Name = 'Downtown Atlanta' AND Longitude = '33.748' AND Latitude = '33.748' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder''

Output:
	'INSUFFICENT'

Input:
	'SELECT COUNT(*) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday' AND Area_Name = 'Downtown Atlanta' AND Longitude = '33.748' AND Latitude = '33.748' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder''

Output:
	'INSUFFICENT'

Input:
	'SELECT COUNT(*) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday' AND Area_Name = 'Downtown Atlanta' AND Longitude = '33.748' AND Latitude = '33.748' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder''

Output:
	'INSUFFICENT'

Input:
	'SELECT COUNT(*) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday' AND Area_Name = 'Downtown Atlanta' AND Longitude = '33.748' AND Latitude = '33.748' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder''

Output:
	'INSUFFICENT'

Input:
	'SELECT COUNT(*) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday' AND Area_Name = 'Downtown Atlanta' AND Longitude = '33.748' AND Latitude = '33.748' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder''

Output:
	'INSUFFICENT'

Input:
	'SELECT COUNT(*) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday' AND Area_Name = 'Downtown Atlanta' AND Longitude = '33.748' AND Latitude = '33.748' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:

====================================================================================================

PROMPT 2:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta during each month of the year

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 2:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta during each month of the year

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

Expected Output:
	| Month | Total |
	| Jan   |  10   |
	| Feb   |  12   |
	| Mar   |  10   |
	| Apr   |  10   |
	| May   |  10   |
	| Jun   |  10   |
	| Jul   |  10   |
	| Aug   |  10   |
	| Sep   |  10   |
	| Oct   |  10   |
	| Nov   |  10   |
	| Dec   |  10   |

Hint:
	Use the following query to get the month names:
	SELECT DISTINCT Month_Name FROM atlanta_crime_data

---
### SQL Quiz #2

Prompt:
	Give the total number of crimes in Atlanta for each month of the year.

Schema:
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

Expected Output:
	| Month | Total |
	| Jan   |  10   |
	| Feb   |  12   |
	| Mar   |  10   |
	| Apr   |  10   |
	| May   |  10   |
	| Jun   |  10   |
	| Jul   |  10   |
	| Aug   |  10   |
	| Sep   |  10   |
	| Oct   |  10   |
	| Nov   |  10   |
	| Dec   |  10   |

Hint:
	Use the following query to get the month names:
	SELECT DISTINCT Month_Name FROM atlanta_crime_data

---
### SQL Quiz #3

Prompt:
	Give the total number of crimes in Atlanta for each month of the year.

Schema:
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

Expected Output:
	| Month | Total |
	| Jan   |  10   |
	| Feb   |  12   |
	| Mar   |  10   |
	| Apr   |  10   |
	| May   |  10   |
	| Jun   |  10   |
	| Jul   |  10   |
	| Aug   |  10   |
	| Sep   |  10   |
	| Oct   |  10   |
	| Nov   |  10   |
	| Dec   |  10   |

Hint:
	Use the following query to get the month names:
	SELECT DISTINCT Month_Name FROM atlanta_crime_data

---
### SQL Quiz #4

Prompt:
	Give the total number of crimes in Atlanta for each month of the year.

Schema:
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

Expected Output:
	| Month | Total |
	| Jan   |  10   |
	| Feb   |  12   |
	| Mar   |  10   |
	| Apr   |  10   |
	| May   |  10   |
	| Jun   |  10   |
	| Jul   |  10   |
	| Aug   |  10   |
	| Sep   |  10   |
	| Oct   |  10   |
	| Nov   |  10   |
	| Dec   |  10   |

Hint:
	Use the following query to get the month names:
	SELECT DISTINCT Month_Name FROM atlanta_crime_data

---
### SQL Quiz #5

Prompt:
	Give the total number of crimes in Atlanta for each month of the year.

Schema:
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

Expected Output:
	| Month | Total |
	| Jan   |  10   |
	| Feb   |  12   |
	| Mar   |  10   |
	| Apr   |  10   |
	| May   |  10   |
	| Jun   |  10   |
	| Jul   |  10   |
	| Aug   |  10   |
	| Sep   |  10   |
	| Oct   |  10   |
	| Nov   |  10   |
	| Dec   |  10   |

Hint:
	Use the following query to get the month names:
	SELECT DISTINCT Month_Name FROM atlanta_crime_data

---
### SQL Quiz #6

Prompt:
	Give the total number of crimes in Atlanta for each month of the year.

Schema:
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(Crime_ID) FROM atlanta_crime_data WHERE Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

Expected Output:
	| Month | Total |
	| Jan   |  10   |
	| Feb   |  12   |
	| Mar   |  10   |
	| Apr   |  10   |
	| May   |  10   |
	| Jun   |  10   |
	| Jul   |  10   |
	| Aug   |  10   |
	| Sep   |  10   |
	| Oct   |  10   |
	| Nov   |  10   |
	| Dec   |  10   |

Hint:
	Use the following query to get the month names:
	SELECT DISTINCT Month_Name FROM atlanta_crime_data

---
### SQL Quiz #7

Prompt:
	Give the total number of crimes in Atlanta for each month of the year.

Schema:
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.

====================================================================================================

PROMPT 3:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta at each hour of the day

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 3:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Atlanta at each hour of the day

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(*) FROM atlanta_crime_data WHERE Day_Occurred = 'Monday' AND Crime_Date = '01/01/2015' AND Crime_Time = '00:00:00' AND Crime_Type = 'Murder' AND Area_Name = 'Atlanta' AND Address = '123 Main St' AND Longitude = '123.456789' AND Latitude = '123.456789'

Note, the above SQL statement is not correct, but it is the most accurate SQL statement that can be made.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:
	The most accurate SQL statement is the one that is the most specific.

Hint:


====================================================================================================

PROMPT 4:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in Atlanta grouped by week since January 2009

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 4:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in Atlanta grouped by week since January 2009

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

SQL:
	SELECT COUNT(*)
	FROM atlanta_crime_data
	WHERE Report_# = '1'
	AND Day_Occurred >= '2009-01-01'
	AND Day_Occurred < '2009-01-01' + INTERVAL '1' WEEK
	AND Area_Name = 'Atlanta'
	AND Address = 'Atlanta'
	AND Longitude = '33.7'
	AND Latitude = '33.7'
	AND Crime_Type = 'Murder'
	AND Crime_Date >= '2009-01-01'
	AND Crime_Date < '2009-01-01' + INTERVAL '1' WEEK
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_Time >= '09:00:00'
	AND Crime_Time < '09:00:00' + INTERVAL '1' HOUR
	AND Crime_

====================================================================================================

PROMPT 5:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA on each day of the week

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 5:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA on each day of the week

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

SQL Statement:
	SELECT Crime_ID, COUNT(*)
	FROM la_crime_data
	WHERE Crime_Date BETWEEN '01/01/2012' AND '01/01/2012'
	GROUP BY Crime_ID
	ORDER BY COUNT(*) DESC

Expected Output:
	[1]	[2]	[3]	[4]	[5]	[6]	[7]	[8]	[9]	[10]	[11]	[12]	[13]	[14]	[15]	[16]	[17]	[18]	[19]	[20]	[21]	[22]	[23]	[24]	[25]	[26]	[27]	[28]	[29]	[30]	[31]	[32]	[33]	[34]	[35]	[36]	[37]	[38]	[39]	[40]	[41]	[42]	[43]	[44]	[45]	[46]	[47]	[48]	[49]	[50]	[51]	[52]	[53]	[54]	[55]	[56]	[57]	[58]	[59]	[60]	[61]	[62]	[63]	[64]	[65]	[66]	[67]	[68]	[69]	[70]	[71]	[72]	[73]	[74]	[75]	[76]	[77]	[78]	[79]	[80]	[81]	[82]	[83]	[84]	[85]	[86]	[87]	[88]	[89]	[90]	[91]	[92]	[93]	[94]	[95]	[96]	[97]	[98]	[99]	[100]	[101]	[102]	[103]	[104]	[105]	[106]	[107]	[108]	[109]	[110]	[111]	[112]	[113]	[114]	[115]	[116]	[117]	[118]	[119]	[120]	[121]	[122]	[123]	[124]	[125]	[126]	[127]	[128]	[129]	[130]	[131]	[132]	[133]	[134]	[135]	[136]	[137]	[138]	[139]	[140]	[141]	[142]	[143]	[144]	[145]	[146]	[147]	[148]	[149]	[150]	[151]	[152]	[153]	[154]	[155]	[156]	[157]	[158]	[159]	[160]	[161]	[162]	[163]	[164]	[165]	[166]	[167]	[168]	[169]	[170]	[171]	[172]	[173]	[174]	[175]	[176]	[177]	[178]	[179]	[180]	[181]	[182]	[183]	[184]	[185]	[186]	[187]	[188]	[189]	[190]	[191]	[192]	[193]	[194]	[195]	[196]	[197]	[198]	[199]	[200]	[201]	[202]	[203]	[204]	[205]	[206]	[207]	[208]	[209]	[210]	[211]	[212]	[213]	[214]	[215]	[216]	[217]	[218]	[219]	[220]	[221]	[222]	[223]	[224]	[225]	[226]	[227]	[228]	[229]	[230]	[231]	[232]	[233]	[234]	[235]	[236]	[237]	[238]	[239]	[240]	[241]	[242]	[243]	[244]	[245]	[246]	[247]	[248]	[249]	[250]	[251]	[252]	[253]	[254]	[255]	[256]	[257]	[258]	[259]	[260]	[261]	[262]	[263]	[264]	[265]	[266]	[267]	[268]	[269]	[270]	[271]	[272]	[273]	[274]	[275]	[276]	[277]	[278]	[279]	[280]	[281]	[282]	[283]	[284]	[285]	[286]	[287]	[288]	[289]	[290]	[291]	[292]	[293]	[294]	[295]	[296]	[297]	[298]	[299]	[300]	[301]	[302]	[303]	[304]	[305]	[306]	[307]	[308]	[309]	[310]	[311]	[312]	[313]	[314]	[315]	[316]	[317]	[318]	[319]	[320]	[321]	[322]	[323]	[324]	[325]	[326]	[327]	[328]	[329]	[330]	[331]	[332]	[333]	[334]	[335]	[336]	[337]	[338]	[339]	[340]	[341]	[342]	[343]	[344]	[345]	[346]	[347]	[348]	[349]	[350]	[351]	[352]	[353]	[354]	[355]	[356]	[357]	[358]	[359]	[360]	[361]	[362]	[363]	[364]	[365]	[366]	[367]	[368]	[369]	[370]	[371]	[372]	[373]	[374]	[375]	[376]	[377]	[378]	[379]	[380]	[381]	[382]	[383]	[384]	[385]	[386]	[387]	[388]	[389]	[390]	[391]	[392]	[393]	[394]	[395]	[396]	[397]	[398]	[399]	[400]	[401]	[402]	[403]	[404]	[405]	[406]	[407]	[408]	[409]	[410]	[411]	[412]	[413]	[414]	[415]	[416]	[417]	[418]	[419]	[420]	[421]	[422]	[423]	[424]	[425]	[426]	[427]	[428]	[429]	[430]	[431]	[432]	[433]	[434]	[435]	[436]	[437]	[438]	[439]	[440]	[441]	[442]	[443]	[444]	[445]	[446]	[447]	[448]	[449]	[450]	[451]	[452]	[453]	[454]	[455]	[456]	[457]	[458]	[459]	[460]	[461]	[

====================================================================================================

PROMPT 6:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA during each month of the year

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 6:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA during each month of the year

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:

Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude
1, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
2, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
3, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
4, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
5, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
6, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
7, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
8, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
9, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
10, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
11, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
12, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
13, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
14, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
15, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
16, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
17, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
18, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
19, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
20, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
21, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
22, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
23, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
24, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
25, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
26, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
27, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
28, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
29, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
30, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
31, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
32, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
33, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
34, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
35, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
36, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
37, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
38, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife, 123 Main St, 34.123, -118.123
39, 1, 1/1/2014, 1/1/2014, 12:00:00, Assault, Los Angeles, 18, Male, Knife

====================================================================================================

PROMPT 7:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA at each hour of the day

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 7:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in LA at each hour of the day

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	1, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	2, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	3, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	4, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	5, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	6, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	7, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	8, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	9, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	10, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	11, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	12, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	13, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	14, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	15, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	16, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	17, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	18, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	19, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	20, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	21, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	22, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	23, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	24, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	25, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	26, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	27, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0', 'M', 'None', '123 Main St.', '34.05', '-118.24'
	28, 1, '2015-01-01', '2015-01-01 00:00:00', '2015-01-01 00:00:00', 'Assault', 'Los Angeles', '0

====================================================================================================

PROMPT 8:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in LA grouped by week

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 8:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in LA grouped by week

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

```sql
SELECT COUNT(*)
FROM la_crime_data
WHERE Crime_Date >= '2019-01-01'
AND Crime_Date < '2019-01-31'
AND Crime_Type = 'Murder'
AND Area_Name = 'Los Angeles'
AND Vict_Age > 0
AND Vict_Sex = 'Male'
AND Weapon_Desc = 'Firearm'
AND Address = 'Los Angeles'
AND Latitude >= -118
AND Latitude < -114
AND Longitude >= -118
AND Longitude < -114
```

```sql
INSUFFICENT
```

## 解答

```sql
SELECT COUNT(*)
FROM la_crime_data
WHERE Crime_Date >= '2019-01-01'
AND Crime_Date < '2019-01-31'
AND Crime_Type = 'Murder'
AND Area_Name = 'Los Angeles'
AND Vict_Age > 0
AND Vict_Sex = 'Male'
AND Weapon_Desc = 'Firearm'
AND Address = 'Los Angeles'
AND Latitude >= -118
AND Latitude < -114
AND Longitude >= -118
AND Longitude < -114
```

```sql
SELECT COUNT(*)
FROM la_crime_data
WHERE Crime_Date >= '2019-01-01'
AND Crime_Date < '2019-01-31'
AND Crime_Type = 'Murder'
AND Area_Name = 'Los Angeles'
AND Vict_Age > 0
AND Vict_Sex = 'Male'
AND Weapon_Desc = 'Firearm'
AND Address = 'Los Angeles'
AND Latitude >= -118
AND Latitude < -114
AND Longitude >= -118
AND Longitude < -114
```

```sql
SELECT COUNT(*)
FROM la_crime_data
WHERE Crime_Date >= '2019-01-01'
AND Crime_Date < '2019-01-31'
AND Crime_Type = 'Murder'
AND Area_Name = 'Los Angeles'
AND Vict_Age > 0
AND Vict_Sex = 'Male'
AND Weapon_Desc = 'Firearm'
AND Address = 'Los Angeles'
AND Latitude >= -118
AND Latitude < -114
AND Longitude >= -118
AND Longitude < -114
```

```sql
SELECT COUNT(*)
FROM la_crime_data
WHERE Crime_Date >= '2019-01-01'
AND Crime_Date < '2019-01-31'
AND Crime_Type = 'Murder'
AND Area_Name = 'Los Angeles'
AND Vict_Age > 0
AND Vict_Sex = 'Male'
AND Weapon_Desc = 'Firearm'
AND Address = 'Los Angeles'
AND Latitude >= -118
AND Latitude < -114
AND Longitude >= -118
AND Longitude < -114
```

```sql
SELECT COUNT(*)
FROM la_crime_data
WHERE Crime_Date >= '2019-01-01'
AND Crime_Date < '2019-01-31'
AND Crime_Type = 'Murder'
AND Area_Name = 'Los Angeles'
AND Vict_Age > 0
AND Vict_Sex = 'Male'
AND Weapon_Desc = 'Firearm'
AND Address = 'Los Angeles'
AND Latitude >= -118
AND Latitude < -114
AND Longitude >= -118
AND Longitude < -114
```

```sql
SELECT COUNT(*)
FROM la_crime_data
WHERE Crime_Date >= '2019-01-01'
AND Crime_Date < '2019-01-31'
AND Crime_Type = 'Murder'
AND Area_Name = 'Los Angeles'
AND Vict_Age > 0
AND Vict_Sex = 'Male'
AND Weapon_Desc = 'Firearm'
AND Address = 'Los Angeles'
AND Latitude >= -118
AND Latitude < -114
AND Longitude >= -118
AND Longitude < -114
```

```sql
SELECT COUNT(*)
FROM la_crime_data
WHERE Crime_Date >= '2019-01-01'
AND Crime_Date < '2019-01-31'
AND Crime_Type = 'Murder'
AND Area_Name = 'Los Angeles'
AND Vict_Age > 0
AND Vict_Sex = 'Male'
AND Weapon_Desc = 'Firearm'
AND Address = 'Los Angeles'
AND Latitude >= -118
AND Latitude < -114
AND Longitude >= -118
AND Longitude < -114
```

```sql
SELECT COUNT(*)
FROM la_crime_data
WHERE Crime_Date >= '2019-01-01'
AND Crime_Date < '2019-01-31'
AND Crime_Type = 'Murder'
AND Area_Name = 'Los Angeles'
AND Vict_Age > 0
AND Vict_Sex = 'Male'
AND Weapon_Desc = 'Firearm'
AND Address = 'Los Angeles'
AND Latitude >= -118
AND Latitude < -114
AND Longitude >= -118
AND Longitude < -114
```

```sql
SELECT COUNT(*)
FROM la_crime_data
WHERE Crime_Date >= '2019-01-01'
AND Crime_Date < '2019-01-31'
AND Crime_Type = 'Murder'
AND Area_Name = 'Los Angeles'
AND Vict_Age > 0
AND Vict_Sex = 'Male'
AND Weapon_Desc = 'Firearm'
AND Address = 'Los Angeles'
AND Latitude >= -118
AND Latitude < -114
AND Longitude >= -118
AND Longitude < -114
```

```sql
SELECT COUNT(*)
FROM la_crime_data
WHERE Crime_Date >= '2019-01-01'
AND Crime_Date < '2019-01-31'
AND Crime_Type = 'Murder'
AND Area_Name = 'Los Angeles'
AND Vict_Age > 0
AND Vict_Sex = 'Male'
AND Weapon_Desc = 'Firearm'
AND Address = 'Los Angeles'
AND Latitude >= -118
AND Latitude < -114
AND Longitude >= -118
AND Longitude < -114
```

```sql
SELECT COUNT(*)
FROM la_crime_data
WHERE Crime_Date >= '2019-01-01'
AND Crime_Date < '2019-01-31'
AND Crime_Type = 'Murder'
AND Area_Name = 'Los Angeles'
AND Vict_Age > 0
AND Vict_Sex = 'Male'
AND Weapon_Desc = 'Firearm'
AND Address = 'Los Angeles'
AND Latitude >= -118
AND Latitude < -114
AND Longitude >= -118
AND Longitude < -114
```

```sql
SELECT COUNT(*)
FROM la_crime_data
WHERE Crime_Date >= '2019-01-01'
AND Crime_Date < '2019-01-31'
AND Crime_Type = 'Murder'
AND Area_Name = 'Los Angeles'
AND Vict_Age > 0
AND Vict_Sex = 'Male'
AND Weapon_Desc = 'Firearm'
AND Address = 'Los Angeles'
AND Latitude >= -118
AND Latitude < -114
AND Longitude >= -118
AND Longitude < -114
```

```sql
SELECT COUNT(*)
FROM la_crime_data
WHERE Crime_Date >= '2019-01-01'
AND Crime_Date < '2019-01-31'
AND Crime_Type = 'Murder'
AND Area_Name = 'Los Angeles'
AND Vict_Age > 0
AND Vict_Sex = 'Male'
AND Weapon_Desc = 'Firearm'
AND Address = 'Los Angeles'
AND Latitude >= -118
AND Latitude < -114
AND Longitude >= -118
AND Longitude < -114
```

```sql
SELECT COUNT(*)
FROM la_crime_data
WHERE Crime_Date >= '2019-01-01'
AND Crime_Date < '2019-01-31'
AND Crime_Type = 'Murder'
AND Area_Name = 'Los Angeles'
AND Vict_Age > 0
AND Vict_Sex = 'Male'
AND Weapon_Desc = 'Firearm'
AND Address = 'Los Angeles'
AND Latitude >= -118
AND Latitude < -114
AND Longitude >= -118
AND

====================================================================================================

PROMPT 9:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York on each day of the week

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 9:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York on each day of the week

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(*) FROM nyc_crime_data WHERE Crime_Date = '2015-01-01' GROUP BY Crime_ID;

Response:
	SELECT Crime_ID, COUNT(*) FROM nyc_crime_data WHERE Crime_Date = '2015-01-01' GROUP BY Crime_ID;
	INSUFFICENT

## 2.2.2.2.2.  SQL Statement

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York on each day of the week

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(*) FROM nyc_crime_data WHERE Crime_Date = '2015-01-01' GROUP BY Crime_ID;

Response:
	SELECT Crime_ID, COUNT(*) FROM nyc_crime_data WHERE Crime_Date = '2015-01-01' GROUP BY Crime_ID;
	INSUFFICENT

## 2.2.2.2.3.  SQL Statement

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York on each day of the week

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(*) FROM nyc_crime_data WHERE Crime_Date = '2015-01-01' GROUP BY Crime_ID;

Response:
	SELECT Crime_ID, COUNT(*) FROM nyc_crime_data WHERE Crime_Date = '2015-01-01' GROUP BY Crime_ID;
	INSUFFICENT

## 2.2.2.2.4.  SQL Statement

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York on each day of the week

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(*) FROM nyc_crime_data WHERE Crime_Date = '2015-01-01' GROUP BY Crime_ID;

Response:
	SELECT Crime_ID, COUNT(*) FROM nyc_crime_data WHERE Crime_Date = '2015-01-01' GROUP BY Crime_ID;
	INSUFFICENT

## 2.2.2.2.5.  SQL Statement

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York on each day of the week

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(*) FROM nyc_crime_data WHERE Crime_Date = '2015-01-01' GROUP BY Crime_ID;

Response:
	SELECT Crime_ID, COUNT(*) FROM nyc_crime_data WHERE Crime_Date = '2015-01-01' GROUP BY Crime_ID;
	INSUFFICENT

## 2.2.2.2.6.  SQL Statement

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York on each day of the week

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(*) FROM nyc_crime_data WHERE Crime_Date = '2015-01-01' GROUP BY Crime_ID;

Response:
	SELECT Crime_ID, COUNT(*) FROM nyc_crime_data WHERE Crime_Date = '2015-01-01' GROUP BY Crime_ID;
	INSUFFICENT

## 2.2.2.2.7.  SQL Statement

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York on each day of the week

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(*) FROM nyc_crime_data WHERE Crime_Date = '2015-01-01' GROUP BY Crime_ID;

Response:
	SELECT Crime_ID, COUNT(*) FROM nyc_crime_data WHERE Crime_Date = '2015-01-01' GROUP BY Crime_ID;
	INSUFFICENT

## 2.2.2.2.8.  SQL Statement

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York on each day of the week

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(*) FROM nyc_crime_data WHERE Crime_Date = '2015-01-01' GROUP BY Crime_ID;

Response:
	SELECT Crime_ID, COUNT(*) FROM nyc_crime_data WHERE Crime_Date = '2015-01-01' GROUP BY Crime_ID;
	INSUFFICENT

## 2.2.2.2.9.  SQL Statement

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York on each day of the week

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(*) FROM nyc_crime_data WHERE Crime_Date = '2015-01-01' GROUP BY Crime_ID;

Response:
	SELECT Crime_ID, COUNT(*) FROM nyc_crime_data WHERE Crime_Date = '2015-01-01' GROUP BY Crime_ID;
	INSUFFICENT

## 2.2.2.2.10.  SQL Statement

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York on each day of the week

Schema: 
	nyc_

====================================================================================================

PROMPT 10:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York during each month of the year

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 10:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York during each month of the year

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(*)
	FROM nyc_crime_data
	WHERE Crime_Date BETWEEN '01/01/2015' AND '01/31/2015'
	GROUP BY Crime_ID
	ORDER BY COUNT(*) DESC
	LIMIT 1

Expected Output:
	Crime_ID, COUNT(*)
	1, 1
	2, 1
	3, 1
	4, 1
	5, 1
	6, 1
	7, 1
	8, 1
	9, 1
	10, 1
	11, 1
	12, 1
	13, 1
	14, 1
	15, 1
	16, 1
	17, 1
	18, 1
	19, 1
	20, 1
	21, 1
	22, 1
	23, 1
	24, 1
	25, 1
	26, 1
	27, 1
	28, 1
	29, 1
	30, 1
	31, 1
	32, 1
	33, 1
	34, 1
	35, 1
	36, 1
	37, 1
	38, 1
	39, 1
	40, 1
	41, 1
	42, 1
	43, 1
	44, 1
	45, 1
	46, 1
	47, 1
	48, 1
	49, 1
	50, 1
	51, 1
	52, 1
	53, 1
	54, 1
	55, 1
	56, 1
	57, 1
	58, 1
	59, 1
	60, 1
	61, 1
	62, 1
	63, 1
	64, 1
	65, 1
	66, 1
	67, 1
	68, 1
	69, 1
	70, 1
	71, 1
	72, 1
	73, 1
	74, 1
	75, 1
	76, 1
	77, 1
	78, 1
	79, 1
	80, 1
	81, 1
	82, 1
	83, 1
	84, 1
	85, 1
	86, 1
	87, 1
	88, 1
	89, 1
	90, 1
	91, 1
	92, 1
	93, 1
	94, 1
	95, 1
	96, 1
	97, 1
	98, 1
	99, 1
	100, 1
	101, 1
	102, 1
	103, 1
	104, 1
	105, 1
	106, 1
	107, 1
	108, 1
	109, 1
	110, 1
	111, 1
	112, 1
	113, 1
	114, 1
	115, 1
	116, 1
	117, 1
	118, 1
	119, 1
	120, 1
	121, 1
	122, 1
	123, 1
	124, 1
	125, 1
	126, 1
	127, 1
	128, 1
	129, 1
	130, 1
	131, 1
	132, 1
	133, 1
	134, 1
	135, 1
	136, 1
	137, 1
	138, 1
	139, 1
	140, 1
	141, 1
	142, 1
	143, 1
	144, 1
	145, 1
	146, 1
	147, 1
	148, 1
	149, 1
	150, 1
	151, 1
	152, 1
	153, 1
	154, 1
	155, 1
	156, 1
	157, 1
	158, 1
	159, 1
	160, 1
	161, 1
	162, 1
	163, 1
	164, 1
	165, 1
	166, 1
	167, 1
	168, 1
	169, 1
	170, 1
	171, 1
	172, 1
	173, 1
	174, 1
	175, 1
	176, 1
	177, 1
	178, 1
	179, 1
	180, 1
	181, 1
	182, 1
	183, 1
	184, 1
	185, 1
	186, 1
	187, 1
	188, 1
	189, 1
	190, 1
	191, 1
	192, 1
	193, 1
	194, 1
	195, 1
	196, 1
	197, 1
	198, 1
	199, 1
	200, 1
	201, 1
	202, 1
	203, 1
	204, 1
	205, 1
	206, 1
	207, 1
	208, 1
	209, 1
	210, 1
	211, 1
	212, 1
	213, 1
	214, 1
	215, 1
	216, 1
	217, 1
	218, 1
	219, 1
	220, 1
	221, 1
	222, 1
	223, 1
	224, 1
	225, 1
	226, 1
	227, 1
	228, 1
	229, 1
	230, 1
	231, 1
	232, 1
	233, 1
	234, 1
	235, 1
	236, 1
	237, 1
	238, 1
	239, 1
	240, 1
	241, 1
	242, 1
	243, 1
	244, 1
	245, 1
	246, 1
	247, 1
	248, 1
	249, 1
	250, 1
	251, 1
	252, 1
	253, 1
	254, 1
	255, 1
	256, 1
	257, 1
	258, 1
	259, 1
	260, 1
	261, 1
	262, 1
	263, 1
	264, 1
	265, 1
	266, 1
	267, 1
	268, 1
	269, 1
	270, 1
	271, 1
	272, 1
	273, 1
	274, 1
	275, 1
	276, 1
	277, 1
	278, 1
	279, 1
	280, 1
	281, 1
	282, 1
	283, 1
	284, 1
	285, 1
	286, 1
	287, 1
	288, 1
	289, 1
	290, 1
	291, 1
	292, 1
	293, 1
	294, 1
	295, 1
	296, 1
	297, 1
	298, 1
	299, 1
	300, 1
	301, 1
	302, 1
	303, 1
	304, 1
	305, 1
	306, 1
	307, 1
	308, 1
	309, 1
	310, 1
	311, 1
	312, 1
	313, 1
	314, 1
	315, 1
	316, 1
	317, 1
	318, 1
	319, 1
	320, 1
	321, 1
	322, 1
	323, 1
	324, 1
	325, 1
	326, 1
	327, 1
	328, 1
	329, 1
	330, 1
	331, 1
	332, 1
	333, 1
	334, 1
	335, 1
	336, 1
	337, 1
	338, 1
	339, 1
	340, 1
	341, 1
	342, 1
	343, 1
	344, 1
	345, 1
	346, 1
	347, 1
	348, 1
	349, 1
	350, 1
	351, 1
	352, 1
	353, 1
	354, 1
	355, 1
	356, 1
	357, 1
	358, 1
	359, 1
	360, 1
	361, 1
	362, 1
	363, 1
	364, 1
	365, 1
	366, 1
	367, 1
	368, 1
	369, 1


====================================================================================================

PROMPT 11:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York at each hour of the day

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 11:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in New York at each hour of the day

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Input:
	(1, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(2, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(3, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(4, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(5, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(6, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(7, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(8, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(9, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(10, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(11, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(12, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(13, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(14, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(15, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(16, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(17, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(18, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(19, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(20, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(21, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(22, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(23, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(24, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(25, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(26, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(27, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(28, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(29, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(30, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(31, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(32, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(33, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(34, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(35, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(36, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(37, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(38, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(39, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(40, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(41, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(42, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(43, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(44, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(45, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127', '-74.0052')
	(46, '1', '1/1/2012', '1:00', '1', '1', 'New York', '40.7127

====================================================================================================

PROMPT 12:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in New York grouped by week since January 2023

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 12:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in New York grouped by week since January 2023

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

```sql
SELECT
	COUNT(*)
FROM
	nyc_crime_data
WHERE
	crime_class = 'Murder'
	AND crime_type = 'Homicide'
	AND crime_date >= '2023-01-01'
	AND crime_date < '2023-01-01' + INTERVAL 1 WEEK
```

```sql
INSUFFICENT
```

## Solution

The solution is a single SQL statement.

```sql
SELECT
	COUNT(*)
FROM
	nyc_crime_data
WHERE
	crime_class = 'Murder'
	AND crime_type = 'Homicide'
	AND crime_date >= '2023-01-01'
	AND crime_date < '2023-01-01' + INTERVAL 1 WEEK
```

## Running the tests

To run the tests, run the following command:

```sh
go test
```

You can also run individual tests:

```sh
go test ./... -v
```

## Further information

For more information about the SQL standard and the Go programming language, see the [Go SQL FAQ](https://golang.org/doc/faq#sql_and_go).

## Source code

[https://github.com/golang/go/blob/master/src/database/sql/sql.go](https://github.com/golang/go/blob/master/src/database/sql/sql.go)

## Related projects

- [sqlboiler](https://github.com/kyleconroy/sqlboiler) - A tool for generating SQL for Go structs.
- [sqlboiler-migrate](https://github.com/kyleconroy/sqlboiler-migrate) - Migrate data from one database to another.
- [sqlboiler-mssql](https://github.com/kyleconroy/sqlboiler-mssql) - Migrate data from Microsoft SQL Server to PostgreSQL.
- [sqlboiler-postgresql](https://github.com/kyleconroy/sqlboiler-postgresql) - Migrate data from PostgreSQL to Microsoft SQL Server.
- [sqlboiler-sqlite](https://github.com/kyleconroy/sqlboiler-sqlite) - Migrate data from SQLite to PostgreSQL.
- [sqlboiler-sqlite3](https://github.com/kyleconroy/sqlboiler-sqlite3) - Migrate data from SQLite to PostgreSQL.
- [sqlboiler-sqlserver](https://github.com/kyleconroy/sqlboiler-sqlserver) - Migrate data from Microsoft SQL Server to PostgreSQL.
- [sqlboiler-sqlserver-mssql](https://github.com/kyleconroy/sqlboiler-sqlserver-mssql) - Migrate data from Microsoft SQL Server to PostgreSQL.
- [sqlboiler-sqlserver-mssql-migrate](https://github.com/kyleconroy/sqlboiler-sqlserver-mssql-migrate) - Migrate data from Microsoft SQL Server to PostgreSQL.
- [sqlboiler-sqlserver-mssql-migrate-mssql-migrate](https://github.com/kyleconroy/sqlboiler-sqlserver-mssql-migrate-mssql-migrate) - Migrate data from Microsoft SQL Server to PostgreSQL.
- [sqlboiler-sqlserver-mssql-mssql-migrate-mssql-migrate-mssql-migrate](https://github.com/kyleconroy/sqlboiler-sqlserver-mssql-mssql-migrate-mssql-migrate-mssql-migrate) - Migrate data from Microsoft SQL Server to PostgreSQL.
- [sqlboiler-sqlserver-mssql-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate](https://github.com/kyleconroy/sqlboiler-sqlserver-mssql-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate) - Migrate data from Microsoft SQL Server to PostgreSQL.
- [sqlboiler-sqlserver-mssql-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate](https://github.com/kyleconroy/sqlboiler-sqlserver-mssql-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate) - Migrate data from Microsoft SQL Server to PostgreSQL.
- [sqlboiler-sqlserver-mssql-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate](https://github.com/kyleconroy/sqlboiler-sqlserver-mssql-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate) - Migrate data from Microsoft SQL Server to PostgreSQL.
- [sqlboiler-sqlserver-mssql-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate](https://github.com/kyleconroy/sqlboiler-sqlserver-mssql-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate) - Migrate data from Microsoft SQL Server to PostgreSQL.
- [sqlboiler-sqlserver-mssql-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate](https://github.com/kyleconroy/sqlboiler-sqlserver-mssql-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate) - Migrate data from Microsoft SQL Server to PostgreSQL.
- [sqlboiler-sqlserver-mssql-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql-migrate-mssql

====================================================================================================

PROMPT 13:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly on each day of the week

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 13:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly on each day of the week

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	philly_crime_data (1, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (2, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (3, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (4, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (5, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (6, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (7, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (8, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (9, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (10, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (11, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (12, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (13, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (14, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (15, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (16, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (17, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (18, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (19, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (20, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (21, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (22, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (23, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (24, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (25, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (26, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (27, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (28, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (29, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (30, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (31, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (32, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (33, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (34, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (35, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (36, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	philly_crime_data (37, 1, '2015-01-01', '2015-01-01', 'Burglary', 'North Philly', '123 Main St', 40.789, -75.14)
	ph

====================================================================================================

PROMPT 14:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly during each month of the year

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 14:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly during each month of the year

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(*)
	FROM philly_crime_data
	WHERE Crime_Date >= '01/01/2015'
	AND Crime_Date <= '01/01/2016'
	GROUP BY Crime_ID
	ORDER BY Crime_ID

Expected Output:
	Crime_ID, COUNT(*)
	1, 10
	2, 5
	3, 1
	4, 1
	5, 1
	6, 1
	7, 1
	8, 1
	9, 1
	10, 1
	11, 1
	12, 1
	13, 1
	14, 1
	15, 1
	16, 1
	17, 1
	18, 1
	19, 1
	20, 1
	21, 1
	22, 1
	23, 1
	24, 1
	25, 1
	26, 1
	27, 1
	28, 1
	29, 1
	30, 1
	31, 1
	32, 1
	33, 1
	34, 1
	35, 1
	36, 1
	37, 1
	38, 1
	39, 1
	40, 1
	41, 1
	42, 1
	43, 1
	44, 1
	45, 1
	46, 1
	47, 1
	48, 1
	49, 1
	50, 1
	51, 1
	52, 1
	53, 1
	54, 1
	55, 1
	56, 1
	57, 1
	58, 1
	59, 1
	60, 1
	61, 1
	62, 1
	63, 1
	64, 1
	65, 1
	66, 1
	67, 1
	68, 1
	69, 1
	70, 1
	71, 1
	72, 1
	73, 1
	74, 1
	75, 1
	76, 1
	77, 1
	78, 1
	79, 1
	80, 1
	81, 1
	82, 1
	83, 1
	84, 1
	85, 1
	86, 1
	87, 1
	88, 1
	89, 1
	90, 1
	91, 1
	92, 1
	93, 1
	94, 1
	95, 1
	96, 1
	97, 1
	98, 1
	99, 1
	100, 1
	101, 1
	102, 1
	103, 1
	104, 1
	105, 1
	106, 1
	107, 1
	108, 1
	109, 1
	110, 1
	111, 1
	112, 1
	113, 1
	114, 1
	115, 1
	116, 1
	117, 1
	118, 1
	119, 1
	120, 1
	121, 1
	122, 1
	123, 1
	124, 1
	125, 1
	126, 1
	127, 1
	128, 1
	129, 1
	130, 1
	131, 1
	132, 1
	133, 1
	134, 1
	135, 1
	136, 1
	137, 1
	138, 1
	139, 1
	140, 1
	141, 1
	142, 1
	143, 1
	144, 1
	145, 1
	146, 1
	147, 1
	148, 1
	149, 1
	150, 1
	151, 1
	152, 1
	153, 1
	154, 1
	155, 1
	156, 1
	157, 1
	158, 1
	159, 1
	160, 1
	161, 1
	162, 1
	163, 1
	164, 1
	165, 1
	166, 1
	167, 1
	168, 1
	169, 1
	170, 1
	171, 1
	172, 1
	173, 1
	174, 1
	175, 1
	176, 1
	177, 1
	178, 1
	179, 1
	180, 1
	181, 1
	182, 1
	183, 1
	184, 1
	185, 1
	186, 1
	187, 1
	188, 1
	189, 1
	190, 1
	191, 1
	192, 1
	193, 1
	194, 1
	195, 1
	196, 1
	197, 1
	198, 1
	199, 1
	200, 1
	201, 1
	202, 1
	203, 1
	204, 1
	205, 1
	206, 1
	207, 1
	208, 1
	209, 1
	210, 1
	211, 1
	212, 1
	213, 1
	214, 1
	215, 1
	216, 1
	217, 1
	218, 1
	219, 1
	220, 1
	221, 1
	222, 1
	223, 1
	224, 1
	225, 1
	226, 1
	227, 1
	228, 1
	229, 1
	230, 1
	231, 1
	232, 1
	233, 1
	234, 1
	235, 1
	236, 1
	237, 1
	238, 1
	239, 1
	240, 1
	241, 1
	242, 1
	243, 1
	244, 1
	245, 1
	246, 1
	247, 1
	248, 1
	249, 1
	250, 1
	251, 1
	252, 1
	253, 1
	254, 1
	255, 1
	256, 1
	257, 1
	258, 1
	259, 1
	260, 1
	261, 1
	262, 1
	263, 1
	264, 1
	265, 1
	266, 1
	267, 1
	268, 1
	269, 1
	270, 1
	271, 1
	272, 1
	273, 1
	274, 1
	275, 1
	276, 1
	277, 1
	278, 1
	279, 1
	280, 1
	281, 1
	282, 1
	283, 1
	284, 1
	285, 1
	286, 1
	287, 1
	288, 1
	289, 1
	290, 1
	291, 1
	292, 1
	293, 1
	294, 1
	295, 1
	296, 1
	297, 1
	298, 1
	299, 1
	300, 1
	301, 1
	302, 1
	303, 1
	304, 1
	305, 1
	306, 1
	307, 1
	308, 1
	309, 1
	310, 1
	311, 1
	312, 1
	313, 1
	314, 1
	315, 1
	316, 1
	317, 1
	318, 1
	319, 1
	320, 1
	321, 1
	322, 1
	323, 1
	324, 1
	325, 1
	326, 1
	327, 1
	328, 1
	329, 1
	330, 1
	331, 1
	332, 1
	333, 1
	334, 1
	335, 1
	336, 1
	337, 1
	338, 1
	339, 1
	340, 1
	341, 1
	342, 1
	343, 1
	344, 1
	345, 1
	346, 1
	347, 1
	348, 1
	349, 1
	350, 1
	351, 1
	352, 1
	353, 1
	354, 1
	355, 1
	356, 1
	357, 1
	358, 1
	359, 1
	360, 1
	361, 1
	362, 1
	363, 1
	364, 1
	365, 1
	366, 1
	367, 1
	368, 1
	369, 1
	370, 1
	

====================================================================================================

PROMPT 15:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly at each hour of the day

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 15:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total crimes occurred in Philly at each hour of the day

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude
	FROM philly_crime_data
	WHERE Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Type = 'Murder'
	AND Area_# = 'PHILADELPHIA'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '39.95'
	AND Longitude = '-75.18'
	AND Latitude = '

====================================================================================================

PROMPT 16:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in Philly grouped by week

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 16:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give total count of crimes in Philly grouped by week

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(*) FROM philly_crime_data WHERE Crime_Type = 'Murder' AND Area_ID = 'PHL' AND Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

Expected Output:
	'INSUFFICENT'

Solution:
	SELECT COUNT(*) FROM philly_crime_data WHERE Crime_Type = 'Murder' AND Area_ID = 'PHL' AND Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

---

## SQL Quiz

Prompt:
	Give total count of crimes in Philly grouped by week

Schema:
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(*) FROM philly_crime_data WHERE Crime_Type = 'Murder' AND Area_ID = 'PHL' AND Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

Expected Output:
	'INSUFFICENT'

Solution:
	SELECT COUNT(*) FROM philly_crime_data WHERE Crime_Type = 'Murder' AND Area_ID = 'PHL' AND Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

---

## SQL Quiz

Prompt:
	Give total count of crimes in Philly grouped by week

Schema:
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(*) FROM philly_crime_data WHERE Crime_Type = 'Murder' AND Area_ID = 'PHL' AND Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

Expected Output:
	'INSUFFICENT'

Solution:
	SELECT COUNT(*) FROM philly_crime_data WHERE Crime_Type = 'Murder' AND Area_ID = 'PHL' AND Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

---

## SQL Quiz

Prompt:
	Give total count of crimes in Philly grouped by week

Schema:
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(*) FROM philly_crime_data WHERE Crime_Type = 'Murder' AND Area_ID = 'PHL' AND Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

Expected Output:
	'INSUFFICENT'

Solution:
	SELECT COUNT(*) FROM philly_crime_data WHERE Crime_Type = 'Murder' AND Area_ID = 'PHL' AND Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

---

## SQL Quiz

Prompt:
	Give total count of crimes in Philly grouped by week

Schema:
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(*) FROM philly_crime_data WHERE Crime_Type = 'Murder' AND Area_ID = 'PHL' AND Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

Expected Output:
	'INSUFFICENT'

Solution:
	SELECT COUNT(*) FROM philly_crime_data WHERE Crime_Type = 'Murder' AND Area_ID = 'PHL' AND Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

---

## SQL Quiz

Prompt:
	Give total count of crimes in Philly grouped by week

Schema:
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(*) FROM philly_crime_data WHERE Crime_Type = 'Murder' AND Area_ID = 'PHL' AND Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

Expected Output:
	'INSUFFICENT'

Solution:
	SELECT COUNT(*) FROM philly_crime_data WHERE Crime_Type = 'Murder' AND Area_ID = 'PHL' AND Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

---

## SQL Quiz

Prompt:
	Give total count of crimes in Philly grouped by week

Schema:
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(*) FROM philly_crime_data WHERE Crime_Type = 'Murder' AND Area_ID = 'PHL' AND Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

Expected Output:
	'INSUFFICENT'

Solution:
	SELECT COUNT(*) FROM philly_crime_data WHERE Crime_Type = 'Murder' AND Area_ID = 'PHL' AND Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

---

## SQL Quiz

Prompt:
	Give total count of crimes in Philly grouped by week

Schema:
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(*) FROM philly_crime_data WHERE Crime_Type = 'Murder' AND Area_ID = 'PHL' AND Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

Expected Output:
	'INSUFFICENT'

Solution:
	SELECT COUNT(*) FROM philly_crime_data WHERE Crime_Type = 'Murder' AND Area_ID = 'PHL' AND Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

---

## SQL Quiz

Prompt:
	Give total count of crimes in Philly grouped by week

Schema:
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(*) FROM philly_crime_data WHERE Crime_Type = 'Murder' AND Area_ID = 'PHL' AND Crime_Date >= '01/01/2014' AND Crime_Date <= '01/01/2015'

Expected

====================================================================================================

PROMPT 17:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of Atlanta

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 17:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of Atlanta

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(*) AS Crime_Count
	FROM atlanta_crime_data
	WHERE Area_Name = 'Downtown'
	GROUP BY Crime_ID
	ORDER BY Crime_Count DESC
	LIMIT 1

Expected Output:
	Crime_ID, Crime_Count
	1, 2

Solution:
	SELECT Crime_ID, COUNT(*) AS Crime_Count
	FROM atlanta_crime_data
	WHERE Area_Name = 'Downtown'
	GROUP BY Crime_ID
	ORDER BY Crime_Count DESC
	LIMIT 1

---

## SQL Queries

### [SQL Queries - Part 1](https://www.hackerrank.com/challenges/sql-queries-part-1)

#### Problem

Given a table of employees, write a query to find the names of all employees who have a salary greater than the average salary.

#### Schema

```sql
CREATE TABLE employees (
  id INT,
  name STRING,
  salary INT
);
```

#### Input

```sql
1, 'John', 1000
2, 'John', 2000
3, 'John', 3000
4, 'John', 4000
5, 'John', 5000
6, 'John', 6000
7, 'John', 7000
8, 'John', 8000
9, 'John', 9000
10, 'John', 10000
11, 'John', 11000
12, 'John', 12000
13, 'John', 13000
14, 'John', 14000
15, 'John', 15000
16, 'John', 16000
17, 'John', 17000
18, 'John', 18000
19, 'John', 19000
20, 'John', 20000
21, 'John', 21000
22, 'John', 22000
23, 'John', 23000
24, 'John', 24000
25, 'John', 25000
26, 'John', 26000
27, 'John', 27000
28, 'John', 28000
29, 'John', 29000
30, 'John', 30000
31, 'John', 31000
32, 'John', 32000
33, 'John', 33000
34, 'John', 34000
35, 'John', 35000
36, 'John', 36000
37, 'John', 37000
38, 'John', 38000
39, 'John', 39000
40, 'John', 40000
41, 'John', 41000
42, 'John', 42000
43, 'John', 43000
44, 'John', 44000
45, 'John', 45000
46, 'John', 46000
47, 'John', 47000
48, 'John', 48000
49, 'John', 49000
50, 'John', 50000
51, 'John', 52000
52, 'John', 53000
53, 'John', 54000
54, 'John', 55000
55, 'John', 56000
56, 'John', 57000
57, 'John', 58000
58, 'John', 59000
59, 'John', 60000
60, 'John', 62000
61, 'John', 63000
62, 'John', 64000
63, 'John', 65000
64, 'John', 66000
65, 'John', 67000
66, 'John', 68000
67, 'John', 69000
68, 'John', 70000
69, 'John', 72000
70, 'John', 73000
71, 'John', 74000
72, 'John', 75000
73, 'John', 76000
74, 'John', 77000
75, 'John', 78000
76, 'John', 79000
77, 'John', 80000
78, 'John', 82000
79, 'John', 83000
80, 'John', 84000
81, 'John', 85000
82, 'John', 86000
83, 'John', 87000
84, 'John', 88000
85, 'John', 89000
86, 'John', 90000
87, 'John', 92000
88, 'John', 93000
89, 'John', 94000
90, 'John', 95000
91, 'John', 96000
92, 'John', 97000
93, 'John', 98000
94, 'John', 99000
95, 'John', 100000
96, 'John', 101000
97, 'John', 102000
98, 'John', 103000
99, 'John', 104000
100, 'John', 105000
101, 'John', 106000
102, 'John', 107000
103, 'John', 108000
104, 'John', 109000
105, 'John', 110000
106, 'John', 111000
107, 'John', 112000
108, 'John', 113000
109, 'John', 114000
110, 'John', 115000
111, 'John', 116000
112, 'John', 117000
113, 'John', 118000
114, 'John', 119000
115, 'John', 120000
116, 'John', 121000
117, 'John', 122000
118, 'John', 123000
119, 'John', 124000
120, 'John', 125000
121, 'John', 126000
122, 'John', 127000
123, 'John', 128000
124, 'John', 129000
125, 'John', 130000
126, 'John', 131000
127, 'John', 132000
128, 'John', 133000
129, 'John', 134000
130, 'John', 135000
131, 'John', 136000
132, 'John', 137000
133, 'John', 138000
134, 'John', 139000
135, 'John', 140000
136, 'John', 141000
137, 'John', 142000
138, 'John', 143000
139, 'John', 144000
140, 'John', 145000
141, 'John', 146000
142, 'John', 147000
143, 'John', 148000
144, 'John', 149000
145, 'John', 150000
146, 'John', 151000
147, 'John', 152000
148, 'John', 153000
149, 'John', 154000
150, 'John', 155000
151, 'John', 156000
152, 'John', 157000
153, 'John', 158000
154, 'John', 159000
155, 'John', 160000
156, 'John', 161000
157, 'John', 162000
158, 'John', 163000
159, 'John', 164000
160, 'John', 165000
161, 'John', 166000
162, 'John', 167000
163, 'John', 168000
164, 'John', 169000
165, 'John', 170000
166, 'John', 171000
167, 'John', 172000
168, 'John', 173000
169, 'John', 174000
170, 'John', 175000
171, 'John', 176000
172, 'John', 177000
173, 'John', 178000
174, 'John', 179000
175, 'John', 180000
176, 'John', 181000
177, 'John', 182000
178, 'John', 183000
179, 'John', 184000
180, 'John', 185000
181, 'John', 186000
182, 'John', 187000
183, 'John', 188000
184, 'John', 189000
185, 'John', 190000
186, 'John', 191000
187, 'John', 192000
188, 'John', 193000
189, 'John', 194000
190, 'John', 195000
191, 'John', 196000
192, 'John', 197000
193, 'John', 198000
194, 'John', 199000
195, 'John', 200000
196, 'John', 201000
197, 'John', 202000
198, 'John', 203000
199, 'John', 204000
200, 'John', 205000
201, 'John', 206000
202, 'John', 207000
203, 'John', 208000
204, 'John', 209000
205, 'John', 210000
206, 'John', 211000
207, 'John', 212000
208, 'John', 213000
209, 'John', 214000
210, 'John', 215000


====================================================================================================

PROMPT 18:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area of Atlanta give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 18:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area of Atlanta give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

SQL Statement:
	SELECT COUNT(Crime_ID) AS Crime_Count, MAX(Report_#) AS Report_#, MAX(Day_Occurred) AS Day_Occurred, MAX(Crime_Date) AS Crime_Date, MAX(Crime_Time) AS Crime_Time, MAX(Crime_Type) AS Crime_Type, MAX(Area_Name) AS Area_Name, MAX(Address) AS Address, MAX(Longitude) AS Longitude, MAX(Latitude) AS Latitude FROM atlanta_crime_data;

Output:
	Crime_Count, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1
	7, 1, 1, 1, 1, 1, 1, 1, 1, 1
	8, 1, 1, 1, 1, 1, 1, 1, 1, 1
	9, 1, 1, 1, 1, 1, 1, 1, 1, 1
	10, 1, 1, 1, 1, 1, 1, 1, 1, 1
	11, 1, 1, 1, 1, 1, 1, 1, 1, 1
	12, 1, 1, 1, 1, 1, 1, 1, 1, 1
	13, 1, 1, 1, 1, 1, 1, 1, 1, 1
	14, 1, 1, 1, 1, 1, 1, 1, 1, 1
	15, 1, 1, 1, 1, 1, 1, 1, 1, 1
	16, 1, 1, 1, 1, 1, 1, 1, 1, 1
	17, 1, 1, 1, 1, 1, 1, 1, 1, 1
	18, 1, 1, 1, 1, 1, 1, 1, 1, 1
	19, 1, 1, 1, 1, 1, 1, 1, 1, 1
	20, 1, 1, 1, 1, 1, 1, 1, 1, 1
	21, 1, 1, 1, 1, 1, 1, 1, 1, 1
	22, 1, 1, 1, 1, 1, 1, 1, 1, 1
	23, 1, 1, 1, 1, 1, 1, 1, 1, 1
	24, 1, 1, 1, 1, 1, 1, 1, 1, 1
	25, 1, 1, 1, 1, 1, 1, 1, 1, 1
	26, 1, 1, 1, 1, 1, 1, 1, 1, 1
	27, 1, 1, 1, 1, 1, 1, 1, 1, 1
	28, 1, 1, 1, 1, 1, 1, 1, 1, 1
	29, 1, 1, 1, 1, 1, 1, 1, 1, 1
	30, 1, 1, 1, 1, 1, 1, 1, 1, 1
	31, 1, 1, 1, 1, 1, 1, 1, 1, 1
	32, 1, 1, 1, 1, 1, 1, 1, 1, 1
	33, 1, 1, 1, 1, 1, 1, 1, 1, 1
	34, 1, 1, 1, 1, 1, 1, 1, 1, 1
	35, 1, 1, 1, 1, 1, 1, 1, 1, 1
	36, 1, 1, 1, 1, 1, 1, 1, 1, 1
	37, 1, 1, 1, 1, 1, 1, 1, 1, 1
	38, 1, 1, 1, 1, 1, 1, 1, 1, 1
	39, 1, 1, 1, 1, 1, 1, 1, 1, 1
	40, 1, 1, 1, 1, 1, 1, 1, 1, 1
	41, 1, 1, 1, 1, 1, 1, 1, 1, 1
	42, 1, 1, 1, 1, 1, 1, 1, 1, 1
	43, 1, 1, 1, 1, 1, 1, 1, 1, 1
	44, 1, 1, 1, 1, 1, 1, 1, 1, 1
	45, 1, 1, 1, 1, 1, 1, 1, 1, 1
	46, 1, 1, 1, 1, 1, 1, 1, 1, 1
	47, 1, 1, 1, 1, 1, 1, 1, 1, 1
	48, 1, 1, 1, 1, 1, 1, 1, 1, 1
	49, 1, 1, 1, 1, 1, 1, 1, 1, 1
	50, 1, 1, 1, 1, 1, 1, 1, 1, 1
	51, 1, 1, 1, 1, 1, 1, 1, 1, 1
	52, 1, 1, 1, 1, 1, 1, 1, 1, 1
	53, 1, 1, 1, 1, 1, 1, 1, 1, 1
	54, 1, 1, 1, 1, 1, 1, 1, 1, 1
	55, 1, 1, 1, 1, 1, 1, 1, 1, 1
	56, 1, 1, 1, 1, 1, 1, 1, 1, 1
	57, 1, 1, 1, 1, 1, 1, 1, 1, 1
	58, 1, 1, 1, 1, 1, 1, 1, 1, 1
	59, 1, 1, 1, 1, 1, 1, 1, 1, 1
	60, 1, 1, 1, 1, 1, 1, 1, 1, 1
	61, 1, 1, 1, 1, 1, 1, 1, 1, 1
	62, 1, 1, 1, 1, 1, 1, 1, 1, 1
	63, 1, 1, 1, 1, 1, 1, 1, 1, 1
	64, 1, 1, 1, 1, 1, 1, 1, 1, 1
	65, 1, 1, 1, 1, 1, 1, 1, 1, 1
	66, 1, 1, 1, 1, 1, 1, 1, 1, 1
	67, 1, 1, 1, 1, 1, 1, 1, 1, 1
	68, 1, 1, 1, 1, 1, 1, 1, 1, 1
	69, 1, 1, 1, 1, 1, 1, 1, 1, 1
	70, 1, 1, 1, 1, 1, 1, 1, 1, 1
	71, 1, 1, 1, 1, 1, 1, 1, 1, 1
	72, 1, 1, 1, 1, 1, 1, 1, 1, 1
	73, 1, 1, 1, 1, 1, 1, 1, 1, 1
	74, 1, 1, 1, 1, 1, 1, 1, 1, 1
	75, 1, 1, 1, 1, 1, 1, 1, 1, 1
	76, 1, 1, 1, 1, 1, 1, 1, 1, 1
	77, 1, 1, 1, 1, 1, 1, 1, 1, 1
	78, 1, 1, 1, 1, 1, 1, 1, 1, 1
	79, 1, 1, 1, 1, 1, 1, 1, 1, 1
	80, 1, 1, 1, 1, 1, 1, 1, 1, 1
	81, 1, 1, 1, 1, 1, 1, 1, 1, 1
	82, 1, 1, 1, 1, 1, 1, 1, 1, 1
	83, 1, 1, 1, 1, 1, 1, 1

====================================================================================================

PROMPT 19:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of LA

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 19:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of LA

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

SQL Statement:
	SELECT Area_Name, COUNT(*) FROM la_crime_data WHERE Crime_Type = 'Murder' AND Area_Name = 'West LA'

Expected Output:
	West LA, 2

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	INSUFFICENT

Expected Input:
	INSUFFICENT

Expected Output:
	

====================================================================================================

PROMPT 20:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area of LA give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 20:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area of LA give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

SQL Statement:
	SELECT COUNT(*) AS Total_Crime_Count, MAX(Date_Reported) AS Last_Reported_Date, MAX(Crime_Date) AS Crime_Date, MAX(Crime_Time) AS Crime_Time, MAX(Crime_Type) AS Crime_Type, MAX(Area_Name) AS Area_Name, MAX(Vict_Age) AS Vict_Age, MAX(Vict_Sex) AS Vict_Sex, MAX(Weapon_Desc) AS Weapon_Desc, MAX(Address) AS Address, MAX(Latitude) AS Latitude, MAX(Longitude) AS Longitude FROM la_crime_data GROUP BY Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude

Hint:
	The MAX() function is used to return the maximum value of a column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a particular column.
	The GROUP BY clause is used to group the data by a

====================================================================================================

PROMPT 21:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of New York

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 21:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of New York

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	1, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	2, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	3, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	4, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	5, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	6, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	7, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	8, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	9, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	10, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	11, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	12, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	13, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	14, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	15, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	16, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	17, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	18, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	19, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	20, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	21, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	22, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	23, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	24, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	25, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	26, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	27, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	28, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	29, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	30, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	31, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	32, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	33, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	34, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	35, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	36, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	37, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	38, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	39, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	40, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	41, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	42, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	43, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	44, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	45, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7127, -74.0059
	46, 1, '01/01/2012', '12:00:00', 'Burglary', 'Residential', 'Manhattan', 40.7

====================================================================================================

PROMPT 22:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area of New York give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 22:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area of New York give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

SQL Statement:
	SELECT Crime_ID, COUNT(*) as Crime_Count, MAX(Report_#) as Report_#, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime_Class) as Crime_Class, MAX(Crime_Type) as Crime_Type, MAX(Area_Name) as Area_Name, MAX(Latitude) as Latitude, MAX(Longitude) as Longitude, MAX(Crime_Date) as Crime_Date, MAX(Crime_Time) as Crime_Time, MAX(Crime

====================================================================================================

PROMPT 23:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of Philly

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 23:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the amount of crimes in each area of Philly

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Response:
	SELECT Crime_ID, COUNT(*) AS Crime_Count FROM philly_crime_data WHERE Area_ID = 1 GROUP BY Crime_ID;

## 3.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2

====================================================================================================

PROMPT 24:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area of Philly give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 24:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area of Philly give the total crime count, last reported date of any crime and the type of crime, most common crime type and weekly increase in crimes by percentage.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	1, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	2, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	3, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	4, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	5, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	6, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	7, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	8, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	9, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	10, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	11, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	12, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	13, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	14, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	15, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	16, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	17, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	18, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	19, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	20, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	21, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	22, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	23, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	24, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	25, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	26, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	27, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	28, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	29, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	30, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	31, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	32, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	33, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	34, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	35, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	36, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	37, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	38, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	39, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	40, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	41, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	42, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	43, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	44, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	45, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	46, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	47, 1, '2013-01-01', '2013-01-01', 'Theft', 'South', '123 Main St', -75.13, 40.75
	48, 1, '2013-01-01', '2013-01-01', 'Theft',

====================================================================================================

PROMPT 25:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Atlanta spaced by 0.01 degrees, give the most common crime type and its count

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 25:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Atlanta spaced by 0.01 degrees, give the most common crime type and its count

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

SQL Statement:
	SELECT Crime_Type, COUNT(*) FROM atlanta_crime_data WHERE (Longitude BETWEEN -84.5 AND -84.4) AND (Latitude BETWEEN 33.7 AND 33.8) GROUP BY Crime_Type;

## Solution

The most common crime type in the Atlanta area is 'Theft'.

## Code

```
SELECT Crime_Type, COUNT(*) FROM atlanta_crime_data WHERE (Longitude BETWEEN -84.5 AND -84.4) AND (Latitude BETWEEN 33.7 AND 33.8) GROUP BY Crime_Type;
```

## Running the test suite

To run the test suite, execute the following command:

```
go test
```

To run the benchmarks, execute the following command:

```
go test -bench .
```

## Further information

For more detailed information about the SQL language, visit [Wikipedia](http://en.wikipedia.org/wiki/SQL).

For more information about building, testing, and releasing your code, see [How to Write Go Code](https://golang.org/doc/code.html).

## Exercises

### 1.1.1. Using a database

The following exercise shows how to use a database to store and retrieve data.

#### 1.1.1.1. Create a new project

Create a new project directory and navigate to it.

```
mkdir -p ~/projects/go-programming-exercises/1.1.1/crime-data
cd ~/projects/go-programming-exercises/1.1.1/crime-data
```

#### 1.1.1.2. Download the crime data

The [crime data](https://data.cityofatlanta.org/Public-Safety/Crime-Data) is in a CSV file.

```
curl -O https://data.cityofatlanta.org/Public-Safety/Crime-Data/csv/
```

#### 1.1.1.3. Create a new database

Create a new database in the project directory.

```
touch db.sqlite3
```

#### 1.1.1.4. Create a database connection

Create a new database connection in the project directory.

```
go run main.go
```

#### 1.1.1.5. Create a new database table

Create a new table in the database.

```
go run main.go
```

#### 1.1.1.6. Insert data into the table

Insert the crime data into the table.

```
go run main.go
```

#### 1.1.1.7. Query the data

Query the data.

```
go run main.go
```

### 1.1.2. Using a CSV file

The following exercise shows how to use a CSV file to store and retrieve data.

#### 1.1.2.1. Create a new project

Create a new project directory and navigate to it.

```
mkdir -p ~/projects/go-programming-exercises/1.1.2/crime-data
cd ~/projects/go-programming-exercises/1.1.2/crime-data
```

#### 1.1.2.2. Download the crime data

The [crime data](https://data.cityofatlanta.org/Public-Safety/Crime-Data) is in a CSV file.

```
curl -O https://data.cityofatlanta.org/Public-Safety/Crime-Data/csv/
```

#### 1.1.2.3. Create a new database

Create a new database in the project directory.

```
touch db.sqlite3
```

#### 1.1.2.4. Create a database connection

Create a new database connection in the project directory.

```
go run main.go
```

#### 1.1.2.5. Create a new database table

Create a new table in the database.

```
go run main.go
```

#### 1.1.2.6. Insert data into the table

Insert the crime data into the table.

```
go run main.go
```

#### 1.1.2.7. Query the data

Query the data.

```
go run main.go
```

### 1.1.3. Using a JSON file

The following exercise shows how to use a JSON file to store and retrieve data.

#### 1.1.3.1. Create a new project

Create a new project directory and navigate to it.

```
mkdir -p ~/projects/go-programming-exercises/1.1.3/crime-data
cd ~/projects/go-programming-exercises/1.1.3/crime-data
```

#### 1.1.3.2. Download the crime data

The [crime data](https://data.cityofatlanta.org/Public-Safety/Crime-Data) is in a JSON file.

```
curl -O https://data.cityofatlanta.org/Public-Safety/Crime-Data/json/
```

#### 1.1.3.3. Create a new database

Create a new database in the project directory.

```
touch db.sqlite3
```

#### 1.1.3.4. Create a database connection

Create a new database connection in the project directory.

```
go run main.go
```

#### 1.1.3.5. Create a new database table

Create a new table in the database.

```
go run main.go
```

#### 1.1.3.6. Insert data into the table

Insert the crime data into the table.

```
go run main.go
```

#### 1.1.3.7. Query the data

Query the data.

```
go run main.go
```

### 1.1.4. Using a SQLite file

The following exercise shows how to use a SQLite file to store and retrieve data.

#### 1.1.4.1. Create a new project

Create a new project directory and navigate to it.

```
mkdir -p ~/projects/go-programming-exercises/1.1.4/crime-data
cd ~/projects/go-programming-exercises/1.1.4/crime-data
```

#### 1.1.4.2. Download the crime data

The [crime data](https://data.cityofatlanta.org/Public-Safety/Crime-Data) is in a SQLite file.

```
curl -O https://data.cityofatlanta.org/Public-Safety/Crime-Data/sqlite/
```

#### 1.1.4.3. Create a new database

Create a new database in the project directory.

```
touch db.sqlite3
```

#### 1.1.4.4. Create a database connection

Create a new database connection in the project directory.

```
go run main.go
```

#### 1.1.4.5. Create a new database table

Create a new table in the database.

```
go run main.go
```

#### 1.1.4.6. Insert data into the table

Insert the crime data into the table.

```
go run main.go
```

#### 1.1.4.7. Query the data

Query the data.

```
go run main.go
```

### 1.1.5. Using a PostgreSQL file

The following exercise shows how to use a PostgreSQL file to store and retrieve data.

#### 1.1.5.1. Create a new project

Create a new project directory and navigate to it.

```
mkdir -p ~/projects/go-programming-exercises/1.1.5/crime-data
cd ~/projects/go-programming-exercises/1.1.5/crime-data
```

#### 1.1.5.2. Download the crime data

The [crime data](https://data.cityofatlanta.org/Public-

====================================================================================================

PROMPT 26:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Atlanta spaced by 0.01 degrees, give the total crime count.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 26:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Atlanta spaced by 0.01 degrees, give the total crime count.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:

```sql
SELECT SUM(Crime_Count) FROM atlanta_crime_data WHERE (Longitude, Latitude) BETWEEN (0.00, 0.01) AND (0.01, 0.02)
```

## 解题思路

见程序注释


====================================================================================================

PROMPT 27:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of LA spaced by 0.01 degrees, give the total crime count.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 27:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of LA spaced by 0.01 degrees, give the total crime count.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

SQL Statement:
	SELECT Crime_ID, COUNT(*)
	FROM la_crime_data
	WHERE (Latitude >= $1 AND Latitude <= $2)
	AND (Longitude >= $3 AND Longitude <= $4)
	GROUP BY Crime_ID
	HAVING COUNT(*) > 0

Input:
	$1 = 0.0
	$2 = 0.0
	$3 = 0.0
	$4 = 0.0

Output:
	$5 = 0
	$6 = 0
	$7 = 0
	$8 = 0
	$9 = 0
	$10 = 0
	$11 = 0
	$12 = 0
	$13 = 0
	$14 = 0
	$15 = 0
	$16 = 0
	$17 = 0
	$18 = 0
	$19 = 0
	$20 = 0
	$21 = 0
	$22 = 0
	$23 = 0
	$24 = 0
	$25 = 0
	$26 = 0
	$27 = 0
	$28 = 0
	$29 = 0
	$30 = 0
	$31 = 0
	$32 = 0
	$33 = 0
	$34 = 0
	$35 = 0
	$36 = 0
	$37 = 0
	$38 = 0
	$39 = 0
	$40 = 0
	$41 = 0
	$42 = 0
	$43 = 0
	$44 = 0
	$45 = 0
	$46 = 0
	$47 = 0
	$48 = 0
	$49 = 0
	$50 = 0
	$51 = 0
	$52 = 0
	$53 = 0
	$54 = 0
	$55 = 0
	$56 = 0
	$57 = 0
	$58 = 0
	$59 = 0
	$60 = 0
	$61 = 0
	$62 = 0
	$63 = 0
	$64 = 0
	$65 = 0
	$66 = 0
	$67 = 0
	$68 = 0
	$69 = 0
	$70 = 0
	$71 = 0
	$72 = 0
	$73 = 0
	$74 = 0
	$75 = 0
	$76 = 0
	$77 = 0
	$78 = 0
	$79 = 0
	$80 = 0
	$81 = 0
	$82 = 0
	$83 = 0
	$84 = 0
	$85 = 0
	$86 = 0
	$87 = 0
	$88 = 0
	$89 = 0
	$90 = 0
	$91 = 0
	$92 = 0
	$93 = 0
	$94 = 0
	$95 = 0
	$96 = 0
	$97 = 0
	$98 = 0
	$99 = 0
	$100 = 0
	$101 = 0
	$102 = 0
	$103 = 0
	$104 = 0
	$105 = 0
	$106 = 0
	$107 = 0
	$108 = 0
	$109 = 0
	$110 = 0
	$111 = 0
	$112 = 0
	$113 = 0
	$114 = 0
	$115 = 0
	$116 = 0
	$117 = 0
	$118 = 0
	$119 = 0
	$120 = 0
	$121 = 0
	$122 = 0
	$123 = 0
	$124 = 0
	$125 = 0
	$126 = 0
	$127 = 0
	$128 = 0
	$129 = 0
	$130 = 0
	$131 = 0
	$132 = 0
	$133 = 0
	$134 = 0
	$135 = 0
	$136 = 0
	$137 = 0
	$138 = 0
	$139 = 0
	$140 = 0
	$141 = 0
	$142 = 0
	$143 = 0
	$144 = 0
	$145 = 0
	$146 = 0
	$147 = 0
	$148 = 0
	$149 = 0
	$150 = 0
	$151 = 0
	$152 = 0
	$153 = 0
	$154 = 0
	$155 = 0
	$156 = 0
	$157 = 0
	$158 = 0
	$159 = 0
	$160 = 0
	$161 = 0
	$162 = 0
	$163 = 0
	$164 = 0
	$165 = 0
	$166 = 0
	$167 = 0
	$168 = 0
	$169 = 0
	$170 = 0
	$171 = 0
	$172 = 0
	$173 = 0
	$174 = 0
	$175 = 0
	$176 = 0
	$177 = 0
	$178 = 0
	$179 = 0
	$180 = 0
	$181 = 0
	$182 = 0
	$183 = 0
	$184 = 0
	$185 = 0
	$186 = 0
	$187 = 0
	$188 = 0
	$189 = 0
	$190 = 0
	$191 = 0
	$192 = 0
	$193 = 0
	$194 = 0
	$195 = 0
	$196 = 0
	$197 = 0
	$198 = 0
	$199 = 0
	$200 = 0
	$201 = 0
	$202 = 0
	$203 = 0
	$204 = 0
	$205 = 0
	$206 = 0
	$207 = 0
	$208 = 0
	$209 = 0
	$210 = 0
	$211 = 0
	$212 = 0
	$213 = 0
	$214 = 0
	$215 = 0
	$216 = 0
	$217 = 0
	$218 = 0
	$219 = 0
	$220 = 0
	$221 = 0
	$222 = 0
	$223 = 0
	$224 = 0
	$225 = 0
	$226 = 0
	$227 = 0
	$228 = 0
	$229 = 0
	$230 = 0
	$231 = 0
	$232 = 0
	$233 = 0
	$234 = 0
	$235 = 0
	$236 = 0
	$237 = 0
	$238 = 0
	$239 = 0
	$240 = 0
	$241 = 0
	$242 = 0
	$243 = 0
	$244 = 0
	$245 = 0
	$246 = 0
	$247 = 0
	$248 = 0
	$249 = 0
	$250 = 0
	$251 = 0
	$252 = 0
	$253 = 0
	$254 = 0
	$255 = 0
	$256 = 0
	$257 = 0
	$258 = 0
	$259 = 0
	$260 = 0
	$261 = 0
	$262 = 0
	$263 = 0
	$264 = 0
	$265 = 0
	$266 = 0
	$267 = 0
	$268 = 0
	$269 = 0
	$270 = 0
	$271 = 0
	$272 = 0
	$273 = 0
	$274 = 0
	$275 = 0
	$276 = 0
	$277 = 0
	$278 = 0
	$279 = 0
	$280 = 0
	$281 = 0
	$282 = 0
	$283 = 0
	$284 = 0
	$285 = 0
	$286 = 0
	$287 = 0
	$288 = 0
	$289 = 0
	$290 = 0
	$291 = 0
	$292 = 0
	$293 = 0
	$294 = 0
	$295 = 0
	$296 = 0
	$297 = 0
	$298 = 0
	$299 = 0
	$300 = 0
	$301 = 0
	$302 = 0
	$303 =

====================================================================================================

PROMPT 28:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of LA spaced by 0.01 degrees, give the most common crime type and its count

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 28:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of LA spaced by 0.01 degrees, give the most common crime type and its count

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

SQL Statement:
	SELECT Crime_Type, COUNT(*)
	FROM la_crime_data
	WHERE Latitude >= '&latitude' AND Latitude <= '&latitude + 0.01'
	AND Longitude >= '&longitude' AND Longitude <= '&longitude + 0.01'
	GROUP BY Crime_Type
	ORDER BY COUNT(*) DESC
	LIMIT 1

Expected Output:
	The most common crime type and its count

Inputs:
	latitude = 1.0
	longitude = 1.0

Outputs:
	The most common crime type and its count


====================================================================================================

PROMPT 29:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of New York spaced by 0.01 degrees, give the total crime count.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 29:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of New York spaced by 0.01 degrees, give the total crime count.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, SUM(Crime_Count) FROM nyc_crime_data WHERE Latitude BETWEEN 40.7 AND 40.8 AND Longitude BETWEEN -73.9 AND -73.8;

Input:
	40.7, -73.9, 40.8, -73.8

Output:
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823,

====================================================================================================

PROMPT 30:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of New York spaced by 0.01 degrees, give the most common crime type and its count

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 30:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of New York spaced by 0.01 degrees, give the most common crime type and its count

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*) DESC
LIMIT 1
```

```sql
SELECT Crime_Type, COUNT(*)
FROM nyc_crime_data
WHERE (Latitude, Longitude) BETWEEN (40.7, -74.0) AND (40.7, -74.0)
GROUP BY Crime_Type
ORDER BY COUNT(*)

====================================================================================================

PROMPT 31:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the total crime count.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 31:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the total crime count.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the total crime count.
	INSUFFICENT

Hint:
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.
	The database is a relational database.


====================================================================================================

PROMPT 32:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the most common crime type and its count

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 32:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each coordinate in latitude and longitude of Philly spaced by 0.01 degrees, give the most common crime type and its count

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_Type, COUNT(*) FROM philly_crime_data WHERE Crime_Date = '2015-01-01' AND Crime_Time = '00:00:00' AND Longitude BETWEEN -75.25 AND -75.15 AND Latitude BETWEEN 39.75 AND 39.85;

Expected Output:
	Homicide, 3
	Assault, 2
	Theft, 1
	Vehicle Theft, 1
	Robbery, 1
	Burglary, 1
	Larceny, 1
	Auto Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	Theft, 1
	

====================================================================================================

PROMPT 33:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in Atlanta

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 33:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in Atlanta

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(*) AS Total_Count FROM atlanta_crime_data GROUP BY Crime_ID;

Expected Output:
	Crime_ID, Total_Count
	1, 1
	2, 1
	3, 1
	4, 1
	5, 1
	6, 1
	7, 1
	8, 1
	9, 1
	10, 1
	11, 1
	12, 1
	13, 1
	14, 1
	15, 1
	16, 1
	17, 1
	18, 1
	19, 1
	20, 1
	21, 1
	22, 1
	23, 1
	24, 1
	25, 1
	26, 1
	27, 1
	28, 1
	29, 1
	30, 1
	31, 1
	32, 1
	33, 1
	34, 1
	35, 1
	36, 1
	37, 1
	38, 1
	39, 1
	40, 1
	41, 1
	42, 1
	43, 1
	44, 1
	45, 1
	46, 1
	47, 1
	48, 1
	49, 1
	50, 1
	51, 1
	52, 1
	53, 1
	54, 1
	55, 1
	56, 1
	57, 1
	58, 1
	59, 1
	60, 1
	61, 1
	62, 1
	63, 1
	64, 1
	65, 1
	66, 1
	67, 1
	68, 1
	69, 1
	70, 1
	71, 1
	72, 1
	73, 1
	74, 1
	75, 1
	76, 1
	77, 1
	78, 1
	79, 1
	80, 1
	81, 1
	82, 1
	83, 1
	84, 1
	85, 1
	86, 1
	87, 1
	88, 1
	89, 1
	90, 1
	91, 1
	92, 1
	93, 1
	94, 1
	95, 1
	96, 1
	97, 1
	98, 1
	99, 1
	100, 1
	101, 1
	102, 1
	103, 1
	104, 1
	105, 1
	106, 1
	107, 1
	108, 1
	109, 1
	110, 1
	111, 1
	112, 1
	113, 1
	114, 1
	115, 1
	116, 1
	117, 1
	118, 1
	119, 1
	120, 1
	121, 1
	122, 1
	123, 1
	124, 1
	125, 1
	126, 1
	127, 1
	128, 1
	129, 1
	130, 1
	131, 1
	132, 1
	133, 1
	134, 1
	135, 1
	136, 1
	137, 1
	138, 1
	139, 1
	140, 1
	141, 1
	142, 1
	143, 1
	144, 1
	145, 1
	146, 1
	147, 1
	148, 1
	149, 1
	150, 1
	151, 1
	152, 1
	153, 1
	154, 1
	155, 1
	156, 1
	157, 1
	158, 1
	159, 1
	160, 1
	161, 1
	162, 1
	163, 1
	164, 1
	165, 1
	166, 1
	167, 1
	168, 1
	169, 1
	170, 1
	171, 1
	172, 1
	173, 1
	174, 1
	175, 1
	176, 1
	177, 1
	178, 1
	179, 1
	180, 1
	181, 1
	182, 1
	183, 1
	184, 1
	185, 1
	186, 1
	187, 1
	188, 1
	189, 1
	190, 1
	191, 1
	192, 1
	193, 1
	194, 1
	195, 1
	196, 1
	197, 1
	198, 1
	199, 1
	200, 1
	201, 1
	202, 1
	203, 1
	204, 1
	205, 1
	206, 1
	207, 1
	208, 1
	209, 1
	210, 1
	211, 1
	212, 1
	213, 1
	214, 1
	215, 1
	216, 1
	217, 1
	218, 1
	219, 1
	220, 1
	221, 1
	222, 1
	223, 1
	224, 1
	225, 1
	226, 1
	227, 1
	228, 1
	229, 1
	230, 1
	231, 1
	232, 1
	233, 1
	234, 1
	235, 1
	236, 1
	237, 1
	238, 1
	239, 1
	240, 1
	241, 1
	242, 1
	243, 1
	244, 1
	245, 1
	246, 1
	247, 1
	248, 1
	249, 1
	250, 1
	251, 1
	252, 1
	253, 1
	254, 1
	255, 1
	256, 1
	257, 1
	258, 1
	259, 1
	260, 1
	261, 1
	262, 1
	263, 1
	264, 1
	265, 1
	266, 1
	267, 1
	268, 1
	269, 1
	270, 1
	271, 1
	272, 1
	273, 1
	274, 1
	275, 1
	276, 1
	277, 1
	278, 1
	279, 1
	280, 1
	281, 1
	282, 1
	283, 1
	284, 1
	285, 1
	286, 1
	287, 1
	288, 1
	289, 1
	290, 1
	291, 1
	292, 1
	293, 1
	294, 1
	295, 1
	296, 1
	297, 1
	298, 1
	299, 1
	300, 1
	301, 1
	302, 1
	303, 1
	304, 1
	305, 1
	306, 1
	307, 1
	308, 1
	309, 1
	310, 1
	311, 1
	312, 1
	313, 1
	314, 1
	315, 1
	316, 1
	317, 1
	318, 1
	319, 1
	320, 1
	321, 1
	322, 1
	323, 1
	324, 1
	325, 1
	326, 1
	327, 1
	328, 1
	329, 1
	330, 1
	331, 1
	332, 1
	333, 1
	334, 1
	335, 1
	336, 1
	337, 1
	338, 1
	339, 1
	340, 1
	341, 1
	342, 1
	343, 1
	344, 1
	345, 1
	346, 1
	347, 1
	348, 1
	349, 1
	350, 1
	351, 1
	352, 1
	353, 1
	354, 1
	355, 1
	356, 1
	357, 1
	358, 1
	359, 1
	360, 1
	361, 1
	362, 1
	363, 1
	364, 1
	365, 1
	366, 1
	367, 1
	368, 1
	369, 1
	370, 1
	371, 1
	372, 1
	373, 1
	374, 1
	375, 1
	376, 1
	

====================================================================================================

PROMPT 34:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each crime type in Atlanta, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 34:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each crime type in Atlanta, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

```sql
SELECT
	COUNT(*) AS total_count,
	MAX(Report_#) AS last_reported_date,
	MAX(Area_Name) AS last_reported_area,
	MAX(Area_Name) AS most_common_area,
	MAX(Area_Name) AS most_common_area_percentage_increase
FROM atlanta_crime_data
GROUP BY Crime_Type
ORDER BY most_common_area_percentage_increase DESC
```

```sql
SELECT
	COUNT(*) AS total_count,
	MAX(Report_#) AS last_reported_date,
	MAX(Area_Name) AS last_reported_area,
	MAX(Area_Name) AS most_common_area,
	MAX(Area_Name) AS most_common_area_percentage_increase
FROM atlanta_crime_data
GROUP BY Crime_Type
ORDER BY most_common_area_percentage_increase DESC
```

```sql
SELECT
	COUNT(*) AS total_count,
	MAX(Report_#) AS last_reported_date,
	MAX(Area_Name) AS last_reported_area,
	MAX(Area_Name) AS most_common_area,
	MAX(Area_Name) AS most_common_area_percentage_increase
FROM atlanta_crime_data
GROUP BY Crime_Type
ORDER BY most_common_area_percentage_increase DESC
```

```sql
SELECT
	COUNT(*) AS total_count,
	MAX(Report_#) AS last_reported_date,
	MAX(Area_Name) AS last_reported_area,
	MAX(Area_Name) AS most_common_area,
	MAX(Area_Name) AS most_common_area_percentage_increase
FROM atlanta_crime_data
GROUP BY Crime_Type
ORDER BY most_common_area_percentage_increase DESC
```

```sql
SELECT
	COUNT(*) AS total_count,
	MAX(Report_#) AS last_reported_date,
	MAX(Area_Name) AS last_reported_area,
	MAX(Area_Name) AS most_common_area,
	MAX(Area_Name) AS most_common_area_percentage_increase
FROM atlanta_crime_data
GROUP BY Crime_Type
ORDER BY most_common_area_percentage_increase DESC
```

```sql
SELECT
	COUNT(*) AS total_count,
	MAX(Report_#) AS last_reported_date,
	MAX(Area_Name) AS last_reported_area,
	MAX(Area_Name) AS most_common_area,
	MAX(Area_Name) AS most_common_area_percentage_increase
FROM atlanta_crime_data
GROUP BY Crime_Type
ORDER BY most_common_area_percentage_increase DESC
```

```sql
SELECT
	COUNT(*) AS total_count,
	MAX(Report_#) AS last_reported_date,
	MAX(Area_Name) AS last_reported_area,
	MAX(Area_Name) AS most_common_area,
	MAX(Area_Name) AS most_common_area_percentage_increase
FROM atlanta_crime_data
GROUP BY Crime_Type
ORDER BY most_common_area_percentage_increase DESC
```

```sql
SELECT
	COUNT(*) AS total_count,
	MAX(Report_#) AS last_reported_date,
	MAX(Area_Name) AS last_reported_area,
	MAX(Area_Name) AS most_common_area,
	MAX(Area_Name) AS most_common_area_percentage_increase
FROM atlanta_crime_data
GROUP BY Crime_Type
ORDER BY most_common_area_percentage_increase DESC
```

```sql
SELECT
	COUNT(*) AS total_count,
	MAX(Report_#) AS last_reported_date,
	MAX(Area_Name) AS last_reported_area,
	MAX(Area_Name) AS most_common_area,
	MAX(Area_Name) AS most_common_area_percentage_increase
FROM atlanta_crime_data
GROUP BY Crime_Type
ORDER BY most_common_area_percentage_increase DESC
```

```sql
SELECT
	COUNT(*) AS total_count,
	MAX(Report_#) AS last_reported_date,
	MAX(Area_Name) AS last_reported_area,
	MAX(Area_Name) AS most_common_area,
	MAX(Area_Name) AS most_common_area_percentage_increase
FROM atlanta_crime_data
GROUP BY Crime_Type
ORDER BY most_common_area_percentage_increase DESC
```

```sql
SELECT
	COUNT(*) AS total_count,
	MAX(Report_#) AS last_reported_date,
	MAX(Area_Name) AS last_reported_area,
	MAX(Area_Name) AS most_common_area,
	MAX(Area_Name) AS most_common_area_percentage_increase
FROM atlanta_crime_data
GROUP BY Crime_Type
ORDER BY most_common_area_percentage_increase DESC
```

```sql
SELECT
	COUNT(*) AS total_count,
	MAX(Report_#) AS last_reported_date,
	MAX(Area_Name) AS last_reported_area,
	MAX(Area_Name) AS most_common_area,
	MAX(Area_Name) AS most_common_area_percentage_increase
FROM atlanta_crime_data
GROUP BY Crime_Type
ORDER BY most_common_area_percentage_increase DESC
```

```sql
SELECT
	COUNT(*) AS total_count,
	MAX(Report_#) AS last_reported_date,
	MAX(Area_Name) AS last_reported_area,
	MAX(Area_Name) AS most_common_area,
	MAX(Area_Name) AS most_common_area_percentage_increase
FROM atlanta_crime_data
GROUP BY Crime_Type
ORDER BY most_common_area_percentage_increase DESC
```

```sql
SELECT
	COUNT(*) AS total_count,
	MAX(Report_#) AS last_reported_date,
	MAX(Area_Name) AS last_reported_area,
	MAX(Area_Name) AS most_common_area,
	MAX(Area_Name) AS most_common_area_percentage_increase
FROM atlanta_crime_data
GROUP BY Crime_Type
ORDER BY most_common_area_percentage_increase DESC
```

```sql
SELECT
	COUNT(*) AS total_count,
	MAX(Report_#) AS last_reported_date,
	MAX(Area_Name) AS last_reported_area,
	MAX(Area_Name) AS most_common_area,
	MAX(Area_Name) AS most_common_area_percentage_increase
FROM atlanta_crime_data
GROUP BY Crime_Type
ORDER BY most_common_area_percentage_increase DESC
```

```sql
SELECT
	COUNT(*) AS total_count,
	MAX(Report_#) AS last_reported_date,
	MAX(Area_Name) AS last_reported_area,
	MAX(Area_Name) AS most_common_area,
	MAX(Area_Name) AS most_common_area_percentage_increase
FROM atlanta_crime_data
GROUP BY Crime_Type
ORDER BY most_common_area_percentage_increase DESC
```

```sql
SELECT
	COUNT(*) AS total_count,
	MAX(Report_#) AS last_reported_date,
	MAX(Area_Name) AS last_reported_area,
	MAX(Area_Name) AS most_common_area,
	MAX(Area_Name) AS most_common_area_percent

====================================================================================================

PROMPT 35:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in LA

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 35:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in LA

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(Crime_ID)
	FROM la_crime_data
	GROUP BY Crime_ID
	ORDER BY Crime_ID;

Expected Output:
	Crime_ID, COUNT(Crime_ID)
	1,		1
	2,		1
	3,		1
	4,		1
	5,		1
	6,		1
	7,		1
	8,		1
	9,		1
	10,		1
	11,		1
	12,		1
	13,		1
	14,		1
	15,		1
	16,		1
	17,		1
	18,		1
	19,		1
	20,		1
	21,		1
	22,		1
	23,		1
	24,		1
	25,		1
	26,		1
	27,		1
	28,		1
	29,		1
	30,		1
	31,		1
	32,		1
	33,		1
	34,		1
	35,		1
	36,		1
	37,		1
	38,		1
	39,		1
	40,		1
	41,		1
	42,		1
	43,		1
	44,		1
	45,		1
	46,		1
	47,		1
	48,		1
	49,		1
	50,		1
	51,		1
	52,		1
	53,		1
	54,		1
	55,		1
	56,		1
	57,		1
	58,		1
	59,		1
	60,		1
	61,		1
	62,		1
	63,		1
	64,		1
	65,		1
	66,		1
	67,		1
	68,		1
	69,		1
	70,		1
	71,		1
	72,		1
	73,		1
	74,		1
	75,		1
	76,		1
	77,		1
	78,		1
	79,		1
	80,		1
	81,		1
	82,		1
	83,		1
	84,		1
	85,		1
	86,		1
	87,		1
	88,		1
	89,		1
	90,		1
	91,		1
	92,		1
	93,		1
	94,		1
	95,		1
	96,		1
	97,		1
	98,		1
	99,		1
	100,		1
	101,		1
	102,		1
	103,		1
	104,		1
	105,		1
	106,		1
	107,		1
	108,		1
	109,		1
	110,		1
	111,		1
	112,		1
	113,		1
	114,		1
	115,		1
	116,		1
	117,		1
	118,		1
	119,		1
	120,		1
	121,		1
	122,		1
	123,		1
	124,		1
	125,		1
	126,		1
	127,		1
	128,		1
	129,		1
	130,		1
	131,		1
	132,		1
	133,		1
	134,		1
	135,		1
	136,		1
	137,		1
	138,		1
	139,		1
	140,		1
	141,		1
	142,		1
	143,		1
	144,		1
	145,		1
	146,		1
	147,		1
	148,		1
	149,		1
	150,		1
	151,		1
	152,		1
	153,		1
	154,		1
	155,		1
	156,		1
	157,		1
	158,		1
	159,		1
	160,		1
	161,		1
	162,		1
	163,		1
	164,		1
	165,		1
	166,		1
	167,		1
	168,		1
	169,		1
	170,		1
	171,		1
	172,		1
	173,		1
	174,		1
	175,		1
	176,		1
	177,		1
	178,		1
	179,		1
	180,		1
	181,		1
	182,		1
	183,		1
	184,		1
	185,		1
	186,		1
	187,		1
	188,		1
	189,		1
	190,		1
	191,		1
	192,		1
	193,		1
	194,		1
	195,		1
	196,		1
	197,		1
	198,		1
	199,		1
	200,		1
	201,		1
	202,		1
	203,		1
	204,		1
	205,		1
	206,		1
	207,		1
	208,		1
	209,		1
	210,		1
	211,		1
	212,		1
	213,		1
	214,		1
	215,		1
	216,		1
	217,		1
	218,		1
	219,		1
	220,		1
	221,		1
	222,		1
	223,		1
	224,		1
	225,		1
	226,		1
	227,		1
	228,		1
	229,		1
	230,		1
	231,		1
	232,		1
	233,		1
	234,		1
	235,		1
	236,		1
	237,		1
	238,		1
	239,		1
	240,		1
	241,		1
	242,		1
	243,		1
	244,		1
	245,		1
	246,		1
	247,		1
	248,		1
	249,		1
	250,		1
	251,		1
	252,		1
	253,		1
	254,		1
	255,		1
	256,		1
	257,		1
	258,		1
	259,		1
	260,		1
	261,		1
	262,		1
	263,		1
	264,		1
	265,		1
	

====================================================================================================

PROMPT 36:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each crime type in LA, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 36:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each crime type in LA, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(*) AS Crime_Count, MAX(Date_Reported) AS Date_Reported, MAX(Crime_Date) AS Crime_Date, MAX(Crime_Time) AS Crime_Time, Crime_Type, MAX(Area_Name) AS Area_Name, MAX(Vict_Age) AS Vict_Age, MAX(Vict_Sex) AS Vict_Sex, MAX(Weapon_Desc) AS Weapon_Desc, MAX(Address) AS Address, MAX(Latitude) AS Latitude, MAX(Longitude) AS Longitude, MAX(Crime_Type) AS Crime_Type_Increase
	FROM la_crime_data
	WHERE Crime_Type = 'Assault'
	GROUP BY Crime_Type
	ORDER BY Crime_Type_Increase DESC
	LIMIT 1

Expected Output:
	Crime_ID, Crime_Count, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude, Crime_Type_Increase
	1, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	2, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	3, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	4, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	5, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	6, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	7, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	8, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	9, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	10, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	11, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	12, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	13, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	14, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	15, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	16, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	17, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	18, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	19, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	20, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	21, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	22, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	23, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	24, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	25, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	26, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	27, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '0', '0', '0', '0', '0', '0'
	28, 1, '2015-01-01', '2015-01-01', '2015-01-01', 'Assault', 'Los Angeles', '0', '0', '

====================================================================================================

PROMPT 37:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in New York

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 37:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in New York

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(Crime_ID) AS Total_Crimes
	FROM nyc_crime_data
	WHERE Crime_Type = 'Murder'
	AND Area_Name = 'Manhattan'
	AND Latitude = '40.7128'
	AND Longitude = '-73.985'
	AND Report_# = '1'
	AND Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Class = 'Murder'
	AND Crime_Type = 'Murder'
	AND Area_Name = 'Manhattan'
	AND Latitude = '40.7128'
	AND Longitude = '-73.985'
	AND Report_# = '1'
	AND Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Class = 'Murder'
	AND Crime_Type = 'Murder'
	AND Area_Name = 'Manhattan'
	AND Latitude = '40.7128'
	AND Longitude = '-73.985'
	AND Report_# = '1'
	AND Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Class = 'Murder'
	AND Crime_Type = 'Murder'
	AND Area_Name = 'Manhattan'
	AND Latitude = '40.7128'
	AND Longitude = '-73.985'
	AND Report_# = '1'
	AND Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Class = 'Murder'
	AND Crime_Type = 'Murder'
	AND Area_Name = 'Manhattan'
	AND Latitude = '40.7128'
	AND Longitude = '-73.985'
	AND Report_# = '1'
	AND Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Class = 'Murder'
	AND Crime_Type = 'Murder'
	AND Area_Name = 'Manhattan'
	AND Latitude = '40.7128'
	AND Longitude = '-73.985'
	AND Report_# = '1'
	AND Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Class = 'Murder'
	AND Crime_Type = 'Murder'
	AND Area_Name = 'Manhattan'
	AND Latitude = '40.7128'
	AND Longitude = '-73.985'
	AND Report_# = '1'
	AND Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Class = 'Murder'
	AND Crime_Type = 'Murder'
	AND Area_Name = 'Manhattan'
	AND Latitude = '40.7128'
	AND Longitude = '-73.985'
	AND Report_# = '1'
	AND Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Class = 'Murder'
	AND Crime_Type = 'Murder'
	AND Area_Name = 'Manhattan'
	AND Latitude = '40.7128'
	AND Longitude = '-73.985'
	AND Report_# = '1'
	AND Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Class = 'Murder'
	AND Crime_Type = 'Murder'
	AND Area_Name = 'Manhattan'
	AND Latitude = '40.7128'
	AND Longitude = '-73.985'
	AND Report_# = '1'
	AND Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Class = 'Murder'
	AND Crime_Type = 'Murder'
	AND Area_Name = 'Manhattan'
	AND Latitude = '40.7128'
	AND Longitude = '-73.985'
	AND Report_# = '1'
	AND Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Class = 'Murder'
	AND Crime_Type = 'Murder'
	AND Area_Name = 'Manhattan'
	AND Latitude = '40.7128'
	AND Longitude = '-73.985'
	AND Report_# = '1'
	AND Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Class = 'Murder'
	AND Crime_Type = 'Murder'
	AND Area_Name = 'Manhattan'
	AND Latitude = '40.7128'
	AND Longitude = '-73.985'
	AND Report_# = '1'
	AND Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Class = 'Murder'
	AND Crime_Type = 'Murder'
	AND Area_Name = 'Manhattan'
	AND Latitude = '40.7128'
	AND Longitude = '-73.985'
	AND Report_# = '1'
	AND Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Class = 'Murder'
	AND Crime_Type = 'Murder'
	AND Area_Name = 'Manhattan'
	AND Latitude = '40.7128'
	AND Longitude = '-73.985'
	AND Report_# = '1'
	AND Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Class = 'Murder'
	AND Crime_Type = 'Murder'
	AND Area_Name = 'Manhattan'
	AND Latitude = '40.7128'
	AND Longitude = '-73.985'
	AND Report_# = '1'
	AND Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Class = 'Murder'
	AND Crime_Type = 'Murder'
	AND Area_Name = 'Manhattan'
	AND Latitude = '40.7128'
	AND Longitude = '-73.985'
	AND Report_# = '1'
	AND Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Class = 'Murder'
	AND Crime_Type = 'Murder'
	AND Area_Name = 'Manhattan'
	AND Latitude = '40.7128'
	AND Longitude = '-73.985'
	AND Report_# = '1'
	AND Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Class = 'Murder'
	AND Crime_Type = 'Murder'
	AND Area_Name = 'Manhattan'
	AND Latitude = '40.7128'
	AND Longitude = '-73.985'
	AND Report_# = '1'
	AND Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Class = 'Murder'
	AND Crime_Type = 'Murder'
	AND Area_Name = 'Manhattan'
	AND Latitude = '40.7128'
	AND Longitude = '-73.985'
	AND Report_# = '1'
	AND Crime_Date = '01/01/2015'
	AND Crime_Time = '00:00:00'
	AND Crime_Class = 'Murder'
	AND

====================================================================================================

PROMPT 38:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each crime type in New York, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 38:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each crime type in New York, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	1, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	2, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	3, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	4, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	5, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	6, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	7, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	8, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	9, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	10, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	11, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	12, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	13, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	14, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	15, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	16, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	17, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	18, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	19, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	20, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	21, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	22, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	23, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	24, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	25, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	26, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	27, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	28, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	29, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	30, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	31, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	32, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	33, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	34, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	35, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	36, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	37, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	38, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	39, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	40, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	41, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	42, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	43, 1, '2015-01-01', '2015-01-01', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9878'
	44, 1,

====================================================================================================

PROMPT 39:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in Philly

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 39:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give the total count of each crime type in Philly

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(*) FROM philly_crime_data GROUP BY Crime_ID;

Expected Output:
	+------------+----------+
	| Crime_ID   | COUNT(*) |
	+------------+----------+
	| 1          |        2 |
	| 2          |        1 |
	| 3          |        1 |
	| 4          |        1 |
	| 5          |        1 |
	| 6          |        1 |
	| 7          |        1 |
	| 8          |        1 |
	| 9          |        1 |
	| 10         |        1 |
	| 11         |        1 |
	| 12         |        1 |
	| 13         |        1 |
	| 14         |        1 |
	| 15         |        1 |
	| 16         |        1 |
	| 17         |        1 |
	| 18         |        1 |
	| 19         |        1 |
	| 20         |        1 |
	| 21         |        1 |
	| 22         |        1 |
	| 23         |        1 |
	| 24         |        1 |
	| 25         |        1 |
	| 26         |        1 |
	| 27         |        1 |
	| 28         |        1 |
	| 29         |        1 |
	| 30         |        1 |
	| 31         |        1 |
	| 32         |        1 |
	| 33         |        1 |
	| 34         |        1 |
	| 35         |        1 |
	| 36         |        1 |
	| 37         |        1 |
	| 38         |        1 |
	| 39         |        1 |
	| 40         |        1 |
	| 41         |        1 |
	| 42         |        1 |
	| 43         |        1 |
	| 44         |        1 |
	| 45         |        1 |
	| 46         |        1 |
	| 47         |        1 |
	| 48         |        1 |
	| 49         |        1 |
	| 50         |        1 |
	| 51         |        1 |
	| 52         |        1 |
	| 53         |        1 |
	| 54         |        1 |
	| 55         |        1 |
	| 56         |        1 |
	| 57         |        1 |
	| 58         |        1 |
	| 59         |        1 |
	| 60         |        1 |
	| 61         |        1 |
	| 62         |        1 |
	| 63         |        1 |
	| 64         |        1 |
	| 65         |        1 |
	| 66         |        1 |
	| 67         |        1 |
	| 68         |        1 |
	| 69         |        1 |
	| 70         |        1 |
	| 71         |        1 |
	| 72         |        1 |
	| 73         |        1 |
	| 74         |        1 |
	| 75         |        1 |
	| 76         |        1 |
	| 77         |        1 |
	| 78         |        1 |
	| 79         |        1 |
	| 80         |        1 |
	| 81         |        1 |
	| 82         |        1 |
	| 83         |        1 |
	| 84         |        1 |
	| 85         |        1 |
	| 86         |        1 |
	| 87         |        1 |
	| 88         |        1 |
	| 89         |        1 |
	| 90         |        1 |
	| 91         |        1 |
	| 92         |        1 |
	| 93         |        1 |
	| 94         |        1 |
	| 95         |        1 |
	| 96         |        1 |
	| 97         |        1 |
	| 98         |        1 |
	| 99         |        1 |
	| 100        |        1 |
	| 101        |        1 |
	| 102        |        1 |
	| 103        |        1 |
	| 104        |        1 |
	| 105        |        1 |
	| 106        |        1 |
	| 107        |        1 |
	| 108        |        1 |
	| 109        |        1 |
	| 110        |        1 |
	| 111        |        1 |
	| 112        |        1 |
	| 113        |        1 |
	| 114        |        1 |
	| 115        |        1 |
	| 116        |        1 |
	| 117        |        1 |
	| 118        |        1 |
	| 119        |        1 |
	| 120        |        1 |
	| 121        |        1 |
	| 122        |        1 |
	| 123        |        1 |
	| 124        |        1 |
	| 125        |        1 |
	| 126        |        1 |
	| 127        |        1 |
	| 128        |        1 |
	| 129        |        1 |
	| 130        |        1 |
	| 131        |        1 |
	| 132        |        1 |
	| 133        |        1 |
	| 134        |        1 |
	| 135        |        1 |
	| 136        |        1 |
	| 137        |        1 |
	| 138        |        1 |
	| 139        |        1 |
	| 140        |        1 |
	| 141        |        1 |
	| 142        |        1 |
	| 143        |        1 |
	| 144        |        1 |
	| 145        |        1 |
	| 146        |        1 |
	| 147        |        1 |
	| 148        |        1 |
	| 149        |        1 |
	| 150        |        1 |
	| 151        |        1 |
	| 152        |        1 |
	| 153        |        1 |
	| 154        |        1 |
	| 155        |        1 |
	| 156        |        1 |
	| 157        |        1 |
	| 158        |        1 |
	| 159        |        1 |
	| 160        |        1 |
	| 161        |        1 |
	| 162        |        1 |
	| 163        |        1 |
	| 164        |        1 |
	| 165        |        1 |
	| 166        |        1 |
	| 167        |        1 |
	| 168        |        1 |
	| 169        |        1 |
	| 170        |        1 |
	| 171        |        1 |
	| 172        |        1 |
	| 173        |        1 |
	| 174        |        1 |
	| 175        |        1 |
	| 176        |        1 |
	| 177        |        1 |
	| 178        |        1 |
	| 179        |        1 |
	| 180        |        1 |
	| 181        |        1 |
	| 182        |        1 |
	| 183        |        1 |
	| 184        |        1 |
	| 185        |        1 |
	| 186        |        1 |
	| 187        |        1 |
	| 188        |        1 |
	| 189        |        1 |
	| 190        |        1 |
	| 191        |        1 |
	| 192        |        1 |
	| 193        |        1 |
	| 194        |        1 |
	| 195        |        1 |
	| 196        |        1 |
	| 197        |        1 |
	| 198        |        1 |
	| 199        |        1 |
	| 200        |        1 |
	| 201        |        1 |
	| 202        |        1 |
	| 203        |        1 |
	| 204        |        1 |
	| 205        |        1 |
	| 206        |        1 |
	| 207        |        1 |
	| 208        |        1 |
	| 209

====================================================================================================

PROMPT 40:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each crime type in Philly, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 40:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each crime type in Philly, give its total count, last reported date, last reported area, most common area for this crime type, and percentage increase in this crime type by week.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

SQL Statement:
	SELECT Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude, COUNT(*) AS Total_Count, MAX(Report_Date) AS Last_Report_Date, MAX(Area_ID) AS Last_Area_ID, MAX(Area_Name) AS Last_Area_Name, MAX(Area_Name) AS Most_Common_Area_Name, MAX(Area_Name) / MAX(Report_Date) AS Most_Common_Area_Name_Percentage_Increase
	FROM philly_crime_data
	GROUP BY Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude
	ORDER BY Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude

Expected Output:
	Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude, Total_Count, Last_Report_Date, Last_Area_ID, Last_Area_Name, Most_Common_Area_Name, Most_Common_Area_Name_Percentage_Increase
	1, 1, 1/1/2015, 1:00, Assault, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,

====================================================================================================

PROMPT 41:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area in Atlanta, give count of each crime type.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 41:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area in Atlanta, give count of each crime type.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(Crime_ID) FROM atlanta_crime_data WHERE Area_Name = 'Downtown' GROUP BY Crime_ID;

Expected Output:
	Crime_ID, COUNT(Crime_ID)
	1, 2
	2, 1
	3, 1
	4, 1
	5, 1
	6, 1
	7, 1
	8, 1
	9, 1
	10, 1
	11, 1
	12, 1
	13, 1
	14, 1
	15, 1
	16, 1
	17, 1
	18, 1
	19, 1
	20, 1
	21, 1
	22, 1
	23, 1
	24, 1
	25, 1
	26, 1
	27, 1
	28, 1
	29, 1
	30, 1
	31, 1
	32, 1
	33, 1
	34, 1
	35, 1
	36, 1
	37, 1
	38, 1
	39, 1
	40, 1
	41, 1
	42, 1
	43, 1
	44, 1
	45, 1
	46, 1
	47, 1
	48, 1
	49, 1
	50, 1
	51, 1
	52, 1
	53, 1
	54, 1
	55, 1
	56, 1
	57, 1
	58, 1
	59, 1
	60, 1
	61, 1
	62, 1
	63, 1
	64, 1
	65, 1
	66, 1
	67, 1
	68, 1
	69, 1
	70, 1
	71, 1
	72, 1
	73, 1
	74, 1
	75, 1
	76, 1
	77, 1
	78, 1
	79, 1
	80, 1
	81, 1
	82, 1
	83, 1
	84, 1
	85, 1
	86, 1
	87, 1
	88, 1
	89, 1
	90, 1
	91, 1
	92, 1
	93, 1
	94, 1
	95, 1
	96, 1
	97, 1
	98, 1
	99, 1
	100, 1
	101, 1
	102, 1
	103, 1
	104, 1
	105, 1
	106, 1
	107, 1
	108, 1
	109, 1
	110, 1
	111, 1
	112, 1
	113, 1
	114, 1
	115, 1
	116, 1
	117, 1
	118, 1
	119, 1
	120, 1
	121, 1
	122, 1
	123, 1
	124, 1
	125, 1
	126, 1
	127, 1
	128, 1
	129, 1
	130, 1
	131, 1
	132, 1
	133, 1
	134, 1
	135, 1
	136, 1
	137, 1
	138, 1
	139, 1
	140, 1
	141, 1
	142, 1
	143, 1
	144, 1
	145, 1
	146, 1
	147, 1
	148, 1
	149, 1
	150, 1
	151, 1
	152, 1
	153, 1
	154, 1
	155, 1
	156, 1
	157, 1
	158, 1
	159, 1
	160, 1
	161, 1
	162, 1
	163, 1
	164, 1
	165, 1
	166, 1
	167, 1
	168, 1
	169, 1
	170, 1
	171, 1
	172, 1
	173, 1
	174, 1
	175, 1
	176, 1
	177, 1
	178, 1
	179, 1
	180, 1
	181, 1
	182, 1
	183, 1
	184, 1
	185, 1
	186, 1
	187, 1
	188, 1
	189, 1
	190, 1
	191, 1
	192, 1
	193, 1
	194, 1
	195, 1
	196, 1
	197, 1
	198, 1
	199, 1
	200, 1
	201, 1
	202, 1
	203, 1
	204, 1
	205, 1
	206, 1
	207, 1
	208, 1
	209, 1
	210, 1
	211, 1
	212, 1
	213, 1
	214, 1
	215, 1
	216, 1
	217, 1
	218, 1
	219, 1
	220, 1
	221, 1
	222, 1
	223, 1
	224, 1
	225, 1
	226, 1
	227, 1
	228, 1
	229, 1
	230, 1
	231, 1
	232, 1
	233, 1
	234, 1
	235, 1
	236, 1
	237, 1
	238, 1
	239, 1
	240, 1
	241, 1
	242, 1
	243, 1
	244, 1
	245, 1
	246, 1
	247, 1
	248, 1
	249, 1
	250, 1
	251, 1
	252, 1
	253, 1
	254, 1
	255, 1
	256, 1
	257, 1
	258, 1
	259, 1
	260, 1
	261, 1
	262, 1
	263, 1
	264, 1
	265, 1
	266, 1
	267, 1
	268, 1
	269, 1
	270, 1
	271, 1
	272, 1
	273, 1
	274, 1
	275, 1
	276, 1
	277, 1
	278, 1
	279, 1
	280, 1
	281, 1
	282, 1
	283, 1
	284, 1
	285, 1
	286, 1
	287, 1
	288, 1
	289, 1
	290, 1
	291, 1
	292, 1
	293, 1
	294, 1
	295, 1
	296, 1
	297, 1
	298, 1
	299, 1
	300, 1
	301, 1
	302, 1
	303, 1
	304, 1
	305, 1
	306, 1
	307, 1
	308, 1
	309, 1
	310, 1
	311, 1
	312, 1
	313, 1
	314, 1
	315, 1
	316, 1
	317, 1
	318, 1
	319, 1
	320, 1
	321, 1
	322, 1
	323, 1
	324, 1
	325, 1
	326, 1
	327, 1
	328, 1
	329, 1
	330, 1
	331, 1
	332, 1
	333, 1
	334, 1
	335, 1
	336, 1
	337, 1
	338, 1
	339, 1
	340, 1
	341, 1
	342, 1
	343, 1
	344, 1
	345, 1
	346, 1
	347, 1
	348, 1
	349, 1
	350, 1
	351, 1
	352, 1
	353, 1
	354, 1
	355, 1
	356, 1
	357, 1
	358, 1
	359, 1
	360, 1
	361, 1
	362, 1
	363, 1
	364, 1
	365, 1
	366, 1
	367, 1
	368, 1
	369, 1
	370, 1
	371, 1
	372, 1
	373, 1


====================================================================================================

PROMPT 42:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area in LA, give count of each crime type.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 42:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area in LA, give count of each crime type.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:

```
Prompt:
	For each area in LA, give count of each crime type.

Schema:
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Answer:
	SELECT Area_Name, COUNT(Crime_Type) FROM la_crime_data GROUP BY Area_Name;
```

## <a name="chapter-three" id="chapter-three">3. 解题思路</a>

> [返回目录](#chapter-one)

**题目描述**

> 给定一个表，按照下面的规则，创建一个新表：

* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这个字段的值为该字段的值的平方。
* 如果表中存在一个字段，则在该字段上面加上一个新的字段，并且这

====================================================================================================

PROMPT 43:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area in New York, give count of each crime type.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 43:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area in New York, give count of each crime type.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan', '40.7128', '-73.9856'
	1, 1, '01/01/2000', '00:00:00', 'A', 'Burglary', 'Manhattan

====================================================================================================

PROMPT 44:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area in Philly, give count of each crime type.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 44:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	For each area in Philly, give count of each crime type.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(*)
	FROM philly_crime_data
	WHERE Area_# = 'PHILADELPHIA'
	GROUP BY Crime_ID
	ORDER BY Crime_ID;

Expected Output:
	+------------+-------+
	| Crime_ID   | Count |
	+------------+-------+
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |
	| CRIMINAL   |     1 |


====================================================================================================

PROMPT 45:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in Atlanta.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 45:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in Atlanta.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT COUNT(*) FROM atlanta_crime_data WHERE Crime_Type = 'Theft' AND Day_Occurred = 'Monday'

Expected Output:
	Monday:		Theft:		1
	Tuesday:		Theft:		0
	Wednesday:	Theft:		0
	Thursday:	Theft:		0
	Friday:		Theft:		0
	Saturday:	Theft:		0
	Sunday:		Theft:		0
	Monday:		Assault:		0
	Tuesday:		Assault:		0
	Wednesday:	Assault:		0
	Thursday:	Assault:		0
	Friday:		Assault:		0
	Saturday:	Assault:		0
	Sunday:		Assault:		0
	Monday:		Drug:		0
	Tuesday:		Drug:		0
	Wednesday:	Drug:		0
	Thursday:	Drug:		0
	Friday:		Drug:		0
	Saturday:	Drug:		0
	Sunday:		Drug:		0
	Monday:		Violation:		0
	Tuesday:		Violation:		0
	Wednesday:	Violation:		0
	Thursday:	Violation:		0
	Friday:		Violation:		0
	Saturday:	Violation:		0
	Sunday:		Violation:		0
	Monday:		Other:		0
	Tuesday:		Other:		0
	Wednesday:	Other:		0
	Thursday:	Other:		0
	Friday:		Other:		0
	Saturday:	Other:		0
	Sunday:		Other:		0
	Monday:		Total:		1
	Tuesday:		Total:		0
	Wednesday:	Total:		0
	Thursday:	Total:		0
	Friday:		Total:		0
	Saturday:	Total:		0
	Sunday:		Total:		0
	Monday:		Total:		0
	Tuesday:		Total:		0
	Wednesday:	Total:		0
	Thursday:	Total:		0
	Friday:		Total:		0
	Saturday:	Total:		0
	Sunday:		Total:		0
	Monday:		Total:		0
	Tuesday:		Total:		0
	Wednesday:	Total:		0
	Thursday:	Total:		0
	Friday:		Total:		0
	Saturday:	Total:		0
	Sunday:		Total:		0
	Monday:		Total:		0
	Tuesday:		Total:		0
	Wednesday:	Total:		0
	Thursday:	Total:		0
	Friday:		Total:		0
	Saturday:	Total:		0
	Sunday:		Total:		0
	Monday:		Total:		0
	Tuesday:		Total:		0
	Wednesday:	Total:		0
	Thursday:	Total:		0
	Friday:		Total:		0
	Saturday:	Total:		0
	Sunday:		Total:		0
	Monday:		Total:		0
	Tuesday:		Total:		0
	Wednesday:	Total:		0
	Thursday:	Total:		0
	Friday:		Total:		0
	Saturday:	Total:		0
	Sunday:		Total:		0
	Monday:		Total:		0
	Tuesday:		Total:		0
	Wednesday:	Total:		0
	Thursday:	Total:		0
	Friday:		Total:		0
	Saturday:	Total:		0
	Sunday:		Total:		0
	Monday:		Total:		0
	Tuesday:		Total:		0
	Wednesday:	Total:		0
	Thursday:	Total:		0
	Friday:		Total:		0
	Saturday:	Total:		0
	Sunday:		Total:		0
	Monday:		Total:		0
	Tuesday:		Total:		0
	Wednesday:	Total:		0
	Thursday:	Total:		0
	Friday:		Total:		0
	Saturday:	Total:		0
	Sunday:		Total:		0
	Monday:		Total:		0
	Tuesday:		Total:		0
	Wednesday:	Total:		0
	Thursday:	Total:		0
	Friday:		Total:		0
	Saturday:	Total:		0
	Sunday:		Total:		0
	Monday:		Total:		0
	Tuesday:		Total:		0
	Wednesday:	Total:		0
	Thursday:	Total:		0
	Friday:		Total:		0
	Saturday:	Total:		0
	Sunday:		Total:		0
	Monday:		Total:		0
	Tuesday:		Total:		0
	Wednesday:	Total:		0
	Thursday:	Total:		0
	Friday:		Total:		0
	Saturday:	Total:		0
	Sunday:		Total:		0
	Monday:		Total:		0
	Tuesday:		Total:		0
	Wednesday:	Total:		0
	Thursday:	Total:		0
	Friday:		Total:		0
	Saturday:	Total:		0
	Sunday:		Total:		0
	Monday:		Total:		0
	Tuesday:		Total:		0
	Wednesday:	Total:		0
	Thursday:	Total:		0
	Friday:		Total:		0
	Saturday:	Total:		0
	Sunday:		Total:		0
	Monday:		Total:		0
	Tuesday:		Total:		0
	Wednesday:	Total:		0
	Thursday:	Total:		0
	Friday:		Total:		0
	Saturday:	Total:		0
	Sunday:		Total:		0
	Monday:		Total:		0
	Tuesday:		Total:		0
	Wednesday:	Total:		0
	Thursday:	Total:		0
	Friday:		Total:		0
	Saturday:	Total:		0
	Sunday:		Total:		0
	Monday:		Total:		0
	Tuesday:		Total:		0
	Wednesday:	Total:		0
	Thursday:	Total:		0
	Friday:		Total:		0
	Saturday:	Total:		0
	Sunday:		Total:		0
	Monday:		Total:		0
	Tuesday:		Total:		0
	Wednesday:	Total:		0
	Thursday:	Total:		0
	Friday:		Total:		0
	Saturday:	Total:		0
	Sunday:		Total:		0
	Monday:		Total:		0
	Tuesday:		Total:		0
	Wednesday:	Total:		0
	Thursday:	Total:		0
	Friday:		Total:		0
	Saturday:	Total:		0
	Sunday:		Total:		0
	Monday:		Total:		0
	Tuesday:		Total:		0
	Wednesday:	Total:		0
	Thursday:	Total:		0
	Friday:		Total:		0
	Saturday:	Total:		0
	Sunday:		Total:	

====================================================================================================

PROMPT 46:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in Atlanta.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 46:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in Atlanta.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude
	FROM atlanta_crime_data
	WHERE Day_Occurred = 'Monday'
	AND Crime_Date = '01/01/2016'
	AND Crime_Time = '00:00:00'
	AND Crime_Type = 'Theft'
	AND Area_Name = 'Downtown'
	AND Address = '123 Main St.'
	AND Longitude = '123.456789'
	AND Latitude = '123.456789'
	ORDER BY Crime_ID
	LIMIT 1

Expected Output:
	1, 'Monday', '01/01/2016', '00:00:00', 'Theft', 'Downtown', '123 Main St.', '123.456789', '123.456789'

---

## [SQL - Selecting the most recent record for each unique value in a column](https://www.hackerrank.com/challenges/select-the-most-recent-record-for-each-unique-value-in-a-column)

### Problem

You have a table of records that have a unique ID and a timestamp.

You want to select the most recent record for each unique ID.

### Hints

You can use the `GROUP BY` clause to group the records by the unique ID.

### Example

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Select the most recent record for each unique ID.

Schema: 
	(ID, Report_#, Date_Occurred, Time_Occurred, Value)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT ID, Date_Occurred, Time_Occurred, Value
	FROM atlanta_crime_data
	GROUP BY ID
	ORDER BY Date_Occurred DESC
	LIMIT 1

Expected Output:
	1, 'Monday', '01/01/2016', '00:00:00', 'Theft'

---

## [SQL - Selecting the most recent record for each unique value in a column](https://www.hackerrank.com/challenges/select-the-most-recent-record-for-each-unique-value-in-a-column)

### Problem

You have a table of records that have a unique ID and a timestamp.

You want to select the most recent record for each unique ID.

### Hints

You can use the `GROUP BY` clause to group the records by the unique ID.

### Example

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Select the most recent record for each unique ID.

Schema: 
	(ID, Report_#, Date_Occurred, Time_Occurred, Value)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT ID, Date_Occurred, Time_Occurred, Value
	FROM atlanta_crime_data
	GROUP BY ID
	ORDER BY Date_Occurred DESC
	LIMIT 1

Expected Output:
	1, 'Monday', '01/01/2016', '00:00:00', 'Theft'

---

## [SQL - Selecting the most recent record for each unique value in a column](https://www.hackerrank.com/challenges/select-the-most-recent-record-for-each-unique-value-in-a-column)

### Problem

You have a table of records that have a unique ID and a timestamp.

You want to select the most recent record for each unique ID.

### Hints

You can use the `GROUP BY` clause to group the records by the unique ID.

### Example

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Select the most recent record for each unique ID.

Schema: 
	(ID, Report_#, Date_Occurred, Time_Occurred, Value)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT ID, Date_Occurred, Time_Occurred, Value
	FROM atlanta_crime_data
	GROUP BY ID
	ORDER BY Date_Occurred DESC
	LIMIT 1

Expected Output:
	1, 'Monday', '01/01/2016', '00:00:00', 'Theft'

---

## [SQL - Selecting the most recent record for each unique value in a column](https://www.hackerrank.com/challenges/select-the-most-recent-record-for-each-unique-value-in-a-column)

### Problem

You have a table of records that have a unique ID and a timestamp.

You want to select the most recent record for each unique ID.

### Hints

You can use the `GROUP BY` clause to group the records by the unique ID.

### Example

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Select the most recent record for each unique ID.

Schema: 
	(ID, Report_#, Date_Occurred, Time_Occurred, Value)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT ID, Date_Occurred, Time_Occurred, Value
	FROM atlanta_crime_data
	GROUP BY ID
	ORDER BY Date_Occurred DESC
	LIMIT 1

Expected Output:
	1, 'Monday', '01/01/2016', '00:00:00', 'Theft'

---

## [SQL - Selecting the most recent record for each unique value in a column](https://www.hackerrank.com/challenges/select-the-most-recent-record-for-each-unique-value-in-a-column)

### Problem

You have a table of records that have a unique ID and a timestamp.

You want to select the most recent record for each unique ID.

### Hints

You can use the `GROUP BY` clause to group the records by the unique ID.

### Example

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Select the most recent record for each unique ID.

Schema: 
	(ID, Report_#, Date_Occurred, Time_Occurred, Value)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT ID, Date_Occurred, Time_Occurred, Value
	FROM atlanta_crime_data
	GROUP BY ID
	ORDER BY Date_Occurred DESC
	LIMIT 1

Expected Output:
	1, 'Monday', '01/01/2016', '00:00:00', 'Theft'

---

## [SQL - Selecting the most recent record for each unique value in a column](https://www.hackerrank.com/challenges/select-the-most-recent-record-for-each-unique-value-in-a-column)

### Problem

You have a table of records that have a unique ID and a timestamp.

You want to select the most recent record for each unique ID.

### Hints

You can use the `GROUP BY` clause to group the records by the unique ID.

### Example

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Select the most recent record for each unique ID.

Schema: 
	(ID, Report_#, Date_Occurred, Time_Occurred, Value)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply

====================================================================================================

PROMPT 47:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in Atlanta.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 47:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in Atlanta.

Schema: 
	atlanta_crime_data (Crime_ID, Report_#, Day_Occurred, Crime_Date, Crime_Time, Crime_Type, Area_Name, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

SQL Statement:
	SELECT Crime_ID, COUNT(Crime_ID) AS Crime_Count, Month(Crime_Date) AS Month
	FROM atlanta_crime_data
	GROUP BY Month(Crime_Date)
	ORDER BY Month(Crime_Date) ASC

Expected Output:
	Crime_ID, Crime_Count, Month
	1, 1, January
	2, 1, January
	3, 1, January
	4, 1, January
	5, 1, January
	6, 1, January
	7, 1, January
	8, 1, January
	9, 1, January
	10, 1, January
	11, 1, January
	12, 1, January
	13, 1, January
	14, 1, January
	15, 1, January
	16, 1, January
	17, 1, January
	18, 1, January
	19, 1, January
	20, 1, January
	21, 1, January
	22, 1, January
	23, 1, January
	24, 1, January
	25, 1, January
	26, 1, January
	27, 1, January
	28, 1, January
	29, 1, January
	30, 1, January
	31, 1, January
	1, 1, February
	2, 1, February
	3, 1, February
	4, 1, February
	5, 1, February
	6, 1, February
	7, 1, February
	8, 1, February
	9, 1, February
	10, 1, February
	11, 1, February
	12, 1, February
	13, 1, February
	14, 1, February
	15, 1, February
	16, 1, February
	17, 1, February
	18, 1, February
	19, 1, February
	20, 1, February
	21, 1, February
	22, 1, February
	23, 1, February
	24, 1, February
	25, 1, February
	26, 1, February
	27, 1, February
	28, 1, February
	29, 1, February
	30, 1, February
	31, 1, February
	1, 1, March
	2, 1, March
	3, 1, March
	4, 1, March
	5, 1, March
	6, 1, March
	7, 1, March
	8, 1, March
	9, 1, March
	10, 1, March
	11, 1, March
	12, 1, March
	13, 1, March
	14, 1, March
	15, 1, March
	16, 1, March
	17, 1, March
	18, 1, March
	19, 1, March
	20, 1, March
	21, 1, March
	22, 1, March
	23, 1, March
	24, 1, March
	25, 1, March
	26, 1, March
	27, 1, March
	28, 1, March
	29, 1, March
	30, 1, March
	31, 1, March
	1, 1, April
	2, 1, April
	3, 1, April
	4, 1, April
	5, 1, April
	6, 1, April
	7, 1, April
	8, 1, April
	9, 1, April
	10, 1, April
	11, 1, April
	12, 1, April
	13, 1, April
	14, 1, April
	15, 1, April
	16, 1, April
	17, 1, April
	18, 1, April
	19, 1, April
	20, 1, April
	21, 1, April
	22, 1, April
	23, 1, April
	24, 1, April
	25, 1, April
	26, 1, April
	27, 1, April
	28, 1, April
	29, 1, April
	30, 1, April
	31, 1, April
	1, 1, May
	2, 1, May
	3, 1, May
	4, 1, May
	5, 1, May
	6, 1, May
	7, 1, May
	8, 1, May
	9, 1, May
	10, 1, May
	11, 1, May
	12, 1, May
	13, 1, May
	14, 1, May
	15, 1, May
	16, 1, May
	17, 1, May
	18, 1, May
	19, 1, May
	20, 1, May
	21, 1, May
	22, 1, May
	23, 1, May
	24, 1, May
	25, 1, May
	26, 1, May
	27, 1, May
	28, 1, May
	29, 1, May
	30, 1, May
	31, 1, May
	1, 1, June
	2, 1, June
	3, 1, June
	4, 1, June
	5, 1, June
	6, 1, June
	7, 1, June
	8, 1, June
	9, 1, June
	10, 1, June
	11, 1, June
	12, 1, June
	13, 1, June
	14, 1, June
	15, 1, June
	16, 1, June
	17, 1, June
	18, 1, June
	19, 1, June
	20, 1, June
	21, 1, June
	22, 1, June
	23, 1, June
	24, 1, June
	25, 1, June
	26, 1, June
	27, 1, June
	28, 1, June
	29, 1, June
	30, 1, June
	31, 1, June
	1, 1, July
	2, 1, July
	3, 1, July
	4, 1, July
	5, 1, July
	6, 1, July
	7, 1, July
	8, 1, July
	9, 1, July
	10, 1, July
	11, 1, July
	12, 1, July
	13, 1, July
	14, 1, July
	15, 1, July
	16, 1, July
	17, 1, July
	18, 1, July
	19, 1, July
	20, 1, July
	21, 1, July
	22, 1, July
	23, 1, July
	24, 1, July
	25, 1, July
	26, 1, July
	27, 1, July
	28, 1, July
	29, 1, July
	30, 1, July
	31, 1, July
	1, 1, August
	2, 1, August
	3, 1, August
	4, 1, August
	5, 1, August
	6, 1, August
	7, 1, August
	8, 1, August
	9, 1, August
	10, 1, August
	11, 1, August
	12, 1, August
	13, 1, August
	14, 1, August
	15, 1, August
	16, 1, August
	17, 1, August
	18, 1, August
	19, 1, August
	20, 1, August
	21, 1, August
	22, 1, August
	23, 1, August
	24, 1, August
	25, 1, August
	26, 1, August
	27, 1, August
	28, 1, August
	29, 1, August
	30, 1, August
	31, 1, August
	1, 1, September
	2, 1, September
	3, 1, September
	4, 1, September
	5, 1, September
	6, 1, September
	7, 1, September
	8, 1, September
	9, 1, September
	10, 1, September
	11, 1, September
	12, 1, September
	13, 1, September
	14, 1, September
	15, 1, September
	16

====================================================================================================

PROMPT 48:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in LA.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 48:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in LA.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:

```sql
SELECT Crime_ID, COUNT(*)
FROM la_crime_data
WHERE Crime_Date BETWEEN '2018-01-01' AND '2018-01-31'
GROUP BY Crime_ID
ORDER BY Crime_ID;
```

## 解题思路

见程序注释


====================================================================================================

PROMPT 49:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in LA.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 49:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in LA.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:

```

```

## 
##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

##

====================================================================================================

PROMPT 50:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in LA.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 50:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in LA.

Schema: 
	la_crime_data (Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:

Crime_ID, Report_#, Date_Reported, Crime_Date, Crime_Time, Crime_Type, Area_Name, Vict_Age, Vict_Sex, Weapon_Desc, Address, Latitude, Longitude
1, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
2, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
3, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
4, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
5, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
6, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
7, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
8, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
9, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
10, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
11, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
12, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
13, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
14, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
15, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
16, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
17, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
18, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
19, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
20, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
21, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
22, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
23, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
24, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
25, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
26, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
27, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
28, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
29, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
30, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
31, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
32, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
33, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
34, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
35, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
36, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
37, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
38, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
39, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
40, 1, 1/1/2013, 1/1/2013, 1:00, Assault, Los Angeles, 18, M, Knife, 123 Main St, 34.12, -118.12
41, 1, 1/1/2013, 1/1/2013, 1:

====================================================================================================

PROMPT 51:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in New York.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 51:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in New York.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(*) FROM nyc_crime_data WHERE Crime_Type = 'Murder' AND Crime_Date = '2015-01-01' GROUP BY Crime_ID;

Expected Output:
	Crime_ID, COUNT(*)
	1, 1
	2, 1
	3, 1
	4, 1
	5, 1
	6, 1
	7, 1
	8, 1
	9, 1
	10, 1
	11, 1
	12, 1
	13, 1
	14, 1
	15, 1
	16, 1
	17, 1
	18, 1
	19, 1
	20, 1
	21, 1
	22, 1
	23, 1
	24, 1
	25, 1
	26, 1
	27, 1
	28, 1
	29, 1
	30, 1
	31, 1
	32, 1
	33, 1
	34, 1
	35, 1
	36, 1
	37, 1
	38, 1
	39, 1
	40, 1
	41, 1
	42, 1
	43, 1
	44, 1
	45, 1
	46, 1
	47, 1
	48, 1
	49, 1
	50, 1
	51, 1
	52, 1
	53, 1
	54, 1
	55, 1
	56, 1
	57, 1
	58, 1
	59, 1
	60, 1
	61, 1
	62, 1
	63, 1
	64, 1
	65, 1
	66, 1
	67, 1
	68, 1
	69, 1
	70, 1
	71, 1
	72, 1
	73, 1
	74, 1
	75, 1
	76, 1
	77, 1
	78, 1
	79, 1
	80, 1
	81, 1
	82, 1
	83, 1
	84, 1
	85, 1
	86, 1
	87, 1
	88, 1
	89, 1
	90, 1
	91, 1
	92, 1
	93, 1
	94, 1
	95, 1
	96, 1
	97, 1
	98, 1
	99, 1
	100, 1
	101, 1
	102, 1
	103, 1
	104, 1
	105, 1
	106, 1
	107, 1
	108, 1
	109, 1
	110, 1
	111, 1
	112, 1
	113, 1
	114, 1
	115, 1
	116, 1
	117, 1
	118, 1
	119, 1
	120, 1
	121, 1
	122, 1
	123, 1
	124, 1
	125, 1
	126, 1
	127, 1
	128, 1
	129, 1
	130, 1
	131, 1
	132, 1
	133, 1
	134, 1
	135, 1
	136, 1
	137, 1
	138, 1
	139, 1
	140, 1
	141, 1
	142, 1
	143, 1
	144, 1
	145, 1
	146, 1
	147, 1
	148, 1
	149, 1
	150, 1
	151, 1
	152, 1
	153, 1
	154, 1
	155, 1
	156, 1
	157, 1
	158, 1
	159, 1
	160, 1
	161, 1
	162, 1
	163, 1
	164, 1
	165, 1
	166, 1
	167, 1
	168, 1
	169, 1
	170, 1
	171, 1
	172, 1
	173, 1
	174, 1
	175, 1
	176, 1
	177, 1
	178, 1
	179, 1
	180, 1
	181, 1
	182, 1
	183, 1
	184, 1
	185, 1
	186, 1
	187, 1
	188, 1
	189, 1
	190, 1
	191, 1
	192, 1
	193, 1
	194, 1
	195, 1
	196, 1
	197, 1
	198, 1
	199, 1
	200, 1
	201, 1
	202, 1
	203, 1
	204, 1
	205, 1
	206, 1
	207, 1
	208, 1
	209, 1
	210, 1
	211, 1
	212, 1
	213, 1
	214, 1
	215, 1
	216, 1
	217, 1
	218, 1
	219, 1
	220, 1
	221, 1
	222, 1
	223, 1
	224, 1
	225, 1
	226, 1
	227, 1
	228, 1
	229, 1
	230, 1
	231, 1
	232, 1
	233, 1
	234, 1
	235, 1
	236, 1
	237, 1
	238, 1
	239, 1
	240, 1
	241, 1
	242, 1
	243, 1
	244, 1
	245, 1
	246, 1
	247, 1
	248, 1
	249, 1
	250, 1
	251, 1
	252, 1
	253, 1
	254, 1
	255, 1
	256, 1
	257, 1
	258, 1
	259, 1
	260, 1
	261, 1
	262, 1
	263, 1
	264, 1
	265, 1
	266, 1
	267, 1
	268, 1
	269, 1
	270, 1
	271, 1
	272, 1
	273, 1
	274, 1
	275, 1
	276, 1
	277, 1
	278, 1
	279, 1
	280, 1
	281, 1
	282, 1
	283, 1
	284, 1
	285, 1
	286, 1
	287, 1
	288, 1
	289, 1
	290, 1
	291, 1
	292, 1
	293, 1
	294, 1
	295, 1
	296, 1
	297, 1
	298, 1
	299, 1
	300, 1
	301, 1
	302, 1
	303, 1
	304, 1
	305, 1
	306, 1
	307, 1
	308, 1
	309, 1
	310, 1
	311, 1
	312, 1
	313, 1
	314, 1
	315, 1
	316, 1
	317, 1
	318, 1
	319, 1
	320, 1
	321, 1
	322, 1
	323, 1
	324, 1
	325, 1
	326, 1
	327, 1
	328, 1
	329, 1
	330, 1
	331, 1
	332, 1
	333, 1
	334, 1
	335, 1
	336, 1
	337, 1
	338, 1
	339, 1
	340, 1
	341, 1
	342, 1
	343, 1
	344, 1
	345, 1
	346, 1
	347, 1
	348, 1
	349, 1
	350, 1
	351, 1
	352, 1
	353, 1
	354, 1
	355, 1
	356, 1
	357, 1
	358, 1
	359, 1
	360, 1
	361, 1
	362, 1
	363, 1
	364, 1
	365, 1
	366, 1
	367, 1
	368, 1
	369, 1
	370, 1
	371, 1
	372, 1
	373

====================================================================================================

PROMPT 52:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in New York.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 52:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in New York.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude
	FROM nyc_crime_data
	WHERE Crime_Time >= '00:00:00' AND Crime_Time < '01:00:00'
	ORDER BY Crime_ID
	LIMIT 10

Expected Output:
	Crime_ID, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude
	1, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	2, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	3, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	4, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	5, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	6, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	7, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	8, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	9, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	10, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	11, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	12, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	13, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	14, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	15, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	16, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	17, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	18, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	19, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	20, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	21, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	22, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	23, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	24, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	25, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	26, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	27, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	28, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	29, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	30, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	31, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	32, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	33, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	34, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	35, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	36, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	37, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	38, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	39, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	40, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	41, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',
	42, '2015-01-01', '00:00:00', 'Burglary', 'Residential', 'Manhattan', '40.7127', '-73.9858',

====================================================================================================

PROMPT 53:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in New York.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 53:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in New York.

Schema: 
	nyc_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Class, Crime_Type, Area_Name, Latitude, Longitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_Type, COUNT(Crime_Type) FROM nyc_crime_data WHERE Crime_Date BETWEEN '2014-01-01' AND '2014-12-31' GROUP BY Crime_Type;

Expected Output:
	Crime_Type, COUNT(Crime_Type)
	BURGLARY, 2
	THEFT, 3
	ROBBERY, 1
	ASSAULT, 1
	RAPE, 1
	HOMICIDE, 1
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFICENT, 0
	INSUFFIC

====================================================================================================

PROMPT 54:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in Philly.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 54:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each day of the week in Philly.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(*) FROM philly_crime_data WHERE Crime_Type = 'Assault' AND Crime_Date = '2015-01-01' GROUP BY Crime_ID;

Expected Output:
	+------------+-------+
	| Crime_ID   | COUNT |
	+------------+-------+
	| 1          | 1     |
	| 2          | 1     |
	| 3          | 1     |
	| 4          | 1     |
	| 5          | 1     |
	| 6          | 1     |
	| 7          | 1     |
	| 8          | 1     |
	| 9          | 1     |
	| 10         | 1     |
	| 11         | 1     |
	| 12         | 1     |
	| 13         | 1     |
	| 14         | 1     |
	| 15         | 1     |
	| 16         | 1     |
	| 17         | 1     |
	| 18         | 1     |
	| 19         | 1     |
	| 20         | 1     |
	| 21         | 1     |
	| 22         | 1     |
	| 23         | 1     |
	| 24         | 1     |
	| 25         | 1     |
	| 26         | 1     |
	| 27         | 1     |
	| 28         | 1     |
	| 29         | 1     |
	| 30         | 1     |
	| 31         | 1     |
	| 32         | 1     |
	| 33         | 1     |
	| 34         | 1     |
	| 35         | 1     |
	| 36         | 1     |
	| 37         | 1     |
	| 38         | 1     |
	| 39         | 1     |
	| 40         | 1     |
	| 41         | 1     |
	| 42         | 1     |
	| 43         | 1     |
	| 44         | 1     |
	| 45         | 1     |
	| 46         | 1     |
	| 47         | 1     |
	| 48         | 1     |
	| 49         | 1     |
	| 50         | 1     |
	| 51         | 1     |
	| 52         | 1     |
	| 53         | 1     |
	| 54         | 1     |
	| 55         | 1     |
	| 56         | 1     |
	| 57         | 1     |
	| 58         | 1     |
	| 59         | 1     |
	| 60         | 1     |
	| 61         | 1     |
	| 62         | 1     |
	| 63         | 1     |
	| 64         | 1     |
	| 65         | 1     |
	| 66         | 1     |
	| 67         | 1     |
	| 68         | 1     |
	| 69         | 1     |
	| 70         | 1     |
	| 71         | 1     |
	| 72         | 1     |
	| 73         | 1     |
	| 74         | 1     |
	| 75         | 1     |
	| 76         | 1     |
	| 77         | 1     |
	| 78         | 1     |
	| 79         | 1     |
	| 80         | 1     |
	| 81         | 1     |
	| 82         | 1     |
	| 83         | 1     |
	| 84         | 1     |
	| 85         | 1     |
	| 86         | 1     |
	| 87         | 1     |
	| 88         | 1     |
	| 89         | 1     |
	| 90         | 1     |
	| 91         | 1     |
	| 92         | 1     |
	| 93         | 1     |
	| 94         | 1     |
	| 95         | 1     |
	| 96         | 1     |
	| 97         | 1     |
	| 98         | 1     |
	| 99         | 1     |
	| 100        | 1     |
	| 101        | 1     |
	| 102        | 1     |
	| 103        | 1     |
	| 104        | 1     |
	| 105        | 1     |
	| 106        | 1     |
	| 107        | 1     |
	| 108        | 1     |
	| 109        | 1     |
	| 110        | 1     |
	| 111        | 1     |
	| 112        | 1     |
	| 113        | 1     |
	| 114        | 1     |
	| 115        | 1     |
	| 116        | 1     |
	| 117        | 1     |
	| 118        | 1     |
	| 119        | 1     |
	| 120        | 1     |
	| 121        | 1     |
	| 122        | 1     |
	| 123        | 1     |
	| 124        | 1     |
	| 125        | 1     |
	| 126        | 1     |
	| 127        | 1     |
	| 128        | 1     |
	| 129        | 1     |
	| 130        | 1     |
	| 131        | 1     |
	| 132        | 1     |
	| 133        | 1     |
	| 134        | 1     |
	| 135        | 1     |
	| 136        | 1     |
	| 137        | 1     |
	| 138        | 1     |
	| 139        | 1     |
	| 140        | 1     |
	| 141        | 1     |
	| 142        | 1     |
	| 143        | 1     |
	| 144        | 1     |
	| 145        | 1     |
	| 146        | 1     |
	| 147        | 1     |
	| 148        | 1     |
	| 149        | 1     |
	| 150        | 1     |
	| 151        | 1     |
	| 152        | 1     |
	| 153        | 1     |
	| 154        | 1     |
	| 155        | 1     |
	| 156        | 1     |
	| 157        | 1     |
	| 158        | 1     |
	| 159        | 1     |
	| 160        | 1     |
	| 161        | 1     |
	| 162        | 1     |
	| 163        | 1     |
	| 164        | 1     |
	| 165        | 1     |
	| 166        | 1     |
	| 167        | 1     |
	| 168        | 1     |
	| 169        | 1     |
	| 170        | 1     |
	| 171        | 1     |
	| 172        | 1     |
	| 173        | 1     |
	| 174        | 1     |
	| 175        | 1     |
	| 176        | 1     |
	| 177        | 1     |
	| 178        | 1     |
	| 179        | 1     |
	| 180        | 1     |
	| 181        | 1     |
	| 182        | 1     |
	| 183        | 1     |
	| 184        | 1     |
	| 185        | 1     |
	| 186        | 1     |
	| 187        | 1     |
	| 188        | 1     |
	| 189        | 1     |
	| 190        | 1     |
	| 191        | 1     |
	| 192        | 1     |
	| 193        | 1     |
	| 194        | 1     |
	| 195        | 1     |
	| 196        | 1     |
	| 197        | 1     |
	| 198        | 1     |
	| 199        | 1     |
	| 200        | 1     |
	| 201        | 1     |
	| 202        | 1     |
	| 203        | 1     |
	| 204        | 1     |
	| 205        | 1     |
	| 206        | 1

====================================================================================================

PROMPT 55:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in Philly.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 55:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each hour of the day in Philly.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Sample Input:
	philly_crime_data (1, 1, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 2, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 3, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 4, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 5, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 6, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 7, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 8, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 9, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 10, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 11, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 12, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 13, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 14, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 15, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 16, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 17, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 18, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 19, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 20, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 21, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 22, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 23, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 24, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 25, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 26, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 27, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 28, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 29, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 30, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 31, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 32, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 33, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 34, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 35, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 36, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 37, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 38, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 39, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly_crime_data (1, 40, '2015-01-01', '00:00:00', 'Theft', 'South', '123 Main St', -75.13, 40.75)
	philly

====================================================================================================

PROMPT 56:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in Philly.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

RESPONSE 56:

Given the schema of the relavent database(s), generate an SQL statement to answer a question.

Prompt: 
	Give count of each crime type for each month in Philly.

Schema: 
	philly_crime_data (Crime_ID, Report_#, Crime_Date, Crime_Time, Crime_Type, Area_#, Address, Longitude, Latitude)

Note, only respond with a single most accurate SQL statement.
If more information is required, simply respond with 'INSUFFICENT'.

Example:
	SELECT Crime_ID, COUNT(*) FROM philly_crime_data WHERE Crime_Type = 'Assault' GROUP BY Crime_ID, Crime_Date;

Expected Output:
	Crime_ID, Crime_Date, Count
	1, '01/01/2013', 1
	2, '01/01/2013', 1
	3, '01/01/2013', 1
	4, '01/01/2013', 1
	5, '01/01/2013', 1
	6, '01/01/2013', 1
	7, '01/01/2013', 1
	8, '01/01/2013', 1
	9, '01/01/2013', 1
	10, '01/01/2013', 1
	11, '01/01/2013', 1
	12, '01/01/2013', 1
	13, '01/01/2013', 1
	14, '01/01/2013', 1
	15, '01/01/2013', 1
	16, '01/01/2013', 1
	17, '01/01/2013', 1
	18, '01/01/2013', 1
	19, '01/01/2013', 1
	20, '01/01/2013', 1
	21, '01/01/2013', 1
	22, '01/01/2013', 1
	23, '01/01/2013', 1
	24, '01/01/2013', 1
	25, '01/01/2013', 1
	26, '01/01/2013', 1
	27, '01/01/2013', 1
	28, '01/01/2013', 1
	29, '01/01/2013', 1
	30, '01/01/2013', 1
	31, '01/01/2013', 1
	32, '01/01/2013', 1
	33, '01/01/2013', 1
	34, '01/01/2013', 1
	35, '01/01/2013', 1
	36, '01/01/2013', 1
	37, '01/01/2013', 1
	38, '01/01/2013', 1
	39, '01/01/2013', 1
	40, '01/01/2013', 1
	41, '01/01/2013', 1
	42, '01/01/2013', 1
	43, '01/01/2013', 1
	44, '01/01/2013', 1
	45, '01/01/2013', 1
	46, '01/01/2013', 1
	47, '01/01/2013', 1
	48, '01/01/2013', 1
	49, '01/01/2013', 1
	50, '01/01/2013', 1
	51, '01/01/2013', 1
	52, '01/01/2013', 1
	53, '01/01/2013', 1
	54, '01/01/2013', 1
	55, '01/01/2013', 1
	56, '01/01/2013', 1
	57, '01/01/2013', 1
	58, '01/01/2013', 1
	59, '01/01/2013', 1
	60, '01/01/2013', 1
	61, '01/01/2013', 1
	62, '01/01/2013', 1
	63, '01/01/2013', 1
	64, '01/01/2013', 1
	65, '01/01/2013', 1
	66, '01/01/2013', 1
	67, '01/01/2013', 1
	68, '01/01/2013', 1
	69, '01/01/2013', 1
	70, '01/01/2013', 1
	71, '01/01/2013', 1
	72, '01/01/2013', 1
	73, '01/01/2013', 1
	74, '01/01/2013', 1
	75, '01/01/2013', 1
	76, '01/01/2013', 1
	77, '01/01/2013', 1
	78, '01/01/2013', 1
	79, '01/01/2013', 1
	80, '01/01/2013', 1
	81, '01/01/2013', 1
	82, '01/01/2013', 1
	83, '01/01/2013', 1
	84, '01/01/2013', 1
	85, '01/01/2013', 1
	86, '01/01/2013', 1
	87, '01/01/2013', 1
	88, '01/01/2013', 1
	89, '01/01/2013', 1
	90, '01/01/2013', 1
	91, '01/01/2013', 1
	92, '01/01/2013', 1
	93, '01/01/2013', 1
	94, '01/01/2013', 1
	95, '01/01/2013', 1
	96, '01/01/2013', 1
	97, '01/01/2013', 1
	98, '01/01/2013', 1
	99, '01/01/2013', 1
	100, '01/01/2013', 1
	101, '01/01/2013', 1
	102, '01/01/2013', 1
	103, '01/01/2013', 1
	104, '01/01/2013', 1
	105, '01/01/2013', 1
	106, '01/01/2013', 1
	107, '01/01/2013', 1
	108, '01/01/2013', 1
	109, '01/01/2013', 1
	110, '01/01/2013', 1
	111, '01/01/2013', 1
	112, '01/01/2013', 1
	113, '01/01/2013', 1
	114, '01/01/2013', 1
	115, '01/01/2013', 1
	116, '01/01/2013', 1
	117, '01/01/2013', 1
	118, '01/01/2013', 1
	119, '01/01/2013', 1
	120, '01/01/2013', 1
	121, '01/01/2013', 1
	122, '01/01/2013', 1
	123, '01/01/2013', 1
	124, '01/01/2013', 1
	125, '01/01/2013', 1
	126, '01/01/2013', 1
	127, '01/01/2013', 1
	128, '01/01/2013', 1
	129, '01/01/2013', 1
	130, '01/01/2013', 1
	131, '01/01/2013', 1
	132, '01/01/2013', 1
	133, '01/01/2013', 1
	134, '01/01/2013', 1
	135, '01/01/2013', 1
	136, '01/01/2013', 1
	137, '01/01/2013', 1
	138, '01/01/2013', 1
	139, '01/01/2013', 1
	140, '01/01/2013', 1
	141, '01/01/2013', 1
	142, '01/01/2013', 1
	143, '01/01/2013', 1
	144, '01/01/2013', 1
	145, '01/01/2013', 1
	146, '01/01/2013', 1
	147, '01/01/2013', 1
	148, '01/01/2013', 1
	149, '01/01/2013', 1
	150, '01/01/2013', 1
	151, '01/01/2013', 1
	152, '01/01/2013', 1
	153, '01/01/2013', 1
	154, '01/01/2013', 1
	155, '01/01/2013', 1
	156, '01/01/2013', 1
	157

====================================================================================================

